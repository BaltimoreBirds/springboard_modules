<?php

/**
 * Implements hook_form_FORM_ID_alter()
 */
//function springboard_token_set_webform_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
function springboard_token_set_webform_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  $nid = $form['nid']['#value'];
  $cid = arg(4);

  if (!is_numeric($cid)) {
    return;
  }

  // Get the saved token set ID for this form.
  $tsid = springboard_token_set_webform_get_token_set($nid, $cid);

  // Create array of used token sets for JS setting.
  $token_sets = array(
    $tsid => springboard_token_set_get_tokens($tsid),
  );

  if ($tsid != 0) {
    // Add token set ID attribute to text fields elements.
    foreach ($form as $element_index => $element) {
      if (is_array($element)) {
        if (isset($element['#type']) && ($element['#type'] == 'fieldset')) {
          foreach ($element as $fieldset_element_index => $fieldset_element) {
            if (is_array($fieldset_element) && isset($fieldset_element['#type']) && ($fieldset_element['#type'] == 'text_format')) {
              // Attribute needs to be added to the field wrapper element.
              $form[$element_index]['#attributes']['data-token-set-id'] = $tsid;
            }
          }
        }
      }
    }
    if (empty($form['#attached']['js'])) {
      $form['#attached']['js'] = array();
    }
    $form['#attached']['js'] = array(
      'data' => drupal_get_path('module', 'springboard_token_set') . '/js/springboard_token_set.js',
      'type' => 'file',
    );
    $form['#attached']['js'][] = array(
      'data' => array('token_sets' => $token_sets),
      'type' => 'setting',
    );
    $form['#attached']['css'] = array(
      'data' => drupal_get_path('module', 'springboard_token_set') . '/css/springboard_token_set.css',
      'type' => 'file',
    );
  }

  // Get all possible token sets to build form select element.
  $all_token_sets = springboard_token_set_get_sets();

  $token_set_options = array(
    0 => 'None',
  );
  foreach ($all_token_sets as $token_set) {
    $token_set_options[$token_set->tsid] = $token_set->name;
  }

  $form['token_set'] = array(
    '#title' => t('Token Set'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#weight' => 99,
    '#description' => t('Please select the set of tokens that should available to the description and default value of this component.') . ' ' .
      t('This form\'s tokens will be updated after it is submitted.'),
  );

  $form['token_set']['token_set_id'] = array(
    '#type' => 'select',
    '#title' => t('Use token set'),
    '#options' => $token_set_options,
    '#default_value' => $tsid,
  );

  $form['#submit'][] = 'springboard_token_set_webform_component_save';

  // Add the tokens UI:
  _springboard_token_set_webform_insert_token_ui($form);
}

/**
 * Adds the token UI to the webform component settings form. 
 *
 * @param $form
 *   The form where token UI should be added.
 */
function _springboard_token_set_webform_insert_token_ui(&$form) {
  // Unset tokens webform provides:
  $form['extra']['description']['#description'] = t('A short description of the field used as help for the user when he/she uses the form.');
  $form['value']['#description'] = t('The default value of the field.');

  // Store token set and field data for JS settings.
  $nid = arg(1); $cid = arg(4);
  $tsid = springboard_token_set_webform_get_token_set($nid, $cid);
  if (empty($tsid)) {
    return;
  }
  $tokens = springboard_token_set_get_tokens($tsid);
  $token_sets = array($tsid => $tokens);

  // Store a reference to token set ID in the field attributes.
  $form['extra']['description']['#attributes']['data-token-set-id'] = $tsid;
  $form['value']['#attributes']['data-token-set-id'] = $tsid;
  
  // Add the jQuery and CSS for the token UI:
  springboard_token_set_attach_token_ui($form, $token_sets);
}

/**
 * Submit handler for field token set ID.
 */
function springboard_token_set_webform_component_save($form, &$form_state) {
  $nid = $form['nid']['#value'];
  $cid = arg(4);
  $tsid = $form_state['values']['token_set']['token_set_id'];
  if (!is_numeric($tsid) || !is_numeric($cid) || !is_numeric($nid)) {
    return;
  }
  springboard_token_set_webform_set_token_set($nid, $cid, $tsid);
}

/**
 * Gets the token set ID associated with a given webform component.
 * 0 is returned if no token set is associated with the target field.
 *
 * @param $nid
 *   The target webform's node ID
 * @param $cid
 *   The target webform component's ID
 */
function springboard_token_set_webform_get_token_set($nid, $cid) {
  $tsid_query = db_query("SELECT tsid FROM {springboard_token_set_webform_fields} WHERE " .
    "nid = :nid AND cid = :cid",
    array(':nid' => $nid, ':cid' => $cid));
  foreach ($tsid_query as $tsid_data) {
    return $tsid_data->tsid;
  }
  return 0;
}

/**
 * Set's the token set ID for a given webform component.
 *
 * @param $nid
 *   The target webform's node ID
 * @param $cid
 *   The target webform component's ID
 * @param $tsid
 *   The new token set ID to be associated with this component.
 */
function springboard_token_set_webform_set_token_set($nid, $cid, $tsid) {
  $exists_query = db_query("SELECT tsid FROM {springboard_token_set_webform_fields} " .
    "WHERE nid = :nid AND cid = :cid", array(':nid' => $nid, ':cid' => $cid));
  foreach ($exists_query as $exists) {
    db_query("UPDATE {springboard_token_set_webform_fields} SET tsid = :tsid " .
      "WHERE nid = :nid AND cid = :cid", array(':nid' => $nid, ':cid' => $cid, ':tsid' => $tsid));
    return;
  }
  db_query("INSERT INTO {springboard_token_set_webform_fields} (tsid, nid, cid) " .
    "VALUES(:tsid, :nid, :cid)", array(':nid' => $nid, ':cid' => $cid, ':tsid' => $tsid));
}
