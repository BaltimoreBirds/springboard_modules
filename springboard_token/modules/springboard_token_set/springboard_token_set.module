<?php

/**
 * Implements hook_menu().
 */
function springboard_token_set_menu() {
  $items = array();

  $items['admin/config/content/token-sets'] = array(
    'title' => 'Springboard Token Sets',
    'description' => 'Manage tokens within token sets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function springboard_token_set_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $entity = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field = $form['#instance']['field_name'];

  $token_sets = springboard_token_set_get_sets();

  $token_set_options = array(
    0 => 'None',
  );
  foreach ($token_sets as $token_set) {
    $token_set_options[$token_set->tsid] = $token_set->name;
  }

  $form['token_set'] = array(
    '#title' => t('Token Set'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['token_set']['token_set_id'] = array(
    '#type' => 'select',
    '#title' => t('Use token set'),
    '#options' => $token_set_options,
    '#default_value' => variable_get('token_set_' . $entity . '_' . $bundle . '_' . $field, 0),
  );

  $form['#submit'][] = 'springboard_token_set_save_field';
}

/**
 * Submit handler for field token set ID.
 */
function springboard_token_set_save_field($form, &$form_state) {
  $entity = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field = $form['#instance']['field_name'];
  variable_set('token_set_' . $entity . '_' . $bundle . '_' . $field, $form_state['values']['token_set_id']);
}

/**
 * Implements hook_form_alter()
 */
function springboard_token_set_form_alter(&$form, &$form_state, $form_id) {
  // Only alter the form if we're editing content.
  if (!isset($form['#entity_type'])) {
    return;
  }

  // TODO: Check user access for ability to use tokens.
  $fields = field_info_instances($form['#entity_type'], $form['#bundle']);

  // Store token set and field data for JS settings.
  $token_sets = array();

  foreach ($fields as $field) {
    $entity = $field['entity_type'];
    $bundle = $field['bundle'];
    $field_name = $field['field_name'];

    // Check for a token set ID associated with the current field.
    $tsid = variable_get('token_set_' . $entity . '_' . $bundle . '_' . $field_name, 0);

    if ($tsid != 0) {
      // If this token set hasn't been loaded yet, load and store tokens.
      if (!isset($token_sets[$tsid])) {
        $tokens = springboard_token_set_get_tokens($tsid);
        $token_sets[$tsid] = $tokens;
      }

      // Store a reference to token set ID in the field attributes.
      $form[$field_name]['#attributes']['data-token-set-id'] = $tsid;
    }
  }

  if (empty($form['#attached']['js'])) {
    $form['#attached']['js'] = array();
  }

  $form['#attached']['js'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/js/springboard_token_set.js',
    'type' => 'file',
  );

  $form['#attached']['js'][] = array(
    'data' => array('token_sets' => $token_sets),
    'type' => 'setting',
  );

  $form['#attached']['css'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/css/springboard_token_set.css',
    'type' => 'file',
  );
}

/**
 * Page callback for token set admin form.
 */
function springboard_token_set_admin_form($form, &$form_state) {
  $token_sets = springboard_token_set_get_sets();

  $form = array();

  foreach ($token_sets as $token_set) {
    $form['token-set-' . $token_set->tsid] = array(
      '#type' => 'fieldset',
      '#title' => $token_set->name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $tokens = springboard_token_set_get_tokens($token_set->tsid);

    foreach ($tokens as $token) {
      $form['token-set-' . $token_set->tsid][$token->token] = array(
        '#type' => 'container',
      );

      $form['token-set-' . $token_set->tsid][$token->token]['token'] = array(
        '#type' => 'textfield',
        '#default_value' => $token->token,
      );

      $form['token-set-' . $token_set->tsid][$token->token]['token_description'] = array(
        '#type' => 'textfield',
        '#default_value' => $token->token_description,
      );

      $form['token-set-' . $token_set->tsid][$token->token]['delete'] = array(
        '#type' => 'checkbox',
        '#title' => 'Remove token from token set',
      );
    }
  }

  $form['submit-button'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['#submit'] = array('springboard_token_set_admin_form_submit');

  return $form;
}

/**
 * Submit handler for token set admin form.
 */
function springboard_token_set_admin_form_submit($form, $form_state) {

}

/**
 * Gets an array of field types that can be used with tokens.
 *
 * @return array
 *   Array of tokenable field types.
 */
function springboard_token_get_field_types() {
  return array(
    'textarea',
    'textfield',
  );
}

/**
 * Adds a new token set.
 *
 * @param string $name
 *   The name of the token set.
 *
 * @return int
 *   The ID of the new token set.
 */
function springboard_token_set_add_set($name) {
  $tsid = db_insert('token_sets')
    ->fields(array('name' => $name))
    ->execute();

  return $tsid;
}

/**
 * Adds a new token.
 *
 * @param string $token_type
 *   The token type.
 * @param string $token
 *   The token.
 * @param string $token_description
 *   The token description.
 */
function springboard_token_set_add_token($token_type, $token, $token_description) {
  $tid = db_insert('tokens')
    ->fields(array(
      'token_type' => $token_type,
      'token' => $token,
      'token_description' => $token_description,
    ))
    ->execute();

  return $tid;
}

/**
 * Adds a token to an existing token set.
 *
 * @param int $tsid
 *   The ID of the token set.
 * @param int $tid
 *   The ID of the token.
 */
function springboard_token_set_add_token_to_set($tsid, $tid) {
  db_insert('token_set_tokens')
    ->fields(array(
      'tsid' => $tsid,
      'tid' => $tid,
    ))
    ->execute();
}

/**
 * Gets all token sets.
 *
 * @return array
 *   Array of token sets.
 */
function springboard_token_set_get_sets() {
  $token_sets = db_select('token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->execute()
    ->fetchAll();

  return $token_sets;
}

/**
 * Gets a token set by ID.
 *
 * @param int $tsid
 *   The ID of the token set.
 *
 * @return object
 *   The token set.
 */
function springboard_token_set_get_set($tsid) {
  $token_set = db_select('token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->condition('tsid', $tsid, '=')
    ->execute()
    ->fetchObject();

  return $token_set;
}

/**
 * Gets all tokens for a given token set ID.
 *
 * @param int $tsid
 *   The ID of the token set.
 *
 * @return array
 *   Array of tokens.
 */
function springboard_token_set_get_tokens($tsid) {
  $query = db_select('tokens', 't');
  $query->join('token_set_tokens', 'tst', 't.tid = tst.tid');
  $query->fields('t', array('token_type', 'token', 'token_description'))
    ->condition('tst.tsid', $tsid, '=')
    ->orderBy('t.token_type', 'ASC');

  $result = $query->execute();

  return $result->fetchAll();
}
