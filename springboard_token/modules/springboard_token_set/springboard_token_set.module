<?php

/**
 * Implements hook_form_FORM_ID_alter()
 */
function springboard_token_set_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $entity = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field = $form['#instance']['field_name'];

  $token_sets = springboard_token_set_get_sets();

  $token_set_options = array(
    0 => 'None',
  );
  foreach ($token_sets as $token_set) {
    $token_set_options[$token_set->tsid] = $token_set->name;
  }

  $form['token_set'] = array(
    '#title' => t('Token Set'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['token_set']['token_set_id'] = array(
    '#type' => 'select',
    '#title' => t('Use token set'),
    '#options' => $token_set_options,
    '#default_value' => variable_get('token_set_' . $entity . '_' . $bundle . '_' . $field, 0),
  );

  $form['#submit'][] = 'springboard_token_set_save_field';
}

/**
 * Submit handler for field token set ID.
 */
function springboard_token_set_save_field($form, &$form_state) {
  $entity = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field = $form['#instance']['field_name'];
  variable_set('token_set_' . $entity . '_' . $bundle . '_' . $field, $form_state['values']['token_set_id']);
}

/**
 * Implements hook_form_alter()
 */
function springboard_token_set_form_alter(&$form, &$form_state, $form_id) {
  // TODO: Check user access for ability to use tokens.
  $fields = field_info_instances($form['#entity_type'], $form['#bundle']);

  // Store token set and field data for JS settings.
  $token_sets = array();
  $token_set_fields = array();

  foreach ($fields as $field) {
    $entity = $field['entity_type'];
    $bundle = $field['bundle'];
    $field_name = $field['field_name'];

    // Check for a token set ID associated with the current field.
    $tsid = variable_get('token_set_' . $entity . '_' . $bundle . '_' . $field_name, 0);

    if ($tsid != 0) {
      // If this token set hasn't been loaded yet, load and store tokens.
      if (!isset($token_sets[$tsid])) {
        $tokens = springboard_token_set_get_tokens($tsid);
        $token_sets[$tsid] = $tokens;
      }

      // Store a reference between the current field and its token set ID.
      $token_set_fields[$field_name] = $tsid;
    }
  }

  if (empty($form['#attached']['js'])) {
    $form['#attached']['js'] = array();
  }

  $form['#attached']['js'][] = array(
    'data' => array('token_sets' => $token_sets),
    'type' => 'setting',
  );

  $form['#attached']['js'][] = array(
    'data' => array('token_set_fields' => $token_set_fields),
    'type' => 'setting',
  );
}

/**
 * Gets an array of field types that can be used with tokens.
 *
 * @return array
 *   Array of tokenable field types.
 */
function springboard_token_get_field_types() {
  return array(
    'textarea',
    'textfield',
  );
}

/**
 * Adds a new token set.
 *
 * @param string $name
 *   The name of the token set.
 *
 * @return int
 *   The ID of the new token set.
 */
function springboard_token_set_add_set($name) {
  $tsid = db_insert('token_sets')
    ->fields(array('name' => $name))
    ->execute();

  return $tsid;
}

/**
 * Adds a token to an existing token set.
 *
 * @param int $tsid
 *   The ID of the token set.
 * @param string $token_type
 *   The token type.
 * @param string $token_name
 *   The name of the token.
 */
function springboard_token_set_add_token($tsid, $token_type, $token_name) {
  db_insert('token_set_tokens')
    ->fields(array(
      'tsid' => $tsid,
      'token_type' => $token_type,
      'token_name' => $token_name,
    ))
    ->execute();
}

/**
 * Gets all token sets.
 *
 * @return array
 *   Array of token sets.
 */
function springboard_token_set_get_sets() {
  $token_sets = db_select('token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->execute()
    ->fetchAll();

  return $token_sets;
}

/**
 * Gets a token set by ID.
 *
 * @param int $tsid
 *   The ID of the token set.
 *
 * @return object
 *   The token set.
 */
function springboard_token_set_get_set($tsid) {
  $token_set = db_select('token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->condition('tsid', $tsid, '=')
    ->execute()
    ->fetchObject();

  return $token_set;
}

/**
 * Gets all tokens for a given token set ID.
 *
 * @param int $tsid
 *   The ID of the token set.
 *
 * @return array
 *   Array of tokens.
 */
function springboard_token_set_get_tokens($tsid) {
  $tokens = db_select('token_set_tokens', 'tst')
    ->fields('tst', array('token_type', 'token_name'))
    ->condition('tsid', $tsid, '=')
    ->execute()
    ->fetchAll();

  return $tokens;
}
