<?php
/**
 * @file
 * Ogone DirectLink API
 *
 * Provides functions to interact with Ogone DirectLink method.
 */



/**
 * Charge a credit card
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $charge_details
 *   Array of details about the charge to be made
 */
function ogone_directlink_api_charge_credit($acct_info, $charge_details) {
  // Charge amount should be multiplied by 100 - Ogone doesn't accept decimals for this field
  $charge_details['AMOUNT'] = $charge_details['AMOUNT'] * 100;
  $charge_details['OPERATION'] = 'SAL';


  return _ogone_directlink_api_make_post_request($acct_info, $charge_details);
}


/**
 * Make an authorization on a card
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $charge_details
 *   Array of details about the auth to be made
 */
function ogone_directlink_api_authorize_credit($acct_info, $charge_details) {
  $charge_details['OPERATION'] = 'RES';

  // Use a dummy ORDERID just to create a new alias
  $charge_details['ORDERID'] = 'auth-' . $charge_details['ORDERID'] . '-' . time();

  return _ogone_directlink_api_make_post_request($acct_info, $charge_details);
}



/**
 * Charge direct debit
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $charge_details
 *   Array of details about the charge to be made
 */
function ogone_directlink_api_charge_direct_debit($acct_info, $charge_details) {
  // Not implemented yet
  return FALSE;
}


/**
 * Issue a refund (credit, in the payment gateway's terms)
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $refund_details
 *   Array of details about the refund to be made
 */
function ogone_directlink_api_refund($acct_info, $refund_details) {
  // Charge amount should be multiplied by 100 - Ogone doesn't accept decimals for this field
  $refund_details['AMOUNT'] = $refund_details['AMOUNT'] * 100;
  $refund_details['OPERATION'] = 'RFD';
  return _ogone_directlink_api_make_post_request($acct_info, $refund_details);
}


/**
 * Make a form POST to Ogone. This is an API function called by the other functions in this module
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $request_details
 *   Array of information about the charge or operation
 * @param $force_maintenance_url
 *   Bool: if true, use the maintenance URL regardless of the OPERATION to be made
 */
function _ogone_directlink_api_make_post_request($acct_info, $request_details, $force_maintenance_url = FALSE) {
  // Check required fields
  $errors = array();
  foreach (array('PSPID', 'USERID', 'PSWD', 'OPERATION', 'SHA1IN') as $field) {
    if (empty($acct_info[$field]) && empty($request_details[$field])) {
      $errors[] = 'Missing ' . $field;
    }
  }
  if (!empty($errors)) {
    return array(
      'SUCCESS' => FALSE,
      'ERRORS' => implode('. ', $errors) . '.',
    );
  }

  // Decide what URL to send the request to
  // Is it a live transaction?
  if ($acct_info['transaction_mode'] == 'live') {
    // Check if it's a maintenance request
    if ($force_maintenance_url || in_array($request_details['OPERATION'], array('REN', 'DEL', 'DES', 'SAS', 'RFD', 'RFS'))) {
      $url = "https://secure.ogone.com/ncol/prod/maintenancedirect.asp";
    }
    // Not a maintenece request
    else {
      $url = "https://secure.ogone.com/ncol/prod/orderdirect.asp";
    }
  }
  // Not live, use test URL
  else {
    // Check if it's a maintenance request
    if ($force_maintenance_url || in_array($request_details['OPERATION'], array('REN', 'DEL', 'DES', 'SAS', 'RFD', 'RFS'))) {
      $url = "https://secure.ogone.com/ncol/test/maintenancedirect.asp";
    }
    // Not a maintenece request
    else {
      $url = "https://secure.ogone.com/ncol/test/orderdirect.asp";
    }
  }

  $fields = array();
  foreach ($acct_info as $field => $value) {
    // Only include the value if it's not empty, and don't send the SHA IN passphrase
    if (!empty($value) && $field != 'SHA1IN') {
      $fields[$field] = $value;
    }
  }
  foreach ($request_details as $field => $value) {
    // Only include the value if it's not empty
    if (!empty($value)) {
      $fields[$field] = $value;
    }
  }
  // Set to the user's IP. Used for fraud detection
  if (!empty($_SERVER['HTTP_X_AH_CLIENT_IP'])) {
    // Load balancers pass client IP in HTTP_X_AH_CLIENT_IP
    $fields['REMOTE_ADDR'] = $_SERVER['HTTP_X_AH_CLIENT_IP'];
  }
  else {
    $fields['REMOTE_ADDR'] = $_SERVER['REMOTE_ADDR'];
  }

  $fields['SHASIGN'] = ogone_directlink_api_generate_sha($fields, $acct_info['SHA1IN']);

  foreach ($fields as $field => $value) {
    $fields_string[] = $field . '=' . urlencode($value);
  }

  $fields_string = implode('&', $fields_string);

  //open connection
  $ch = curl_init();

  //set the url, number of POST vars, POST data
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);


  //execute post
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('ogone_directlink_api', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }

  //close connection
  curl_close($ch);

  // Create an XML parser and pull the attributes out of the returned XML
  $parser = xml_parser_create();
  xml_parse_into_struct($parser, $result, $return_values, $index);
  xml_parser_free($parser);
  $attributes = $return_values[$index['NCRESPONSE'][0]]['attributes'];

  // Get the status message
  $attributes['STATUS_MESSAGE'] = ogone_directlink_api_feedback_status($attributes['STATUS']);

  if ($attributes['NCERROR'] == 0) {
    $attributes['SUCCESS'] = TRUE;
    watchdog('ogone_directlink_api', 'Ogone transaction. Type: %operation. Status: %status. Status meaning: %status_message.', array(
      '%operation' => $request_details['OPERATION'],
      '%status' => $attributes['STATUS'],
      '%status_message' => $attributes['STATUS_MESSAGE'],
    ));
  }
  else {
    $attributes['SUCCESS'] = FALSE;
    watchdog('ogone_directlink_api', 'Ogone transaction. Type: %operation. Status: %status. Status meaning: %status_message. Error message: %error_message', array(
      '%operation' => $request_details['OPERATION'],
      '%status' => $attributes['STATUS'],
      '%status_message' => $attributes['STATUS_MESSAGE'],
      '%error_message' => $attributes['NCERRORPLUS'],
    ));
  }

  return $attributes;
}




/**
 * Check the status of an order in Ogone
 *
 * @param $acct_info
 *   Array of Ogone account info to use
 * @param $order_id
 *   ID of order to check on
 *
 */
function _ogone_directlink_api_order_status($acct_info, $order_id) {
  // Check required fields
  $errors = array();
  foreach (array('PSPID', 'USERID', 'PSWD') as $field) {
    if (empty($acct_info[$field])) {
      $errors[] = 'Missing ' . $field;
    }
  }
  if (!($order_id > 0)) {
    $errors[] = 'No order ID supplied';
  }

  if (!empty($errors)) {
    return array(
      'SUCCESS' => FALSE,
      'ERRORS' => implode('. ', $errors) . '.',
    );
  }

  // Decide what URL to send the request to
  // Is the gateway live?
  if ($acct_info['transaction_mode'] == 'live') {
    $url = "https://secure.ogone.com/ncol/prod/querydirect.asp";
  }
  // Not live, use test URL
  else {
    $url = "https://secure.ogone.com/ncol/test/querydirect.asp";
  }

  $fields = array(
    'ORDERID' => $order_id,
  );
  foreach ($acct_info as $field => $value) {
    // Only include the value if it's not empty, and don't send the SHA IN passphrase
    if (!empty($value) && $field != 'SHA1IN') {
      $fields[$field] = $value;
    }
  }

  foreach ($fields as $field => $value) {
    $fields_string[] = $field . '=' . urlencode($value);
  }
  $fields_string = implode('&', $fields_string);

  //open connection
  $ch = curl_init();

  //set the url, number of POST vars, POST data
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);


  //execute post
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('ogone_directlink_api', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }

  //close connection
  curl_close($ch);

  // Create an XML parser and pull the attributes out of the returned XML
  $parser = xml_parser_create();
  xml_parse_into_struct($parser, $result, $return_values, $index);
  xml_parser_free($parser);
  $attributes = $return_values[$index['NCRESPONSE'][0]]['attributes'];

  // Get the status message
  $attributes['STATUS_MESSAGE'] = ogone_directlink_api_feedback_status($attributes['STATUS']);

  if ($attributes['NCERROR'] == 0) {
    $attributes['SUCCESS'] = TRUE;
    watchdog('ogone_directlink_api', 'Checked Ogone order status. Order ID: %order_id. Status: %status. Status meaning: %status_message.', array(
      '%order_id' => $order_id,
      '%status' => $attributes['STATUS'],
      '%status_message' => $attributes['STATUS_MESSAGE'],
    ));
  }
  else {
    $attributes['SUCCESS'] = FALSE;
    watchdog('ogone_directlink_api', 'Checked Ogone order status. Order ID: %order_id. Status: %status. Status meaning: %status_message. Error message: %error_message', array(
      '%order_id' => $order_id,
      '%status' => $attributes['STATUS'],
      '%status_message' => $attributes['STATUS_MESSAGE'],
      '%error_message' => $attributes['NCERRORPLUS'],
    ));
  }
  return $attributes;
}


/**
 * Validate the feedback with the SHA-1 signature
 */
function ogone_directlink_api_feedback_valid_sha1($feedback, $sha1out) {
  return (ogone_directlink_api_generate_sha($feedback, $sha1out) == $feedback['SHASIGN']);
}


/**
 * Generate the SHA value for an array of fields, with a pass phrase to separate field values
 */
function ogone_directlink_api_generate_sha($fields, $sha_pass_phrase) {
  $sha1_string = '';
  foreach (ogone_directlink_api_sha1_out_parameters() as $param) {
    if (!empty($fields[$param])) {
      $sha1_string .= $param . '=' . $fields[$param] . $sha_pass_phrase;
    }
  }
  return strtoupper(sha1($sha1_string));
}


/**
 * Get a list of valid SHA-1 out parameters
 */
function ogone_directlink_api_sha1_out_parameters() {
  return array(
    'AAVADDRESS',
    'AAVCHECK',
    'AAVZIP',
    'ACCEPTANCE',
    'ALIAS',
    'ALIASOPERATION',
    'AMOUNT',
    'BIN',
    'BRAND',
    'CARDNO',
    'CCCTY',
    'CN',
    'COMPLUS',
    'CREATION_STATUS',
    'CURRENCY',
    'CVC',
    'CVCCHECK',
    'DCC_COMMPERCENTAGE',
    'DCC_CONVAMOUNT',
    'DCC_CONVCCY',
    'DCC_EXCHRATE',
    'DCC_EXCHRATESOURCE',
    'DCC_EXCHRATETS',
    'DCC_INDICATOR',
    'DCC_MARGINPERCENTAGE',
    'DCC_VALIDHOURS',
    'DIGESTCARDNO',
    'ECI',
    'ED',
    'EMAIL',
    'ENCCARDNO',
    'IP',
    'IPCTY',
    'NBREMAILUSAGE',
    'NBRIPUSAGE',
    'NBRIPUSAGE_ALLTX',
    'NBRUSAGE',
    'NCERROR',
    'OPERATION',
    'ORDERID',
    'OWNERADDRESS',
    'OWNERCTY',
    'OWNERTOWN',
    'OWNERZIP',
    'PAYID',
    'PM',
    'PSPID',
    'PSWD',
    'REMOTE_ADDR',
    'SCO_CATEGORY',
    'SCORING',
    'STATUS',
    'SUBSCRIPTION_ID',
    'TRXDATE',
    'USERID',
    'VC',
  );
}




/**
 * Get a payment status and message based on Ogone status ID
 * @param $status
 *   received Ogone status ID
 *
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the Ogone status ID
 */
function ogone_directlink_api_feedback_status($status) {
  switch ($status) {
    /** SUCCESS **/
    case 4:  // Order stored
      $msg = t('Order stored');
      break;
    case 5:  // Authorized
      $msg = t('Authorized');
      break;
    case 8:  // Refund
      $msg = t('Refund');
      break;
    case 85:  // Refund processed by merchant
      $msg = t('Refund processed by merchant');
      break;
    case 9:  // Payment requested
      $msg = t('Payment requested');
      break;
    case 95:  // Payment processed by merchant
      $msg = t('Payment processed by merchant');
      break;

    /** PENDING **/
    case 40: // Stored waiting external result
      $msg = t('Stored waiting external result');
      break;
    case 41: // Waiting client payment
      $msg = t('Waiting client payment');
      break;
    case 50: // Authorized waiting external result
      $msg = t('Authorized waiting external result');
      break;
    case 51: // Authorization waiting
      $msg = t('Authorization waiting');
      break;
    case 55: // Stand-by
      $msg = t('Stand-by');
      break;
    case 56: // OK with scheduled payments
      $msg = t('OK with scheduled payments');
      break;
    case 59: // Authoriz. to get manually
      $msg = t('Authoriz. to get manually');
      break;
    case 81: // Refund pending
      $msg = t('Refund pending');
      break;
    case 82: // Refund uncertain
      $msg = t('Refund uncertain');
      break;
    case 91: // Payment processing
      $msg = t('Payment processing');
      break;
    case 92: // Payment uncertain
      $msg = t('Payment uncertain');
      break;
    case 99: // Being processed
      $msg = t('Being processed');
      break;

    /** FAILURE **/
    case 0:  // Incomplete or invalid
      $msg = t('Incomplete or invalid');
      break;
    case 1:  // Cancelled by client
      $msg = t('Cancelled by client');
      break;
    case 2:  // Authorization refused
      $msg = t('Authorization refused');
      break;
    case 52: // Authorization not known
      $msg = t('Authorization not known');
      break;
    case 57: // Error in scheduled payments
      $msg = t('Error in scheduled payments');
      break;
    case 6:  // Authorized and cancelled
      $msg = t('Authorized and cancelled');
      break;
    case 61: // Author. deletion waiting
      $msg = t('Author. deletion waiting');
      break;
    case 62: // Author. deletion uncertain
      $msg = t('Author. deletion uncertain');
      break;
    case 63: // Author. deletion refused
      $msg = t('Author. deletion refused');
      break;
    case 64: // Authorized and cancelled
      $msg = t('Authorized and cancelled');
      break;
    case 7:  // Payment deleted
      $msg = t('Payment deleted');
      break;
    case 71:  // Payment deletion pending
      $msg = t('Payment deletion pending');
      break;
    case 72:  // Payment deletion uncertain
      $msg = t('Payment deletion uncertain');
      break;
    case 73:  // Payment deletion refused
      $msg = t('Payment deletion refused');
      break;
    case 74:  // Payment deleted
      $msg = t('Payment deleted');
      break;
    case 75:  // Deletion processed by merchant
      $msg = t('Deletion processed by merchant');
      break;
    case 83:  // Refund refused
      $msg = t('Refund refused');
      break;
    case 84:  // Payment declined by the acquirer
      $msg = t('Payment declined by the acquirer');
      break;
    case 93:  // Payment refused
      $msg = t('Payment refused');
      break;
    case 94:  // Refund declined by the acquirer
      $msg = t('Refund declined by the acquirer');
      break;
  }
  return $msg;
}