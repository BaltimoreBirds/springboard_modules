<?php

/**
 * Implements hook_permission()
 */
function springboard_tags_permission() {
  return array(
    'administer springboard tags' => array(
      'title' => t('Administer Springboard tags'),
      'description' => t('Add, delete and edit tags.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function springboard_tags_ctools_plugin_directory($module, $plugin) {
  // Most of this module is implemented as an export ui plugin, and the
  // rest is in ctools/includes/ctools_access_ruleset.inc
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_springboard_admin_menu_items_alter().
 */
function springboard_tags_springboard_admin_admin_menu_items_alter(&$items) {
  // Add a menu item for the admin page.
  $items['admin/springboard/marketing-analytics']['_children']['admin/springboard/springboard-tags'] = array(
    'link_path' => 'admin/springboard/springboard-tags',
    'link_title' => 'Tags',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 10,
  );
}

/**
 * Implements hook_page_alter().
 *
 * @param array $page
 */
function springboard_tags_page_alter(&$page) {
  // Load the tags for this page.
  $tags = _springboard_tags_load_tags();
  if (empty($tags)) {
    return;
  }

  foreach ($tags as $tag) {
    switch ($tag->settings['placement']) {
      case 'after body tag' :
        $after_body[] = _springboard_tags_generate_tag($tag->tag);
        break;
      case 'content' :
        $content[] = _springboard_tags_generate_tag($tag->tag);
        break;
    }
  }

  if (!empty($after_body)) {
    // Add a post render function, and the tags.
    $page['#post_render'][] = '_springboard_tags_post_render';
    $page['#springboard_tags_after_body'] = implode($after_body);
  }

  if (!empty($content)) {
    // Add the content tags.
    $page['content']['springboard_tags'] = array(
      '#markup' => implode($content),
    );
  }
}

function _springboard_tags_post_render(&$children, $elements) {
  // Insert snippet after the opening body tag.
  $children = preg_replace('@<body[^>]*>@', '$0' . $elements['#springboard_tags_after_body'], $children, 1);
  return $children;
}

/**
 * Return an array of placement options.
 */
function _springboard_tags_placement_options() {
  return array(
    'after body tag' => 'Directly after the opening body tag',
    'content' => 'Main content',
  );
}

/**
 * Create callback for creating a new CTools custom content type.
 *
 * This ensures we get proper defaults from the plugin for its settings.
 */
function _springboard_tags_new($set_defaults) {
  $item = ctools_export_new_object('springboard_tags', $set_defaults);
  $plugin = ctools_get_plugins('ctools', 'export_ui', 'springboard_tags');
  $item->settings = $plugin['defaults']['settings'];
  return $item;
}

/**
 * Generate the tag snippet.
 */
function _springboard_tags_generate_tag($snippet) {
  return token_replace($snippet);
}

/**
 * Load the tags for a specific page request.
 */
function _springboard_tags_load_tags() {
  // Load all the configured tags.
  ctools_include('export');
  $tags = ctools_export_crud_load_all('springboard_tags');

  // Allow modules to modify the tag list.
  drupal_alter('springboard_tags_list', $tags);

  return $tags;
}

function springboard_tags_springboard_tags_list_alter(&$tags) {
  $account = $GLOBALS['user'];

  foreach ($tags as $key => $tag) {
    // Extract the visibilty array. Beware contains the keys: fundraiser, user, path, node.
    extract($tag->settings['visibility']);

    // Check if this is a donation form confirmation page.
    if (!empty($fundraiser['confirmation']) && arg(0) == 'node' && arg(2) == 'done') {
      $webform_node = node_load(arg(1));
      if (fundraiser_is_donation_type($webform_node->type)) {
        unset($tags[$key]);
        continue;
      }
    }

    // If a tag has no roles associated, it is displayed for every role.
    // For tags with roles associated, if none of the user's roles matches
    // the settings from this tag, remove it from the block list.
    if (array_filter($user['roles']) && !array_intersect($user['roles'], array_keys($account->roles))) {
      // No match.
      unset($tags[$key]);
      continue;
    }

    // Limited visibility blocks must list at least one page.
    if ($path['page_specific'] == BLOCK_VISIBILITY_LISTED && empty($path['pages'])) {
      unset($tags[$key]);
      continue;
    }

    // Match path if necessary.
    if (!empty($path['pages'])) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($path['pages']);
      if ($path['page_specific']) {
        // Convert the Drupal path to lowercase
        $drupal_path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($drupal_path, $path['pages']);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $path['pages']);
        }
        // When $path['page_specific'] has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
        // the block is displayed on all pages except those listed in $path['pages'].
        // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
        // pages listed in $path['pages'].
        $page_match = !($path['page_specific'] xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

    if (!$page_match) {
      unset($tags[$key]);
      continue;
    }

    // Check the node type.
    if (array_filter($node['type'])) {
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $current_node = node_load(arg(1));
      }

      if (!empty($current_node)) {
        // This is a node page.
        if (!isset($node['type'][$current_node->type])) {
          // This block should not be displayed for this node type.
         unset($tags[$key]);
        }
      }
      else {
        // This is not a node page, remove the block.
        unset($tags[$key]);
      }
    }
  }

  return $tags;
}
