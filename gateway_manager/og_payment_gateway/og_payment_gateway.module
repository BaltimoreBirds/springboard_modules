<?php

/**
 * @file
 * This module allows payment gateways to be assigned to organic groups. 
 * 
 */

/**
 * Implements hook_init().
 */
function og_payment_gateway_init() {
  drupal_add_css(drupal_get_path('module', 'og_payment_gateway') . '/og_payment_gateway.css');
}

/**
 * Implements hook_form_alter().
 */
function og_payment_gateway_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  switch ($form_id) {
    case 'gateway_manager_edit_form':
      $id = $form['id']['#value'];
      $gids = array();
      // if editing, see if there are assigned groups
      if (!empty($id)) {
        $result = db_query(
          "SELECT gid, group_nid FROM {og_payment_gateway} WHERE gid = :gid", 
          array(':gid' => $id)
        );
        while ($data = $result->fetchAssoc()) {
          $gids[] = $data['group_nid'];
        }
      }
      elseif (isset($form_state['values'])) { // look for selected groups in form_state
        foreach($form_state['values']['og_groups'] as $k => $v) {
          if ($k) {
            $gids[] = $v;
          }
        }
      }
      $form_state['og_gids'][0] = implode(',', $gids);
      og_form_add_og_audience($form, $form_state);
      $form['access'] = array(
        '#type' => 'fieldset',
        '#title' => t('Access control'),
        '#collapsible' => TRUE,
        '#weight' => 3.5, 
      );
      
      $form['og_nodeapi']['#weight'] = 3.5;
      $form['og_nodeapi']['visible']['og_groups']['#title'] = t('Groups');
      $form['og_nodeapi']['visible']['og_groups']['#description'] = t('Select the groups that can utilize this payment gateway.');
      $form['access'][] = $form['og_nodeapi'];
      unset($form['og_nodeapi']);
      break;
      
    case 'donation_form_node_form':
      // move the gateway selector into the groups fieldset
      $form['og_nodeapi']['gateway'] = $form['fundraiser_settings']['gateway'];
      $form['og_nodeapi']['gateway']['#weight'] = 1;
      if ($group_nid = $form_state['post']['og_groups']) {
        $form['og_nodeapi']['gateway']['#options'] = og_payment_gateway_filter_gateways(
          array_values($group_nid)
        );
      }
      $form['og_nodeapi']['visible']['og_groups']['#ajax'] = array(
        'callback' => 'og_payment_gateway_filter_gateway_ajax',
        'wrapper' => 'gateway',
        'event' => 'change',
        'progress' => array('type' => 'none'),
      );
      unset($form['fundraiser_settings']['gateway']);
      // if the current user belongs to more than 1 group, add a group filter
      if (count($user->og_groups) > 1) {
        $options = array('' => t('-- Select --'));
        foreach($user->og_groups as $id => $group) {
          $options[$id] = $group['title'];
        }
      }
      break;
  }
}

function og_payment_gateway_filter_gateway_ajax($form, $form_state) {
  return $form['og_nodeapi']['gateway'];
}

/**
 * Implements hook_gateway_manager_gateway_alter().
 */
function og_payment_gateway_gateway_manager_gateway_alter(&$gateway) {
  $result = db_query(
    "SELECT group_nid FROM {og_payment_gateway} WHERE gid = :gid;", 
    array(':gid' => $gateway->id)
  );
  $groups = array();
  // add groups to the gateway object when it is loaded
  while ($data = $result->fetchAssoc()) {
    $groups[] = $data['group_nid'];
  }
  $gateway->groups = $groups;
}

/**
 * Implements hook_gateway_manager_gateway_create().
 */
function og_payment_gateway_gateway_manager_gateway_create($gateway, $config) {
  og_payment_gateway_save_groups($gateway->id, $config['og_groups']);
}

/**
 * Implements hook_gateway_manager_gateway_update().
 */
function og_payment_gateway_gateway_manager_gateway_update($gateway, $config) {
  og_payment_gateway_save_groups($gateway->id, $config['og_groups']);
}

/**
 * Implements hook_gateway_manager_gateway_delete().
 */
function og_payment_gateway_gateway_manager_gateway_delete($id) {
  db_query(
    "DELETE FROM {og_payment_gateway} WHERE gid = :gid;", 
    array(':gid' => $id)
  );
}

/**
 * Saves the groups that a payment gateway is assigned to.
 */
function og_payment_gateway_save_groups($gateway_id, $groups) {
  db_query(
    "DELETE FROM {og_payment_gateway} WHERE gid = :gid;", 
    array(':gid' => $gateway_id)
  );
  foreach($groups as $k => $v) {
    if ($v) {
      db_query(
        "INSERT INTO {og_payment_gateway} (gid, group_nid) VALUES (:gid, :group_nid);", 
        array(':gid' => $gateway_id, ':group_nid' => $v)
      );
    }
  }
}

/**
 * Implements hook_query_alter().
 *
 * Restricts the list of available payment gateways to those assigned to the same organic groups
 * as the user.
 */
function og_payment_gateway_query_alter(QueryAlterableInterface $query) {
  global $user;
  if ($query->hasTag('gateway_manager_gateways')) {
    $query->innerJoin('og_payment_gateway', 'o', 'o.gid = g.id');
    $query->innerJoin('og_uid', 'u', 'u.nid = o.group_nid');
    $query->condition('u.uid', $user->uid, '=');
  }
}

/**
 * Returns a list of payment gateways filtered by group.
 */
function og_payment_gateway_filter_gateways($nids = array()) {
  global $user;
  $sql = 
    "SELECT g.id, g.name 
      FROM {gateway_manager_gateways} g 
        INNER JOIN {og_payment_gateway} o ON o.gid = g.id 
        INNER JOIN og_uid u ON u.nid = o.group_nid 
      WHERE u.uid = :uid"
  ;
  if (count($nids)) {
    $sql .= " AND o.group_nid IN (:group_nids)";
  }
  $result = db_query($sql, array(':uid' => $user->uid, ':group_nids' => $nids));
  
  $gateways = array();
  while ($data = $result->fetchObject()) {
    $gateways[$data->id] = $data->name;
  }
  return $gateways;
}
