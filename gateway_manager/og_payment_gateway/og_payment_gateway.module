<?php

/**
 * @file
 * This module allows payment gateways to be assigned to organic groups. 
 * 
 */

/**
 * Implemenation of hook_menu().
 */
function og_payment_gateway_menu() {
   $items['og-payment-gateway/filter/ahah'] = array(
    'title' => t('Filter payment gateways'),
    'page callback' => 'og_payment_gateway_filter_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implemenation of hook_init().
 */
function og_payment_gateway_init() {
  drupal_add_css(drupal_get_path('module', 'og_payment_gateway') . '/og_payment_gateway.css');
}

/**
 * Implmentation of hook_form_alter().
 */
function og_payment_gateway_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  switch ($form_id) {
    case 'gateway_manager_edit_form':
      $id = $form['id']['#value'];
      $gids = array();
      // if editing, see if there are assigned groups
      if (!empty($id)) {
        $result = db_query("SELECT gid, group_nid FROM {og_payment_gateway} WHERE gid = %d", $id);
        while ($data = db_fetch_array($result)) {
          $gids[] = $data['group_nid'];
        }
      }
      elseif (isset($form_state['values'])) { // look for selected groups in form_state
        foreach($form_state['values']['og_groups'] as $k => $v) {
          if ($k) {
            $gids[] = $v;
          }
        }
      }
      $form_state['og_gids'][0] = implode(',', $gids);
      og_form_add_og_audience($form, $form_state);
      $form['access'] = array(
        '#type' => 'fieldset',
        '#title' => t('Access control'),
        '#collapsible' => TRUE,
        '#weight' => 3.5, 
      );
      
      $form['og_nodeapi']['#weight'] = 3.5;
      $form['og_nodeapi']['visible']['og_groups']['#title'] = t('Groups');
      $form['og_nodeapi']['visible']['og_groups']['#description'] = t('Select the groups that can utilize this payment gateway.');
      $form['access'][] = $form['og_nodeapi'];
      unset($form['og_nodeapi']);
      break;
  }

  if (fundraiser_is_donation_edit_form($form_id, $form)) {
    // move the gateway selector into the groups fieldset
    $form['og_nodeapi']['gateway'] = $form['fundraiser_settings']['gateway'];
    $form['og_nodeapi']['gateway']['#weight'] = 1;
    $form['og_nodeapi']['visible']['og_groups']['#ahah'] = array(
      'path' => 'og-payment-gateway/filter/ahah',  
      'wrapper' => 'gateway',
      'event' => 'change',  
    );
    unset($form['fundraiser_settings']['gateway']);
  }
}

/**
 * AHAH callback for the group filter list.
 */
function og_payment_gateway_filter_ahah() {
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'rebuild' => TRUE);
  
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  $form['#validate'] = NULL;
  $form_state['validate_handlers'] = NULL;
  _og_payment_gateway_disable_validation($form);
  
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  $group_nid = $form_state['post']['og_groups'];

  $changed_elements = $form['og_nodeapi']['gateway'];
  unset($changed_elements['#prefix'], $changed_elements['suffix']); // we'll unset the div to make sure it won't be repeated!
  $changed_elements['#options'] = og_payment_gateway_filter_gateways(array_values($group_nid));
  $output = drupal_render($changed_elements);
  // Final rendering callback.
  print drupal_json(array('status' => TRUE, 'data' => $output));
  exit(); 
}

/**
 * Helper function to disable all form validation when the form is submitted via AHAH.
 */
function _og_payment_gateway_disable_validation(&$form) {
  foreach (element_children($form) as $child) {
    $form[$child]['#validated'] = TRUE;
    fundraiser_ahah_helper_disable_validation($form[$child]);
  }
}

/**
 * Implemenation of hook_gateway_manager_gateway_alter().
 */
function og_payment_gateway_gateway_manager_gateway_alter(&$gateway) {
  $result = db_query("SELECT group_nid FROM {og_payment_gateway} WHERE gid = %d", $gateway->id);
  $groups = array();
  // add groups to the gateway object when it is loaded
  while ($data = db_fetch_array($result)) {
    $groups[] = $data['group_nid'];
  }
  $gateway->groups = $groups;
}

/**
 * Implemenation of hook_gateway_manager_gateway_create().
 */
function og_payment_gateway_gateway_manager_gateway_create($gateway, $config) {
  og_payment_gateway_save_groups($gateway->id, $config['og_groups']);
}

/**
 * Implemenation of hook_gateway_manager_gateway_update().
 */
function og_payment_gateway_gateway_manager_gateway_update($gateway, $config) {
  og_payment_gateway_save_groups($gateway->id, $config['og_groups']);
}

/**
 * Implementation of hook_gateway_manager_gateway_delete().
 */
function og_payment_gateway_gateway_manager_gateway_delete($id) {
  db_query("DELETE FROM {og_payment_gateway} WHERE gid = %d", $id);
}

/**
 * Saves the groups that a payment gateway is assigned to.
 */
function og_payment_gateway_save_groups($gateway_id, $groups) {
  db_query("DELETE FROM {og_payment_gateway} WHERE gid = %d", $gateway_id);
  foreach($groups as $k => $v) {
    if ($v) {
      db_query("INSERT INTO {og_payment_gateway} (gid, group_nid) VALUES (%d, %d)", $gateway_id, $v);
    }
  }
}

/**
 * Implemenation of hook_db_rewrite_sql().
 *
 * Restricts the list of available payment gateways to those assigned to the same organic groups
 * as the user.
 */
function og_payment_gateway_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  global $user;
  switch ($primary_table) {
    case 'gateway_manager_gateways':
      $array['join'] = 'INNER JOIN {og_payment_gateway} o ON o.gid = g.id';
      $array['join'] .= ' INNER JOIN {og_uid} u on u.nid = o.group_nid';
      $array['where'] = 'u.uid = ' . $user->uid;
      return $array;
      break;
  }
}

/**
 * Returns a list of payment gateways filtered by group.
 */
function og_payment_gateway_filter_gateways($nids = array()) {
  global $user;
  $sql = 'SELECT g.id, g.name FROM {gateway_manager_gateways} g INNER JOIN {og_payment_gateway} o ON o.gid = g.id INNER JOIN og_uid u ON u.nid = o.group_nid WHERE u.uid = %d';
  if (count($nids)) {
    $sql .= ' AND o.group_nid IN (' . db_placeholders($nids, 'int') . ')';
  }
  $data = array_merge(array($user->uid), $nids);
  $result = db_query($sql, $data);

  $gateways = array();
  while ($data = db_fetch_object($result)) {
    $gateways[$data->id] = $data->name;
  }
  return $gateways;
}