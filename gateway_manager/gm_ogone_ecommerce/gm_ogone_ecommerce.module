<?php
/**
 * @file
 * Ogone ecommerce payment gateway.
 *
 * Todo:
 *  Return callbacks:
 *    Redirect user to order page? Get them to the confirmation page somewhow
 *  Admin interface to set PSPID, sha in and sha out for both test and production, test/prod flag
 *  Remove credit card field from the donation form
 *  Webform submissions not being saved
 *  Run $_GET vars through check_plain
 * 
 * Charge function can either return the array, or do drupal_goto
 *    Return: saves the webform submission, but doesn't redirect to ogone
 *    Redirect: doesn't save the webform submission
 * 
 * Options:
 *  Should the webform submission even be saved before the payment is complete? Maybe the webform submission should be fake-created after the payment is made. Or, the confirmation page should redirect to ogone
 */
 
/**
 * Implementation of hook_menu().
 */
function gm_ogone_ecommerce_menu() {
  $items['ogone/post/%uc_order'] = array(
    'title' => t('Ogone e-commerce'),
    'page callback' => 'gm_ogone_ecommerce_build_form',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  // Callbacks for responses from Ogone
  $items['ogone/feedback/accept'] = array(
    'title' => 'Ogone Response: Accepted',
    'description' => 'Shown when an Ogone payment is authorized, accepted, or pending.',
    'page callback' => 'gm_ogone_ecommerce_feedback_accepted',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/decline'] = array(
    'title' => 'Ogone Response: Declined',
    'description' => 'Shown when an Ogone payment is declined.',
    'page callback' => 'gm_ogone_ecommerce_feedback_declined',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/exception'] = array(
    'title' => 'Ogone Response: Exception',
    'description' => 'Shown when an Ogone payment result is uncertain.',
    'page callback' => 'gm_ogone_ecommerce_feedback_exception',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/cancel'] = array(
    'title' => 'Ogone Response: Cancelled',
    'description' => 'Shown when an Ogone payment is cancelled by the user.',
    'page callback' => 'gm_ogone_ecommerce_feedback_cancelled',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  
  return $items;
}

/**
 * Build the form that will auto-submit to Ogone
 */
function gm_ogone_ecommerce_build_form($order) {
  drupal_add_js(drupal_get_path('module', 'gm_ogone_ecommerce') . '/gm_ogone_ecommerce.js');
  return drupal_get_form('gm_ogone_ecommerce_post_form', $order);
}

/**
 * Return the form for the auto-submit form that goes to Ogone
 */
function gm_ogone_ecommerce_post_form(&$form_state, $order) {
  $url = 'https://secure.ogone.com/ncol/test/orderstandard.asp';
  $sha_in_phrase = "thisismyINpassphrase?";
  
  //Make SHA1 string for pre payment verification
  $arguments = array(
    'ACCEPTURL' => '',
    'AMOUNT' => $order->order_total * 100,
    'BGCOLOR' => '',
    'BRAND' => '',
    'BUTTONBGCOLOR' => '',
    'BUTTONTXTCOLOR' => '',
    'CANCELURL' => '',
    'CATALOGURL' => '',
    'CN' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'COM' => '',
    'CURRENCY' => 'EUR',
    'DECLINEURL' => '',
    'EMAIL' => $order->primary_email,
    'EXCEPTIONURL' => '',
    'FONTTYPE' => '',
    'HOMEURL' => url('<front>', array('asbolute' => TRUE)),
    'LANGUAGE' => 'en_US',
    'LOGO' => '',
    'ORDERID' => $order->order_id,
    'OWNERADDRESS' => $order->billing_street1 . ' ' . $order->billing_street2,
    'OWNERCTY' => $order->billing_country,
    'OWNERTOWN' => $order->billing_city,
    'OWNERZIP' => $order->billing_postal_code,
    'PM' => '',
    'PSPID' => 'brockbolandcommerce',
    'TBLBGCOLOR' => '',
    'TBLTXTCOLOR' => '',
    'TITLE' => '',
    'TP' => '',
    'TXTCOLOR' => '',
    'ACCEPTURL' => url('ogone/feedback/accept', array('absolute' => TRUE)),
    'DECLINEURL' => url('ogone/feedback/decline', array('absolute' => TRUE)),
    'EXCEPTIONURL' => url('ogone/feedback/exception', array('absolute' => TRUE)),
    'CANCELURL' => url('ogone/feedback/cancel', array('absolute' => TRUE)),
  );
  ksort($arguments);
  
  $sha1_signature = '';
  foreach ($arguments as $param_name => $param_value) {
    $param_value = trim($param_value);
    $param_name = strtoupper($param_name);
    if (strlen($param_value) > 0) {
        $sha1_signature .= $param_name . '=' . $param_value . $sha_in_phrase;
        $form[$param_name] = array(
          '#type' => 'hidden',
          '#value' => $param_value,
        );
    }
  }
  $form['SHASign'] = array(
    '#type' => 'hidden',
    '#value' => sha1($sha1_signature),
  );
  
  
  $form['#action'] = $url;
  $form['#id'] = 'ogone-ecommerce-post';
  
  return $form;
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

function gm_ogone_ecommerce_payment_gateway_managed() {
  $gateways[] = array(
    'id' => 'ogone_ecommerce',
    'title' => t('Ogone Ecommerce'),
    'description' => t('Process payments using Ogone\'s e-commerce payment method.'),
    'credit' => 'ogone_ecommerce_charge',
  );

  return $gateways;
}

function ogone_ecommerce_charge($order_id, $amount, $data) {
  drupal_goto('ogone/post/' . $order_id);
}





/*******************************************************************************
 * Ogone Feedback Functions
 ******************************************************************************/
function gm_ogone_ecommerce_feedback_accepted() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['orderID'];
  $transaction_id = $payment_values['PAYID'];

  if (_gm_ogone_ecommerce_check_feedback_sha()) {
    fundraiser_order_accept($order_id, $transaction_id);
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  return "Accepted<pre>" . print_r($_GET, true) . '</pre>';
}

function gm_ogone_ecommerce_feedback_declined() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['orderID'];
  
  if (_gm_ogone_ecommerce_check_feedback_sha()) {
    fundraiser_order_decline($order_id, $message);
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  return "Declined<pre>" . print_r($_GET, true) . '</pre>';
}

function gm_ogone_ecommerce_feedback_exception() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['orderID'];
  
  if (_gm_ogone_ecommerce_check_feedback_sha()) {
    fundraiser_order_exception($order_id, '');
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  return "Exception<pre>" . print_r($_GET, true) . '</pre>';
}

function gm_ogone_ecommerce_feedback_cancelled() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['orderID'];
  
  if (_gm_ogone_ecommerce_check_feedback_sha()) {
    fundraiser_order_cancel($order_id);
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  return "Cancelled<pre>" . print_r($_GET, true) . '</pre>';
}


/**
 * Check if the SHA value from the payment processor is correct
 */
function _gm_ogone_ecommerce_check_feedback_sha() {
  $sha_out_phrase = "thisismyOUTpassphrase!";
  $return_values = _gm_ogone_ecommerce_get_returned_values();
  ksort($return_values);
  
  $sha1_signature = '';
  foreach ($return_values as $param_name => $param_value) {
    if (strlen($param_value) > 0) {
      $sha1_signature .= $param_name . '=' . $param_value . $sha_out_phrase;
    }
  }
  $sha1_signature = sha1($sha1_signature);
  if (strtoupper($sha1_signature) == $_GET['SHASIGN']) {
    return true;
  }
  else {
    return false;
  }
}


/**
 * Get an array of the data passed back from the payment processor
 */
function _gm_ogone_ecommerce_get_returned_values() {
  static $return_values;
  if (empty($return_values)) {
    $return_values = array(
      'AAVCHECK' => trim($_GET['AAVCheck']),
      'ACCEPTANCE' => trim($_GET['ACCEPTANCE']),
      'AMOUNT' => trim($_GET['amount']),
      'BRAND' => trim($_GET['BRAND']),
      'CARDNO' => trim($_GET['CARDNO']),
      'CCCTY'=> trim($_GET['CCCTY']),
      'CN' => trim($_GET['CN']),
      'CURRENCY' => trim($_GET['currency']),
      'CVCCHECK' => trim($_GET['CVCCheck']),
      'ECI' => trim($_GET['ECI']),
      'ED' => trim($_GET['ED']),
      'IP' => trim($_GET['IP']),
      'IPCTY' => trim($_GET['IPCTY']),
      'NCERROR' => trim($_GET['NCERROR']),
      'ORDERID' => trim($_GET['orderID']),
      'PAYID' => trim($_GET['PAYID']),
      'PM' => trim($_GET['PM']),
      'STATUS' => trim($_GET['STATUS']),
      'TRXDATE' => trim($_GET['TRXDATE']),
      'VC' => trim($_GET['VC']),
    );
  }
  return $return_values;
}