<?php
/**
 * @file
 * Ogone ecommerce payment gateway.
 *
 * Todo:
 *  Re-add recurring option when hiding credit card fields
 */

define('OGONE_DEFAULT_ALIAS_USAGE', 'Check the box below to allow the payment gateway to store your credit card information. This will allow us to make charges for recurring donations without having to store your credit card number, which helps protect your privacy.');
/**
 * Implementation of hook_menu().
 */
function gm_ogone_ecommerce_menu() {
  $items['ogone/post/%uc_order'] = array(
    'title' => t('Redirecting to Ogone...'),
    'page callback' => 'gm_ogone_ecommerce_build_form',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  // Callbacks for responses from Ogone
  $items['ogone/feedback/accept'] = array(
    'title' => 'Ogone Response: Accepted',
    'description' => 'Shown when an Ogone payment is authorized, accepted, or pending.',
    'page callback' => 'gm_ogone_ecommerce_feedback_accepted',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/decline'] = array(
    'title' => 'Ogone Response: Declined',
    'description' => 'Shown when an Ogone payment is declined.',
    'page callback' => 'gm_ogone_ecommerce_feedback_declined',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/exception'] = array(
    'title' => 'Ogone Response: Exception',
    'description' => 'Shown when an Ogone payment result is uncertain.',
    'page callback' => 'gm_ogone_ecommerce_feedback_exception',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ogone/feedback/cancel'] = array(
    'title' => 'Ogone Response: Cancelled',
    'description' => 'Shown when an Ogone payment is cancelled by the user.',
    'page callback' => 'gm_ogone_ecommerce_feedback_cancelled',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  
  return $items;
}

/**
 * Build the form that will auto-submit to Ogone
 */
function gm_ogone_ecommerce_build_form($order) {
  drupal_add_js(drupal_get_path('module', 'gm_ogone_ecommerce') . '/gm_ogone_ecommerce.js');
  $output = t("You are being redirected to Ogone to provide your payment details directly to the payment processor. One moment please.");
  $output .= drupal_get_form('gm_ogone_ecommerce_post_form', $order);
  return $output;
}

/**
 * Return the form for the auto-submit form that goes to Ogone
 */
function gm_ogone_ecommerce_post_form(&$form_state, $order) {
  $gateway_config = _gm_ogone_ecommerce_get_config_for_order($order);
  
  // Gather arguments that will be sent
  $arguments = array(
    'ACCEPTURL' => '',
    'ALIASOPERATION' => $gateway_config['ALIASOPERATION'],
    'AMOUNT' => $order->order_total * 100,
    'BGCOLOR' => '',
    'BRAND' => '',
    'BUTTONBGCOLOR' => '',
    'BUTTONTXTCOLOR' => '',
    'CANCELURL' => '',
    'CATALOGURL' => '',
    'CN' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'COM' => '',
    'CURRENCY' => 'EUR',
    'DECLINEURL' => '',
    'EMAIL' => $order->primary_email,
    'EXCEPTIONURL' => '',
    'FONTTYPE' => '',
    'HOMEURL' => url('<front>', array('asbolute' => TRUE)),
    'LANGUAGE' => 'en_US',
    'LOGO' => '',
    'ORDERID' => $order->order_id,
    'OWNERADDRESS' => $order->billing_street1 . ' ' . $order->billing_street2,
    'OWNERCTY' => $order->billing_country,
    'OWNERTOWN' => $order->billing_city,
    'OWNERZIP' => $order->billing_postal_code,
    'PM' => '',
    'PSPID' => $gateway_config['PSPID'],
    'TBLBGCOLOR' => '',
    'TBLTXTCOLOR' => '',
    'TITLE' => '',
    'TP' => '',
    'TXTCOLOR' => '',
    'ACCEPTURL' => url('ogone/feedback/accept', array('absolute' => TRUE)),
    'DECLINEURL' => url('ogone/feedback/decline', array('absolute' => TRUE)),
    'EXCEPTIONURL' => url('ogone/feedback/exception', array('absolute' => TRUE)),
    'CANCELURL' => url('ogone/feedback/cancel', array('absolute' => TRUE)),
  );
  
  // Only send the ALIASUSAGE value if it's set
  if ($gateway_config['ALIASUSAGE'] && $arguments['ALIASOPERATION']) {
    $arguments['ALIASUSAGE'] = $gateway_config['ALIASUSAGE'];
  }
  
  // Sort the arguments by the key. This needs to be done for the SHA-1 verification
  ksort($arguments);
  
  $sha1_signature = '';

  // Loop over the arguments being sent. For each, add a hidden form value, and
  // add it to a string that will be used to calculate the SHA-1 for the values
  // being sent.
  foreach ($arguments as $param_name => $param_value) {
    $param_value = trim($param_value);
    $param_name = strtoupper($param_name);
    if (strlen($param_value) > 0) {
        $sha1_signature .= $param_name . '=' . $param_value . $gateway_config['sha_in'];
        $form[$param_name] = array(
          '#type' => 'hidden',
          '#value' => $param_value,
        );
    }
  }
  $form['SHASign'] = array(
    '#type' => 'hidden',
    '#value' => sha1($sha1_signature),
  );
  
  
  $form['#action'] = $gateway_config['url'];
  $form['#id'] = 'ogone-ecommerce-post';
  
  return $form;
}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/
/**
 * Implementation of hook_payment_gateway_managed().
 */
function gm_ogone_ecommerce_payment_gateway_managed() {
  $gateways[] = array(
    'id' => 'ogone_ecommerce',
    'title' => t('Ogone Ecommerce'),
    'description' => t('Process payments using Ogone\'s e-commerce payment method.'),
    'credit' => 'gm_ogone_ecommerce_charge',
    'settings' => 'gm_ogone_ecommerce_settings_form',
    'hide_cc_fields' => TRUE,
  );

  return $gateways;
}

/**
 * Charge callback. This is called from fundraiser_webform_submit()
 */
function gm_ogone_ecommerce_charge($order_id, $amount, $data) {
  drupal_goto('ogone/post/' . $order_id);
}


/**
 * Settings form for an Ogone gateway
 */
function gm_ogone_ecommerce_settings_form($config = array()) {
  $form['gm_ogone_ecommerce_pspid'] = array(
    '#type' => 'textfield',
    '#title' => t('PSPID'),
    '#description' => t('Ogone PSPID.'),
    '#maxlength' => 255,
    '#default_value' => $config['gm_ogone_ecommerce_pspid'],
    '#required' => TRUE,
  );


  $form['gm_ogone_ecommerce_transaction_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Mode'),
    '#description' => t('Should transactions be made in a live or test environment? This setting will determine which of the options below are used: live or test.'),
    '#options' => array(
      'test' => t('Test'),
      'live' => t('Live'),
    ),
    '#default_value' => $config['gm_ogone_ecommerce_transaction_mode'],
    '#required' => TRUE,
  );
  
  
  $form['security_keys'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Security keys'),
    '#description' => t('SHA-1 keys used to validate the data passed to and from Ogone. Live and test transactions must use different keys. These keys are configured in the Ogone admin, under Technical Information. The SHA-IN phrase is set on the "Data and origin verification tab," and the SHA-OUT is set on the "Transaction Feedback" tab.'),
  );
  
  $form['security_keys']['test'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Test'),
    '#description' => t('Security keys used for test transactions'),
  );  
  $form['security_keys']['test']['gm_ogone_ecommerce_shain_test'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-IN Pass Phrase'),
    '#description' => t('Used to validate data sent to Ogone.'),
    '#maxlength' => 255,
    '#default_value' => $config['gm_ogone_ecommerce_shain_test'],
  );
  $form['security_keys']['test']['gm_ogone_ecommerce_shaout_test'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-OUT Pass Phrase'),
    '#description' => t('Used to validate data sent back from Ogone after payment process.'),
    '#maxlength' => 255,
    '#default_value' => $config['gm_ogone_ecommerce_shaout_test'],
  );
  
  $form['security_keys']['live'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Live'),
    '#description' => t('Security keys used for live transactions'),
  );  
  $form['security_keys']['live']['gm_ogone_ecommerce_shain_live'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-IN Pass Phrase'),
    '#description' => t('Used to validate data sent to Ogone.'),
    '#maxlength' => 255,
    '#default_value' => $config['gm_ogone_ecommerce_shain_live'],
  );
  $form['security_keys']['live']['gm_ogone_ecommerce_shaout_live'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-OUT Pass Phrase'),
    '#description' => t('Used to validate data sent back from Ogone after payment process.'),
    '#maxlength' => 255,
    '#default_value' => $config['gm_ogone_ecommerce_shaout_live'],
  );
  
  $form['alias_settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Alias Settings'),
    '#description' => t('Ogone uses "aliases" to retain the payment information for users so that it may be used again in the future. This is necessary for recurring donations: credit card numbers are not stored in Springboard. Ogone manages the storage of that information and gives us an alias that we can pass them for future recurring donations.'),
  );
  $form['alias_settings']['gm_ogone_ecommerce_alias_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Alias usage'),
    '#description' => t('If you have not already, you may need to enable Alias Management in the Ogone admin web interface, at Configuration > Account > Your Options.'),
    '#default_value' => !empty($config['gm_ogone_ecommerce_alias_enable']) ? $config['gm_ogone_ecommerce_alias_enable'] : FALSE,
  );
  
  $form['alias_settings']['gm_ogone_ecommerce_alias_usage'] = array(
    '#type' => 'textarea',
    '#title' => t('Alias Usage Explanation'),
    '#description' => t('This brief message will be shown to the user on the page where they enter their credit card info. It is shown above a checkbox labeled, "I allow Ogone to store my financial details in a secure way so I won\'t have to enter them again for future orders with this merchant." Ogone limits this explanation to 255 characters.'),
    '#cols' => 60,
    '#rows' => 2,
    '#maxlength' => 255,
    '#default_value' => isset($config['gm_ogone_ecommerce_alias_usage']) ? $config['gm_ogone_ecommerce_alias_usage'] : OGONE_DEFAULT_ALIAS_USAGE,
  );
  
  
  return $form;
}






/*******************************************************************************
 * Ogone Feedback Functions
 ******************************************************************************/
/**
 * Menu callback: successful payment
 */
function gm_ogone_ecommerce_feedback_accepted() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['ORDERID'];
  $transaction_id = $payment_values['PAYID'];
  $webform = db_fetch_object(db_query("SELECT webform_nid, sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));

  if (_gm_ogone_ecommerce_check_feedback_sha($payment_values)) {
    fundraiser_order_accept($order_id, $transaction_id);
    drupal_goto('node/' . $webform->webform_nid . '/confirmation', array('sid' => $webform->sid));
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
    drupal_goto('node/' . $webform->webform_nid);
  }
}


/**
 * Menu callback: declined payment
 */
function gm_ogone_ecommerce_feedback_declined() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['ORDERID'];
  $webform = db_fetch_object(db_query("SELECT webform_nid, sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
  
  if (_gm_ogone_ecommerce_check_feedback_sha($payment_values)) {
    fundraiser_order_decline($order_id, $message);
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  drupal_goto('node/' . $webform->webform_nid);
}


/**
 * Menu callback: exception
 */
function gm_ogone_ecommerce_feedback_exception() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['ORDERID'];
  $webform = db_fetch_object(db_query("SELECT webform_nid, sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
  
  if (_gm_ogone_ecommerce_check_feedback_sha($payment_values)) {
    fundraiser_order_exception($order_id, '');
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  drupal_goto('node/' . $webform->webform_nid);
}



/**
 * Menu callback: cancelled payment
 */
function gm_ogone_ecommerce_feedback_cancelled() {
  $payment_values = _gm_ogone_ecommerce_get_returned_values();
  $order_id = $payment_values['ORDERID'];
  $webform = db_fetch_object(db_query("SELECT webform_nid, sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));

  if (_gm_ogone_ecommerce_check_feedback_sha($payment_values)) {
    fundraiser_order_cancel($order_id);
  }
  else {
    fundraiser_order_exception($order_id, t('There was an error with your payment. The data from the payment processor may have been tampered with before reaching our server. Please contact a site administrator to check on the status of your payment.'));
  }
  drupal_goto('node/' . $webform->webform_nid);
}


/**
 * Check if the SHA value from the payment processor is correct
 */
function _gm_ogone_ecommerce_check_feedback_sha($return_values) {
  $gateway_config = _gm_ogone_ecommerce_get_config_for_order($return_values['ORDERID']);
  $sha_out_phrase = $gateway_config['sha_out'];
  
  ksort($return_values);
  
  $sha1_signature = '';
  foreach ($return_values as $param_name => $param_value) {
    if (strlen($param_value) > 0 && $param_name != 'SHASIGN') {
      $sha1_signature .= $param_name . '=' . $param_value . $sha_out_phrase;
    }
  }
  $sha1_signature = sha1($sha1_signature);
  if (strtoupper($sha1_signature) == $return_values['SHASIGN']) {
    return true;
  }
  else {
    return false;
  }
}


/**
 * Get an array of the data passed back from the payment processor
 */
function _gm_ogone_ecommerce_get_returned_values() {
  static $return_values;
  if (empty($return_values)) {
    $return_values = array(
      'AAVCHECK' => check_plain(trim($_GET['AAVCheck'])),
      'ACCEPTANCE' => check_plain(trim($_GET['ACCEPTANCE'])),
      'ALIAS' => check_plain(trim($_GET['ALIAS'])),
      'AMOUNT' => check_plain(trim($_GET['amount'])),
      'BRAND' => check_plain(trim($_GET['BRAND'])),
      'CARDNO' => check_plain(trim($_GET['CARDNO'])),
      'CCCTY'=> check_plain(trim($_GET['CCCTY'])),
      'CN' => check_plain(trim($_GET['CN'])),
      'CURRENCY' => check_plain(trim($_GET['currency'])),
      'CVCCHECK' => check_plain(trim($_GET['CVCCheck'])),
      'ECI' => check_plain(trim($_GET['ECI'])),
      'ED' => check_plain(trim($_GET['ED'])),
      'IP' => check_plain(trim($_GET['IP'])),
      'IPCTY' => check_plain(trim($_GET['IPCTY'])),
      'NCERROR' => check_plain(trim($_GET['NCERROR'])),
      'ORDERID' => check_plain(trim($_GET['orderID'])),
      'PAYID' => check_plain(trim($_GET['PAYID'])),
      'PM' => check_plain(trim($_GET['PM'])),
      'STATUS' => check_plain(trim($_GET['STATUS'])),
      'TRXDATE' => check_plain(trim($_GET['TRXDATE'])),
      'VC' => check_plain(trim($_GET['VC'])),
      'SHASIGN' => check_plain(trim($_GET['SHASIGN'])),
    );
  }
  return $return_values;
}


/**
 * Get the Ogone config variables for the given order
 * 
 * This function checks if the gateway is configured to use live or test
 * transactions, and returns the appropriate variables.
 * 
 * @param $order_or_id
 *   Ubercart order object, or an order ID
 * @return
 *   Array of gateway config info
 */
function _gm_ogone_ecommerce_get_config_for_order($order_or_id) {
  // Load gateway details
  $gateway = gateway_manager_gateway_for_order($order_or_id);
  $gateway_config = $gateway['config'];
 
  $config = array(
    'PSPID' => $gateway_config['gm_ogone_ecommerce_pspid'],
    'ALIASUSAGE' => $gateway_config['gm_ogone_ecommerce_alias_usage'],
    'ALIASOPERATION' => ($gateway_config['gm_ogone_ecommerce_alias_enable']) ? 'BYPSP' : '',
  );
  
  // If using the live transaction mode, load live vars
  if ($gateway_config['gm_ogone_ecommerce_transaction_mode'] == 'live') {
    $config['sha_in'] = $gateway_config['gm_ogone_ecommerce_shain_live'];
    $config['sha_out'] = $gateway_config['gm_ogone_ecommerce_shaout_live'];
    $config['url'] = 'https://secure.ogone.com/ncol/prod/orderstandard.asp';
  }
  // Not using live transactions, so use test vars
  else {
    $config['sha_in'] = $gateway_config['gm_ogone_ecommerce_shain_test'];
    $config['sha_out'] = $gateway_config['gm_ogone_ecommerce_shaout_test'];
    $config['url'] = 'https://secure.ogone.com/ncol/test/orderstandard.asp';
  }
  return $config;
}