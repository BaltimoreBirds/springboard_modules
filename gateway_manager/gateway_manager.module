<?php

/**
 * @file
 * This module provides functionality for creating multiple versions of the same payment gateway with different settings.
 */

/**
 * Implements hook_menu().
 */
function gateway_manager_menu() {
  $items['admin/config/fundraiser/gateways'] = array(
    'title' => t('Payment gateways'),
    'page callback' => 'gateway_manager_list',
    'access callback' => 'user_access',
    'access arguments' => array('view payment gateway list'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gateway_manager.admin.inc',
  );
  $items['admin/config/fundraiser/gateways/list'] = array(
    'title' => t('List'),
    'access callback' => 'user_access',
    'access arguments' => array('view payment gateway list'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/fundraiser/gateways/add'] = array(
    'title' => t('Add payment gateway'),
    'page callback' => 'gateway_manager_gateway_add',
    'access callback' => 'user_access',
    'access arguments' => array('create payment gateway'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gateway_manager.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/fundraiser/gateways/%gateway_manager_gateway/edit'] = array(
    'title' => t('Edit payment gateway'),
    'page callback' => 'gateway_manager_gateway_edit',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('edit any payment gateway'),
    'file' => 'gateway_manager.admin.inc',
  );
  $items['admin/config/fundraiser/gateways/%gateway_manager_gateway/delete'] = array(
    'title' => t('Delete payment gateway'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gateway_managed_gateway_delete_form', 4),
    'type' => MENU_CALLBACK,
    'access callback' => 'gateway_manager_gateway_can_be_deleted',
    'access arguments' => array(4),
    'file' => 'gateway_manager.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function gateway_manager_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_edit_form($form_id, $form)) {
    // Add a wrapper around the payment gateway field
    $form['fundraiser_settings']['gateway']['#prefix'] = '<div id="gateway">';
    $form['fundraiser_settings']['gateway']['#suffix'] = '</div>';
  }
  // If the payment gateway for the donation form does not include credit card fields (such
  // as Ogone), remove them from the donation form
  if (strpos($form_id, 'webform_client_form_') === 0) {
    if (fundraiser_is_donation_type($form['#node']->type) && $form['#node']->gateway > 0) {
      $gateway = gateway_manager_gateway_info($form['#node']->gateway);
      if ($gateway['gateway_details']['hide_cc_fields']) {
        foreach (element_children($form['submitted']['credit_card_information']) as $field_name) {
          // Keep the recurring donation option, but hide everything else
          if ($field_name != 'recurs_monthly') {
            $form['submitted']['credit_card_information'][$field_name]['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_insert($node) {
  if (fundraiser_is_donation_type($node->type)) {
    _gateway_manager_clear_cache();
  }
}

/**
 * Implements hook_node_update().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_update(&$node, $op) {
  if (fundraiser_is_donation_type($node->type)) {
    _gateway_manager_clear_cache();
  }
}

/**
 * Implements hook_node_delete().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_delete($node) {
  if (fundraiser_is_donation_type($node->type)) {
    _gateway_manager_clear_cache();
  }
}

/**
 * Implements hook_fundraiser_gateway().
 */
function gateway_manager_fundraiser_gateway($op, $arg) {
  switch ($op) {
    case 'select options':
      return array('Gateway Manager' => _gateway_manager_gateway_list());
    case 'charge function':
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['charge_function'] = $info['charge_function'];
        $gateway['config'] = $info['config'];
        return $gateway;
      }
    case 'refund function':
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['refund_function'] = $info['refund_function'];
        $gateway['config'] = $info['config'];
        return $gateway;
      }
  }
}

/**
 * Implements hook_fundraiser_gateway(). But renamed to avoid dupe calling in fundraiser.
 */
function gateway_manager_gateway_info($id) {
  $gateway = gateway_manager_gateway_load($id);
  $gateway_info = array();
  $gateway_info['config'] = unserialize($gateway->config);
  $gateway_info['type'] = $gateway->type;
  $gateway_types = module_invoke_all('gateway_manager_gateway_info');
  foreach ($gateway_types as $options) {
    if ($options['id'] == $gateway->type) {
      $gateway_info['id'] = $options['id'];
      $gateway_info['charge_function'] = $options['credit'];
      $gateway_info['refund_function'] = $options['credit_refund'];
      $gateway_info['gateway_details'] = $options;
    }
  }
  return $gateway_info;
}

/**
 * Loads a payment gateway configuration by id.
 */
function gateway_manager_gateway_load($id) {
  static $gateways = array();
  if (!isset($gateways[$id])) {
    $gateways[$id] = db_fetch_object(db_query('SELECT * FROM {gateway_manager_gateways} WHERE id = :id',
      array(':id' => $id)));
    $result = db_query('SELECT tid FROM {term_gateway} WHERE gid = :gid', array(':gid' => $id));
    while ($data = db_fetch_array($result)) {
      $gateways[$id]->terms[] = $data['tid'];
    }
    drupal_alter('gateway_manager_gateway', $gateways[$id]);
  }
  return $gateways[$id];
}

/**
 * Implemenation of hook_permission().
 */
function gateway_manager_permission() {
  return array(
    'view payment gateway list' => array(
      'title' => t('view payment gateway list'),
      'description' => t('View the list of available gatways.'),
    ),
    'create payment gateway' => array(
      'title' => t('create payment gateway'),
      'description' => t('Create a new payment gateway configuration.'),
    ),
    'edit any payment gateway' => array(
      'title' => t('edit any payment gateway'),
      'description' => t('Edit any existing payment gateway configurations.'),
    ),
    'delete any payment gateway' => array(
      'title' => t('delete any payment gateway'),
      'description' => t('Delete any existing payment gateway configurations.'),
    ),
  );
}

/**
 * Adds a special submit handler to all managed payment gateway forms.
 */
function gateway_mananger_settings_form($form) {
  $form['buttons'] = array(
    '#weight' => 10,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  // Only show the delete button if the payment gateway isn't in use.
  if (isset($form['id']['#value']) && gateway_manager_gateway_can_be_deleted($form['id']['#value'])) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
  }
  elseif (isset($form['id']['#value'])) {
    $form['buttons']['delete_notice'] = array(
      '#value' => t('* This payment gateway cannot be deleted because donation forms are assigned to it' .
        ' or there are pending recurring donations.'),
      '#prefix' => '<div class="description">',
      '#suffix' => '</div>',
    );
  }
  $form['#submit'][] = 'gateway_manager_settings_form_submit';
  return $form;
}

/**
 * Submission handler for saving gateway configurations.
 */
function gateway_manager_settings_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Delete') {
    drupal_goto('admin/config/fundraiser/gateways/' . $form_state['values']['id'] . '/delete');
  }
  $id = $form_state['values']['id'];
  $name = $form_state['values']['name'];
  $type = $form_state['values']['type'];
  $terms = $form_state['values']['terms'];
  $status = $form_state['values']['status'];
  $config = gateway_manager_extract_config($form_state);
  if (empty($id)) {
    gateway_manager_settings_insert($name, $type, $terms, $status, $config);
  }
  else {
    gateway_manager_settings_update($id, $name, $type, $terms, $status, $config);
  }
}

/**
 * Creates a new payment gateway record.
 */
function gateway_manager_settings_insert($name, $type, $terms, $status, $config) {
  global $user;
  $record = new stdClass;
  $record->name = $name;
  $record->uid = $user->uid;
  $record->type = $type;
  $record->created = REQUEST_TIME;
  $record->updated = REQUEST_TIME;
  $record->config = serialize($config);
  $record->status = $status;
  $result = drupal_write_record('gateway_manager_gateways', $record);
  if ($result) {
    gateway_manager_settings_save_terms($record->id, $terms);
    module_invoke_all('gateway_manager_gateway_create', $record, $config);
    drupal_set_message(t('Payment gateway @name created successfully.', array('@name' => $name)));
    drupal_goto('admin/config/fundraiser/gateways');
  }
}

/**
 * Updates an existing payment gateway record.
 */
function gateway_manager_settings_update($id, $name, $type, $terms, $status, $config) {
  global $user;
  $record->id = $id;
  $record->name = $name;
  $record->uid = $user->uid;
  $record->updated = REQUEST_TIME;
  $record->config = serialize($config);
  $record->status = $status;
  $result = drupal_write_record('gateway_manager_gateways', $record, array('id'));
  if ($result) {
    gateway_manager_settings_save_terms($id, $terms);
    module_invoke_all('gateway_manager_gateway_update', $record, $config);
    drupal_set_message(t('Payment gateway @name updated successfully.', array('@name' => $name)));
    drupal_goto('admin/config/fundraiser/gateways');
  }
}

/**
 * Deletes an existing payment gateway record.
 */
function gateway_manager_delete_gateway($id) {
  db_delete('gateway_manager_gateways')
  ->condition('id', $id)
  ->execute();
  module_invoke_all('gateway_manager_gateway_delete', $id);
  drupal_set_message(t('Payment gateway successfully deleted.'));
  drupal_goto('admin/config/fundraiser/gateways');
}

/**
 * Saves terms associated with a managed gateway.
 */
function gateway_manager_settings_save_terms($gid, $terms) {
  db_delete('term_gateway')
  ->condition('gid', $gid)
  ->execute();
  foreach ($terms as $term) {
    $record = ('gid' => $gid, 'tid' => $term);
    $result = drupal_write_record('term_gateway', $record);
  }
}

/**
 * Extracts a payment gateways configuration variables from a settings form.
 */
function gateway_manager_extract_config(&$form_state) {
  $exclusions = array('name', 'type', 'op', 'submit', 'terms', 'delete', 'form_build_id', 'form_token', 'form_id');
  $config = array();
  // Loop over form values and only save those.
  foreach ($form_state['values'] as $k => $v) {
    if (!in_array($k, $exclusions)) {
      $config[$k] = $v;
    }
  }
  return $config;
}

/**
 * Determines whether or not a payment gateway is currently assigned to
 * any donation forms or recurring orders.
 */
function gateway_manager_gateway_can_be_deleted($gateway) {
  $id = is_object($gateway) ? $gateway->id : $gateway;
  $has_access = user_access('delete any payment gateway');
  $in_use = _gateway_manager_gateway_in_use($id);
  // Check that the user has the correct permission, and that the gateway is not in use.
  return $has_access && !$in_use;
}

/**
 * Builds an array of gateways that can be selected when creating a payment gateway.
 */
function _gateway_manager_gateway_list() {
  // TODO Please convert this statement to the D7 database API syntax.
  $result = db_query(db_rewrite_sql('SELECT g.id, g.name FROM {gateway_manager_gateways} g ' .
    'WHERE g.status = 1 ' .
    'ORDER BY g.name', 'gateway_manager_gateways', 'id'));
  $gateways = array();
  while ($data = db_fetch_object($result)) {
    $gateways[$data->id] = $data->name;
  }
  return $gateways;
}

/**
 * Returns the number of forms that are currently assigned the given payment gateway.
 */
function _gateway_manager_form_count($id) {
  $cid = 'gateway_manager_form_count';
  $gateway_stats = array();
  // if the stats are cached, pull them from there
  if ($cached = cache_get($cid, 'cache')) {
    $gateway_stats = $cached->data;
  }
  else { // otherwise, build an array of gateway stats and cache them
    $result = db_query('SELECT gateway, count(nid) as count FROM {fundraiser} GROUP BY gateway');
    while ($data = db_fetch_object($result)) {
      $gateway_stats[$data->gateway] = $data->count;
    }
    cache_set($cid, $gateway_stats, 'cache', REQUEST_TIME + (60 * 60 * 24));
  }
  if (array_key_exists($id, $gateway_stats)) {
    return $gateway_stats[$id];
  }
  return 0;
}

/**
 * Determines whether or not a payment gateway is currently assigned to any donation forms
 * or pending recurring donations.
 */
function _gateway_manager_gateway_in_use($id) {
  $form_count = _gateway_manager_form_count($id);
  $donation_count = _gateway_manager_pending_donation_count($id);
  // If either count is greater than 0, the gateway is in use.
  if ($form_count > 0 || $donation_count > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function, count how many orders are left to go.
 */
function _gateway_manager_pending_donation_count($id) {
  if (module_exists('fundraiser_sustainers')) {
    return db_query('SELECT COUNT(1) FROM {fundraiser_sustainers} WHERE gateway = :gateway AND txn_id IS NULL',
      array(':gateway' => $id))->fetchField();
  }
  return 0;
}

/**
 * Clears out the cached stats.
 */
function _gateway_manager_clear_cache() {
  $cid = 'gateway_manager_form_count';
  cache_clear_all($cid, 'cache');
}

/**
 * Implemenation of donation_transaction_details().
 */
function gateway_manager_donation_transaction_details_alter(&$details) {
  $gateway = db_fetch_object(db_query('SELECT name, type FROM {gateway_manager_gateways} WHERE id = :id',
    array(':id' => $details['gateway'])));
  $details['gateway'] = $gateway->name;
}


/**
 * Get the payment gateway for the given order object or order ID
 *
 * @param $order_or_orderid
 *   Ubercart order object, or an order ID: either will be handled
 *
 * @return
 *   Array of gateway details
 */
function gateway_manager_gateway_for_order($order_or_orderid) {
  if (is_object($order_or_orderid)) {
    $order = $order_or_orderid;
  }
  elseif ($order_or_orderid > 0) {
    $order = uc_order_load($order_or_orderid);
  }
  if ($order->data['gateway'] > 0) {
    return gateway_manager_gateway_info($order->data['gateway']);
  }
  return null;
}
