<?php

/**
 * @file
 * Payment gateway manager
 *
 * This module provides functionality for creating multiple versions of the
 * same payment gateway with different settings.
 */


/**
 * Implements hook_form_alter().
 */
function gateway_manager_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_edit_form($form_id, $form)) {
    module_load_include('inc', 'gateway_manager', 'gateway_manager.admin');
    gateway_manager_donation_node_form($form, $form_state);
  }
  elseif ((strpos($form_id, 'webform_client_form_') === 0) && fundraiser_is_donation_type($form['#node']->type)) {
    // Add the validate callback to the donation form.
    $form['#validate'][] = 'gateway_manager_donation_form_validate';
  }
}

/**
 * Validate callback for donation forms.
 *
 * This function will act as a conduit for calling the validate_callback for
 * the selected payment method and gateway.
 */
function gateway_manager_donation_form_validate($form, &$form_state) {
  // Load all gateway types.
  //$gateway_types = gateway_manager_gateway_types();
  // Shortcut to the node.
  $node = $form['#node'];
  // Create an data structure that will tell us exactly where each webform
  // component lives in the FAPI array.
  $component_hierarchy = fundraiser_parse_components($node->nid, $node->webform['components']);
  // Flatten the submitted values.
  $values = _fundraiser_array_flatten($form_state['values']['submitted']);

  if (isset($values['payment_method']) && isset($node->gateway_manager)) {
    $payment_method = $values['payment_method'];
    if (isset($node->gateway_manager['payment_methods'][$payment_method])) {
      $gateway_instance = $node->gateway_manager['payment_methods'][$payment_method]->gateway_instance;
      $method = gateway_manager_method_load($payment_method, $gateway_instance);
      if (function_exists($method['validate_callback'])) {
        // Load the gateway instance object.
        $gateway = gateway_manager_gateway_load($gateway_instance);

        // Find the payment_method & payment_fields components on the $form.
        $payment_method_component = &fundraiser_find_field($form, $component_hierarchy['payment_method']);
        $payment_fields_component = &fundraiser_find_field($form, $component_hierarchy['payment_fields']);

        // Call the gateway's validate callback for this payment method.
        if (function_exists($method['validate_callback'])) {
          $method['validate_callback']($form, $form_state, $values, $payment_method_component, $payment_fields_component, $method);
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function gateway_manager_theme() {
  return array(
    'gateway_manager_node_form_payment_methods' => array(
      'arguments' => array('fieldset' => NULL),
      'file' => 'gateway_manager.admin.inc',
    ),
  );
}

/**
 * Load the payment method info for a specific gateway instance.
 */
function gateway_manager_method_load($payment_method, $gateway_instance) {
  $gateway_types = gateway_manager_gateway_types();
  if ($gateway = gateway_manager_gateway_load($gateway_instance)) {
    if (isset($gateway_types[$gateway->gateway_type]['payment_methods'][$payment_method])) {
      $method = $gateway_types[$gateway->gateway_type]['payment_methods'][$payment_method];

      // Load the file.
      $module = isset($method['module']) ? $method['module'] : $gateway_types[$gateway->gateway_type]['module'];
      $file = isset($method['file']) ? $method['file'] : $gateway_types[$gateway->gateway_type]['file'];

      if (!empty($module) && !empty($file)) {
        $include_file = drupal_get_path('module', $module) . '/' . $file;
        if (is_file($include_file)) {
          require_once($include_file);
        }
      }

      return array_merge((array) $gateway, $method);
    }
  }
  return FALSE;
}

/**
 * Returns all available payment methods.
 */
function gateway_manager_all_payment_methods() {
  $gateway_types = gateway_manager_gateway_types();
  $gateways = gateway_manager_gateway_load_all();

  // Iterate through the available gateways, find their gateway_type
  // definitions, and build the list of available payment methods.
  $payment_methods = array();
  foreach ($gateways as $gateway_name => $gateway) {
    if ($gateway->disabled || !isset($gateway_types[$gateway->gateway_type]) || !is_array($gateway_types[$gateway->gateway_type]['payment_methods'])) {
      // Skip disabled and unsupported gateway types.
      continue;
    }

    // Shortcut to the gateway type.
    $gateway_type = $gateway_types[$gateway->gateway_type];

    // Loop on all payment methods in the gateway.
    foreach ($gateway_type['payment_methods'] as $method_key => $method) {
      // Remove the payment methods.
      if (empty($method['file'])) {
        $method['file'] = $gateway_type['file'];
      }
      if (empty($payment_methods[$method_key]['#label'])) {
        $payment_methods[$method_key]['#label'] = isset($method['label']) ? $method['label'] : $method_key;
      }
      $payment_methods[$method_key][$gateway_name] = (array) $gateway + $method;
    }
  }
  return $payment_methods;
}

/**
 * Implements hook_nodeapi().
 */
function gateway_manager_nodeapi(&$node, $op) {
  if (fundraiser_is_donation_type($node->type)) {
    switch ($op) {
      case 'load':
        gateway_manager_donation_node_load($node, TRUE);
        break;

      case 'prepare':
        gateway_manager_donation_node_load($node, FALSE);
        break;

      case 'insert':
      case 'update':
      case 'delete':
        module_load_include('inc', 'gateway_manager', 'gateway_manager.admin');
        gateway_manager_donation_node_save($node, $op);
        _gateway_manager_clear_cache();
        break;
    }
  }
}

/**
 * Load all rows in {gateway_manager_node} for this node.
 */
function gateway_manager_donation_node_load(&$node, $only_enabled = TRUE) {
  $node->gateway_manager = array();

  $sql = "SELECT * FROM {gateway_manager_node} WHERE nid = %d";
  if ($only_enabled) {
    $sql .= " AND status <> 0";
  }
  $sql .= ' ORDER BY weight ASC';
  $result = db_query($sql, $node->nid);

  $node->gateway_manager['payment_methods'] = array();
  while ($record = db_fetch_object($result)) {
    if (empty($record->label)) {
      $method = gateway_manager_method_load($record->method, $record->gateway_instance);
      $record->label = $method['label'];
    }
    $node->gateway_manager['payment_methods'][$record->method] = $record;
  }
}

/**
 * Implements hook_fundraiser_gateway().
 */
function gateway_manager_fundraiser_gateway($op, $arg) {
  switch ($op) {
    case 'select options':
      return array('Gateway Manager' => _gateway_manager_gateway_list());

    case 'charge function':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['charge_function'] = $info['charge_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;

    case 'refund function':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['refund_function'] = $info['refund_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;

    case 'billing update':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['billing_update_function'] = $info['billing_update_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;
  }
}

/**
 * Returns the charge function for the given gateway.
 */
function gateway_manager_gateway_info($name) {
  $gateway_types = gateway_manager_gateway_types();
  $gateway = gateway_manager_gateway_load($name);

  $gateway_info = array();
  $gateway_info['config'] = unserialize($gateway->config);
  $gateway_info['type'] = $gateway->gateway_type;

  foreach($gateway_types as $options) {
    if ($options['id'] == $gateway->gateway_type) {
      $gateway_info['charge_function'] = $options['credit'];
      $gateway_info['refund_function'] = $options['credit_refund'];
      $gateway_info['billing_update_function'] = $options['billing_update'];
      $gateway_info['gateway_details'] = $options;
    }
  }

  return $gateway_info;
}

/**
 * Loads a single payment gateway configuration by machine name.
 */
function gateway_manager_gateway_load($name) {
  static $gateways = array();
  $gateways = gateway_manager_gateway_load_all();
  if (isset($gateways[$name]) && !$gateways[$name]->_alter) {
    // Run the alter hook *one* time per gateway.
    drupal_alter('gateway_manager_gateway', $gateways[$name]);
    $gateways[$name]->_alter = TRUE;
  }
  return $gateways[$name];
}

/**
 * Loads all payment gateways, keyed by machine name.
 */
function gateway_manager_gateway_load_all() {
  static $gateways = array();
  if (empty($gateways)) {
    ctools_include('export');
    $gateways = ctools_export_crud_load_all('gateway_manager_gateways');
    $gateway_types = gateway_manager_gateway_types();
    foreach ($gateways as &$gateway) {
      if (isset($gateway_types[$gateway->gateway_type])) {
        $gateway->gateway_type_info = $gateway_types[$gateway->gateway_type];
      }
    }
    drupal_alter('gateway_manager_gateways', $gateways);
  }
  return $gateways;
}

/**
 * Builds an array of configured gateways that can be used in a #options array.
 */
function _gateway_manager_gateway_list($show_disabled = FALSE) {
  $gateways = array();
  foreach (gateway_manager_gateway_load_all() as $name => $gateway) {
    if ($show_disabled || !$gateway->disabled) {
      $gateways[$name] = $gateway->admin_title;
    }
  }
  return $gateways;
}

/**
 * Build a list of payment gateway types defined in the enabled modules.
 */
function gateway_manager_gateway_types($reset = FALSE) {
  static $gateway_types = array();
  if (empty($gateway_types) || $reset) {
    // We need to manually call each module so that we can know which module
    // a given item came from.
    $gateway_types = array();
    foreach (module_implements('payment_gateway_managed') as $module) {
      $gateway_info = call_user_func($module . '_payment_gateway_managed');
      // Add the module name unless it's been explicitly provided.
      if (isset($gateway_info) && is_array($gateway_info)) {
        foreach (array_keys($gateway_info) as $gateway_type) {
          if (!isset($gateway_info[$gateway_type]['module'])) {
            $gateway_info[$gateway_type]['module'] = $module;
          }
        }
      }
      $gateway_types = array_merge($gateway_types, $gateway_info);
    }
  }
  return $gateway_types;
}

/**
 * Implements hook_perm().
 */
function gateway_manager_perm() {
  return array('view payment gateway list', 'create payment gateway', 'edit any payment gateway', 'delete any payment gateway');
}

/**
 * Determines whether or not a payment gateway is currently assigned to
 * any donation forms or recurring orders.
 */
function gateway_manager_gateway_can_be_deleted($gateway) {
  $name = is_object($gateway) ? $gateway->name : $gateway;
  $has_access = user_access('delete any payment gateway');
  $in_use = _gateway_manager_gateway_in_use($name);
  // Check that the user has the correct permission, and that the gateway is not in use
  return $has_access && !$in_use;
}

/**
 * Determines whether or not a payment gateway is currently assigned to any
 * donation forms or pending recurring donations.
 */
function _gateway_manager_gateway_in_use($name) {
  $form_count = _gateway_manager_form_count($name);
  $donation_count = _gateway_manager_pending_donation_count($name);

  // if either count is greater than 0, the gateway is in use
  if ($form_count > 0 || $donation_count > 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns the number of forms that are currently assigned the given payment gateway.
 */
function _gateway_manager_form_count($name) {
  $cid = 'gateway_manager_form_count';
  $gateway_stats = array();

  // if the stats are cached, pull them from there.
  if ($cached = cache_get($cid, 'cache')) {
    $gateway_stats = $cached->data;
  }
  // otherwise, build an array of gateway stats and cache them.
  else {
    $result = db_query("SELECT gateway, count(nid) AS count FROM {fundraiser} GROUP BY gateway");
    while ($data = db_fetch_object($result)) {
      $gateway_stats[$data->gateway] = $data->count;
    }
    cache_set($cid, $gateway_stats, 'cache');
  }

  if (array_key_exists($name, $gateway_stats)) {
    return $gateway_stats[$name];
  }
  // Return int 0 in all other cases.
  return 0;
}

/**
 * Returns the number of pending recurring donations that will be using the
 * specified gateway.
 */
function _gateway_manager_pending_donation_count($name) {
  return db_result(db_query("SELECT count(order_id) FROM {fundraiser_recurring} WHERE gateway = '%s' AND txn_id IS NULL", $name));
}

/**
 * Clear the cached form counts.
 */
function _gateway_manager_clear_cache() {
  $cid = 'gateway_manager_form_count';
  cache_clear_all($cid, 'cache');
}

/**
 * Implements hook_donation_transaction_details_alter().
 */
function gateway_manager_donation_transaction_details_alter(&$details) {
  // Add the human-readable gateway title to the $details.
  $gateway = gateway_manager_gateway_load($details['gateway']);
  $details['gateway'] = $gateway->admin_title;
}

/**
 * Get the payment gateway for the given order object or order ID
 *
 * @param $order_or_orderid
 *   Ubercart order object, or an order ID: either will be handled
 *
 * @return
 *   Array of gateway details
 */
function gateway_manager_gateway_for_order($order_or_orderid) {
  if (is_object($order_or_orderid)) {
    $order = $order_or_orderid;
  }
  elseif ($order_or_orderid > 0) {
    $order = uc_order_load($order_or_orderid);
  }

  if ($order->data['gateway'] > 0) {
    return gateway_manager_gateway_info($order->data['gateway']);
  }
  return NULL;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gateway_manager_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function gateway_manager_ctools_plugin_api($owner, $api) {
  if ($owner == 'gateway_manager' && $api == 'default_gateway_manager_gateways') {
    return array('version' => 1);
  }
}
