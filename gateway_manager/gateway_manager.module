<?php

/**
 * @file
 * Payment gateway manager
 *
 * This module provides functionality for creating multiple versions of the
 * same payment gateway with different settings.
 */


/**
 * Implements hook_form_alter().
 */
function gateway_manager_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_edit_form($form_id, $form)) {
    // Add a wrapper around the payment gateway field
    $form['fundraiser_settings']['gateway']['#prefix'] = '<div id="gateway">';
    $form['fundraiser_settings']['gateway']['#suffix'] = '</div>';
  }

  // If the payment gateway for the donation form does not include credit card fields (such
  // as Ogone), remove them from the donation form
  if (strpos($form_id, 'webform_client_form_') === 0) {
    if (fundraiser_is_donation_type($form['#node']->type) && $form['#node']->gateway > 0) {
      $gateway = gateway_manager_gateway_info($form['#node']->gateway);
      if ($gateway['gateway_details']['hide_cc_fields']) {
        foreach (element_children($form['submitted']['credit_card_information']) as $field_name) {
          // Keep the recurring donation option, but hide everything else
          if ($field_name != 'recurs_monthly') {
            $form['submitted']['credit_card_information'][$field_name]['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function gateway_manager_nodeapi(&$node, $op) {
  // clear out the gateway cache when donation forms
  // are created, updated or deleted
  if (fundraiser_is_donation_type($node->type)) {
    switch ($op) {
      case 'insert':
      case 'delete':
      case 'update':
        _gateway_manager_clear_cache();
        break;
    }
  }
}

/**
 * Implements hook_fundraiser_gateway().
 */
function gateway_manager_fundraiser_gateway($op, $arg) {
  switch ($op) {
    case 'select options':
      return array('Gateway Manager' => _gateway_manager_gateway_list());

    case 'charge function':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['charge_function'] = $info['charge_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;

    case 'refund function':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['refund_function'] = $info['refund_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;

    case 'billing update':
      $gateway = array();
      if (is_numeric($arg)) {
        $info = gateway_manager_gateway_info($arg);
        $gateway['billing_update_function'] = $info['billing_update_function'];
        $gateway['config'] = $info['config'];
        $gateway['id'] = $arg;
      }
      return $gateway;
  }
}

/**
 * Returns the charge function for the given gateway.
 */
function gateway_manager_gateway_info($name) {
  $gateway_types = gateway_manager_gateway_types();
  $gateway = gateway_manager_gateway_load($name);

  $gateway_info = array();
  $gateway_info['config'] = unserialize($gateway->config);
  $gateway_info['type'] = $gateway->gateway_type;

  foreach($gateway_types as $options) {
    if ($options['id'] == $gateway->gateway_type) {
      $gateway_info['charge_function'] = $options['credit'];
      $gateway_info['refund_function'] = $options['credit_refund'];
      $gateway_info['billing_update_function'] = $options['billing_update'];
      $gateway_info['gateway_details'] = $options;
    }
  }

  return $gateway_info;
}

/**
 * Loads a single payment gateway configuration by machine name.
 */
function gateway_manager_gateway_load($name) {
  static $gateways = array();
  if (empty($gateways)) {
    ctools_include('export');
    $gateways = ctools_export_crud_load_all('gateway_manager_gateways');
  }
  if (isset($gatways[$name]) && !isset($gateways[$name]->_alter)) {
    // Run the alter hook *one* time per gateway.
    drupal_alter('gateway_manager_gateway', $gateways[$name]);
    $gateways[$name]->_alter = TRUE;
  }
  return $gateways[$name];
}

/**
 * Builds an array of configured gateways that can be used in a #options array.
 */
function _gateway_manager_gateway_list($show_disabled = FALSE) {
  static $gateways = array();
  if (empty($gateways)) {
    ctools_include('export');
    foreach (ctools_export_crud_load_all('gateway_manager_gateways') as $name => $gateway) {
      if ($show_disabled || !$gateway->disabled) {
        $gateways[$name] = $gateway->admin_title;
      }
    }
  }
  return $gateways;
}

/**
 * Build a list of payment gateway types defined in the enabled modules.
 */
function gateway_manager_gateway_types() {
  return module_invoke_all('payment_gateway_managed');
}

/**
 * Implements hook_perm().
 */
function gateway_manager_perm() {
  return array('view payment gateway list', 'create payment gateway', 'edit any payment gateway', 'delete any payment gateway');
}

/**
 * Determines whether or not a payment gateway is currently assigned to
 * any donation forms or recurring orders.
 */
function gateway_manager_gateway_can_be_deleted($gateway) {
  $name = is_object($gateway) ? $gateway->name : $gateway;
  $has_access = user_access('delete any payment gateway');
  $in_use = _gateway_manager_gateway_in_use($name);
  // Check that the user has the correct permission, and that the gateway is not in use
  return $has_access && !$in_use;
}

/**
 * Determines whether or not a payment gateway is currently assigned to any
 * donation forms or pending recurring donations.
 */
function _gateway_manager_gateway_in_use($name) {
  $form_count = _gateway_manager_form_count($name);
  $donation_count = _gateway_manager_pending_donation_count($name);

  // if either count is greater than 0, the gateway is in use
  if ($form_count > 0 || $donation_count > 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns the number of forms that are currently assigned the given payment gateway.
 */
function _gateway_manager_form_count($name) {
  $cid = 'gateway_manager_form_count';
  $gateway_stats = array();

  // if the stats are cached, pull them from there.
  if ($cached = cache_get($cid, 'cache')) {
    $gateway_stats = $cached->data;
  }
  // otherwise, build an array of gateway stats and cache them.
  else {
    $result = db_query("SELECT gateway, count(nid) AS count FROM {fundraiser} GROUP BY gateway");
    while ($data = db_fetch_object($result)) {
      $gateway_stats[$data->gateway] = $data->count;
    }
    cache_set($cid, $gateway_stats, 'cache');
  }

  if (array_key_exists($name, $gateway_stats)) {
    return $gateway_stats[$name];
  }
  // Return int 0 in all other cases.
  return 0;
}

/**
 * Returns the number of pending recurring donations that will be using the
 * specified gateway.
 */
function _gateway_manager_pending_donation_count($name) {
  return db_result(db_query("SELECT count(order_id) FROM {fundraiser_recurring} WHERE gateway = '%s' AND txn_id IS NULL", $name));
}

/**
 * Clear the cached form counts.
 */
function _gateway_manager_clear_cache() {
  $cid = 'gateway_manager_form_count';
  cache_clear_all($cid, 'cache');
}

/**
 * Implements hook_donation_transaction_details_alter().
 */
function gateway_manager_donation_transaction_details_alter(&$details) {
  // Add the human-readable gateway title to the $details.
  $gateway = gateway_manager_gateway_load($details['gateway']);
  $details['gateway'] = $gatway->admin_title;
}

/**
 * Get the payment gateway for the given order object or order ID
 *
 * @param $order_or_orderid
 *   Ubercart order object, or an order ID: either will be handled
 *
 * @return
 *   Array of gateway details
 */
function gateway_manager_gateway_for_order($order_or_orderid) {
  if (is_object($order_or_orderid)) {
    $order = $order_or_orderid;
  }
  elseif ($order_or_orderid > 0) {
    $order = uc_order_load($order_or_orderid);
  }

  if ($order->data['gateway'] > 0) {
    return gateway_manager_gateway_info($order->data['gateway']);
  }
  return NULL;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gateway_manager_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function gateway_manager_ctools_plugin_api($owner, $api) {
  if ($owner == 'gateway_manager' && $api == 'default_gateway_manager_gateways') {
    return array('version' => 1);
  }
}
