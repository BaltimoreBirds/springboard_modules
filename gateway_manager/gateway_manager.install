<?php
/**
 * @file
 * Install file for the gateway manager module.
 *
 */

/**
 * Implements hook_install().
 */
function gateway_manager_install() {
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_install_schema('gateway_manager')
}

/**
 * Implements hook_uninstall().
 */
function gateway_manager_uninstall() {
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_uninstall_schema('gateway_manager')
  $vid = variable_get('gateway_manager_vocabulary', '');
  taxonomy_vocabulary_delete($vid);
}

/**
 * Implemenation of hook_enable().
 */
function gateway_manager_enable() {
  $vid = variable_get('gateway_manager_vocabulary', '');
  if (empty($vid) || is_null(taxonomy_vocabulary_load($vid))) {
    $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE module = :module", array(':module' => 'gateway_manager'))->fetchField();
    if (!$vid) {
      $vocabulary = array(
        'name' => t('Payment Gateway Terms'),
        'multiple' => '1',
        'required' => '0',
        'hierarchy' => '0',
        'relations' => '0',
        'module' => 'gateway_manager',
      );
      taxonomy_vocabulary_save($vocabulary /* TODO Vocabulary object replaces array $vocabulary */);
    }
    variable_set('gateway_manager_vocabulary', $vid);
  }
}

/**
 * Implements hook_schema().
 */
function gateway_manager_schema() {
  $schema['gateway_manager_gateways'] = array(
    'description' => 'Table that contains configured payment gateways.',
    'fields' => array(
      'id' => array(
        'description' => 'Unique payment gateway id.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The recognizable name of the payment gateway.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'UID of the user that created the payment gateway.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The type of payment gateway (authorizenet, cybersource, etc.).',
        'type' => 'varchar',
        'length' => '50',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Timestamp of when the payment gateway was created.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'updated' => array(
        'description' => 'Timestamp of when the gateway was last updated.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'config' => array(
        'description' => 'Serialized configuration data for the gateway.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'Active or inactive toggle for this gateway.',
        'type' => 'int',
        'default' => 1,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['term_gateway'] = array(
    'description' => 'Table to store gateway related terms.',
    'fields' => array(
      'gid' => array(
        'description' => 'The id of the payment gateway.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'The id of the taxonomy term.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('gid', 'tid'),
  );

  return $schema;
}

/**
 * Update to add gateway manager toggle on/off field.
 */
function gateway_manager_update_6301() {
  $ret = array();
  db_add_field('gateway_manager_gateways', 'status', array(
    'description' => t('Active or inactive toggle for this gateway.'),
    'type' => 'int',
    'default' => 1,
    'not null' => FALSE,
  ));
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('UPDATE {gateway_manager_gateways} SET status = 1') */
  db_update('gateway_manager_gateways')
  ->fields(array(
    'status' => 1,
  ))
  ->execute();
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}
