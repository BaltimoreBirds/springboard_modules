<?php

/**
 * @file
 * Install file for the gateway_manager module.
 */


/**
 * Implements hook_install().
 */
function gateway_manager_install() {
	drupal_install_schema('gateway_manager');
}

/**
 * Implements hook_uninstall().
 */
function gateway_manager_uninstall() {
  drupal_uninstall_schema('gateway_manager');
}

/**
 * Implements hook_schema().
 */
function gateway_manager_schema() {
  $schema['gateway_manager_gateways'] = array(
    'description' => t('Table that contains configured payment gateways.'),
    'export' => array(
      'key' => 'name',
      'identifier' => 'gateway_manager_gateway',
      'default hook' => 'default_gateway_manager_gateways',  // Function hook name.
      'api' => array(
        'owner' => 'gateway_manager',
        'api' => 'default_gateway_manager_gateways',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'id' => array(
        'description' => t('Unique payment gateway id.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => t('The machine name of the payment gateway.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'admin_title' => array(
        'description' => t('The recognizable name of the payment gateway.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('UID of the user that created the payment gateway.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gateway_type' => array(
        'description' => t('The type of payment gateway (authorizenet, cybersource, etc.).'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => t('Timestamp of when the payment gateway was created.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'updated' => array(
        'description' => t('Timestamp of when the gateway was last updated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'config' => array(
        'description' => t('Serialized configuration data for the gateway.'),
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['gateway_manager_node'] = array(
    'description' => t('Table of gateway settings for nodes.'),
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {node}.nid of the node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'method' => array(
        'description' => t('Payment method.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'gateway_instance' => array(
        'description' => t('The ID of the configured gateway.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => ''
      ),
      'label' => array(
        'description' => t('Optional label to override the default label.'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'The weight of this term in relation to other terms.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'is_default' => array(
        'description' => 'Boolean indicating if this payment type is the default selected on the form.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether this configuration is active on the form.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('nid', 'method'),
  );

  return $schema;
}

/**
 * Update to add gateway manager toggle on/off field.
 */
function gateway_manager_update_6301() {
  $ret = array();
  db_add_field($ret, 'gateway_manager_gateways', 'status', array(
        'description' => t('Active or inactive toggle for this gateway.'),
        'type' => 'int',
        'default' => 1,
        'not null' => FALSE,
      ));
  db_query('UPDATE {gateway_manager_gateways} SET status = 1');
  return $ret;
}

/**
 * Add this gateway_manager_node table
 */
function gateway_manager_update_6302() {
  $ret = array();
  $schema = gateway_manager_schema();
  db_create_table($ret, 'gateway_manager_node', $schema['gateway_manager_node']);
  return $ret;
}

/**
 * Update the gateway_manager_gateways schema to work with CTools.
 */
function gateway_manager_update_6303() {
  $ret = array();

  // Add 'admin_title' column.
  db_add_field($ret, 'gateway_manager_gateways', 'admin_title', array(
    'description' => t('The recognizable name of the payment gateway.'),
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
  ));

  // Move 'name' into 'admin_title', and make unique machine name.
  $result = db_query("SELECT * FROM {gateway_manager_gateways}");
  while ($row = db_fetch_object($result)) {
    // 'name' is now 'admin_title'.
    $row->admin_title = $row->name;
    // Make a new unique machine name.
    $row->name = preg_replace('/([^a-z0-9_]+)/i', '_', strtolower($row->name)) . '_' . $row->id;
    // Update the admin_title and name.
    db_query("UPDATE {gateway_manager_gateways} SET admin_title = '%s', name = '%s' WHERE id = %d",
      array($row->admin_title, $row->name, $row->id));
  }

  // Alter other columns to match schema.

  db_change_field($ret, 'gateway_manager_gateways', 'id', 'id', array(
    'description' => t('Unique payment gateway id.'),
    'type' => 'serial',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));

  db_change_field($ret, 'gateway_manager_gateways', 'name', 'name', array(
    'description' => t('The machine name of the payment gateway.'),
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
  ));

  db_change_field($ret, 'gateway_manager_gateways', 'uid', 'uid', array(
    'description' => t('UID of the user that created the payment gateway.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));

  // Renaming 'type' to 'gateway_type' to avoid conflict in ctools.
  db_change_field($ret, 'gateway_manager_gateways', 'type', 'gateway_type', array(
    'description' => t('The type of payment gateway (authorizenet, cybersource, etc.).'),
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
  ));

  db_change_field($ret, 'gateway_manager_gateways', 'created', 'created', array(
    'description' => t('Timestamp of when the payment gateway was created.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));

  db_change_field($ret, 'gateway_manager_gateways', 'updated', 'updated', array(
    'description' => t('Timestamp of when the gateway was last updated.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ));

  db_change_field($ret, 'gateway_manager_gateways', 'config', 'config', array(
    'description' => t('Serialized configuration data for the gateway.'),
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));

  return $ret;
}
