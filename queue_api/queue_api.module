<?php

/**
 * @file
 * API methods for interacting with the Salesforce export queue.
 *
 */


/**
 * Public queue insertion method. Performs validation logic on incoming queue requests.
 *
 * @param $oid Int Object ID
 * @param $type String Drupal Object Type
 * @param $action String create, upsert, update or delete
 * @return Bool
 */
function sf_queue_insert($oid, $type, $action) {
  /**
   * @var array
   * $queue_rules[existing][new] = decision
   * NULL means keep neither request in queue
   */
  $queue_rules = array(
    'create' => array(
      'update' => 'create',
      'upsert' => 'upsert',
      'delete' => NULL,
    ),
    'update' => array(
      'create' => 'update',
      'upsert' => 'upsert',
      'delete' => 'delete',
    ),
    'upsert' => array(
      'create' => 'upsert',
      'update' => 'upsert',
      'delete' => NULL,
    ),
    'delete' => array(
      'create' => 'delete',
      'update' => 'delete',
      'upsert' => 'delete',
    ),
  );

  $valid = TRUE;

  // make sure object is not already in the queue
  if ($pending = _in_queue($oid, $type)) {
    $watchdog = array(
      '!action' => $action,
      '!type' => $type,
      '!pending' => $pending,
      '!oid' => $oid,
    );

    // ignore duplicate actions
    if ($pending == $action) {
      $valid = FALSE;
      watchdog('salesforce queue api', t('!action requested for !type #!oid pending !pending, ignoring duplicate request'), $watchdog, WATCHDOG_INFO);
    }
    else {
      if ($queue_rules[$pending][$action] == $pending) {
        $valid = FALSE;
        watchdog('salesforce queue api', t('!action requested for !type #!oid pending !pending, ignoring new !action'), $watchdog, WATCHDOG_INFO);
      }
      elseif ($queue_rules[$pending][$action] == $action) {
        sf_queue_delete($oid, $type);
        watchdog('salesforce queue api', t('!action requested for !type #!oid pending !pending, replacing existing !pending'), $watchdog, WATCHDOG_INFO);
      }
      elseif ($queue_rules[$pending][$action] == NULL) {
        sf_queue_delete($oid, $type);
        $valid = FALSE;
        watchdog('salesforce queue api', t('!action requested for !type #!oid pending !pending, removing from queue'), $watchdog, WATCHDOG_INFO);
      }
    }
  }

  if ($valid) {
    _sf_queue_insert($oid, $type, $action);
  }

  return $valid;
}

/**
 * Internal queue insert method. Do not use directly
 *
 * @param $oid Int Object ID
 * @param $type String Drupal Object Type
 * @param $action String Create, Upsert, Update, Delete
 */
function _sf_queue_insert($oid, $type, $action) {
  // remove from retry queue
  sf_retry_queue_delete($oid, $type);
  // remove from permanent failures
  delete_from_permanent_failures($oid, $type);

  // lookup up sfid, fieldmap, and salesforce type
  $salesforce = salesforce_management_api_id_load($type, $oid);

  $record = new stdClass();
  $record->oid = $oid;
  $record->type = $type;
  $record->action = $action;
  $record->fieldmap = $salesforce['fieldmap'];
  $record->sfid = $salesforce['sfid'];
  $record->created = time();

  // allow other modules to alter the queue record before it is inserted
  drupal_alter('queue_api_insert', $record);

  drupal_write_record('sf_queue', $record);
  watchdog('salesforce queue api', t('!type !oid successfully added to the salesforce queue.', array('!type' => ucfirst($type), '!oid' => $oid)), NULL, WATCHDOG_INFO);
}

/**
 * Removes an item from the queue.
 */
function sf_queue_delete($oid, $type) {
  db_query("DELETE FROM {sf_queue} WHERE oid = '%s' AND type = '%s'", $oid, $type);
}

/**
 * Removes an item from the retry queue
 */
function sf_retry_queue_delete($oid, $type) {
  if (_in_retry_queue($oid, $type)) {
    db_query("DELETE FROM {sf_retry_queue} WHERE oid = '%s' AND type = '%s'", $oid, $type);
    watchdog('salesforce queue api', t('!type !oid removed from retry queue because it has been inserted into the normal queue', array('!type' => ucfirst($type), '!oid' => $oid)), NULL, WATCHDOG_INFO);
  }
}

/**
 * Determines whether or not an object is already in the queue. Prevents multiple records.
 */
function _in_queue($oid, $type) {
  $result = db_query("SELECT action FROM {sf_queue} WHERE oid = '%s' AND type = '%s'", $oid, $type);
  if (!$data = db_fetch_array($result)) {
    return FALSE;
  }

  return $data['action'];
}

/**
 * Determines whether or not an object is already in the retry queue.
 */
function _in_retry_queue($oid, $type) {
  $result = db_query("SELECT id FROM {sf_retry_queue} WHERE oid = '%s' AND type = '%s'", $oid, $type);
  if (!$data = db_fetch_array($result)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Determines whether or not an object is already on the heap. Prevents multiple records.
 */
function _in_heap($oid, $type) {
  $result = db_query("SELECT id FROM {sf_heap} WHERE oid = '%s' AND type = '%s'", $oid, $type);
  if (!$data = db_fetch_array($result)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Deletes and object from permanent failure
 */
function delete_from_permanent_failures($oid, $type) {
  db_query("DELETE FROM {sf_permanent_failure} WHERE oid = '%s' AND type = '%s'", $oid, $type);
}
