<?php
// $Id$

/**
 * @file
 * Provides a way to track which campaigns and market sources drive users to the
 * site.
 */

define('MARKET_SOURCE_MS_MAX_LENGTH', 255);
define('MARKET_SOURCE_CID_MAX_LENGTH', 255);
define('MARKET_SOURCE_REFERRER_MAX_LENGTH', 255);
define('MARKET_SOURCE_INITIAL_REFERRER_MAX_LENGTH', 255);

/**
 * Implementation of hook_menu().
 */
function market_source_menu() {
  $items = array();

  $items['admin/settings/market-source'] = array(
    'title' => 'Market Source',
    'description' => 'Configuration settings for the Market Source module.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('market_source_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'market_source.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_boot().
 */
function market_source_boot() {
//  drupal_set_message('blah', 'error');

  // Check to see if the market source values should expire.
  if (variable_get('market_source_validity_period', 0) != 0) {
    if (!isset($_SESSION['market_source_expiry_date'])) {
      // Set the expiry date to the current datetime + validity period.
      $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
    }
    else {
      // Check to see if the expiry date has passed.
      if (isset($_SESSION['market_source_expiry_date']) && $_SESSION['market_source_expiry_date'] < time()) {
        unset($_SESSION['ms']);
        unset($_SESSION['cid']);
        unset($_SESSION['referrer']);
        unset($_SESSION['initial_referrer']);
      }
    }
  }

  // Pull the values from the cookies set via JavaScript, if any.
  if (isset($_COOKIE['market_source_ms']) && $_COOKIE['market_source_ms'] != '' && preg_match('/^[a-zA-Z0-9_+-]+$/', $_COOKIE['market_source_ms']) && strlen($_COOKIE['market_source_ms']) <= MARKET_SOURCE_MS_MAX_LENGTH) {
    $_SESSION['ms'] = $_COOKIE['market_source_ms'];
    $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
  }

  if (isset($_COOKIE['market_source_cid']) && market_source_is_valid_cid($_COOKIE['market_source_cid'])) {
    $_SESSION['cid'] = $_COOKIE['market_source_cid'];
    $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
  }

  if (isset($_COOKIE['market_source_initial_referrer']) && $_COOKIE['market_source_initial_referrer'] != '') {
    $_SESSION['initial_referrer'] = substr($_COOKIE['market_source_initial_referrer'], 0, MARKET_SOURCE_INITIAL_REFERRER_MAX_LENGTH);
    $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
  }

  // Pull the values from the current request, if any.
  foreach ($_GET as $key => $val) {
    if (strtolower($key) == 'ms' && $val != '' && preg_match('/^[a-zA-Z0-9_+-]+$/', $val) && strlen($val) <= MARKET_SOURCE_MS_MAX_LENGTH) {
      $_SESSION['ms'] = $val;
      $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
      continue;
    }

    if (strtolower($key) == 'cid' && market_source_is_valid_cid($val)) {
      $_SESSION['cid'] = $val;
      $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
      continue;
    }
  }

  if (!isset($_SESSION['initial_referrer'])) {
    $_SESSION['initial_referrer'] = isset($_SERVER['HTTP_REFERER']) ? substr($_SERVER['HTTP_REFERER'], 0, MARKET_SOURCE_INITIAL_REFERRER_MAX_LENGTH) : '';
    $_SESSION['market_source_expiry_date'] = time() + (variable_get('market_source_validity_period', 0) * 3600);
  }

  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    $_SESSION['referrer'] = isset($_SERVER['HTTP_REFERER']) ? substr($_SERVER['HTTP_REFERER'], 0, MARKET_SOURCE_REFERRER_MAX_LENGTH) : '';
  }
}

/** 
 * Function to make sure a campaign id is valid
 */
function market_source_is_valid_cid($val) {
	
	// make sure value is not empty
	if ($val == '') { 
		return false; 
	}
	
	// make sure it only contains valid characters
	if (!preg_match('/^[a-zA-Z0-9_+-]+$/', $val)) 
	{ 
		return false; 
	}
	
	// make sure it doesn't exceed max length
	if (strlen($val) > MARKET_SOURCE_CID_MAX_LENGTH) { 
		return false; 
	}
	
	// made it this far, good to go
	return true;
	
}

/**
 * Implementation of hook_init().
 */
function market_source_init() {
  // Add some JavaScript for pages in case they get cached.
  $script = market_source_get_script();
  drupal_add_js($script, 'inline', 'footer');
}

/**
 * Implementation of hook_user().
 */
function market_source_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'register') {
    $form = array();

    if (market_source_get_ms()) {
      $form['profile_ms'] = array(
        '#type' => 'hidden',
        '#value' => market_source_get_ms(),
      );
      $form['ms'] = $form['profile_ms'];
    }

    if (market_source_get_cid()) {
      $form['profile_cid'] = array(
        '#type' => 'hidden',
        '#value' => market_source_get_cid(),
      );
      $form['cid'] = $form['profile_cid'];
    }

    if (market_source_get_referrer()) {
      $form['profile_referrer'] = array(
        '#type' => 'hidden',
        '#value' => market_source_get_referrer(),
      );
      $form['referrer'] = $form['profile_referrer'];
    }

    if (market_source_get_initial_referrer()) {
      $form['profile_initial_referrer'] = array(
        '#type' => 'hidden',
        '#value' => market_source_get_initial_referrer(),
      );
      $form['initial_referrer'] = $form['profile_initial_referrer'];
    }

    return $form;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function market_source_form_alter(&$form, $form_state, $form_id) {
  if (!isset($form['submission']) 
      && module_exists('webform') 
      && (strpos($form_id, 'webform') === 0)
      && (('submission' != arg(2)) && ('edit' == arg(4))) // This check ensures that we don't modify a submissions's values on edit
      ) {
    if (isset($form['submitted']['ms']) && market_source_get_ms() != '') {
      $form['submitted']['ms']['#value'] = market_source_get_ms();
    }

    if (isset($form['submitted']['cid']) && market_source_get_cid() != '') {
      $form['submitted']['cid']['#value'] = market_source_get_cid();
    }

    if (isset($form['submitted']['referrer']) && market_source_get_referrer() != '') {
      $form['submitted']['referrer']['#value'] = market_source_get_referrer();
    }

    if (isset($form['submitted']['initial_referrer']) && market_source_get_initial_referrer() != '') {
      $form['submitted']['initial_referrer']['#value'] = market_source_get_initial_referrer();
    }
  }
  
  // Expose Market Source fields for editting
  if (strstr($form_id, 'webform_client_form')) {    
    if (arg(2) == 'submission') {
    	// Moving these makes it easier to read the form - things are more neatly ordered
      $form['submitted']['mail']['#weight'] = -100;
      $form['submitted']['personal_information']['#weight'] = 100;
      
      $form['submitted']['ms']['#type'] = 'textfield';
      $form['submitted']['cid']['#type'] = 'textfield';
      $form['submitted']['referrer']['#type'] = 'textfield';
      $form['submitted']['initial_referrer']['#type'] = 'textfield';
    }
  }
}

/**
 * Fetches the user's referring market source (if any).
 *
 * @return string
 *   The referring market source. If not set, returns a blank string.
 */
function market_source_get_ms() {
  return isset($_SESSION['ms']) ? $_SESSION['ms'] : '';
}

/**
 * Fetches the user's referring campaign ID (if any).
 *
 * @return string
 *   The referring campaign ID. If not set, returns a blank string.
 */
function market_source_get_cid() {

  if (isset($_SESSION['cid'])) {
		// save SF for last, since it is most intensive
		$validate_salesforce = variable_get('market_source_validate_sf_campaigns', 0);
		if ($validate_salesforce) {
			$campaigns = salesforce_management_api_get_campaigns();
			return array_key_exists($_SESSION['cid'], $campaigns) ? $_SESSION['cid'] : '';
		} 
		else {
			return $_SESSION['cid'];
		} 
  }
  else {
  	return '';
  }
}

/**
 * Fetches the user's referring URL (if any).
 *
 * @return string
 *   The referring URL. If not set, returns a blank string.
 */
function market_source_get_referrer() {
  return isset($_SESSION['referrer']) ? $_SESSION['referrer'] : '';
}

/**
 * Fetches the user's initial referring URL (if any).
 *
 * @return string
 *   The initial referring URL. If not set, returns a blank string.
 */
function market_source_get_initial_referrer() {
  return isset($_SESSION['initial_referrer']) ? $_SESSION['initial_referrer'] : '';
}

function market_source_get_script() {
  if (variable_get('market_source_validity_period', 0) != 0) {
    $validity_period = variable_get('market_source_validity_period', 0) / 24;
  }

  $script = <<<MS_SCRIPT
/**
 * helper functions borrowed from http://www.quirksmode.org/js/cookies.html
 */

function createCookie(name, value, days) {
	if (days) {
		var date = new Date();
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		var expires = "; expires=" + date.toGMTString();
	}
	else {
    var expires = "";
  }

	document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');

	for(var i = 0; i < ca.length; i++) {
		var c = ca[i];

		while (c.charAt(0) == ' ') {
      c = c.substring(1, c.length);
    }

		if (c.indexOf(nameEQ) == 0) {
      return c.substring(nameEQ.length, c.length);
    }
	}

	return null;
}

function eraseCookie(name) {
	createCookie(name, "", -1);
}


/**
 * helper function from http://prettycode.org/2009/04/21/javascript-query-string/
 */

window.location.querystring = (function() {
  var collection = {};

  // Gets the query string, starts with '?'
  var querystring = window.location.search;

  // Empty if no query string
  if (!querystring) {
    return { toString: function() { return ""; } };
  }

  // Decode query string and remove '?'
  querystring = decodeURI(querystring.substring(1));

  // Load the key/values of the return collection
  var pairs = querystring.split("&");

  for (var i = 0; i < pairs.length; i++) {
    // Empty pair (e.g. ?key=val&&key2=val2)
    if (!pairs[i]) {
      continue;
    }

    // Don't use split("=") in case value has "=" in it
    var seperatorPosition = pairs[i].indexOf("=");

    if (seperatorPosition == -1) {
      collection[pairs[i]] = "";
    }
    else {
      collection[pairs[i].substring(0, seperatorPosition)] = pairs[i].substr(seperatorPosition + 1);
    }
  }

  // toString() returns the key/value pairs concatenated
  collection.toString = function() {
    return "?" + querystring;
  };

  return collection;
})();


/**
 * custom code for market_source
 */

jQuery(document).ready(function() {
  var querystring = window.location.querystring;

  if (querystring["ms"]) {
    createCookie("market_source_ms", querystring["ms"], ${validity_period});
  }

  if (querystring["cid"]) {
    createCookie("market_source_cid", querystring["cid"], ${validity_period});
  }

  if (readCookie("market_source_initial_referrer") == null) {
    createCookie("market_source_initial_referrer", document.referrer, ${validity_period});
  }
});
MS_SCRIPT;

  return $script;
}