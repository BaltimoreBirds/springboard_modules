<?php
/**
 * @file
 * Code for the Springboard peer to peer feature.
 */

define('SPRINGBOARD_P2P_ROLE', 'Springboard P2P campaigner');

include_once 'springboard_p2p.features.inc';

/**
 * Implements hook_permission().
 */
function springboard_p2p_permission() {
  return array(
    'administer springboard p2p' => array(
      'title' => t('Administer springboard peer to peer.'),
    ),
    'register for springboard p2p' => array(
      'title' => t('Register for springboard peer to peer.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_p2p_menu() {
  $items = array();

  $items['admin/springboard/p2p'] = array(
    'title' => 'Springboard peer to peer',
    'page callback' => 'springboard_p2p_dashboard',
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    'access arguments' => array('administer springboard p2p'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/springboard/p2p/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
  );

  $items['admin/springboard/p2p/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_admin_settings'),
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  // P2P Rules administration page.
  if (module_exists('rules')) {
    $items['admin/springboard/p2p/rules'] = array(
      'title' => 'Rules',
      'type' => MENU_LOCAL_TASK,
      'description' => 'Enable and configure P2P rule configurations.',
      'page callback' => 'springboard_p2p_rules_admin_page',
      'access arguments' => array('administer springboard p2p'),
      'file' => 'springboard_p2p.rules_admin.inc',
      'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    );

    // Add the menu items for the various Rules forms.
    $controller = new RulesUIController();
    $items += $controller->config_menu('admin/springboard/p2p/rules');

    $items['admin/springboard/p2p/rules/add'] = array(
      'title' => 'Add a P2P rule',
      'description' => 'Adds an additional P2P rule configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('springboard_p2p_add_rule_form', 'admin/springboard/p2p/rules'),
      'access arguments' => array('administer springboard p2p'),
      'file path' => drupal_get_path('module', 'rules_admin'),
      'file' => 'rules_admin.inc',
    );
  }

  // @todo Development stuff.  Remove me eventually.
  $items['admin/springboard/p2p/development'] = array(
    'title' => 'Development',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_development_settings'),
    'file' => 'springboard_p2p.development.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['springboard_p2p/register'] = array(
    'title' => 'Register',
    'type' => MENU_CALLBACK,
    'access arguments' => array('register for springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_register_page'),
    'file' => 'springboard_p2p.register.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  if (module_exists('fboauth')) {
    $items['springboard_p2p/fb'] = array(
      'title' => 'Facebook',
      'type' => MENU_CALLBACK,
      'access arguments' => array('register for springboard p2p'),
      'page callback' => 'springboard_p2p_fb_page',
      'file' => 'springboard_p2p.fboauth.inc',
      'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    );
  }

  $items['springboard_p2p/dashboard/%user'] = array(
    'title' => 'My Campaigns',
    'page callback' => 'springboard_p2p_personal_dashboard',
    'page arguments' => array(2),
    'access callback' => 'springboard_p2p_personal_dashboard_view_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['springboard_p2p/development/create_personal_campaign/%node'] = array(
    'title' => 'Crete personal campaign',
    'page callback' => 'springboard_p2p_create_personal_campaign',
    'page arguments' => array(3),
    // @todo
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['user/%user/complete-p2p-profile'] = array(
    'title' => 'Complete your profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_complete_profile_form', 1),
    'access callback' => 'springboard_p2p_complete_profile_form_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    'file' => 'springboard_p2p.profile.inc',
  );

  $items['springboard_p2p/password/%user'] = array(
    'title' => 'Password reset email',
    'page callback' => 'springboard_p2p_request_password_reset_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.password.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['springboard_p2p/set_password/%/%/%'] = array(
    'title' => 'Set password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_set_password_form', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.password.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function springboard_p2p_theme() {
  return array(
    'springboard_p2p_admin_settings' => array(
      'render element' => 'form',
      'file' => 'springboard_p2p.admin.inc',
      'path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View.
 */
function springboard_p2p_form_views_form_p2p_user_approval_page_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View and add a submit function so it will
 * redirect back to the admin dashboard.
 */
function springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
  $form['#submit'][] = 'springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_submit';
}

/**
 * Submit handler for the approval queue View to go back to the dashboard.
 */
function springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/springboard/p2p';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View.
 */
function springboard_p2p_form_views_form_p2p_user_approval_block_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_campaign_node_form_alter(&$form, &$form_state, $form_id) {

  if (springboard_p2p_form_is_node_create($form)) {
    $ajax_trigger = 'field_p2p_category';
    $ajax_wrapper = 'p2p-category-ajax-wrapper';

    $lang_code = $form['#node']->language;

    $form[$ajax_trigger][$lang_code]['#ajax'] = array(
      'callback' => 'springboard_p2p_ajax',
      'wrapper' => $ajax_wrapper,
      'effect' => 'fade',
    );

    // Set ajax target div.
    $form['#prefix'] = '<div id="' . $ajax_wrapper . '">';
    $form['#suffix'] = '</div>';

    // If we're ajaxing from the category selection and it's a non-empty
    // category value.
    if (isset($form_state['triggering_element']['#field_name']) && $form_state['triggering_element']['#field_name'] == $ajax_trigger && isset($form_state['input'][$ajax_trigger][$lang_code]) && is_numeric($form_state['input'][$ajax_trigger][$lang_code])) {
      $category = node_load($form_state['input'][$ajax_trigger][$lang_code]);

      $checkboxes = array(
        'field_p2p_personal_intro_edit',
        'field_p2p_images_edit',
        'field_p2p_video_embed_edit',
      );

      foreach ($checkboxes as $checkbox) {
        unset($form_state['input'][$checkbox][$lang_code]);
        $form[$checkbox][$lang_code]['#default_value'] = $category->{$checkbox}[$lang_code][0]['value'];
      }

      $textareas = array(
        'field_p2p_personal_intro',
        'field_p2p_org_intro',
      );

      foreach ($textareas as $field_name) {
        if (isset($category->{$field_name}[$lang_code][0])) {
          $content = $category->{$field_name}[$lang_code][0];
          unset($form_state['input'][$field_name][$lang_code][0]['value']);
          $form[$field_name][$lang_code][0]['#default_value'] = $content['value'];
          unset($form_state['input'][$field_name][$lang_code][0]['format']);
          $form[$field_name][$lang_code][0]['#format'] = $content['format'];
        }
      }

      if (isset($category->field_p2p_form_header[$lang_code][0])) {
        $form_header = $category->field_p2p_form_header[$lang_code][0];
        unset($form_state['input']['field_p2p_form_header'][$lang_code][0]);
        $form['field_p2p_form_header'][$lang_code][0]['#default_value']['fid'] = $form_header['fid'];
      }

      if (isset($category->field_p2p_video_embed[$lang_code][0])) {
        $video_embed = $category->field_p2p_video_embed[$lang_code][0];
        unset($form_state['input']['field_p2p_video_embed'][$lang_code][0]);
        $form['field_p2p_video_embed'][$lang_code][0]['video_url']['#default_value'] = $video_embed['video_url'];
      }

      // Personal campaign default images.
      // Has multiple values.
      if (isset($category->field_p2p_images[$lang_code]) && count($category->field_p2p_images[$lang_code] > 1)) {
        $category_images = $category->field_p2p_images[$lang_code];

        // Remove the "upload a new file" row.
        array_pop($category_images);

        unset($form_state['input']['field_p2p_images']);

        // Get the "upload a new file" row before destroying everything.
        $children_keys = element_children($form['field_p2p_images'][$lang_code]);
        $max = max($children_keys);
        $upload_row = $form['field_p2p_images'][$lang_code][$max];

        // In #default_value
        // set the fid, uid, filename
        // remove display, description
        // add uri, filemime, filesize, status, timestamp, rdf mapping
        //
        // Set #weight to $delta
        // remove #file_upload_delta, #theme, #theme_wrappers, #process, #title,
        // #description, #field_name, #language, #display_field,
        // #file_upload_title, #file_upload_description, #after_build,
        // #field_parents
        $image_row = $upload_row;
        unset($image_row['#default_value']);
        unset($image_row['#weight']);
        // unset($image_row['#file_upload_delta']);
        // unset($image_row['#theme']);
        // unset($image_row['#theme_wrappers']);
        // unset($image_row['#process']);
        // unset($image_row['#title']);
        // unset($image_row['#description']);
        // unset($image_row['#field_name']);
        // unset($image_row['#language']);
        // unset($image_row['#display_field']);
        // unset($image_row['#file_upload_title']);
        // unset($image_row['#file_upload_description']);
        // unset($image_row['#after_build']);
        foreach ($category_images as $delta => $image) {
          $form['field_p2p_images'][$lang_code][$delta] = $image_row;
          $form['field_p2p_images'][$lang_code][$delta]['#default_value'] = $image;
          $form['field_p2p_images'][$lang_code][$delta]['#weight'] = $delta;
        }

        // Put the last row back on.
        $last_delta = count($form['field_p2p_images'][$lang_code]);
        $form['field_p2p_images'][$lang_code][$last_delta] = $upload_row;
      }
    }
  }
}

/**
 * AJAX callback for prefilling content when a category is selected.
 */
function springboard_p2p_ajax($form, $form_state) {
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_personal_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  if (springboard_p2p_form_is_node_create($form)) {
    $campaign = isset($_GET['campaign']) ? $_GET['campaign'] : FALSE;
    if ($campaign && is_numeric($campaign)) {
      $campaign_node = node_load($campaign);
      $form['title']['#default_value'] = $campaign_node->title;
      $form['body'][$campaign_node->language][0]['#default_value'] = $campaign_node->field_p2p_personal_intro[$campaign_node->language][0]['value'];
      $can_edit_body = $campaign_node->field_p2p_personal_intro_edit[$campaign_node->language][0]['value'];
      if (!$can_edit_body) {
       // $form['body'][$campaign_node->language][0]['#access'] = FALSE;
        $form['body']['display'] = array(
          '#title' => $form['body'][$campaign_node->language][0]['#title'],
          '#type' => 'textarea',
          '#default_value' => $form['body'][$campaign_node->language][0]['#default_value'],
          '#disabled' => TRUE,
        );
      }
      $form['field_p2p_campaign'][$campaign_node->language]['#default_value'] = $campaign_node->nid;
      // images
      $empty_image = $form['field_p2p_campaign_images'][$campaign_node->language][0];
      foreach($campaign_node->field_p2p_campaign_images[$campaign_node->language] as $index => $image) {
        if (!isset($form['field_p2p_campaign_images'][$campaign_node->language][$index])) {
          $form['field_p2p_campaign_images'][$campaign_node->language][$index] = $form['field_p2p_campaign_images'][$campaign_node->language][0];
        }
        $form['field_p2p_campaign_images'][$campaign_node->language][$index]['#default_value']['fid'] = $image['fid'];
        $form['field_p2p_campaign_images'][$campaign_node->language][$index]['#default_value']['display'] = TRUE;
      }
      $form['field_p2p_campaign_images'][$campaign_node->language][$index + 1] = $empty_image;
    }
  }
  else {
    $campaign_node = node_load($form['nid']['#value']);
  }
  $form['campaign_node'] = array(
    '#type' => 'value',
    '#value' => $campaign_node,
  );
  $form['field_personal_campaign_url'][$campaign_node->language][0]['value']['#field_prefix'] = '<span>' . $GLOBALS['base_url'] . '/</span>';
  // Node create form.
  $form['#validate'][] = 'springboard_p2p_personal_campaign_validate';
  $form['#submit'][] = 'springboard_p2p_personal_campaign_submit';
}

function springboard_p2p_personal_campaign_validate(&$form, $form_state) {
  // Validate campaign url alias for uniqueness.
  $campaign_node = $form_state['values']['campaign_node'];
  $path = $form_state['values']['field_personal_campaign_url'][$campaign_node->language][0]['value'];
  if (drupal_lookup_path('source', $path)) {
    form_set_error('field_personal_campaign_url', t('This url is already in use.'));
  }
}

function springboard_p2p_personal_campaign_submit($form, $form_state) {

}

function springboard_p2p_node_insert($node) {
  if ($node->type == 'p2p_personal_campaign') {
    // manage url alias for personal campaign node type
    $alias = $node->field_personal_campaign_url[$node->language][0]['value'];
    if ($alias) {
      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => $alias,
      );
      path_save($path);
    }
  }
}

function springboard_p2p_node_update($node) {
  // manage url alias for personal campaign node type
  if ($node->type == 'p2p_personal_campaign') {
    $alias = $node->field_personal_campaign_url[$node->language][0]['value'];
    if ($alias) {
      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => $alias,
      );
      // Force an update if path settings already exist for this node.
      if (isset($node->path['pid']) && $node->path['pid']) {
        $path['pid'] = $node->path['pid'];
      }
      path_save($path);
    }
  }
}

/**
 * Determine if the form we're altering is a node create (and not edit) form.
 *
 * @param array $form
 *   The forms api array.
 *
 * @return bool
 *   TRUE if this is node create, not node edit, and not a preview.
 */
function springboard_p2p_form_is_node_create($form) {
  return empty($form['nid']['#value']) && (!isset($form['#node']->op));
}

/**
 * Get all campaigns that are set to require approval.
 *
 * @return array
 *   The loaded campaign entities, keyed by nid.
 */
function springboard_p2p_get_private_campaigns() {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_campaign')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_p2p_campaigns_approval', 'value', 1, '=')
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Get the personal campaigns related to a given campaign.
 *
 * @param int $nid
 *   The nid of the p2p Campaign.
 *
 * @return array
 *   The loaded personal campaign entities, keyed by nid.
 */
function springboard_p2p_get_personal_campaigns($nid) {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_personal_campaign')
    ->fieldCondition('field_p2p_campaign', 'target_id', $nid, '=')
    ->propertyOrderBy('created', 'DESC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Checks if any content types have been enabled for p2p campaign goals.
 *
 * @return bool
 *   TRUE if no content types are enabled for p2p goals.
 */
function springboard_p2p_no_content_types_enabled() {

  $fundraiser = variable_get('springboard_p2p_fundraiser_items', array());
  $webform_user = variable_get('springboard_p2p_webform_user_items', array());

  return (empty($fundraiser) && empty($webform_user));
}

/**
 * Get the enabled goal type from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return string
 *   'submissions' or 'amount'
 */
function springboard_p2p_get_goal_type_from_campaign($campaign) {
  $goal = springboard_p2p_get_goal_from_campaign($campaign);
  return $goal['goal_type'];
}

/**
 * Get the goal value for the enabled goal from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return int
 *   Dollar amount or number of submissions.
 */
function springboard_p2p_get_goal_value_from_campaign($campaign) {
  $goal = springboard_p2p_get_goal_from_campaign($campaign);
  return $goal['goal_value'];
}

/**
 * Get the enabled goal data from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return array
 *   An array with 'goal_type' and 'goal_value" keys, and optionally other
 *   goal data.
 *
 * @todo This only handles a single enabled goal.
 */
function springboard_p2p_get_goal_from_campaign($campaign) {
  $goal_set_id = $campaign->field_p2p_campaign_goals[$campaign->language][0]['goal_set_id'];
  $goals_field = new SpringboardP2pCampaignGoalsField();
  $goals = $goals_field->load($goal_set_id);
  foreach ($goals as $goal) {
    if ($goal['enabled']) {
      return $goal;
    }
  }

  // Somewhat safe default.
  return array(
    'goal_type' => 'submissions',
    'goal_value' => 0,
  );
}

/**
 * Formats the goal progress according to its goal type.
 *
 * @param array $progress
 *   An array with 'submissions' and 'amount' keys and their goal values.
 * @param string $type
 *   The goal type.
 * @param bool $include_units
 *   Whether to include a prefix/suffix with the goal units.
 *
 * @return string
 *   The formatted value.
 */
function springboard_p2p_format_progress($progress, $type, $include_units = TRUE) {
  $output = '';

  switch ($type) {
    case 'submissions':
      $output .= number_format($progress['submissions']);
      if ($include_units) {
        $output .= ' submissions';
      }
      break;

    case 'amount':
      if ($include_units) {
        $output .= '$ ';
      }
      $output .= number_format($progress['amount'], 2);
      break;
  }

  return $output;
}

/**
 * Formats the percent complete of a goal.
 *
 * @param int $progress
 *   The number of submissions/amount of the current progress.
 * @param int $goal
 *   The goal value.
 *
 * @return string
 *   The formatted integer value with a percent sign.
 */
function springboard_p2p_format_percent($progress, $goal) {
  if ($goal > 0) {
    return (int) ($progress / $goal * 100) . ' %';
  }

  return '0 %';
}

/**
 * Access handler for personal campaign pages.
 *
 * @see user_view_access($account)
 */
function springboard_p2p_personal_dashboard_view_access($account) {
  return springboard_p2p_complete_profile_form_access($account);
}

/**
 * Implements hook_fboauth_user_presave().
 *
 * Change the username to the email address.  Also save a random password
 * if one doesn't exist.
 */
function springboard_p2p_fboauth_user_presave(&$edit, $fbuser) {
  if (!empty($edit['mail'])) {
    $edit['name'] = $edit['mail'];
  }

  if (empty($edit['pass'])) {
    $edit['pass'] = user_password();
  }
}

/**
 * Access callback for the complete profile form.
 */
function springboard_p2p_complete_profile_form_access($account) {
  if (empty($account->uid)) {
    return FALSE;
  }
  elseif (user_access('administer users')) {
    return TRUE;
  }
  else {
    return $GLOBALS['user']->uid == $account->uid;
  }
}

/**
 * Check if the entity has empty required fields.
 *
 * @param object $entity
 *   The user object.
 *
 * @return bool
 *   TRUE if the user has empty fields that are required.
 */
function springboard_p2p_complete_profile_user_has_empty_required_fields($entity) {
  $entity_type = 'user';

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);

  $required_fields = springboard_p2p_get_required_registration_fields();

  foreach ($instances as $field_name => $instance) {
    // Only check required fields.
    if (!empty($required_fields[$field_name])) {
      // Check if the required field is empty.
      if (springboard_p2p_complete_profile_field_is_empty($entity_type, $entity, $instance['field_name'])) {
        // Check that the user can actually edit their missing field.
        if (field_access('edit', field_info_field($instance['field_name']), $entity_type, $entity, $entity)) {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Check if a field module field is empty.
 *
 * @param string $entity_type
 *   Should be 'user' for our purposes.
 * @param object $entity
 *   The user object.
 * @param string $field_name
 *   The name of the field to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function springboard_p2p_complete_profile_field_is_empty($entity_type, $entity, $field_name) {
  if (!isset($entity->{$field_name})) {
    return TRUE;
  }

  if ($items = field_get_items($entity_type, $entity, $field_name)) {
    // @todo Do we need to run filtering on values?
    // $field = field_info_field($field_name);
    // $items = _field_filter_items($field, $items);
    return empty($items);
  }

  return TRUE;
}

/**
 * Get the values for a drupal_goto() to the p2p complete profile page.
 *
 * @return array
 *   An array with path and options keys for use in drupal_goto().
 */
function springboard_p2p_complete_profile_get_redirect() {
  $redirect = array();
  $redirect['path'] = 'user/' . $GLOBALS['user']->uid . '/complete-p2p-profile';
  $redirect['options'] = array('query' => array());

  $destination = drupal_get_destination();
  // Unset the global destination since we don't want drupal_goto() to read
  // it and since we're passing the destination into the query string again.
  unset($_GET['destination']);
  $redirect['options']['query'] += $destination;

  return $redirect;
}

/**
 * Get only the reg fields that have been enabled in the p2p settings.
 *
 * @return array
 *   The enabled profile fields.
 */
function springboard_p2p_get_enabled_registration_fields() {
  $fields = variable_get('springboard_p2p_registration_fields', array());

  foreach ($fields as $key => $field) {
    if (!$field['enabled']) {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Get only the reg fields that are enabled and required in the p2p settings.
 *
 * @return array
 *   The required profile fields.
 */
function springboard_p2p_get_required_registration_fields() {
  $fields = springboard_p2p_get_enabled_registration_fields();

  foreach ($fields as $key => $field) {
    if (!$field['required']) {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Make a registration field on the p2p register page required or not.
 *
 * The registration fields are nested and weird, so I try to do this in a very
 * general way to handle custom user profile fields.
 *
 * @param array $form
 *   The form array for the p2p register page.
 * @param string $field_name
 *   The name of the field to make required.
 * @param bool $required
 *   The value for #required.
 */
function springboard_p2p_set_registration_field_required(&$form, $field_name, $required = TRUE) {
  $field_language = $form[$field_name]['#language'];
  $form[$field_name][$field_language]['#required'] = $required;
  $keys = element_children($form[$field_name][$field_language]);
  foreach ($keys as $key) {
    $form[$field_name][$field_language][$key]['#required'] = $required;
    if (isset($form[$field_name][$field_language][$key]['value'])) {
      $form[$field_name][$field_language][$key]['value']['#required'] = $required;
    }
  }
}

/**
 * Add the campaign ID value form element and submit handler to a form.
 *
 * The submit handler should happen last because it sets the redirect and should
 * override any other redirects.  So call this near the end of the form.
 *
 * @param array $form
 *   The form array to insert the element into.
 */
function springboard_p2p_campaign_id_form_element(&$form) {
  $form['springboard_p2p_campaign_nid'] = array(
    '#type' => 'value',
    '#value' => springboard_p2p_get_campaign_id_from_request(),
  );

  // This handler changes the redirect.
  $form['#submit'][] = 'springboard_p2p_set_redirect';
}

/**
 * Gets a campaign ID from the URL.
 *
 * @return int|null
 *   The campaign ID, or NULL if one can't be found.
 */
function springboard_p2p_get_campaign_id_from_request() {
  if (isset($_GET['campaign']) && is_numeric($_GET['campaign'])) {
    return $_GET['campaign'];
  }

  return NULL;
}

/**
 * Submit handler.
 *
 * Saves the campaign approval status and changes the redirect.
 */
function springboard_p2p_set_redirect($form, &$form_state) {

  if (!empty($form_state['uid'])) {
    $uid = $form_state['uid'];
  }
  elseif (!empty($form_state['user']->uid)) {
    $uid = $form_state['user']->uid;
  }
  else {
    // Bail!
    return;
  }

  // Default destination if nothing else works.
  $form_state['redirect'] = 'springboard_p2p/dashboard/' . $uid;

  if (!empty($form_state['values']['springboard_p2p_campaign_nid'])) {
    $campaign_id = $form_state['values']['springboard_p2p_campaign_nid'];
    $campaign = node_load($campaign_id);
    if ($campaign->type == 'p2p_campaign') {
      $private = springboard_p2p_campaign_is_private($campaign);

      $approval = new SpringbaordP2pPrivateCampaignApproval($uid, $campaign_id);

      if ($private) {
        $approval->request();
        drupal_set_message('You have been added to the approval queue for ' . $campaign->title);
        $form_state['redirect'] = 'springboard_p2p/dashboard/' . $uid;

        $account = user_load($uid);

        $event = new SpringboardP2pEvents();
        $event->userRequestsApprovalForPrivateCampaign($account, $campaign);
      }
      else {
        $approval->approve();
        drupal_set_message('You can now create a personal campaign in ' . $campaign->title);
        $form_state['redirect'] = 'springboard_p2p/development/create_personal_campaign/' . $campaign_id;
      }
    }
  }
}

/**
 * Determines if a p2p campaign node is private (approval required).
 *
 * @param object $campaign
 *   The campaign node object.
 *
 * @return bool
 *   TRUE if the campaign is private.
 */
function springboard_p2p_campaign_is_private($campaign) {
  if (!empty($campaign->field_p2p_campaigns_approval[$campaign->language][0]['value'])) {
    return (bool) $campaign->field_p2p_campaigns_approval[$campaign->language][0]['value'];
  }

  return FALSE;
}

/**
 * Is the user registered for p2p.
 *
 * @param int $uid
 *   User ID.
 *
 * @return bool
 *   TRUE if the user is registered for p2p.
 */
function springboard_p2p_user_is_registered_for_p2p($uid) {
  $account = user_load($uid);
  $role = user_role_load_by_name(SPRINGBOARD_P2P_ROLE);

  return in_array($role->rid, array_keys($account->roles));
}

/**
 * Registers user for p2p.
 *
 * @param int $uid
 *   User ID.
 */
function springboard_p2p_register_user_for_p2p($uid) {
  $role = user_role_load_by_name(SPRINGBOARD_P2P_ROLE);
  $account = user_load($uid);
  $roles = $account->roles + array($role->rid => $role->name);
  // For efficiency manually save the original account before applying
  // any changes.
  $account->original = clone $account;
  user_save($account, array('roles' => $roles));
}

/**
 * Implements hook_mail().
 */
function springboard_p2p_mail($key, &$message, $params) {
  switch ($key) {
    case 'password_reset':
      springboard_p2p_password_reset_mail($message, $params);
      break;

    case 'new_user':
      springboard_p2p_new_user_mail($message, $params);
      break;

    case 'new_user_private_campaign':
      springboard_p2p_new_user_private_campaign_mail($message, $params);
      break;

    case 'user_requests_approval':
      springboard_p2p_user_requests_approval_mail($message, $params);
      break;

    case 'admin_approval_request':
      springboard_p2p_admin_approval_request_mail($message, $params);
      break;

  }
}

/**
 * Mail template to send to a user who needs a password reset.
 *
 * @see springboard_p2p_mail()
 */
function springboard_p2p_password_reset_mail(&$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('P2P password reset', $options);
  $message['body'][] = t('Here is your password reset link.', $options);
  $message['body'][] = springboard_p2p_set_password_url($params['account']);
}

/**
 * Provides a custom url for setting a password in the context of p2p.
 *
 * @param object $account
 *   The user that needs to set a password.
 *
 * @return string
 *   The URL to the P2P set password page for the account.
 */
function springboard_p2p_set_password_url($account) {
  $url = user_pass_reset_url($account);
  return str_replace('user/reset/', 'springboard_p2p/set_password/', $url);
}

/**
 * Mail template to send to a user who registers for P2P.
 *
 * @see springboard_p2p_mail()
 */
function springboard_p2p_new_user_mail(&$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('Welcome to P2P', $options);
  $message['body'][] = t('Thank you for creating a P2P account.', $options);
}

/**
 * Mail template for a user registering for P2P coming from a private campaign.
 *
 * @see springboard_p2p_mail()
 */
function springboard_p2p_new_user_private_campaign_mail(&$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('Welcome to P2P', $options);
  $message['body'][] = t('Thank you for creating a P2P account.  We will be in touch when you are approved.', $options);
}

/**
 * Mail template when a P2P user requests approval from a private campaign.
 *
 * @see springboard_p2p_mail()
 */
function springboard_p2p_user_requests_approval_mail(&$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('Next steps', $options);
  $message['body'][] = t('Thanks for showing interest in this campaign.  We will be in touch soon.', $options);
  $message['body'][] = $params['campaign']->title;
  $message['body'][] = $params['account']->mail;
}

/**
 * Mail template to an admin when a P2P user request private campaign approval.
 *
 * @see springboard_p2p_mail()
 */
function springboard_p2p_admin_approval_request_mail(&$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t('P2P User requests approval', $options);
  $message['body'][] = t('A user has requested approval for a campaign.', $options);
  $message['body'][] = $params['campaign']->title;
  $message['body'][] = $params['account']->mail;
  $message['body'][] = url('user/' . $params['account']->uid, array('absolute' => TRUE));
  $message['body'][] = url('admin/springboard/p2p/approval/user', array('absolute' => TRUE));
}


/**
 * Verify the email address will be a valid username.
 *
 * Returns email specific error messages.
 *
 * @param string $mail
 *   The email address to check.
 *
 * @return string|NULL
 *   The email specific error, or NULL for no errors.
 *
 * @see user_validate_name()
 */
function springboard_p2p_validate_email_as_username($mail) {
  if (strpos($mail, '  ') !== FALSE) {
    return t('The e-mail address cannot contain multiple spaces in a row.');
  }
  if (preg_match('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', $mail)) {
    return t('The e-mail address contains an illegal character.');
  }
  // Non-printable ISO-8859-1 + NBSP.
  if (preg_match('/[\x{80}-\x{A0}' .
    // Soft-hyphen.
    '\x{AD}' .
    // Various space characters.
    '\x{2000}-\x{200F}' .
    // Bidirectional text overrides.
    '\x{2028}-\x{202F}' .
    // Various text hinting characters.
    '\x{205F}-\x{206F}' .
    // Byte order mark.
    '\x{FEFF}' .
    // Full-width latin.
    '\x{FF01}-\x{FF60}' .
    // Replacement characters.
    '\x{FFF9}-\x{FFFD}' .
    // NULL byte and control characters.
    '\x{0}-\x{1F}]/u',
    $mail)) {
    return t('The e-mail address contains an illegal character.');
  }
  if (drupal_strlen($mail) > USERNAME_MAX_LENGTH) {
    return t('The e-mail address %name is too long: it must be %max characters or less.', array('%name' => $mail, '%max' => USERNAME_MAX_LENGTH));
  }

}

/**
 * Implements hook_forms().
 *
 * For the add rules form, call the rules admin form.
 *
 * @see commerce_payment_ui_forms()
 */
function springboard_p2p_forms($form_id, $args) {
  $forms = array();

  $forms['springboard_p2p_add_rule_form'] = array(
    'callback' => 'rules_admin_add_reaction_rule',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see commerce_payment_ui_form_commerce_payment_ui_add_payment_rule_form_alter()
 * @see commerce_payment_ui_add_payment_rule_form_submit()
 * @see rules_admin_add_reaction_rule()
 */
function springboard_p2p_form_springboard_p2p_add_rule_form_alter(&$form, &$form_state) {
  unset($form['settings']['help']);

  // Only show P2P events.
  $form['settings']['event']['#options'] = $form['settings']['event']['#options']['Springboard P2P'];

  // Add a default tag.
  $form['settings']['tags']['#default_value'] = 'Springboard P2P';

  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/springboard/p2p/rules');
}
