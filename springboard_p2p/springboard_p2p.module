<?php
/**
 * @file
 * Code for the Springboard peer to peer feature.
 */

include_once 'springboard_p2p.features.inc';

/**
 * Implements hook_permission().
 */
function springboard_p2p_permission() {
  return array(
    'administer springboard p2p' => array(
      'title' => t('Administer springboard peer to peer.'),
    ),
    'register for springboard p2p' => array(
      'title' => t('Register for springboard peer to peer.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_p2p_menu() {
  $items = array();

  $items['admin/springboard/p2p'] = array(
    'title' => 'Springboard peer to peer',
    'page callback' => 'springboard_p2p_dashboard',
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    'access arguments' => array('administer springboard p2p'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/springboard/p2p/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
  );

  $items['admin/springboard/p2p/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_admin_settings'),
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  // @todo Development stuff.  Remove me eventually.
  $items['admin/springboard/p2p/development'] = array(
    'title' => 'Development',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_development_settings'),
    'file' => 'springboard_p2p.development.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['springboard_p2p/register'] = array(
    'title' => 'Register',
    'type' => MENU_CALLBACK,
    'access arguments' => array('register for springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_register_page'),
    'file' => 'springboard_p2p.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  if (module_exists('fboauth')) {
    $items['springboard_p2p/fb'] = array(
      'title' => 'Facebook',
      'type' => MENU_CALLBACK,
      'access arguments' => array('register for springboard p2p'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('springboard_p2p_fb_form'),
      'file' => 'springboard_p2p.pages.inc',
      'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    );
  }

  $items['springboard_p2p/dashboard/%user'] = array(
    'title' => 'My Campaigns',
    'page callback' => 'springboard_p2p_personal_dashboard',
    'page arguments' => array(2),
    'access callback' => 'springboard_p2p_personal_dashboard_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function springboard_p2p_theme() {
  return array(
    'springboard_p2p_admin_settings' => array(
      'render element' => 'form',
      'file' => 'springboard_p2p.admin.inc',
      'path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_category_node_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_campaign_node_form_alter(&$form, &$form_state, $form_id) {

  if (springboard_p2p_form_is_node_create($form)) {
    $ajax_trigger = 'field_p2p_category';
    $ajax_wrapper = 'p2p-category-ajax-wrapper';

    $lang_code = $form['#node']->language;

    $form[$ajax_trigger][$lang_code]['#ajax'] = array(
      'callback' => 'springboard_p2p_ajax',
      'wrapper' => $ajax_wrapper,
      'effect' => 'fade',
    );

    // Set ajax target div.
    $form['#prefix'] = '<div id="' . $ajax_wrapper . '">';
    $form['#suffix'] = '</div>';

    // If we're ajaxing from the category selection and it's a non-empty
    // category value.
    if (isset($form_state['triggering_element']['#field_name']) && $form_state['triggering_element']['#field_name'] == $ajax_trigger && isset($form_state['input'][$ajax_trigger][$lang_code]) && is_numeric($form_state['input'][$ajax_trigger][$lang_code])) {
      $category = node_load($form_state['input'][$ajax_trigger][$lang_code]);

      $checkboxes = array(
        'field_p2p_personal_intro_edit',
        'field_p2p_images_edit',
        'field_p2p_video_embed_edit',
      );

      foreach ($checkboxes as $checkbox) {
        unset($form_state['input'][$checkbox][$lang_code]);
        $form[$checkbox][$lang_code]['#default_value'] = $category->{$checkbox}[$lang_code][0]['value'];
      }

      $textareas = array(
        'field_p2p_personal_intro',
        'field_p2p_org_intro',
      );

      foreach ($textareas as $field_name) {
        if (isset($category->{$field_name}[$lang_code][0])) {
          $content = $category->{$field_name}[$lang_code][0];
          unset($form_state['input'][$field_name][$lang_code][0]['value']);
          $form[$field_name][$lang_code][0]['#default_value'] = $content['value'];
          unset($form_state['input'][$field_name][$lang_code][0]['format']);
          $form[$field_name][$lang_code][0]['#format'] = $content['format'];
        }
      }

      if (isset($category->field_p2p_form_header[$lang_code][0])) {
        $form_header = $category->field_p2p_form_header[$lang_code][0];
        unset($form_state['input']['field_p2p_form_header'][$lang_code][0]);
        $form['field_p2p_form_header'][$lang_code][0]['#default_value']['fid'] = $form_header['fid'];
      }

      if (isset($category->field_p2p_video_embed[$lang_code][0])) {
        $video_embed = $category->field_p2p_video_embed[$lang_code][0];
        unset($form_state['input']['field_p2p_video_embed'][$lang_code][0]);
        $form['field_p2p_video_embed'][$lang_code][0]['video_url']['#default_value'] = $video_embed['video_url'];
      }

      // Personal campaign default images.
      // Has multiple values.
      if (isset($category->field_p2p_images[$lang_code]) && count($category->field_p2p_images[$lang_code] > 1)) {
        $category_images = $category->field_p2p_images[$lang_code];

        // Remove the "upload a new file" row.
        array_pop($category_images);

        unset($form_state['input']['field_p2p_images']);

        // Get the "upload a new file" row before destroying everything.
        $children_keys = element_children($form['field_p2p_images'][$lang_code]);
        $max = max($children_keys);
        $upload_row = $form['field_p2p_images'][$lang_code][$max];

        // In #default_value
        // set the fid, uid, filename
        // remove display, description
        // add uri, filemime, filesize, status, timestamp, rdf mapping
        //
        // Set #weight to $delta
        // remove #file_upload_delta, #theme, #theme_wrappers, #process, #title,
        // #description, #field_name, #language, #display_field,
        // #file_upload_title, #file_upload_description, #after_build,
        // #field_parents
        $image_row = $upload_row;
        unset($image_row['#default_value']);
        unset($image_row['#weight']);
        // unset($image_row['#file_upload_delta']);
        // unset($image_row['#theme']);
        // unset($image_row['#theme_wrappers']);
        // unset($image_row['#process']);
        // unset($image_row['#title']);
        // unset($image_row['#description']);
        // unset($image_row['#field_name']);
        // unset($image_row['#language']);
        // unset($image_row['#display_field']);
        // unset($image_row['#file_upload_title']);
        // unset($image_row['#file_upload_description']);
        // unset($image_row['#after_build']);
        foreach ($category_images as $delta => $image) {
          $form['field_p2p_images'][$lang_code][$delta] = $image_row;
          $form['field_p2p_images'][$lang_code][$delta]['#default_value'] = $image;
          $form['field_p2p_images'][$lang_code][$delta]['#weight'] = $delta;
        }

        // Put the last row back on.
        $last_delta = count($form['field_p2p_images'][$lang_code]);
        $form['field_p2p_images'][$lang_code][$last_delta] = $upload_row;
      }
    }
  }
}

/**
 * AJAX callback for prefilling content when a category is selected.
 */
function springboard_p2p_ajax($form, $form_state) {
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_personal_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  if (springboard_p2p_form_is_node_create($form)) {
    // Node create form.
  }
}

/**
 * Determine if the form we're altering is a node create (and not edit) form.
 *
 * @param array $form
 *   The forms api array.
 *
 * @return bool
 *   TRUE if this is node create, not node edit, and not a preview.
 */
function springboard_p2p_form_is_node_create($form) {
  return empty($form['nid']['#value']) && (!isset($form['#node']->op));
}

/**
 * Get all campaigns that are set to require approval.
 *
 * @return array
 *   The loaded campaign entities, keyed by nid.
 */
function springboard_p2p_get_private_campaigns() {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_campaign')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_p2p_campaigns_approval', 'value', 1, '=')
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Get the personal campaigns related to a given campaign.
 *
 * @param int $nid
 *   The nid of the p2p Campaign.
 *
 * @return array
 *   The loaded personal campaign entities, keyed by nid.
 */
function springboard_p2p_get_personal_campaigns($nid) {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_personal_campaign')
    ->fieldCondition('field_p2p_campaign', 'target_id', $nid, '=')
    ->propertyOrderBy('created', 'DESC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Checks if any content types have been enabled for p2p campaign goals.
 *
 * @return bool
 *   TRUE if no content types are enabled for p2p goals.
 */
function springboard_p2p_no_content_types_enabled() {

  $fundraiser = variable_get('springboard_p2p_fundraiser_items', array());
  $webform_user = variable_get('springboard_p2p_webform_user_items', array());

  return (empty($fundraiser) && empty($webform_user));
}

/**
 * Get the enabled goal type from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return string
 *   'submissions' or 'amount'
 */
function springboard_p2p_get_goal_type_from_campaign($campaign) {
  $goal = springboard_p2p_get_goal_from_campaign($campaign);
  return $goal['goal_type'];
}

/**
 * Get the goal value for the enabled goal from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return int
 *   Dollar amount or number of submissions.
 */
function springboard_p2p_get_goal_value_from_campaign($campaign) {
  $goal = springboard_p2p_get_goal_from_campaign($campaign);
  return $goal['goal_value'];
}

/**
 * Get the enabled goal data from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return array
 *   An array with 'goal_type' and 'goal_value" keys, and optionally other
 *   goal data.
 *
 * @todo This only handles a single enabled goal.
 */
function springboard_p2p_get_goal_from_campaign($campaign) {
  $goal_set_id = $campaign->field_p2p_campaign_goals[$campaign->language][0]['goal_set_id'];
  $goals_field = new SpringboardP2pCampaignGoalsField();
  $goals = $goals_field->load($goal_set_id);
  foreach ($goals as $goal) {
    if ($goal['enabled']) {
      return $goal;
    }
  }

  // Somewhat safe default.
  return array(
    'goal_type' => 'submissions',
    'goal_value' => 0,
  );
}

/**
 * Formats the goal progress according to its goal type.
 *
 * @param array $progress
 *   An array with 'submissions' and 'amount' keys and their goal values.
 * @param string $type
 *   The goal type.
 * @param bool $include_units
 *   Whether to include a prefix/suffix with the goal units.
 *
 * @return string
 *   The formatted value.
 */
function springboard_p2p_format_progress($progress, $type, $include_units = TRUE) {
  $output = '';

  switch ($type) {
    case 'submissions':
      $output .= number_format($progress['submissions']);
      if ($include_units) {
        $output .= ' submissions';
      }
      break;

    case 'amount':
      if ($include_units) {
        $output .= '$ ';
      }
      $output .= number_format($progress['amount'], 2);
      break;
  }

  return $output;
}

/**
 * Formats the percent complete of a goal.
 *
 * @param int $progress
 *   The number of submissions/amount of the current progress.
 * @param int $goal
 *   The goal value.
 *
 * @return string
 *   The formatted integer value with a percent sign.
 */
function springboard_p2p_format_percent($progress, $goal) {
  return (int) ($progress / $goal * 100) . ' %';
}

/**
 * Access handler for personal campaign pages.
 *
 * @todo Implement view own p2p personal dashboard access control.
 *
 * @see user_view_access($account)
 */
function springboard_p2p_personal_dashboard_view_access($user) {
  return TRUE;
}

/**
 * Implements hook_fboauth_user_presave().
 *
 * Change the username to the email address.  Also save a random password
 * if one doesn't exist.
 */
function springboard_p2p_fboauth_user_presave(&$edit, $fbuser) {
  if (!empty($edit['mail'])) {
    $edit['name'] = $edit['mail'];
  }

  if (empty($edit['pass'])) {
    $edit['pass'] = user_password(8);
  }
}
