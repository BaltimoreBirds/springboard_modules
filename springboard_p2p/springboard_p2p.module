<?php
/**
 * @file
 * Code for the Springboard peer to peer feature.
 */

include_once 'springboard_p2p.features.inc';

define('SPRINGBOARD_P2P_ROLE', 'Springboard P2P campaigner');

/**
 * Implements hook_ctools_plugin_directory().
 */
function springboard_p2p_ctools_plugin_directory($owner, $plugin_type) {
  // Call the various ctools plugin types.
  $modules = array('panels', 'ctools');
  if (in_array($owner, $modules) && !empty($plugin_type) && ($plugin_type == 'content_types' || $plugin_type == 'access' || $plugin_type == 'layouts')) {
    return 'plugins/' . $plugin_type;
  }

}

/**
 * Implements hook_views_api().
 */
function springboard_p2p_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_permission().
 */
function springboard_p2p_permission() {
  return array(
    'administer springboard p2p' => array(
      'title' => t('Administer springboard peer to peer.'),
    ),
    'register for springboard p2p' => array(
      'title' => t('Register for springboard peer to peer.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_p2p_menu() {
  $items = array();

  $items['admin/springboard/p2p'] = array(
    'title' => 'Springboard peer to peer',
    'page callback' => 'springboard_p2p_dashboard',
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    'access arguments' => array('administer springboard p2p'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/springboard/p2p/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
  );

  $items['admin/springboard/p2p/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer springboard p2p'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_admin_settings'),
    'file' => 'springboard_p2p.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  // P2P Rules administration page.
  if (module_exists('rules')) {
    $items['admin/springboard/p2p/rules'] = array(
      'title' => 'Rules',
      'type' => MENU_LOCAL_TASK,
      'description' => 'Enable and configure P2P rule configurations.',
      'page callback' => 'springboard_p2p_rules_admin_page',
      'access arguments' => array('administer springboard p2p'),
      'file' => 'springboard_p2p.rules_admin.inc',
      'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    );

    // Add the menu items for the various Rules forms.
    $controller = new RulesUIController();
    $items += $controller->config_menu('admin/springboard/p2p/rules');

    $items['admin/springboard/p2p/rules/add'] = array(
      'title' => 'Add a P2P rule',
      'description' => 'Adds an additional P2P rule configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('springboard_p2p_add_rule_form', 'admin/springboard/p2p/rules'),
      'access arguments' => array('administer springboard p2p'),
      'file path' => drupal_get_path('module', 'rules_admin'),
      'file' => 'rules_admin.inc',
    );
  }

  if (module_exists('fboauth')) {
    $items['springboard_p2p/fb'] = array(
      'title' => 'Facebook',
      'type' => MENU_CALLBACK,
      'access arguments' => array('register for springboard p2p'),
      'page callback' => 'springboard_p2p_fb_page',
      'file' => 'springboard_p2p.fboauth.inc',
      'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    );
  }

  $items['user/%user/complete-p2p-profile'] = array(
    'title' => 'Complete your profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_complete_profile_form', 1),
    'access callback' => 'springboard_p2p_complete_profile_form_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
    'file' => 'springboard_p2p.profile.inc',
  );

  $items['springboard_p2p/set_password/%/%/%'] = array(
    'title' => 'Set password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_set_password_form', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'springboard_p2p.password.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  $items['user/%user/personal-campaigns'] = array(
    'title' => 'My Campaigns',
    'page callback' => 'springboard_p2p_personal_dashboard',
    'page arguments' => array(1),
    'access callback' => 'springboard_p2p_personal_dashboard_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'springboard_p2p.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function springboard_p2p_theme($existing, $type, $theme) {
  $path = drupal_get_path('module', 'springboard_p2p');

  $templates = array(
    'springboard_p2p_admin_settings' => array(
      'render element' => 'form',
      'file' => 'springboard_p2p.admin.inc',
      'path' => $path . '/includes',
    ),
  );

  // Look for theme templates in springboard_p2p.
  $templates += drupal_find_theme_functions($existing, array($theme));
  $templates += drupal_find_theme_templates($existing, '.tpl.php', $path);

  return $templates;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View.
 */
function springboard_p2p_form_views_form_p2p_user_approval_page_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View and add a submit function so it will
 * redirect back to the admin dashboard.
 */
function springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
  $form['#submit'][] = 'springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_submit';
}

/**
 * Submit handler for the approval queue View to go back to the dashboard.
 */
function springboard_p2p_form_views_form_p2p_user_approval_dashboard_page_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/springboard/p2p';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the Save button from the View.
 */
function springboard_p2p_form_views_form_p2p_user_approval_block_alter(&$form, &$form_state, $form_id) {
  unset($form['actions']['submit']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  $language = $form['language']['#value'];
  if (springboard_p2p_form_is_node_create($form)) {
    $ajax_trigger = 'field_p2p_category';
    $ajax_wrapper = 'p2p-category-ajax-wrapper';

    $lang_code = $form['#node']->language;

    $form[$ajax_trigger][$lang_code]['#ajax'] = array(
      'callback' => 'springboard_p2p_ajax',
      'wrapper' => $ajax_wrapper,
      'effect' => 'fade',
    );

    // Set ajax target div.
    $form['#prefix'] = '<div id="' . $ajax_wrapper . '">';
    $form['#suffix'] = '</div>';

    // If we're ajaxing from the category selection and it's a non-empty
    // category value.
    if (isset($form_state['triggering_element']['#field_name']) && $form_state['triggering_element']['#field_name'] == $ajax_trigger && isset($form_state['input'][$ajax_trigger][$lang_code]) && is_numeric($form_state['input'][$ajax_trigger][$lang_code])) {
      $category = node_load($form_state['input'][$ajax_trigger][$lang_code]);

      $checkboxes = array(
        'field_p2p_personal_intro_edit',
        'field_p2p_images_edit',
        'field_p2p_video_embed_edit',
      );

      foreach ($checkboxes as $checkbox) {
        unset($form_state['input'][$checkbox][$lang_code]);
        $form[$checkbox][$lang_code]['#default_value'] = $category->{$checkbox}[$lang_code][0]['value'];
      }

      $textareas = array(
        'field_p2p_personal_intro',
        'field_p2p_org_intro',
      );

      foreach ($textareas as $field_name) {
        if (isset($category->{$field_name}[$lang_code][0])) {
          $content = $category->{$field_name}[$lang_code][0];
          unset($form_state['input'][$field_name][$lang_code][0]['value']);
          $form[$field_name][$lang_code][0]['#default_value'] = $content['value'];
          unset($form_state['input'][$field_name][$lang_code][0]['format']);
          $form[$field_name][$lang_code][0]['#format'] = $content['format'];
        }
      }

      if (isset($category->field_p2p_campaign_banner[$lang_code][0])) {
        $form_header = $category->field_p2p_campaign_banner[$lang_code][0];
        unset($form_state['input']['field_p2p_campaign_banner'][$lang_code][0]);
        $form['field_p2p_campaign_banner'][$lang_code][0]['#default_value']['fid'] = $form_header['fid'];
      }

      if (isset($category->field_p2p_video_embed[$lang_code][0])) {
        $video_embed = $category->field_p2p_video_embed[$lang_code][0];
        unset($form_state['input']['field_p2p_video_embed'][$lang_code][0]);
        $form['field_p2p_video_embed'][$lang_code][0]['video_url']['#default_value'] = $video_embed['video_url'];
      }

      // Personal campaign default images.
      // Has multiple values.
      if (isset($category->field_p2p_images[$lang_code]) && count($category->field_p2p_images[$lang_code] > 1)) {
        $category_images = $category->field_p2p_images[$lang_code];

        unset($form_state['input']['field_p2p_images']);

        // Get the "upload a new file" row before destroying everything.
        $children_keys = element_children($form['field_p2p_images'][$lang_code]);
        $max = max($children_keys);
        $upload_row = $form['field_p2p_images'][$lang_code][$max];

        $image_row = $upload_row;
        unset($image_row['#default_value']);
        unset($image_row['#weight']);

        foreach ($category_images as $delta => $image) {
          $form['field_p2p_images'][$lang_code][$delta] = $image_row;
          $form['field_p2p_images'][$lang_code][$delta]['#default_value'] = $image;
          $form['field_p2p_images'][$lang_code][$delta]['#weight'] = $delta;
        }

        // Put the last row back on.
        $last_delta = count($form['field_p2p_images'][$lang_code]);
        $upload_row['#weight'] = $last_delta;
        $upload_row['#delta'] = $last_delta;
        $form['field_p2p_images'][$lang_code][$last_delta] = $upload_row;
      }
    }
  }
  // Attach show/hide states to the private campaign error message field.
  $form['field_p2p_private_access_message'][$language][0]['value']['#states'] = array(
    // Hide the settings when the cancel notify checkbox is disabled.
    'invisible' => array(
      ':input[name="field_p2p_campaigns_approval[' . $language . ']"]' => array('checked' => FALSE),
    ),
  );
}

/**
 * AJAX callback for prefilling content when a category is selected.
 */
function springboard_p2p_ajax($form, $form_state) {
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_p2p_form_p2p_personal_campaign_node_form_alter(&$form, &$form_state, $form_id) {

  if (springboard_p2p_form_is_node_create($form)) {
    $campaign = isset($_GET['p2p_cid']) ? $_GET['p2p_cid'] : FALSE;
    $ajax = FALSE;
    if (isset($form_state['parent_campaign'])) {
      $campaign = $form_state['parent_campaign'];
      $ajax = TRUE;
    }
    $form_state['campaign'] = $campaign;
    $language = $form['language']['#value'];
    $campaign_node = FALSE;

    // Someone has accidentally stumbled onto the personal campaign add form
    // without a campaign id in the url.
    if (!$campaign || !is_numeric($campaign)) {
      // Prefix added as a formality so ajax events have something to target.
      // Ajax callback redirects to form with campaign id in url.
      $form['#prefix'] = '<div id="personal-campaign-wrapper">';
      $form['#suffix'] = '</div>';
      $form['field_p2p_campaign'][$language]['#ajax'] = array(
        'callback' => 'springboard_p2p_personal_campaign_ajax',
        'wrapper' => 'personal-campaign-wrapper',
      );
    }
    else {
      $form_state['parent_campaign'] = $campaign;
    }

    // If a campaign node id is available in the url, fill in form with defaults
    // from the campaign.
    if ($campaign && is_numeric($campaign)) {
      global $user;
      $campaign_node = node_load($campaign);
      // If campaign_node is not a valid campaign node type, revert to blank
      // form.
      if (!isset($campaign_node->type) || (isset($campaign_node->type) && $campaign_node->type != 'p2p_campaign')) {
        // TODO: throw visible error? Watchdog?
        drupal_goto('node/add/p2p-personal-campaign');
      }
      $language = $campaign_node->language;
      $private_campaign = springboard_p2p_campaign_is_private($campaign_node);
      // If a user attempts to create a personal campaign from a private
      // campaign that they have not been granted access to,
      // replace form with message and action button.
      if ($private_campaign && !springboard_p2p_private_campaign_user_is_authorized($campaign_node->nid, $user->uid)) {
        $node = $form['#node'];
        $parents = $form['#parents'];
        $tree = $form['#tree'];
        $form = array(
          '#parents' => $parents,
          '#node' => $node,
          '#tree' => $tree,
          '#array_parents' => array(),
        );
        $form_state['process_input'] = FALSE;
        // TODO: add link to request access.
        $form['unauthorized'] = array(
          '#markup' => isset($campaign_node->field_p2p_private_access_message[$language][0]['value']) ? $campaign_node->field_p2p_private_access_message[$language][0]['value'] : '',
        );
        return;
      }
      // Campaign name, default from parent campaign.
      $form['title']['#default_value'] = $campaign_node->title;
      // Campaign intro, default from parent campaign, display disabled content
      // preview if edit is disabled.
      if (isset($campaign_node->field_p2p_personal_intro[$language][0]['value'])) {
        $form['body'][$language][0]['#default_value'] = $campaign_node->field_p2p_personal_intro[$language][0]['value'];
        $form['body'][$language][0]['#format'] = $campaign_node->field_p2p_personal_intro[$language][0]['format'];
      }
      else {
        // No intro is set on the parent campaign so we need to make sure
        // body is editable.
        $campaign_node->field_p2p_personal_intro_edit[$language][0]['value'] = TRUE;
      }

      // Hide campaign select box if campaign has been provided in the url.
      $form['field_p2p_campaign'][$language]['#default_value'] = $campaign_node->nid;
      $form['field_p2p_campaign'][$language]['#access'] = FALSE;

      // Images, default values from parent campaign, hide if edit is disabled.
      if (!$ajax) {
        $empty_image = $form['field_p2p_campaign_images'][$language][0];
        $images_editable = $campaign_node->field_p2p_images_edit[$language][0]['value'] ? TRUE : FALSE;
        // Check for available images before we try to interact with this field.
        if (isset($campaign_node->field_p2p_images[$language])) {
          foreach ($campaign_node->field_p2p_images[$language] as $index => $image) {
            if (!isset($form['field_p2p_campaign_images'][$language][$index])) {
              $form['field_p2p_campaign_images'][$language][$index] = $form['field_p2p_campaign_images'][$language][0];
            }
            $form['field_p2p_campaign_images'][$language][$index]['#default_value']['fid'] = $image['fid'];
            $form['field_p2p_campaign_images'][$language][$index]['#default_value']['display'] = TRUE;
          }
          $form['field_p2p_campaign_images'][$language][$index + 1] = $empty_image;
        }
      }
      // Embedded video, default values from parent campaign, hide if edit
      // is disabled.
      $video_editable = $campaign_node->field_p2p_video_embed_edit[$language][0]['value'] ? TRUE : FALSE;
      if (isset($campaign_node->field_p2p_video_embed[$language])) {
        $form['field_p2p_video_embed'][$language][0]['video_url']['#default_value'] = $campaign_node->field_p2p_video_embed[$language][0]['video_url'];
      }
    }
  }
  else {
    // Node edit of some variety. We'll need to load the original campaign
    // node to control visibility of conditionally editable fields.
    $language = $form['language']['#value'];
    $campaign_node = node_load($form['field_p2p_campaign'][$language]['#default_value'][0]);

  }

  // Hide uneditable fields.
  if ($campaign_node) {
    // Manage personal campaign goal fields.
    $goal_type = springboard_p2p_get_goal_type_from_campaign($campaign_node);

    switch ($goal_type) {
      case 'amount':
        $form['field_p2p_personal_submit_goal']['#access'] = FALSE;
        break;

      case 'submissions':
        $form['field_p2p_personal_campaign_goal']['#access'] = FALSE;
        break;

      default:
        break;
    }
    $video_editable = $campaign_node->field_p2p_video_embed_edit[$language][0]['value'] ? TRUE : FALSE;
    $images_editable = $campaign_node->field_p2p_images_edit[$language][0]['value'] ? TRUE : FALSE;
    $can_edit_body = $campaign_node->field_p2p_personal_intro_edit[$language][0]['value'];
    // Hide the campaign select box.
    $form['field_p2p_campaign'][$language]['#access'] = FALSE;

    if (!$can_edit_body) {
      $form['body'][$campaign_node->language]['#access'] = FALSE;
      $form['body']['display'] = array(
        '#title' => $form['body'][$campaign_node->language][0]['#title'],
        '#type' => 'textarea',
        '#default_value' => $form['body'][$campaign_node->language][0]['#default_value'],
        '#disabled' => TRUE,
      );
    }
    $form['field_p2p_campaign_images']['#access'] = $images_editable;
    $form['field_p2p_video_embed']['#access'] = $video_editable;
  }
  // Hide revision UI.
  $form['revision_information']['#access'] = FALSE;

  // Add styles and ajax lookup to campaign url field.
  $form['field_p2p_personal_campaign_url'][$language][0]['value']['#field_prefix'] = url(variable_get('springboard_p2p_base_path', 'springboard_p2p'), array('absolute' => TRUE)) . '/';
  $form['field_p2p_personal_campaign_url'][$language][0]['value']['#attributes'] = array('class' => array('container-inline'));
  $form['field_p2p_personal_campaign_url'][$language]['#prefix'] = '<div id="personal-campaign-url-wrapper">';
  $form['field_p2p_personal_campaign_url'][$language]['#suffix'] = '</div>';
  $form['field_p2p_personal_campaign_url'][$language][0]['value']['#ajax'] = array(
    'callback' => 'springboard_p2p_personal_campaign_url_ajax',
    'wrapper' => 'personal-campaign-url-wrapper',
  );

  // Hide progress fields.
  $form['field_p2p_campaign_progress']['#access'] = FALSE;
  $form['#validate'][] = 'springboard_p2p_personal_campaign_validate';
}

/**
 * Validate handler for the personal campaign node form.
 */
function springboard_p2p_personal_campaign_validate(&$form, $form_state) {
  // Validate campaign url alias for uniqueness.
  $language = $form_state['values']['language'];
  $alias = isset($form_state['values']['field_p2p_personal_campaign_url'][$language][0]['value']) ? $form_state['values']['field_p2p_personal_campaign_url'][$language][0]['value'] : FALSE;
  if ($alias) {
    $alias = variable_get('springboard_p2p_base_path', 'springboard_p2p') . '/' . $alias;

    $path = drupal_lookup_path('source', $alias);
    // We only want to throw a validation error if the campaign url is in use
    // by some other path.
    if ($path && isset($form_state['node']->nid) && $path != 'node/' . $form_state['node']->nid) {
      form_set_error('field_p2p_personal_campaign_url', t('This url is already in use.'));
    }
    // On the node add form we also want to avoid trying to use an existing
    // campaign url.
    if ($path && !isset($form_state['node']->nid)) {
      form_set_error('field_p2p_personal_campaign_url', t('This url is already in use.'));
    }
  }
}

/**
 * Redirect to personal campaign node add form with campaign in url.
 */
function springboard_p2p_personal_campaign_ajax(&$form, &$form_state) {
  $language = $form_state['values']['language'];
  $campaign = $form_state['values']['field_p2p_campaign'][$language][0]['target_id'];
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $options = array(
    'query' => array(
      'p2p_cid' => $campaign,
    ),
  );
  $commands[] = ctools_ajax_command_redirect('node/add/p2p-personal-campaign', 0, $options);
  print ajax_render($commands);
  drupal_exit();
}

/**
 * Ajax callback validates campaign url field.
 */
function springboard_p2p_personal_campaign_url_ajax(&$form, $form_state) {
  $nid = $form_state['values']['nid'];
  $language = $form_state['values']['language'];
  $path = variable_get('springboard_p2p_base_path', 'springboard_p2p') . '/';
  $path .= $form_state['values']['field_p2p_personal_campaign_url'][$language][0]['value'];

  $alias_exists = drupal_lookup_path('source', $path);
  $target = 'field_p2p_personal_campaign_url[' . $language . '][0][value]';
  if ($alias_exists) {
    // New node creation form, alias is in use by a pre-existing form.
    if (!$nid) {
      form_set_error($target, t('This URL is already in use.'));
    }
    // Editing existing node, alias in use by some other node.
    if ($nid && $alias_exists != 'node/' . $nid) {
      form_set_error($target, t('This URL is already in use.'));
    }
  }
  else {
    drupal_set_message(t('URL ok.'));
  }
  // return theme('status_message'drupal_render($form['field_p2p_personal_campaign_url'][$language]);
  // unset($_SESSION['messages']);

  $commands = array();

  // Add other commands.
  $commands[] = ajax_command_remove('div#personal-campaign-url-wrapper div.alert');
  $commands[] = ajax_command_append('div#personal-campaign-url-wrapper', theme('status_messages'));
  unset($_SESSION['messages']);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_sb_social_share_ur_alter().
 */
function springboard_p2p_sb_social_share_ur($url, $node) {
  // Identify.
}

/**
 * Implements hook_node_insert().
 */
function springboard_p2p_node_insert($node) {
  if ($node->type == 'p2p_personal_campaign') {
    // Manage url alias for personal campaign node type.
    $alias = isset($node->field_p2p_personal_campaign_url[$node->language][0]['value']) ? $node->field_p2p_personal_campaign_url[$node->language][0]['value'] : '';
    $alias = trim($alias);

    if ($alias == '') {
      $alias = springboard_p2p_create_alias_from_title($node->title);
      $node->field_p2p_personal_campaign_url[$node->language][0]['value'] = $alias;
      node_save($node);
    }

    // Discard existing alias settings if the node is being cloned.
    if ($alias && !isset($node->clone_from_original_nid)) {
      $alias = variable_get('springboard_p2p_base_path', 'springboard_p2p') . '/' . $alias;
      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => $alias,
      );
      path_save($path);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function springboard_p2p_node_update($node) {
  // Manage url alias for personal campaign node type.
  if ($node->type == 'p2p_personal_campaign') {
    $alias = '';
    if (isset($node->field_p2p_personal_campaign_url[$node->language]) && is_array($node->field_p2p_personal_campaign_url[$node->language])) {
      $alias = count($node->field_p2p_personal_campaign_url[$node->language]) ? $node->field_p2p_personal_campaign_url[$node->language][0]['value'] : '';
    }
    $alias = trim($alias);

    if ($alias == '') {
      $alias = springboard_p2p_create_alias_from_title($node->title);
      $node->field_p2p_personal_campaign_url[$node->language][0]['value'] = $alias;
      node_save($node);
    }

    if ($alias) {
      $alias = variable_get('springboard_p2p_base_path', 'springboard_p2p') . '/' . $alias;
      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => $alias,
      );
      // Force an update if path settings already exist for this node.
      if (isset($node->path['pid']) && $node->path['pid']) {
        $path['pid'] = $node->path['pid'];
      }
      path_save($path);
    }
  }
  // Propagate changes to campaign fields to personal campaigns when fields are
  // flagged "uneditable" by personal campaign owners.
  if ($node->type == 'p2p_campaign') {
    $update_settings = array();
    $language = $node->language;
    // Campaign intro.
    if (!$node->field_p2p_personal_intro_edit[$language][0]['value']) {
      $update_settings['body'] = isset($node->field_p2p_personal_intro[$language][0]['value']) ? $node->field_p2p_personal_intro[$language][0]['value'] : '';
    }
    // Images.
    if (!$node->field_p2p_images_edit[$language][0]['value']) {
      $update_settings['field_p2p_campaign_images'] = $node->field_p2p_images[$language];
    }
    // Video.
    if (!$node->field_p2p_video_embed_edit[$language][0]['value']) {

      $empty_video_field = array(
        'video_url' => '',
        'thumbnail_path' => '',
        'video_data' => NULL,
        'embed_code' => NULL,
        'description' => NULL,
      );

      $update_settings['field_p2p_video_embed'] = isset($node->field_p2p_video_embed[$language][0]) ? $node->field_p2p_video_embed[$language][0] : $empty_video_field;
    }
    if (count($update_settings)) {
      $associated_private_campaigns = springboard_p2p_get_personal_campaigns($node->nid);
      foreach ($associated_private_campaigns as $nid => $private_campaign) {
        $private_campaign = (array) $private_campaign;
        $node_changed = FALSE;
        foreach ($update_settings as $field_key => $field_settings) {
          switch ($field_key) {
            case 'body':
              if (!isset($private_campaign[$field_key][$language][0]['value']) || $private_campaign[$field_key][$language][0]['value'] != $field_settings) {
                $private_campaign[$field_key][$language][0]['value'] = $field_settings;
                $node_changed = TRUE;
              }
              break;

            case 'field_p2p_video_embed':
              if (!isset($private_campaign[$field_key][$language][0]) || $private_campaign[$field_key][$language][0] != $field_settings) {
                $private_campaign[$field_key][$language][0] = $field_settings;
                $node_changed = TRUE;
              }
              break;

            case 'field_p2p_campaign_images':
              if (!isset($private_campaign['field_p2p_campaign_images'][$language]) || $private_campaign['field_p2p_campaign_images'][$language] != $field_settings) {
                $private_campaign['field_p2p_campaign_images'][$language] = $field_settings;
                $node_changed = TRUE;
              }
              break;
          }
        }
        if ($node_changed) {
          node_save((object) $private_campaign);
          $link = l($private_campaign['title'], 'node/' . $private_campaign['nid']);
          drupal_set_message(t('Updated private campaign: !link', array('!link' => $link)));
        }
      }
    }
  }
}

/**
 * Creates a URL safe path from the node title.
 *
 * @todo There's probably an easier way or built in function to do this.
 *
 * @param string $title
 *   The node title.
 *
 * @return mixed|string
 *   A URL safe path.
 */
function springboard_p2p_create_alias_from_title($title) {

  $replacements = array(
    ' ' => '-',
    '"' => '',
    "'" => '',
    '`' => '',
    ',' => '',
    '.' => '',
    '_' => '-',
    ':' => '',
    ';' => '',
    '|' => '',
    '{' => '',
    '}' => '',
    '[' => '',
    ']' => '',
    '+' => '',
    '=' => '',
    '*' => '',
    '&' => '',
    '%' => '',
    '^' => '',
    '$' => '',
    '#' => '',
    '@' => '',
    '!' => '',
    '~' => '',
    '(' => '',
    ')' => '',
    '?' => '',
    '<' => '',
    '>' => '',
    '/' => '',
    '\\' => '',
  );

  $title = drupal_strtolower(trim($title));
  $title = str_replace(array_keys($replacements), array_values($replacements), $title);

  return $title;
}

/**
 * Checks campaign for user authorization to create a personal campaign.
 *
 * @param int $nid
 *   Node id of the campaign.
 *
 * @param int $uid
 *   User id.
 *
 * @return bool
 *   Returns TRUE if the user account is authorized for this campaign,
 *   FALSE otherwise.
 */
function springboard_p2p_private_campaign_user_is_authorized($nid, $uid) {
  $result = db_query('SELECT status FROM {springboard_p2p_private_campaign_approval} WHERE uid = :uid AND nid = :nid', array(':uid' => $uid, ':nid' => $nid));
  $status = $result->fetchField();
  return $status == 'approved' ? TRUE : FALSE;
}

/**
 * Determine if the form we're altering is a node create (and not edit) form.
 *
 * @param array $form
 *   The forms api array.
 *
 * @return bool
 *   TRUE if this is node create, not node edit, and not a preview.
 */
function springboard_p2p_form_is_node_create($form) {
  return empty($form['nid']['#value']) && (!isset($form['#node']->op));
}

/**
 * Get all campaigns that are set to require approval.
 *
 * @return array
 *   The loaded campaign entities, keyed by nid.
 */
function springboard_p2p_get_private_campaigns() {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_campaign')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_p2p_campaigns_approval', 'value', 1, '=')
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Get the personal campaigns related to a given campaign.
 *
 * @param int $nid
 *   The nid of the p2p Campaign.
 *
 * @return array
 *   The loaded personal campaign entities, keyed by nid.
 */
function springboard_p2p_get_personal_campaigns($nid) {
  $campaign_items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_personal_campaign')
    ->fieldCondition('field_p2p_campaign', 'target_id', $nid, '=')
    ->propertyOrderBy('created', 'DESC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $campaign_items_nids = array_keys($result['node']);
    $campaign_items = entity_load('node', $campaign_items_nids);
  }

  return $campaign_items;
}

/**
 * Get all of the personal campaigns.
 *
 * @return array
 *   The loaded personal campaign entities, keyed by nid.
 */
function springboard_p2p_get_all_personal_campaigns() {
  $items = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'p2p_personal_campaign')
    ->propertyOrderBy('created', 'DESC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $items = entity_load('node', $nids);
  }

  return $items;
}

/**
 * Checks if any content types have been enabled for p2p campaign goals.
 *
 * @return bool
 *   TRUE if no content types are enabled for p2p goals.
 */
function springboard_p2p_no_content_types_enabled() {

  $fundraiser = variable_get('springboard_p2p_fundraiser_items', array());
  $webform_user = variable_get('springboard_p2p_webform_user_items', array());

  return (empty($fundraiser) && empty($webform_user));
}

/**
 * Get the enabled goal type from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return string
 *   'submissions' or 'amount'
 */
function springboard_p2p_get_goal_type_from_campaign($campaign) {
  $goal = springboard_p2p_fields_get_goal_from_entity($campaign);
  return $goal['goal_type'];
}

/**
 * Get the goal value for the enabled goal from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return int
 *   Dollar amount or number of submissions.
 */
function springboard_p2p_get_goal_value_from_campaign($campaign) {
  $goal = springboard_p2p_fields_get_goal_from_entity($campaign);
  return $goal['goal_value'];
}

/**
 * Get the goal data for the enabled goal from a campaign.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return array
 *   An array with 'goal_type' and 'goal_value' and other goal data.
 */
function springboard_p2p_get_goal_from_campaign($campaign) {
  return springboard_p2p_fields_get_goal_from_entity($campaign);
}

/**
 * Formats the goal progress according to its goal type.
 *
 * @param array|number $progress
 *   An array with 'submissions' and 'amount' keys and their goal values.
 *   Or a single value.
 * @param string $type
 *   The goal type.
 * @param bool $include_units
 *   Whether to include a prefix/suffix with the goal units.
 *
 * @return string
 *   The formatted value.
 */
function springboard_p2p_format_progress($progress, $type, $include_units = TRUE) {
  $output = '';

  // If only a value is passed in.
  if (!is_array($progress)) {
    $progress = array(
      $type => $progress,
    );
  }

  switch ($type) {
    case 'submissions':
      $output .= number_format($progress['submissions']);
      if ($include_units) {
        $output .= ' submissions';
      }
      break;

    case 'amount':
      if ($include_units) {
        $output .= '$ ';
      }
      $output .= number_format($progress['amount'], 2);
      break;
  }

  return $output;
}

/**
 * Formats the percent complete of a goal.
 *
 * @param int $progress
 *   The number of submissions/amount of the current progress.
 * @param int $goal
 *   The goal value.
 * @param bool $include_units
 *   Whether to include the percent sign.
 * @param bool $include_overage
 *   Whether to cap the percent at 100.  Useful for CSS.
 *
 * @return string
 *   The formatted integer value optionally with a percent sign.
 */
function springboard_p2p_format_percent($progress, $goal, $include_units = TRUE, $include_overage = TRUE) {
  $result = '0';
  if ($goal > 0) {
    $result = (int) ($progress / $goal * 100);
  }

  if ($result > 100 && !$include_overage) {
    $result = 100;
  }

  if ($include_units) {
    $result .= ' %';
  }

  return $result;
}

/**
 * Access handler for personal campaign pages.
 *
 * @see user_view_access($account)
 */
function springboard_p2p_personal_dashboard_view_access($account) {
  return springboard_p2p_complete_profile_form_access($account);
}

/**
 * Implements hook_fboauth_user_presave().
 *
 * Change the username to the email address.  Also save a random password
 * if one doesn't exist.
 */
function springboard_p2p_fboauth_user_presave(&$edit, $fbuser) {
  if (!empty($edit['mail'])) {
    $edit['name'] = $edit['mail'];
  }

  if (empty($edit['pass'])) {
    $edit['pass'] = user_password();
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Override fboauth's theme function, create a custom function for
 * overriding below.
 */
function springboard_p2p_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['fboauth_action__connect']['function'])) {
    $theme_registry['fboauth_action__connect']['function'] = '_springboard_p2p_fboauth_image';
  }
}

/**
 * Custom fboauth_action__connect function created above.
 */
function _springboard_p2p_fboauth_image($variables) {

  // Define the module path.
  $mod_path = drupal_get_path('module', 'springboard_p2p');

  // Ripped out and modified from fboauth.module.
  $action = $variables['action'];
  $link = $variables['properties'];
  $url = url($link['href'], array('query' => $link['query']));
  $link['attributes']['class'] = isset($link['attributes']['class']) ? $link['attributes']['class'] : 'facebook-action-connect';
  $link['attributes']['rel'] = 'nofollow';
  $attributes = isset($link['attributes']) ? drupal_attributes($link['attributes']) : '';
  $src = '/' . $mod_path . '/images/fb-connect.png';
  return '<a ' . $attributes . ' href="' . $url . '"><img class="fb-image" title ="Login with Facebook" src="' . $src . '" alt="Login with Facebook" /></a>';

}

/**
 * Access callback for the complete profile form.
 */
function springboard_p2p_complete_profile_form_access($account) {
  if (empty($account->uid)) {
    return FALSE;
  }
  elseif (user_access('administer users')) {
    return TRUE;
  }
  else {
    return $GLOBALS['user']->uid == $account->uid;
  }
}

/**
 * Check if the entity has empty required fields.
 *
 * @param object $entity
 *   The user object.
 *
 * @return bool
 *   TRUE if the user has empty fields that are required.
 */
function springboard_p2p_complete_profile_user_has_empty_required_fields($entity) {
  $entity_type = 'user';

  // Need to reload the user account so we get all the fields.
  $entity = user_load($entity->uid);

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);

  $required_fields = springboard_p2p_get_required_registration_fields();

  foreach ($instances as $field_name => $instance) {
    // Only check required fields.
    if (!empty($required_fields[$field_name])) {
      // Check if the required field is empty.
      if (springboard_p2p_complete_profile_field_is_empty($entity_type, $entity, $instance['field_name'])) {
        // Check that the user can actually edit their missing field.
        if (field_access('edit', field_info_field($instance['field_name']), $entity_type, $entity, $entity)) {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Check if a field module field is empty.
 *
 * @param string $entity_type
 *   Should be 'user' for our purposes.
 * @param object $entity
 *   The user object.
 * @param string $field_name
 *   The name of the field to check.
 *
 * @return bool
 *   TRUE if the field is empty.
 */
function springboard_p2p_complete_profile_field_is_empty($entity_type, $entity, $field_name) {
  if (!isset($entity->{$field_name})) {
    return TRUE;
  }

  if ($items = field_get_items($entity_type, $entity, $field_name)) {
    // @todo Do we need to run filtering on values?
    // $field = field_info_field($field_name);
    // $items = _field_filter_items($field, $items);
    return empty($items);
  }

  return TRUE;
}

/**
 * Get the values for a drupal_goto() to the p2p complete profile page.
 *
 * @return array
 *   An array with path and options keys for use in drupal_goto().
 */
function springboard_p2p_complete_profile_get_redirect() {
  $redirect = array();
  $redirect['path'] = 'user/' . $GLOBALS['user']->uid . '/complete-p2p-profile';
  $redirect['options'] = array('query' => array());

  $destination = drupal_get_destination();
  // Unset the global destination since we don't want drupal_goto() to read
  // it and since we're passing the destination into the query string again.
  unset($_GET['destination']);
  $redirect['options']['query'] += $destination;

  return $redirect;
}

/**
 * Get only the reg fields that have been enabled in the p2p settings.
 *
 * @return array
 *   The enabled profile fields.
 */
function springboard_p2p_get_enabled_registration_fields() {
  $fields = variable_get('springboard_p2p_registration_fields', array());

  foreach ($fields as $key => $field) {
    if (!$field['enabled']) {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Get only the reg fields that are enabled and required in the p2p settings.
 *
 * @return array
 *   The required profile fields.
 */
function springboard_p2p_get_required_registration_fields() {
  $fields = springboard_p2p_get_enabled_registration_fields();

  foreach ($fields as $key => $field) {
    if (!$field['required']) {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Make a registration field on the p2p register page required or not.
 *
 * The registration fields are nested and weird, so I try to do this in a very
 * general way to handle custom user profile fields.
 *
 * @param array $form
 *   The form array for the p2p register page.
 * @param string $field_name
 *   The name of the field to make required.
 * @param bool $required
 *   The value for #required.
 */
function springboard_p2p_set_registration_field_required(&$form, $field_name, $required = TRUE) {
  $field_language = $form[$field_name]['#language'];
  $form[$field_name][$field_language]['#required'] = $required;
  $keys = element_children($form[$field_name][$field_language]);
  foreach ($keys as $key) {
    $form[$field_name][$field_language][$key]['#required'] = $required;
    if (isset($form[$field_name][$field_language][$key]['value'])) {
      $form[$field_name][$field_language][$key]['value']['#required'] = $required;
    }
  }
}

/**
 * Add the campaign ID value form element and submit handler to a form.
 *
 * The submit handler should happen last because it sets the redirect and should
 * override any other redirects.  So call this near the end of the form.
 *
 * @param array $form
 *   The form array to insert the element into.
 * @param array $form_state
 *   Form state.
 */
function springboard_p2p_campaign_id_form_element(&$form, $form_state) {
  if (!empty($form_state['values']['springboard_p2p_campaign_nid'])) {
    $value = $form_state['values']['springboard_p2p_campaign_nid'];
  }
  else {
    $value = springboard_p2p_get_campaign_id_from_request();
  }

  $form['springboard_p2p_campaign_nid'] = array(
    '#type' => 'value',
    '#value' => $value,
  );

  // This handler changes the redirect.
  $form['#submit'][] = 'springboard_p2p_set_redirect';
}

/**
 * Gets a campaign ID from the URL.
 *
 * @return int|null
 *   The campaign ID, or NULL if one can't be found.
 */
function springboard_p2p_get_campaign_id_from_request() {
  if (isset($_GET['p2p_cid']) && is_numeric($_GET['p2p_cid'])) {
    $node = node_load($_GET['p2p_cid']);
    if (isset($node->type) && $node->type == 'p2p_campaign') {
      return $node->nid;
    }
  }

  return NULL;
}

/**
 * Submit handler.
 *
 * Saves the campaign approval status and changes the redirect.
 */
function springboard_p2p_set_redirect($form, &$form_state) {

  if (!empty($form_state['uid'])) {
    $uid = $form_state['uid'];
  }
  elseif (!empty($form_state['user']->uid)) {
    $uid = $form_state['user']->uid;
  }
  else {
    // Bail!
    return;
  }

  if (isset($form_state['values']['registering_for_p2p'])) {
    $registering_for_p2p = $form_state['values']['registering_for_p2p'];
  }
  else {
    $registering_for_p2p = FALSE;
  }

  // Default destination if nothing else works.
  $form_state['redirect'] = 'user/' . $uid . '/personal-campaigns';

  if (!empty($form_state['values']['springboard_p2p_campaign_nid'])) {
    $campaign_id = $form_state['values']['springboard_p2p_campaign_nid'];
    $campaign = node_load($campaign_id);
    if (is_object($campaign) && $campaign->type == 'p2p_campaign') {
      $private = springboard_p2p_campaign_is_private($campaign);

      $approval = new SpringboardP2pPrivateCampaignApproval($uid, $campaign_id);

      if ($private) {
        $approval->request();
        drupal_set_message('You have been added to the approval queue for ' . $campaign->title);
        $form_state['redirect'] = 'user/' . $uid . '/personal-campaigns';

        $account = user_load($uid);

        $event = new SpringboardP2pEvents();
        $event->userRequestsApprovalForPrivateCampaign($account, $campaign, $registering_for_p2p);
      }
      else {
        $approval->approve();
        drupal_set_message('You can now create a personal campaign in ' . $campaign->title);

        $form_state['redirect'] = array(
          'node/add/p2p-personal-campaign',
          array(
            'query' => array(
              'p2p_cid' => $campaign_id,
            ),
          ),
        );

      }
    }
  }
}

/**
 * Determines if a p2p campaign node is private (approval required).
 *
 * @param object $campaign
 *   The campaign node object.
 *
 * @return bool
 *   TRUE if the campaign is private.
 */
function springboard_p2p_campaign_is_private($campaign) {
  if (!empty($campaign->field_p2p_campaigns_approval[$campaign->language][0]['value'])) {
    return (bool) $campaign->field_p2p_campaigns_approval[$campaign->language][0]['value'];
  }

  return FALSE;
}

/**
 * Is the user registered for p2p.
 *
 * @param int $uid
 *   User ID.
 *
 * @return bool
 *   TRUE if the user is registered for p2p.
 */
function springboard_p2p_user_is_registered_for_p2p($uid) {
  $account = user_load($uid);
  $role = user_role_load_by_name(SPRINGBOARD_P2P_ROLE);

  return in_array($role->rid, array_keys($account->roles));
}

/**
 * Registers user for p2p.
 *
 * @param int $uid
 *   User ID.
 */
function springboard_p2p_register_user_for_p2p($uid) {
  $role = user_role_load_by_name(SPRINGBOARD_P2P_ROLE);
  $account = user_load($uid);
  $roles = $account->roles + array($role->rid => $role->name);
  // For efficiency manually save the original account before applying
  // any changes.
  $account->original = clone $account;
  user_save($account, array('roles' => $roles));
}

/**
 * Provides a custom url for setting a password in the context of p2p.
 *
 * @param object $account
 *   The user that needs to set a password.
 *
 * @return string
 *   The URL to the P2P set password page for the account.
 */
function springboard_p2p_set_password_url($account, $cid = NULL) {
  $url = user_pass_reset_url($account);
  $url = str_replace('user/reset/', 'springboard_p2p/set_password/', $url);
  if (!is_null(($cid)) && is_numeric($cid)) {
    $url .= '?p2p_cid=' . $cid;
  }
  return $url;
}

/**
 * Verify the email address will be a valid username.
 *
 * Returns email specific error messages.
 *
 * @param string $mail
 *   The email address to check.
 *
 * @return string|NULL
 *   The email specific error, or NULL for no errors.
 *
 * @see user_validate_name()
 */
function springboard_p2p_validate_email_as_username($mail) {
  if (strpos($mail, '  ') !== FALSE) {
    return t('The e-mail address cannot contain multiple spaces in a row.');
  }
  if (preg_match('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', $mail)) {
    return t('The e-mail address contains an illegal character.');
  }
  // Non-printable ISO-8859-1 + NBSP.
  if (preg_match('/[\x{80}-\x{A0}' .
    // Soft-hyphen.
    '\x{AD}' .
    // Various space characters.
    '\x{2000}-\x{200F}' .
    // Bidirectional text overrides.
    '\x{2028}-\x{202F}' .
    // Various text hinting characters.
    '\x{205F}-\x{206F}' .
    // Byte order mark.
    '\x{FEFF}' .
    // Full-width latin.
    '\x{FF01}-\x{FF60}' .
    // Replacement characters.
    '\x{FFF9}-\x{FFFD}' .
    // NULL byte and control characters.
    '\x{0}-\x{1F}]/u',
    $mail)) {
    return t('The e-mail address contains an illegal character.');
  }
  if (drupal_strlen($mail) > USERNAME_MAX_LENGTH) {
    return t('The e-mail address %name is too long: it must be %max characters or less.', array('%name' => $mail, '%max' => USERNAME_MAX_LENGTH));
  }

}

/**
 * Implements hook_forms().
 *
 * For the add rules form, call the rules admin form.
 *
 * @see commerce_payment_ui_forms()
 */
function springboard_p2p_forms($form_id, $args) {
  $forms = array();

  $forms['springboard_p2p_add_rule_form'] = array(
    'callback' => 'rules_admin_add_reaction_rule',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see commerce_payment_ui_form_commerce_payment_ui_add_payment_rule_form_alter()
 * @see commerce_payment_ui_add_payment_rule_form_submit()
 * @see rules_admin_add_reaction_rule()
 */
function springboard_p2p_form_springboard_p2p_add_rule_form_alter(&$form, &$form_state) {
  unset($form['settings']['help']);

  // Only show P2P events.
  $form['settings']['event']['#options'] = $form['settings']['event']['#options']['Springboard P2P'];

  // Add a default tag.
  $form['settings']['tags']['#default_value'] = 'Springboard P2P';

  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/springboard/p2p/rules');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function springboard_p2p_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/springboard/p2p/rules/add' on
  // 'admin/springboard/p2p/rules'.
  if ($root_path == 'admin/springboard/p2p/rules') {
    $item = menu_get_item('admin/springboard/p2p/rules/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_fundraiser_donation_post_create().
 *
 * At this point in the process there is enough information
 * to determine if the donation is being made to a personal
 * campaign. Let's go ahead and record that fact here because
 * downstream processing might need it.
 */
function springboard_p2p_fundraiser_donation_post_create($donation) {
  // Check to see if donation is being made to a personal campaign.
  if (isset($_GET['p2p_pcid']) && is_numeric($_GET['p2p_pcid'])) {
    // Add the peer to peer personal campaign id to the donation
    // object so that it can be utilized downstream.
    $donation->p2p_pcid = $_GET['p2p_pcid'];

    // Create a minimum action record. This record be completed in
    // springboard_p2p_fundraiser_donation_post_submit.
    $record['sid'] = $donation->sid;
    $record['form_nid'] = $donation->nid;
    $record['personal_campaign_nid'] = $_GET['p2p_pcid'];
    $record['action_type'] = 'fundraiser';
    $record['comment'] = '';

    springboard_p2p_save_personal_campaign_action($record);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Adds extra data to a p2p enabled form if a personal campaign ID is passed in.
 */
function springboard_p2p_form_alter(&$form, &$form_state, $form_id) {

  if (isset($_GET['p2p_pcid']) && is_numeric($_GET['p2p_pcid']) && strpos($form_id, 'webform_client_form_') !== FALSE && !empty($form['#node'])) {
    $type = $form['#node']->type;
    $personal_campaign_id = $_GET['p2p_pcid'];

    $is_fundraiser_type = fundraiser_is_donation_type($type);
    $is_webform_user_type = _webform_user_is_webform_user_node_type($type);
    if ($is_fundraiser_type || $is_webform_user_type) {

      $personal_campaign = node_load($personal_campaign_id);

      if ($personal_campaign->type == 'p2p_personal_campaign') {

        $campaign_id = $personal_campaign->field_p2p_campaign[$personal_campaign->language][0]['target_id'];

        $form['#validate'][] = 'springboard_p2p_webform_client_form_validate';
        $form['#submit'][] = 'springboard_p2p_webform_client_form_submit';

        if ($is_fundraiser_type) {
          $action_type = 'fundraiser';
        }
        else {
          $action_type = 'webform_user';
        }
        $form['personal_campaign_id'] = array(
          '#type' => 'value',
          '#value' => $personal_campaign_id,
        );
        $form['springboard_p2p_personal_campaign_action'] = array(
          '#type' => 'fieldset',
          '#title' => 'P2P',
          '#tree' => TRUE,
          'action_type' => array(
            '#type' => 'value',
            '#value' => $action_type,
          ),
          'category_nid' => array(
            '#type' => 'value',
            '#value' => '',
          ),
          'campaign_nid' => array(
            '#type' => 'value',
            '#value' => $campaign_id,
          ),
          'personal_campaign_nid' => array(
            '#type' => 'value',
            '#value' => $personal_campaign->nid,
          ),
          'personal_campaign_uid' => array(
            '#type' => 'value',
            '#value' => $personal_campaign->uid,
          ),
          'form_nid' => array(
            '#type' => 'value',
            '#value' => $form['#node']->nid,
          ),
        );

        $form['springboard_p2p_personal_campaign_action']['#prefix'] = '<div id ="comment-wrapper">';

        $form['springboard_p2p_personal_campaign_action']['show_name'] = array(
          '#type' => 'checkbox',
          '#title' => t('Show my name on the campaign page'),
        );

        drupal_set_title($personal_campaign->title);

        $owner = user_load($personal_campaign->uid);
        $owner_name = springboard_p2p_format_user_full_name($owner);

        $campaign = node_load($campaign_id);
        if (!empty($campaign) && $campaign->type == 'p2p_campaign') {

          $form['springboard_p2p_personal_campaign_action']['comment'] = array(
            '#type' => 'textarea',
            '#title' => t('Add a comment below (optional)'),
            '#default_value' => '',
            '#access' => springboard_p2p_campaign_allows_comments($campaign),
          );

          $form['springboard_p2p_personal_campaign_action']['#suffix'] = '</div>';

          $category_id = $campaign->field_p2p_category[$campaign->language][0]['target_id'];
          $form['springboard_p2p_personal_campaign_action']['category_nid']['#value'] = $category_id;

          // @todo Confirm that this donation form nid is selected from the
          // campaign goals.
          // $header = springboard_p2p_format_campaign_form_header($campaign);
          // if (count($header)) {
          // $form['submitted']['springboard_p2p']['header'] = $header;
          // }

          $form['submitted']['springboard_p2p'] = array(
            '#type' => 'container',
            '#tree' => TRUE,
            '#weight' => -200,
            'owner' => array(
              '#markup' => '<h2>' . $owner_name . '</h2>',
            ),
          );
        }
      }

    }

    // Test for donation form and if a p2p form.
    if (($is_fundraiser_type) || (!empty($_GET['p2p_pcid']))) {

      // Get rid of the grippie.
      $form["springboard_p2p_personal_campaign_action"]['comment']['#resizable'] = FALSE;

      // Retrieve various webform fields using
      // fundraiser_webform_fundraiser_get_form_field.
      $donation = fundraiser_webform_fundraiser_get_form_field($form, 'donation');
      $payment_method = fundraiser_webform_fundraiser_get_form_field($form, 'payment_method');
      $payment_fields = fundraiser_webform_fundraiser_get_form_field($form, 'payment_fields');
      $recurs_monthly = fundraiser_webform_fundraiser_get_form_field($form, 'recurs_monthly');

      // Alters.
      $donation['other_amount']['#prefix'] = '<div id="other-wrapper"> ';
      $donation['other_amount']['#suffix'] = '</div> ';
      $payment_fields['credit']['card_cvv']['#title'] = t('CVV Number');

      $payment_method['#weight'] = 10;
      $payment_fields['#weight'] = 50;
      $recurs_monthly['#weight'] = 100;

      // Update the altered fields from above.
      $form = fundraiser_webform_fundraiser_update_form_field($form, 'donation', $donation);
      $form = fundraiser_webform_fundraiser_update_form_field($form, 'payment_fields', $payment_fields);
      $form = fundraiser_webform_fundraiser_update_form_field($form, 'payment_method', $payment_method);
      $form = fundraiser_webform_fundraiser_update_form_field($form, 'recurs_monthly', $recurs_monthly);
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo Springboard P2P owns this form, so we don't need to alter it.
 *       We can just put this in the form itself.
 */
function springboard_p2p_form_springboard_p2p_user_register_form_alter(&$form, &$form_state) {

  // Unset the email description field on reg.
  unset($form['mail']['#description']);

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo Springboard P2P owns this form, so we don't need to alter it.
 *       We can just put this in the form itself.
 */
function springboard_p2p_form_springboard_p2p_request_password_reset_form_alter(&$form, &$form_state, $form_id) {

  // Alter submit button text.
  $form['name']['#prefix'] = '<div class="form-wrapper">';
  $form['name']['#suffix'] = '</div>';
  $form['actions']['#prefix'] = '<div class="form-wrapper">';
  $form['actions']['#suffix'] = '</div>';
  $form['actions']['submit']['#value'] = t('Send new password request');

}

/**
 * Validate function.  Changes the market source campaign id when in p2p mode.
 */
function springboard_p2p_webform_client_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['springboard_p2p_personal_campaign_action'])) {
    $action = $form_state['values']['springboard_p2p_personal_campaign_action'];
    $campaign = node_load($action['campaign_nid']);
    $goal = springboard_p2p_get_goal_from_campaign($campaign);

    // Only override if a value is provided.
    if (!empty($goal['campaign_id'])) {
      $form_state['values']['submitted']['cid'] = $goal['campaign_id'];
    }
  }
}

/**
 * Submit function for the p2p enabled form.
 *
 * Increments the submissions counter for the personal campaign. We do this here
 * instead of in the post_submit below so we can count submissions on
 * non-fundraiser forms.
 */
function springboard_p2p_webform_client_form_submit($form, &$form_state) {

  if (!empty($form_state['values']['springboard_p2p_personal_campaign_action'])) {
    $action = $form_state['values']['springboard_p2p_personal_campaign_action'];
    if ($action['action_type'] == 'webform_user') {
      springboard_p2p_submit_personal_campaign_action($action);
    }

    $form_state['redirect'][1]['query']['p2p_pcid'] = $form_state['values']['springboard_p2p_personal_campaign_action']['personal_campaign_nid'];

  }
  // Pass personal campaign id to Social for use when constructing share URLs.
  if (module_exists('sb_social') && !empty($form_state['values']['personal_campaign_id'])) {
    $url_context = array(
      'personal_campaign_id' => $form_state['values']['personal_campaign_id'],
    );
    $_SESSION['sb_social_url_context'] = $url_context;
  }
}

/**
 * Implements hook_sb_social_share_url_alter().
 */
function springboard_p2p_sb_social_share_url_alter(&$url, $node, $url_context) {
  // If personal campaign id is available in context, we want share urls
  // to point to the personal campaign node instead of the donation form.
  if ($url_context && isset($url_context['personal_campaign_id'])) {
    $node = node_load($url_context['personal_campaign_id']);
    if ($node->type == 'p2p_personal_campaign') {
      $url_parsed = parse_url($url);
      $alias = drupal_lookup_path('alias', 'node/' . $node->nid);
      $url_parsed['path'] = $alias ? $alias : 'node/' . $node->nid;

      // Reconstruction.
      $url = $url_parsed['scheme'] . '://';
      $url .= $url_parsed['host'] . '/' . $url_parsed['path'];
      $url .= '?' . $url_parsed['query'];
    }
  }
}

/**
 * Implements hook_sb_social_init_settings_load_alter().
 */
function springboard_p2p_sb_social_init_settings_load_alter(&$settings) {
  $personal_campaign = isset($_SESSION['sb_social_url_context']['personal_campaign_id']) ? $_SESSION['sb_social_url_context']['personal_campaign_id'] : FALSE;
  // Personal campaign id should only be set when a donation form is submitted
  // with a personal campaign association. Under these conditions we want to use
  // Social settings from the personal campaign node.
  if ($personal_campaign) {
    $sid = sb_social_get_sid_by_id($personal_campaign, 'node');
    $settings = sb_social_settings_load($sid);
  }
}

/**
 * Implements hook_sb_social_tokens_data().
 */
function springboard_p2p_sb_social_tokens_data_alter(&$node) {
  $personal_campaign = isset($_SESSION['sb_social_url_context']['personal_campaign_id']) ? $_SESSION['sb_social_url_context']['personal_campaign_id'] : FALSE;

  if ($personal_campaign) {
    $node = node_load($personal_campaign);
    // Shut down the session variable since it is no longer needed.
    $_SESSION['sb_social_url_context']['personal_campaign_id'] = FALSE;
  }
}

/**
 * Implements hook_fundraiser_donation_post_submit().
 *
 * Adds the initial donation amount to the personal campaign progress.
 */
function springboard_p2p_fundraiser_donation_post_submit($form, $form_state, $donation) {

  if (!empty($donation->recurring) && ($donation->recurring->master_did != $donation->did)) {
    return;
  }

  if (!$donation->result['success']) {
    return;
  }

  if (!empty($form_state['values']['springboard_p2p_personal_campaign_action'])) {
    $action = $form_state['values']['springboard_p2p_personal_campaign_action'];
    if ($action['action_type'] == 'fundraiser') {
      springboard_p2p_submit_personal_campaign_action($action, $donation);
    }
  }

}

/**
 * Formats a user's full name using the first name and last name fields.
 *
 * @param object $account
 *   User account.
 *
 * @return string
 *   The full name of the user.
 */
function springboard_p2p_format_user_full_name($account) {
  $language = !empty($account->language) ? $account->language : 'und';
  $full_name = '';
  if (!empty($account->sbp_first_name[$language][0]['safe_value']) && !empty($account->sbp_last_name[$language][0]['safe_value'])) {
    $full_name = $account->sbp_first_name[$language][0]['safe_value'] . ' ' . $account->sbp_last_name[$language][0]['safe_value'];
  }

  return $full_name;
}

/**
 * Increment the personal campaign progress and save the action.
 *
 * @param array $action
 *   The action array as it came from form_state.
 * @param object|null $donation
 *   If this is a fundraiser action, pass in the donation.
 */
function springboard_p2p_submit_personal_campaign_action($action, $donation = NULL) {
  if (!empty($action['personal_campaign_nid'])) {
    $key = NULL;
    $personal_campaign = node_load($action['personal_campaign_nid']);

    // Incremenet the submissions progress.
    ++$personal_campaign->field_p2p_campaign_progress[$personal_campaign->language][0]['submissions'];

    // If a donation was passed in then we have a fundraiser action
    // and should increment the amount progress.
    if (!is_null(($donation))) {
      // In the case of a donation, an action record will have been
      // created in springboard_p2p_fundraiser_donation_post_create.
      // Set the $key to sid so the record will get updated with the
      // remaining information.
      $key = array('sid');
      $action['uid'] = $donation->uid;
      $action['sid'] = $donation->sid;
      $amount = $donation->donation['amount'];
      if (!empty($donation->donation['quantity'])) {
        $amount = $amount * $donation->donation['quantity'];
      }
      $personal_campaign->field_p2p_campaign_progress[$personal_campaign->language][0]['amount'] += $amount;
      $action['amount'] = $amount * 100;
    }
    node_save($personal_campaign);
  }

  springboard_p2p_save_personal_campaign_action($action, $key);
}

/**
 * Saves a new personal campaign action record.
 *
 * @param array $record
 *   The record to write to the table.
 * @param array $key
 *   The primary key. Use to perform an update on an existing record.
 */
function springboard_p2p_save_personal_campaign_action($record, $key = NULL) {
  $record = (array) $record;

  if (empty($record['created'])) {
    $record['created'] = REQUEST_TIME;
  }

  if (!empty($key)) {
    drupal_write_record('springboard_p2p_personal_campaign_action', $record, $key);
  }
  else {
    drupal_write_record('springboard_p2p_personal_campaign_action', $record);
  }
}

/**
 * Retrieve a single personal campaign action record based on a sid.
 *
 * @param int $sid
 *   The webform submission ID.
 *
 * @return array|bool
 *   An associative array, or FALSE.
 */
function springboard_p2p_get_personal_campaign_action_by_sid($sid) {
  $query = "SELECT category_nid, campaign_nid, personal_campaign_nid, personal_campaign_uid, form_nid, action_type, uid, show_name, comment, amount, created, sid FROM {springboard_p2p_personal_campaign_action} WHERE sid = :sid";

  return db_query($query, array(':sid' => $sid))->fetchAssoc();
}

/**
 * Takes a campaign and returns the form element for its header image.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return array
 *   The form element for the header image.
 */
function springboard_p2p_format_campaign_form_header($campaign) {
  if ($campaign->type == 'p2p_campaign' && isset($campaign->field_p2p_campaign_banner) && !empty($campaign->field_p2p_campaign_banner[$campaign->language])) {

    $display = array(
      'settings' => array(
        'image_link' => 'content',
        'image_style' => 'p2p_top_banner',
      ),
    );

    return image_field_formatter_view(
      'p2p_campaign',
      $campaign,
      array(),
      array(),
      $campaign->language,
      $campaign->field_p2p_campaign_banner[$campaign->language],
      $display
    );
  }

  return array();
}

/**
 * Implements hook_page_alter().
 *
 * Adds customizations to the p2p webform.
 */
function springboard_p2p_page_alter(&$page, $form) {
  if (isset($_GET['p2p_pcid']) && is_numeric($_GET['p2p_pcid']) && arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
    $personal_campaign_id = $_GET['p2p_pcid'];

    $node = node_load(arg(1));
    $type = $node->type;
    $is_fundraiser_type = fundraiser_is_donation_type($type);
    $is_webform_user_type = _webform_user_is_webform_user_node_type($type);
    if ($is_fundraiser_type || $is_webform_user_type) {
      $personal_campaign = node_load($personal_campaign_id);
      if ($personal_campaign->type == 'p2p_personal_campaign') {

        $campaign_id = $personal_campaign->field_p2p_campaign[$personal_campaign->language][0]['target_id'];
        $campaign = node_load($campaign_id);
        if (!empty($campaign) && $campaign->type == 'p2p_campaign') {

          // Place the banner in the springboard_frontend theme header region.
          // @todo Review and remove this if needed.
          // $page['page_top']['springboard_p2p_banner'] = springboard_p2p_format_campaign_form_header($campaign);
        }
      }
    }
  }

  // Not admin page.
  if (!path_is_admin(current_path())) {

    // Global node.
    $node = menu_get_object();

    // Define the module path for use below.
    $mod_path = drupal_get_path('module', 'springboard_p2p');

    // Query the url string to see if it's a p2p donation form
    // but not the thank you page.
    if (empty($_GET['sid'])) {
      if (!empty($_GET['p2p_pcid']) && fundraiser_is_donation_type($node->type)) {
        $p2p_donation_path = '';
      }
    }

    // Check for a p2p donation thank you page.
    if (!empty($_GET['sid']) && ($_GET['p2p_pcid'])) {
      $p2p_thanks_path = '';
    }

    // Define register / login / password page paths.
    if ((arg(0) == "springboard_p2p" && arg(1) == "register") || (arg(0) == "springboard_p2p" && arg(1) == "login") || (arg(0) == "springboard_p2p" && arg(1) == "password")) {
      $p2p_path = '';
    }

    // Define targeted node types, add more as needed.
    $node_types = array(
      'p2p_personal_campaign',
      'p2p_campaign_landing',
      'p2p_campaign',
    );

    // Global p2p css file - nodes, p2p reg, p2p donation.
    if ((!empty($node) && in_array($node->type, $node_types)) || (isset($p2p_path)) || (isset($p2p_donation_path)) || (isset($p2p_thanks_path))) {

      $p2p_css = array(
        '#attached' => array(
          'css' => array(
            $mod_path . '/css/springboard-p2p.css' => array(
              'group' => CSS_THEME,
              'weight' => 9999,
            ),
          ),
        ),
      );
      drupal_render($p2p_css);

      // Global p2p css file, global nodes and regpath.
      $p2p_js = array(
        '#attached' => array(
          'js' => array(
            $mod_path . '/js/springboard-p2p.js' => array(
              'group' => JS_THEME,
              'weight' => 9999,
            ),
          ),
        ),
      );
      drupal_render($p2p_js);
    }

    // Regpath for account pages (login, register, password).
    if (isset($p2p_path)) {
      $p2p_account_css = array(
        '#attached' => array(
          'css' => array(
            $mod_path . '/css/p2p-account.css' => array(
              'group' => CSS_THEME,
              'weight' => 9999,
            ),
          ),
        ),
      );
      drupal_render($p2p_account_css);
    }

    // Just the p2p donation path.
    if ((isset($p2p_donation_path)) || (isset($p2p_thanks_path))) {
      $p2p_donation_css = array(
        '#attached' => array(
          'css' => array(
            $mod_path . '/css/p2p-donation.css' => array(
              'group' => CSS_THEME,
              'weight' => 999,
            ),
          ),
        ),
      );
      drupal_render($p2p_donation_css);

      $p2p_jrespond = array(
        '#attached' => array(
          'js' => array(
            $mod_path . '/js/mediaCheck.js' => array(
              'group' => JS_LIBRARY,
            ),
          ),
        ),
      );
      drupal_render($p2p_jrespond);

      $p2p_donation_js = array(
        '#attached' => array(
          'js' => array(
            $mod_path . '/js/p2p-donation.js' => array(
              'group' => JS_THEME,
              'weight' => 999,
            ),
          ),
        ),
      );
      drupal_render($p2p_donation_js);
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Override or insert variables into the html templates.
 */
function springboard_p2p_preprocess_html(&$vars) {
  // Define targeted node types, add more as needed.
  $node_types = array(
    'p2p_personal_campaign',
    'p2p_campaign_landing',
  );

  // Global node.
  $node = menu_get_object();
  if (!empty($node) && in_array($node->type, $node_types)) {
    // Add a global body class if it's a p2p page,
    // add more types above as needed.
    $vars['classes_array'][] = 'p2p-page-type';
  }

}

/**
 * Retrieve personal campaign comments for a given personal campaign nid.
 *
 * @param int $nid
 *   The node id of the personal campaign.
 * @param bool $exclude_empty_comments
 *   Don't include empty actions with empty comments.
 *
 * @return mixed
 *   An array of personal campaign actions, keyed by column name.
 */
function springboard_p2p_get_personal_campaign_comments($nid, $exclude_empty_comments = FALSE) {
  $query = "SELECT action_type, uid, show_name, amount, comment, created FROM {springboard_p2p_personal_campaign_action} WHERE personal_campaign_nid = :nid";

  if ($exclude_empty_comments) {
    $query .= " AND comment != ''";
  }

  $query .= " ORDER BY created DESC";

  return db_query($query, array(':nid' => $nid))->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Determines if the given campaign has the donor roll enabled.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return bool
 *   Whether the campaign has the donor roll/scroll enabled.
 */
function springboard_p2p_campaign_should_show_donor_roll($campaign) {
  return (bool) $campaign->field_p2p_show_donor_scroll[$campaign->language][0]['value'];
}

/**
 * Determines if the given campaign has comment display enabled.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return bool
 *   Whether the campaign has comment display enabled.
 */
function springboard_p2p_campaign_should_show_comments($campaign) {
  return (bool) $campaign->field_p2p_show_donor_comments[$campaign->language][0]['value'];
}

/**
 * Determines if the given campaign allows new comments.
 *
 * @param object $campaign
 *   The campaign node.
 *
 * @return bool
 *   Whether the campaign allows commenting.
 */
function springboard_p2p_campaign_allows_comments($campaign) {
  return (bool) $campaign->field_p2p_allow_donor_comments[$campaign->language][0]['value'];
}

/**
 * Implements hook_css_alter().
 */
function springboard_p2p_css_alter(&$css) {

  // Define targeted node types, add more as needed.
  $node_types = array(
    'p2p_personal_campaign',
    'p2p_campaign_landing',
  );

  // Global node.
  $node = menu_get_object();
  if (!empty($node) && in_array($node->type, $node_types)) {

    // Define the views module path.
    $viewsmodpath = drupal_get_path('module', 'views') . '/css';

    // Exclude system.theme.css
    $exclude = array(
      'modules/system/system.theme.css' => FALSE,
      $viewsmodpath .  '/views.css' => FALSE,
    );
    $css = array_diff_key($css, $exclude);
  }
}

/**
 * Implements template_preprocess_page().
 *
 * Add convenience variables and template suggestions.
 */
function springboard_p2p_preprocess_page(&$vars) {

  // Unset the h1 title for the login page, we set it in a custom pane.
  if (arg(0) == 'springboard_p2p' && arg(1) == 'login') {
    $vars['title'] = '';
  }

}

/**
 * Implements hook_mail().
 *
 * Used for the password reset mail if rules is not enabled.
 */
function springboard_p2p_mail($key, &$message, $params) {
  switch ($key) {
    case 'password_reset':
      $options = array(
        'langcode' => $message['language']->language,
      );

      $message['subject'] = t('Password reset', $options);
      $message['body'][] = t('Here is your password reset link.', $options);
      $message['body'][] = springboard_p2p_set_password_url($params['account'], $params['p2p_cid']);
      break;

  }
}

/**
 * Implements hook_user_cancel().
 *
 * Deletes all of the private campaign approval records when a user account is
 * canceled, regardless of the cancellation method.
 *
 * @see user_cancel_methods()
 */
function springboard_p2p_user_cancel($edit, $account, $method) {
  SpringboardP2pPrivateCampaignApproval::deleteAll($account->uid);
}

/**
 * Implements hook_user_delete().
 *
 * Delets all of the private campaign approval records when a user account is
 * deleted.
 */
function springboard_p2p_user_delete($account) {
  SpringboardP2pPrivateCampaignApproval::deleteAll($account->uid);
}

/**
 * Creates a progress and goal box.
 *
 * @param object $campaign
 *   The p2p campaign.
 * @param object $personal_campaign
 *   The personal campaign.
 *
 * @return string
 *   The html for the progress bar.
 */
function springboard_p2p_personal_campaign_progress_box($campaign, $personal_campaign) {
  if (!is_null($campaign) && !is_null($personal_campaign)) {
    $output = array();
    $language = $personal_campaign->language;
    $goal_type = springboard_p2p_get_goal_type_from_campaign($campaign);

    $progress_field = $personal_campaign->field_p2p_campaign_progress[$language][0];
    $progress_with_units = springboard_p2p_format_progress($progress_field, $goal_type);

    if ($goal_type == 'submissions' && isset($personal_campaign->field_p2p_personal_submit_goal[$language][0]['value'])) {
      $submissions_goal_value = $personal_campaign->field_p2p_personal_submit_goal[$language][0]['value'];
      $percent = springboard_p2p_format_percent($progress_field['submissions'], $submissions_goal_value, FALSE, FALSE);
      $progress_text = t('@progress to date', array('@progress' => $progress_with_units));
    }
    elseif ($goal_type == 'amount' && isset($personal_campaign->field_p2p_personal_campaign_goal[$language][0]['value'])) {
      $amount_goal_value = $personal_campaign->field_p2p_personal_campaign_goal[$language][0]['value'];
      $percent = springboard_p2p_format_percent($progress_field['amount'], $amount_goal_value, FALSE, FALSE);
      $progress_text = t('@progress raised to date', array('@progress' => $progress_with_units));
    }
    else {
      return '';
    }

    $output[] = '<i class="fa fa-calendar amount-icon"></i>';

    $output[] = '<div class="personal-campaign-progress-container">';
    $output[] = '<div class="personal-campaign-progress">' . $progress_text . '</div>';
    $output[] = '<div class="progress-bar-wrapper">';
    $output[] = '<div class="progress-bar" style="width:' . $percent . '%"></div>';
    $output[] = '</div>';

    $output[] = '</div>';

    return implode('', $output);
  }

  return '';
}

/**
 * Determine if the state and country fields exist and are shown on the form.
 *
 * @param array $form
 *   Form array.
 *
 * @return bool
 *   TRUE if the ajax stuff should be added to the form.
 */
function springboard_p2p_should_add_state_and_country_ajax($form) {
  return
    isset($form['sbp_state']) &&
    isset($form['sbp_country']) &&
    $form['sbp_state']['#access'] &&
    $form['sbp_country']['#access'];
}
