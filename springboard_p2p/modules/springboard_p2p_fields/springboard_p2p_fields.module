<?php

/**
 * @file
 * Defines custom fields types for Springobard P2P.
 */

/**
 * Implements hook_theme().
 */
function springboard_p2p_fields_theme() {
  return array(
    'springboard_p2p_fields_campaign_goals' => array(
      'render element' => 'springboard_p2p_fields_campaign_goals',
      'file' => 'springboard_p2p_fields.widget.inc',
      'path' => drupal_get_path('module', 'springboard_p2p_fields') . '/includes',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function springboard_p2p_fields_field_info() {
  return array(
    'springboard_p2p_fields_campaign_goals' => array(
      'label' => t('Peer to peer goals configuration'),
      'description' => t('Goals configuration for a peer to peer campaign.'),
      'default_widget' => 'springboard_p2p_fields_campaign_goals_widget',
      'default_formatter' => 'hidden',
      'no_ui' => FALSE,
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
function springboard_p2p_fields_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  foreach ($items as $delta => $item) {
    $enabled_types = 0;
    $no_form_selected = FALSE;
    if (!empty($item['campaign_goals'])) {
      foreach ($item['campaign_goals']['form_types'] as $form_type => $content_types) {
        foreach ($content_types as $content_type) {
          $enabled_types += $content_type['enabled'];

          if ($content_type['enabled'] && $content_type['nid'] == '') {
            $no_form_selected = TRUE;
          }
        }
      }

      if ($enabled_types > 1) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'springboard_p2p_fields_campaign_goals_too_many',
          'message' => t('Select only one goal type.'),
        );
      }
      elseif ($enabled_types < 1) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'springboard_p2p_fields_campaign_goals_not_enough',
          'message' => t('Select a goal type.'),
        );
      }
      elseif ($no_form_selected) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'springboard_p2p_fields_campaign_goals_no_nid',
          'message' => t('Select a form for the enabled goal type.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * If any of the rows are enabled and have a nid selected, then the field is
 * not empty.
 */
function springboard_p2p_fields_field_is_empty($item, $field) {
  foreach ($item['campaign_goals']['form_types'] as $form_type => $content_types) {
    foreach ($content_types as $content_type) {
      if ($content_type['enabled'] || $content_type['nid'] != '') {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Implements hook_field_presave().
 */
function springboard_p2p_fields_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $rows = array();
  foreach ($items as $delta => $item) {
    $goal_set_id = isset($item['campaign_goals']['goal_set_id']) ? $item['campaign_goals']['goal_set_id'] : NULL;
    foreach ($item['campaign_goals']['form_types'] as $form_type => $content_types) {
      foreach ($content_types as $content_type => $settings) {
        // Format the data as a record for the DB.
        $rows[$content_type] = $settings;
        $rows[$content_type]['type'] = $content_type;
      }
    }

    // Save the rows, get back a goal set id.
    // Then set the item to that goal set id.
    $items[$delta]['goal_set_id'] = springboard_p2p_fields_campaign_goals_save($goal_set_id, $rows);
  }

}

/**
 * Implements hook_field_delete().
 *
 * Removes externally saved goal data when an entity is deleted.
 */
function springboard_p2p_fields_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $item) {
    springboard_p2p_fields_campaign_goals_delete($item['goal_set_id']);
  }
}

/**
 * Saves campaign goals settings to the DB.
 *
 * @param int|null $goal_set_id
 *   If this is an existing set of records, the goal set ID.
 *   If this is a new set, NULL.
 * @param array $rows
 *   Each row is an array keyed by column name.
 *
 * @return int
 *   The goal set ID that the rows were saved with.
 */
function springboard_p2p_fields_campaign_goals_save($goal_set_id, $rows) {
  $table = 'springboard_p2p_fields_campaign_goals';
  $create = FALSE;
  if (is_null($goal_set_id)) {
    $next_id = db_query("SELECT MAX(goal_set_id) FROM {springboard_p2p_fields_campaign_goals}")->fetchField();
    $goal_set_id = ++$next_id;
    $create = TRUE;
  }

  foreach ($rows as $row) {
    $row['goal_set_id'] = $goal_set_id;

    if ($create) {
      drupal_write_record($table, $row);
    }
    else {
      drupal_write_record($table, $row, array('goal_set_id', 'type'));
    }
  }

  // Return the ID so the field knows the reference to save.
  return $goal_set_id;
}

/**
 * Get the campaign goals for the given goal set ID.
 *
 * @param int $goal_set_id
 *   The goal set ID.
 *
 * @return array|bool
 *   An associate array of the results keyed by type.
 */
function springboard_p2p_fields_campaign_goals_load($goal_set_id) {
  return db_query("SELECT * FROM {springboard_p2p_fields_campaign_goals} WHERE goal_set_id = :id", array(':id' => $goal_set_id))
    ->fetchAllAssoc('type', PDO::FETCH_ASSOC);
}

/**
 * Delete the campaign goals for the given goal set ID.
 *
 * @param int $goal_set_id
 *   The goal set ID to delete.
 */
function springboard_p2p_fields_campaign_goals_delete($goal_set_id) {
  db_delete('springboard_p2p_fields_campaign_goals')
    ->condition('goal_set_id', $goal_set_id)
    ->execute();
}

/**
 * Implements hook_field_widget_info().
 *
 * Defines the campaign goals widget for selecting goals on a p2p campaign.
 *
 * @see field_example_field_widget_form()
 */
function springboard_p2p_fields_field_widget_info() {
  return array(
    'springboard_p2p_fields_campaign_goals_widget' => array(
      'label' => t('Peer to peer campaign goals table'),
      'field types' => array('springboard_p2p_fields_campaign_goals'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Defines a table of content types, default forms, goal types, and goals.
 */
function springboard_p2p_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $goal_set_id = isset($items[$delta]['goal_set_id']) ? $items[$delta]['goal_set_id'] : NULL;
  if (!is_null($goal_set_id)) {
    $defaults = springboard_p2p_fields_campaign_goals_load($goal_set_id);
  }

  $widget = $element;

  switch ($instance['widget']['type']) {
    case 'springboard_p2p_fields_campaign_goals_widget':
      $types = array(
        'fundraiser' => '<h2>Fundraising types</h2>',
        'webform_user' => '<h2>Other form types</h2>',
      );

      // Make this a fieldset with the three text fields.
      $widget += array(
        '#theme' => 'springboard_p2p_fields_campaign_goals',
        '#type' => 'fieldset',
        // #delta is set so that the validation function will be able
        // to access external value information which otherwise would be
        // unavailable.
        '#delta' => $delta,
        'goal_set_id' => array(
          '#type' => 'value',
          '#value' => $goal_set_id,
        ),
      );

      $widget['#attached']['js'] = array(
        drupal_get_path('module', 'springboard_p2p_fields') . '/springboard_p2p_fields.js',
      );

      $content_types = springboard_p2p_fields_get_sorted_content_types();
      foreach ($types as $form_type => $title) {
        $goal_options = array();
        $goal_type_default = NULL;
        if ($form_type == 'fundraiser') {
          $goal_options['amount'] = t('Amount raised');
        }
        else {
          // Non-fundraiser forms only support submissions.
          $goal_type_default = 'submissions';
        }
        $goal_options['submissions'] = t('Number of submissions');

        $widget['form_types'][$form_type] = array(
          '#tree' => TRUE,
        );

        if (count($content_types[$form_type])) {
          $global_defaults = variable_get('springboard_p2p_' . $form_type . '_items', array());
          $display_title = FALSE;
          foreach ($content_types[$form_type] as $key => $name) {
            if (!isset($global_defaults[$key]) || $global_defaults[$key]['enabled'] == 0) {
              continue;
            }

            $display_title = TRUE;

            if (is_null($goal_type_default)) {
              $goal_type_default = isset($defaults[$key]['goal_type']) ? $defaults[$key]['goal_type'] : '';
            }

            $goal_value_prefix = '';
            $goal_value_suffix = '';

            if ($goal_type_default == 'submissions') {
              $goal_value_suffix = ' submissions';
            }
            elseif ($goal_type_default == 'amount') {
              $goal_value_prefix = '$ ';
            }

            $node_options = springboard_p2p_fields_get_node_options_by_types($key);
            $formatted_node_options = springboard_p2p_fields_format_node_options($node_options);

            $widget['form_types'][$form_type][$key] = array(
              'enabled' => array(
                '#type' => 'checkbox',
                '#title' => $name,
                '#default_value' => isset($defaults[$key]['enabled']) ? $defaults[$key]['enabled'] : 0,
              ),
              'nid' => array(
                '#type' => 'select',
                '#options' => $formatted_node_options,
                '#default_value' => isset($defaults[$key]['nid']) ? $defaults[$key]['nid'] : $global_defaults[$key]['nid'],
                '#empty_value' => '',
              ),
              'campaign_id' => array(
                '#type' => 'select',
                '#options' => array(),
                '#default_value' => isset($defaults[$key]['campaign_id']) ? $defaults[$key]['campaign_id'] : '',
                '#empty_value' => '',
                '#disabled' => TRUE,
              ),
              'goal_type' => array(
                '#type' => 'select',
                '#options' => $goal_options,
                '#empty_value' => '',
                '#default_value' => $goal_type_default,
              ),
              'goal_value' => array(
                '#type' => 'textfield',
                '#default_value' => isset($defaults[$key]['goal_value']) ? $defaults[$key]['goal_value'] : '',
                '#field_prefix' => $goal_value_prefix,
                '#field_suffix' => $goal_value_suffix,
                '#prefix' => '<div class="springboard_p2p_goal_value">',
                '#suffix' => '</div>',
                '#maxlength' => 9,
              ),
            );

            $widget['form_types'][$form_type][$key]['goal_type']['#attributes']['class'][] = 'springboard_p2p_goal_type';

            if (module_exists('market_source')) {
              $options = market_source_get_campaign_options();
              $widget['form_types'][$form_type][$key]['campaign_id']['#options'] += $options;
              $widget['form_types'][$form_type][$key]['campaign_id']['#disabled'] = FALSE;
            }

          }
          if ($display_title) {
            $widget['form_types'][$form_type]['#prefix'] = $title;
          }

        }
      }
      break;
  }

  $element['campaign_goals'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function springboard_p2p_fields_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'springboard_p2p_fields_campaign_goals_no_nid':
    case 'springboard_p2p_fields_campaign_goals_too_many':
    case 'springboard_p2p_fields_campaign_goals_not_enough':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Generates the table rows array for the form types tables.
 *
 * @param array $form
 *   The admin settings form api array.
 * @param string $type
 *   The form_types form key.  Either 'fundraiser_items'
 *   or 'webform_user_items' depending on which table this is.
 *
 * @return array
 *   An array of rows ready for the table theming.
 */
function springboard_p2p_fields_form_types_table_rows(&$form, $type) {
  $rows = array();
  $columns = array(
    'enabled',
    'nid',
    'campaign_id',
    'goal_type',
    'goal_value',
  );

  foreach (element_children($form['form_types'][$type]) as $key) {
    $cells = array();
    foreach ($columns as $field) {
      if (isset($form['form_types'][$type][$key][$field])) {
        $cells[] = drupal_render($form['form_types'][$type][$key][$field]);
      }
    }

    $rows[] = array(
      'data' => $cells,
    );
  }
  return $rows;
}

/**
 * Returns a list of fundraiser and webform user enabled content types.
 *
 * The webform user enabled types exclude the fundraiser enabled types.
 *
 * @return array
 *   Example.
 *   array(
 *     'fundraiser' => array(
 *       'donation_form' => 'Donation form',
 *     ),
 *     'webform_user' => array(
 *       'petition' => 'Petition',
 *     ),
 *   )
 */
function springboard_p2p_fields_get_sorted_content_types() {
  $sorted_types = array(
    'fundraiser' => array(),
    'webform_user' => array(),
  );

  $node_types = node_type_get_names();

  foreach ($node_types as $key => $name) {
    if (fundraiser_is_donation_type($key)) {
      $sorted_types['fundraiser'][$key] = $name;
    }
    elseif (_webform_user_is_webform_user_node_type($key)) {
      $sorted_types['webform_user'][$key] = $name;
    }
  }

  return $sorted_types;
}

/**
 * Gets a list of node nids and titles that are of the given content type.
 *
 * @param string $type
 *   The content type to search for.
 *
 * @return array|bool
 *   An associative array of objects containing the node nids and titles.
 */
function springboard_p2p_fields_get_node_options_by_types($type) {
  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', $type, '=')
    ->condition('status', 0, '>')
    ->execute()
    ->fetchAllAssoc('nid');

  return $result;
}

/**
 * Formats node objects in an array to be suitable for a form's select options.
 *
 * @param array $nodes
 *   The array of objects as returned by
 *   springboard_p2p_fields_get_node_options_by_types().
 *
 * @return array
 *   An associative array used for select options.
 */
function springboard_p2p_fields_format_node_options($nodes) {
  $options = array();
  foreach ($nodes as $node) {
    $options[$node->nid] = $node->title;
  }

  return $options;
}

/**
 * Implements hook_field_formatter_info().
 */
function springboard_p2p_fields_field_formatter_info() {
  return array(
    'springboard_p2p_fields_default' => array(
      'label' => t('Default'),
      'description' => t('Displays campaign goals.'),
      'field types' => array('springboard_p2p_fields_campaign_goals'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function springboard_p2p_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'springboard_p2p_fields_default') {
    foreach ($items as $delta => $value) {
      $goals = springboard_p2p_fields_campaign_goals_load($value['goal_set_id']);
      if ($goals) {
        foreach ($goals as $type => $goal) {
          if ($goal['enabled']) {
            $prefix = '';
            $suffix = '';

            if ($goal['goal_type'] == 'amount') {
              $prefix = '$ ';
            }
            elseif ($goal['goal_type'] == 'submissions') {
              $suffix = ' submissions';
            }

            $element[$delta][$type] = array(
              '#prefix' => $prefix,
              '#suffix' => $suffix,
              '#markup' => number_format($goal['goal_value']),
            );

          }
        }
      }
    }
  }

  return $element;
}
