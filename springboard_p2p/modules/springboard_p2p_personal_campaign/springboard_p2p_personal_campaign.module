<?php
/**
 * @file
 * Code for the Springboard P2P personal campaign feature.
 */

include_once 'springboard_p2p_personal_campaign.features.inc';


/**
 * Specified ctools plugins overrides.
 *
 * Implements hook_ctools_plugin_directory().
 */
function springboard_p2p_landing_ctools_plugin_directory($owner, $plugin_type) {
  // Define the custom panels templates folder.
  $modules = array('panels', 'ctools');
  if (in_array($owner, $modules) && !empty($plugin_type)) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_preprocess_page().
 */
function springboard_p2p_personal_campaign_process_page(&$vars) {

  // Global node.
  $node = menu_get_object();

  // Unset the node title for p2p_personal_campaign page view.
  if (!empty($node) && ($node->type == 'p2p_personal_campaign') && (arg(2) == NULL)) {
    $vars['title'] = NULL;
  }

}

/**
 * Implements hook_page_alter().
 */
function springboard_p2p_personal_campaign_page_alter(&$cache, $vars) {

  // Global node.
  $node = menu_get_object();
  // Only for p2p_personal_campaign page view.
  if (!empty($node) && ($node->type == 'p2p_personal_campaign') && (arg(2) == NULL)) {

    // Define the module path.
    $mod_path = drupal_get_path('module', 'springboard_p2p_personal_campaign');

    // Define the library path with libraries present and without.
    if (function_exists('libraries_get_path')) {
      $library_path_fitvids = libraries_get_path('fitvids');
    }
    else {
      $library_path_fitvids = 'sites/all/libraries/fitvids/jquery.fitvids.js';
    }

    // Flexslider js.
    $fitvids = array(
      '#attached' => array(
        'js' => array(
          $library_path_fitvids . '/jquery.fitvids.js' => array(
            'group' => JS_THEME,
            'weight' => 99,
          ),
        ),
      ),
    );
    drupal_render($fitvids);

    // Custom scripts, let's load this last.
    $p2p_personal_scripts = array(
      '#attached' => array(
        'js' => array(
          $mod_path . '/js/p2p-personal-scripts.js' => array(
            'group' => JS_THEME,
            'weight' => 9999,
          ),
        ),
      ),
    );
    drupal_render($p2p_personal_scripts);

    // Custom css.
    $p2p_personal_css = array(
      '#attached' => array(
        'css' => array(
          $mod_path . '/css/p2p-personal.css' => array(
            'group' => CSS_THEME,
            'weight' => 9999,
          ),
        ),
      ),
    );
    drupal_render($p2p_personal_css);

  }

}

/**
 * Alter a menu router item right after it has been retrieved from the database or cache.
 *
 * This hook is invoked by menu_get_item() and allows for run-time alteration of router
 * information (page_callback, title, and so on) before it is translated and checked for
 * access. The passed-in $router_item is statically cached for the current request, so this
 * hook is only invoked once for any router item that is retrieved via menu_get_item().
 *
 * Usually, modules will only want to inspect the router item and conditionally
 * perform other actions (such as preparing a state for the current request).
 * Note that this hook is invoked for any router item that is retrieved by
 * menu_get_item(), which may or may not be called on the path itself, so implementations
 * should check the $path parameter if the alteration should fire for the current request
 * only.
 *
 * @param $router_item
 *   The menu router item for $path.
 * @param $path
 *   The originally passed path, for which $router_item is responsible.
 * @param $original_map
 *   The path argument map, as contained in $path.
 *
 * @see menu_get_item()
 */
function springboard_p2p_personal_campaign_menu_get_item_alter(&$router_item, $path, $original_map) {
  // Define the path of the personal campaign node/edit or node/add
  if ($router_item['path'] == 'node/%/edit' || $router_item['path'] == 'node/add/p2p-personal-campaign') {
    $router_item['theme_callback'] = '_springboard_p2p_personal_campaign_menu_theme_callback';
  }
}

/**
 * Our custom function theme callback from above.
 */
function _springboard_p2p_personal_campaign_menu_theme_callback() {

  // Define node.
  $node = menu_get_object();

  // Only if p2p_personal_campaign.
  if ((!empty($node) && $node->type == 'p2p_personal_campaign') || (arg(0) === 'node' && arg(1) === 'add' && arg(2) === 'p2p-personal-campaign')) {
    // Define the front end theme.
    // @todo it would be better to define the current default theme rather than hard coding.
    return 'springboard_frontend';
  }
}

/**
 * Implements hook_token_info().
 */
function springboard_p2p_personal_campaign_token_info() {

  $info['types']['p2p_personal_campaign'] = array(
    'name' => t('Personal Campaign'),
    'description' => t('Tokens related to Springboard Social sharing content.'),
  );
  $info['tokens']['p2p_personal_campaign']['user'] = array(
    'name' => t('Personal Campaigner'),
    'description' => t(''),
    'type' => 'user',
  );
  $info['tokens']['p2p_personal_campaign']['campaign_title'] = array(
    'name' => t('Personal campaign title'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_landing_url'] = array(
    'name' => t('Campaign landing URL'),
    'description' => t('URL of the personal campaign landing page.'),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_donation_url'] = array(
    'name' => t('Donation landing URL'),
    'description' => t('URL of the donation form associated with the personal campaign.'),
  );

  $info['tokens']['p2p_personal_campaign']['personal_campaign_nid'] = array(
    'name' => t('Personal Campaign Node Id'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['personal_campaign_donation_nid'] = array(
    'name' => t('Node ID of the donation form for this campaign'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_goal'] = array(
    'name' => t('Personal campaign goal'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_deadline'] = array(
    'name' => t('Campaign fundraising deadline.'),
    'description' => t(''),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function springboard_p2p_personal_campaign_tokens($type, $tokens, $data = array(), $options = array()) {
  if ($type == 'p2p_personal_campaign') {
    if (!isset($data['p2p_personal_campaign']['node'])) {
      return array();
    }
    $personal_campaign = $data['p2p_personal_campaign']['node'];
    $language = $personal_campaign->language;
    $replacements = array();
    $account = $data['p2p_personal_campaign']['user'];
    $data['campaign_title'] = $personal_campaign->title;
    $data['campaign_landing_url'] = url(drupal_get_path_alias('node/' . $personal_campaign->nid), array('absolute' => TRUE));

    $path = drupal_get_path_alias('node/' . $data['node']->nid);
    $options = array(
      'absolute' => TRUE,
      'query' => array('p2p_pcid' => $personal_campaign->nid),
      'https' => TRUE,
    );
    $data['campaign_donation_url'] = url($path, $options);
    $data['personal_campaign_nid'] = $personal_campaign->nid;
    $deadline = isset($personal_campaign->field_p2p_fundraising_deadline[$language][0]['value']) ? $personal_campaign->field_p2p_fundraising_deadline[$language][0]['value'] : FALSE;
    $data['campaign_deadline'] = $deadline ? format_date(strtotime($deadline))  : '';
    $data['campaign_goal'] = _springboard_p2p_personal_campaign_format_goal($personal_campaign);
    foreach ($tokens as $key => $token) {
      if (isset($data[$key])) {
        $replacements[$token] = $data[$key];
      }
    }
    return $replacements;
  }
}

function _springboard_p2p_personal_campaign_format_goal($node) {
  $lahguage = $node->language;
}

/**
 * Implements hook_webform_confirmations_token_replace_alter().
 */
function springboard_p2p_personal_campaign_webform_confirmations_token_replace_alter(&$token_set, $sid) {
  $personal_campaign = FALSE;
  $nid = $token_set['node']->nid;
  $submission = webform_get_submission($nid, $sid);
  $components = _fundraiser_webform_get_components_by_nid($nid);
  $personal_campaign = _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components);
  if ($personal_campaign) {
    $account = user_load($personal_campaign->uid);
    $token_set['p2p_personal_campaign']['node'] = $personal_campaign;
    $token_set['p2p_personal_campaign']['user'] = $account;
  }
}

function springboard_p2p_personal_campaign_email_wrappers_token_set_alter(&$token_set, $message) {
  $submission = $message['params']['submission'];
  $components = _fundraiser_webform_get_components_by_nid($submission->nid);
  $personal_campaign = _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components);
  if ($personal_campaign) {
    $account = user_load($personal_campaign->uid);
    $token_set['p2p_personal_campaign']['node'] = $personal_campaign;
    $token_set['p2p_personal_campaign']['user'] = $account;
  }
}

function _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components) {
  foreach ($components as $component) {
    if ($component->form_key == 'p2p_pcid') {
      $cid = $component->cid;
      $personal_campaign = $submission->data[$cid]['value'][0];
      break;
    }
  }
  if ($personal_campaign) {
    $personal_campaign_node = node_load($personal_campaign);
    if ($personal_campaign_node->type == 'p2p_personal_campaign') {
      return $personal_campaign_node;
    }
  }
  return FALSE;
}
/**
 * Implements hook_market_source_field_info().
 */
function springboard_p2p_personal_campaign_market_source_field_info() {

  $fields = array();
  // Transaction that generated the refered conversion (sid).
  $fields['p2p_pcid'] = array(
    '#title' => t('Personal Campaign ID'),
    '#type' => 'hidden',
    '#value' => '',
    '#required' => 0,
    '#extra' => array(
      'description' => '',
      'hidden_type' => 'hidden',
    ),
  );

  return $fields;
}

/**
 * Implements hook_market_source_external_field_keys().
 */
function springboard_p2p_personal_campaign_market_source_external_field_keys() {
  $items = array(
    'p2p_pcid' => array(
      'key' => 'p2p_pcid',
      'name' => t('Personal Campaign ID'),
      'default' => '',
      'persistence' => 'off',
    ),
  );
  return $items;
}