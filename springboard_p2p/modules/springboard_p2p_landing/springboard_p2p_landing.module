<?php
/**
 * @file
 * Code for the springboard P2P Landing feature.
 */

include_once 'springboard_p2p_landing.features.inc';


/**
 * Specified ctools plugins overrides
 *
 * Implements hook_ctools_plugin_directory();
 */
function springboard_p2p_landing_ctools_plugin_directory($owner, $plugin_type) {
  // Define the custom panels templates folder.
  $modules = array('panels', 'ctools');
  if (in_array($owner, $modules) && !empty($plugin_type)) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_page_alter().
 */
function springboard_p2p_landing_page_alter(&$cache, $vars) {

  // Global node.
  $node = menu_get_object();
  // Only for p2p_campaign_landing page view.
  if (!empty($node) && ($node->type == 'p2p_campaign_landing') && (arg(2) == NULL)) {

  // Define the library path with libraries present and without.
  if (function_exists('libraries_get_path')) {
    $library_path_flexsliderjs = libraries_get_path('flexslider');
    $library_path_flexslidercss = libraries_get_path('flexslider');
  }
  else {
    $library_path_flexsliderjs = 'sites/all/libraries/flexslider/jquery.flexslider.js';
    $library_path_flexslidercss = 'sites/all/libraries/flexslider/flexslider.css';
  }

  // Define the module path.
  $mod_path = drupal_get_path('module', 'springboard_p2p_landing');

  // Flexslider js.
  $flexslider = array(
    '#attached' => array(
      'js' => array(
        $library_path_flexsliderjs . '/jquery.flexslider.js' => array(
          'group' => JS_THEME,
          'weight' => 9998,
        ),
      ),
    ),
  );
  drupal_render($flexslider);

  // Flexslider css.
  $flexslidercss = array(
    '#attached' => array(
      'css' => array(
        $library_path_flexslidercss . '/flexslider.css' => array(
          'group' => CSS_THEME,
          'weight' => 9999,
        ),
      ),
    ),
  );
  drupal_render($flexslidercss);

  // Custom scripts, let's load this last.
  $p2p_landing_scripts = array(
    '#attached' => array(
      'js' => array(
        $mod_path . '/js/p2p-landing-scripts.js' => array(
          'group' => JS_THEME,
          'weight' => 9999,
        ),
      ),
    ),
  );
  drupal_render($p2p_landing_scripts);

  // Custom css.
  $p2p_landing_css = array(
    '#attached' => array(
      'css' => array(
        $mod_path . '/css/p2p-landing.css' => array(
          'group' => CSS_THEME,
          'weight' => 9999,
        ),
      ),
    ),
  );
  drupal_render($p2p_landing_css);

// Check to see if springboard_frontend is the active theme. if not, add font awesome in.
  global $custom_theme;
  $custom_theme = variable_get('theme_default', 'springboard_frontend');
  $theme = $custom_theme;
  $theme_key = $theme;

// If not springboard_frontend, add font awesome cdn.
  if ($theme_key == 'springboard_frontend') {
  }
  else {
    drupal_add_css('//netdna.bootstrapcdn.com/font-awesome/4.0.1/css/font-awesome.css', array(
        'type' => 'external',
      ));
  }

  }

}

/**
 * Implements hook_features_export_alter().
 *
 * Alter the final export array just prior to the rendering of
 * defaults.
 * FORBID the hook_views_api, we are going to add that ourself.
 *
 * @param array &$export
 *   By reference. An array of all components to be exported with a given
 *   feature.
 * @param array $module_name
 *   The name of the feature module to be generated.
 */
function springboard_p2p_landing_features_export_alter(&$export, $module_name) {
  // Override the default path for views.
  if ($module_name == 'springboard_p2p_landing' && !empty($export['features']['ctools']['views:views_default:3.0'])) {
    unset($export['features']['ctools']['views:views_default:3.0']);
  }
}

/**
 * Implements hook_views_api().
 * We are specifying this here as we want to include a views
 * template directory.
 */
function springboard_p2p_landing_views_api() {
  // Create our own views template path.
  return array(
    "version" => "3.0",
    'template path' => drupal_get_path('module', 'springboard_p2p_landing') . '/templates',
  );
}

/**
 * Alter CSS files before they are output on the page.
 *
 * @param $css
 *   An array of all CSS items (files and inline CSS) being requested on the page.
 *
 * @see drupal_add_css()
 * @see drupal_get_css()
 */
function springboard_p2p_landing_css_alter(&$css) {
  $node = menu_get_object();
  if (!empty($node) && $node->type == 'p2p_campaign_landing' && arg(2) === NULL) {

    // Exclude system.theme.
    $exclude = array(
      'modules/system/system.theme.css' => FALSE,
    );
    $css = array_diff_key($css, $exclude);
  }
}

/**
 * Alter a menu router item right after it has been retrieved from the database or cache.
 *
 * This hook is invoked by menu_get_item() and allows for run-time alteration of router
 * information (page_callback, title, and so on) before it is translated and checked for
 * access. The passed-in $router_item is statically cached for the current request, so this
 * hook is only invoked once for any router item that is retrieved via menu_get_item().
 *
 * Usually, modules will only want to inspect the router item and conditionally
 * perform other actions (such as preparing a state for the current request).
 * Note that this hook is invoked for any router item that is retrieved by
 * menu_get_item(), which may or may not be called on the path itself, so implementations
 * should check the $path parameter if the alteration should fire for the current request
 * only.
 *
 * @param $router_item
 *   The menu router item for $path.
 * @param $path
 *   The originally passed path, for which $router_item is responsible.
 * @param $original_map
 *   The path argument map, as contained in $path.
 *
 * @see menu_get_item()
 */
function springboard_p2p_landing_menu_get_item_alter(&$router_item, $path, $original_map) {
    // Define the path of the personal campaign node/edit or node/add
  if ($router_item['path'] == 'node/%/edit' || $router_item['path'] == 'node/add/p2p-personal-campaign') {
    $router_item['theme_callback'] = '_springboard_p2p_landing_menu_theme_callback';
  }
}

/**
 * Our custom function theme callback from above.
 */
function _springboard_p2p_landing_menu_theme_callback() {

  // Define node.
  $node = menu_get_object();

  //Only if p2p_personal_campaign.
  if ((!empty($node) && $node->type == 'p2p_personal_campaign') || (arg(0) === 'node' && arg(1) === 'add' && arg(2)===  'p2p-personal-campaign')) {
    // define the front end theme.
    //@Todo it would be better to define the current default theme rather than hard coding, i.e. aspca.
    return 'springboard_frontend';
  }

}
