<?php
/**
 * @file
 * Code for the springboard P2P Landing feature.
 */

include_once 'springboard_p2p_landing.features.inc';

/**
 * Implements hook_page_alter().
 */
function springboard_p2p_landing_page_alter(&$cache, $vars) {

  // Global node.
  $node = menu_get_object();
  // Only for p2p_campaign_landing page view.
  if (!empty($node) && ($node->type == 'p2p_campaign_landing') && (arg(2) == NULL)) {

    // Define the module path.
    $mod_path = drupal_get_path('module', 'springboard_p2p_landing');

    // Define the library path with libraries present and without.
    if (function_exists('libraries_get_path')) {
      $library_path_flexsliderjs = libraries_get_path('flexslider');
      $library_path_flexslidercss = libraries_get_path('flexslider');
    }
    else {
      $library_path_flexsliderjs = 'sites/all/libraries/flexslider/jquery.flexslider.js';
      $library_path_flexslidercss = 'sites/all/libraries/flexslider/flexslider.css';
    }

    // Flexslider js.
    $flexslider = array(
      '#attached' => array(
        'js' => array(
          $library_path_flexsliderjs . '/jquery.flexslider.js' => array(
            'group' => JS_THEME,
            'weight' => 9998,
          ),
        ),
      ),
    );
    drupal_render($flexslider);

    // Flexslider css.
    $flexslidercss = array(
      '#attached' => array(
        'css' => array(
          $library_path_flexslidercss . '/flexslider.css' => array(
            'group' => CSS_THEME,
            'weight' => 9999,
          ),
        ),
      ),
    );
    drupal_render($flexslidercss);

    // Custom scripts, let's load this last.
    $p2p_landing_scripts = array(
      '#attached' => array(
        'js' => array(
          $mod_path . '/js/p2p-landing-scripts.js' => array(
            'group' => JS_THEME,
            'weight' => 9999,
          ),
        ),
      ),
    );
    drupal_render($p2p_landing_scripts);

    // Custom css.
    $p2p_landing_css = array(
      '#attached' => array(
        'css' => array(
          $mod_path . '/css/p2p-landing.css' => array(
            'group' => CSS_THEME,
            'weight' => 9999,
          ),
        ),
      ),
    );
    drupal_render($p2p_landing_css);

    // Check to see if springboard_frontend is the active theme. if not, add font awesome in.
    global $custom_theme;
    $custom_theme = variable_get('theme_default', 'springboard_frontend');
    $theme = $custom_theme;
    $theme_key = $theme;

    // If not springboard_frontend, add font awesome cdn.
    if ($theme_key == 'springboard_frontend') {
    }
    else {
      drupal_add_css('//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.css',
        array(
          'type' => 'external',
        )
      );
  }

}

/**
 * Implements hook_features_export_alter().
 *
 * Alter the final export array just prior to the rendering of
 * defaults.
 * FORBID the hook_views_api, we are going to add that ourself.
 *
 * @param array &$export
 *   By reference. An array of all components to be exported with a given
 *   feature.
 * @param array $module_name
 *   The name of the feature module to be generated.
 */
function springboard_p2p_landing_features_export_alter(&$export, $module_name) {
  // Override the default path for views.
  if ($module_name == 'springboard_p2p_landing' && !empty($export['features']['ctools']['views:views_default:3.0'])) {
    unset($export['features']['ctools']['views:views_default:3.0']);
  }
}

/**
 * Implements hook_views_api().
 * We are specifying this here as we want to include a views
 * template directory.
 */
function springboard_p2p_landing_views_api() {
  // Create our own views template path.
  return array(
    "version" => "3.0",
    'template path' => drupal_get_path('module', 'springboard_p2p_landing') . '/templates',
  );
}
