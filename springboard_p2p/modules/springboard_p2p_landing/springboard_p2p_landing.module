<?php
/**
 * @file
 * Code for the springboard P2P Landing feature.
 */

include_once 'springboard_p2p_landing.features.inc';

/**
 * Specified ctools plugins overrides
 *
 * Implements hook_ctools_plugin_directory();
 */
function springboard_p2p_landing_ctools_plugin_directory($owner, $plugin_type) {
  // Define the custom panels templates folder.
  $modules = array('panels', 'ctools');
  if (in_array($owner, $modules) && !empty($plugin_type)) {
    return "plugins/$plugin_type";
  }
}

/**
 * Perform alterations before a page is rendered.
 *
 * Use this hook when you want to remove or alter elements at the page
 * level, or add elements at the page level that depend on an other module's
 * elements (this hook runs after hook_page_build().
 *
 * If you are making changes to entities such as forms, menus, or user
 * profiles, use those objects' native alter hooks instead (hook_form_alter(),
 * for example).
 *
 * The $page array contains top level elements for each block region:
 *
 * @code
 *   $page['page_top']
 *   $page['header']
 *   $page['sidebar_first']
 *   $page['content']
 *   $page['sidebar_second']
 *   $page['page_bottom']
 * @endcode
 *
 * The 'content' element contains the main content of the current page, and its
 * structure will vary depending on what module is responsible for building the
 * page. Some legacy modules may not return structured content at all: their
 * pre-rendered markup will be located in $page['content']['main']['#markup'].
 *
 * Pages built by Drupal's core Node and Blog modules use a standard structure:
 *
 * @code
 *   // Node body.
 *   $page['content']['system_main']['nodes'][$nid]['body']
 *   // Array of links attached to the node (add comments, read more).
 *   $page['content']['system_main']['nodes'][$nid]['links']
 *   // The node object itself.
 *   $page['content']['system_main']['nodes'][$nid]['#node']
 *   // The results pager.
 *   $page['content']['system_main']['pager']
 * @endcode
 *
 * Blocks may be referenced by their module/delta pair within a region:
 * @code
 *   // The login block in the first sidebar region.
 *   $page['sidebar_first']['user_login']['#block'];
 * @endcode
 *
 * @param $page
 *   Nested array of renderable elements that make up the page.
 *
 * @see hook_page_build()
 * @see drupal_render_page()
 */
function springboard_p2p_landing_page_alter(&$cache, $vars) {

  // Define the library path with libraries present and without.
  if (function_exists('libraries_get_path')) {
    $library_path_flexsliderjs = libraries_get_path('flexslider');
    $library_path_flexslidercss = libraries_get_path('flexslider');
  }
  else {
    $library_path_flexsliderjs = 'sites/all/libraries/flexslider/jquery.flexslider.js';
    $library_path_flexslidercss = 'sites/all/libraries/flexslider/flexslider.css';
  }

  // Define the module path.
  $mod_path = drupal_get_path('module', 'springboard_p2p_landing');

  // Flexslider js.
  $flexslider = array(
    '#attached' => array(
      'js' => array(
        $library_path_flexsliderjs . '/jquery.flexslider.js' => array(
          'group' => JS_THEME,
          'weight' => 999,
        ),
      ),
    ),
  );
  drupal_render($flexslider);

  // Flexslider css.
  $flexslidercss = array(
    '#attached' => array(
      'css' => array(
        $library_path_flexslidercss . '/flexslider.css' => array(
          'group' => CSS_THEME,
          'weight' => 999,
        ),
      ),
    ),
  );
  drupal_render($flexslidercss);

  // Custom scripts, let's load this last.
  $p2p_landing_scripts = array(
    '#attached' => array(
      'js' => array(
        $mod_path . '/js/p2p-landing-scripts.js' => array(
          'group' => JS_THEME,
          'weight' => 999,
        ),
      ),
    ),
  );
  drupal_render($p2p_landing_scripts);

  // Custom css.
  $p2p_landing_css = array(
    '#attached' => array(
      'css' => array(
        $mod_path . '/css/p2p-landing.css' => array(
          'group' => CSS_THEME,
          'weight' => 9999,
        ),
      ),
    ),
  );
  drupal_render($p2p_landing_css);

// Check to see if springboard_frontend is the active theme. if not, add font awesome in.
  global $custom_theme;
  $custom_theme = variable_get('theme_default', 'springboard_frontend');
  $theme = $custom_theme;
  $theme_key = $theme;

// If not springboard_frontend, add font awesome cdn.
  if ($theme_key == 'springboard_frontend') {
  }
  else {
    drupal_add_css('//netdna.bootstrapcdn.com/font-awesome/4.0.1/css/font-awesome.css', array(
        'type' => 'external',
      ));
  }

}


/**
 * Implements hook_features_export_alter().
 *
 * Alter the final export array just prior to the rendering of
 * defaults.
 * FORBID the hook_views_api, we are going to add that ourself.
 *
 * @param array &$export
 *   By reference. An array of all components to be exported with a given
 *   feature.
 * @param array $module_name
 *   The name of the feature module to be generated.
 */
function springboard_p2p_landing_features_export_alter(&$export, $module_name) {
  // Override the default path for views.
  if ($module_name == 'unicef_views' && !empty($export['features']['ctools']['views:views_default:3.0'])) {
    unset($export['features']['ctools']['views:views_default:3.0']);
  }
}

/**
 * Implements hook_views_api().
 * We are specifying this here as we want to include a views
 * template directory.
 */
function springboard_p2p_landing_views_api() {
  // Create our own views template path.
  return array(
    "version" => "3.0",
    'template path' => drupal_get_path('module', 'springboard_p2p_landing') . '/templates',
  );
}
