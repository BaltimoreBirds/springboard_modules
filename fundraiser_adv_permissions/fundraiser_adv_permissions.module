<?php

/**
 * Implements hook_perm().
 */
function fundraiser_adv_permissions_perm() {
  return array('form components - no access', 'form components - limited access', 'access user/sf mappings');
}

/**
 * Implements hook_form_alter().
 */
function fundraiser_adv_permissions_form_alter(&$form, $form_state, $form_id) {

  global $user;
  if (!strcmp($form_id, 'webform_component_edit_form') && user_access('form components - limited access') && $user->uid != 1) {
    if ($form['form_key']['#default_value']) {
      $form['form_key']['#type'] = 'hidden';
    }
  }

  // We need to limit access to various donation edit form elements based on
  // user permissions.
  if (!strcmp($form_id, 'donation_form_node_form')) {
    if ((user_access('form components - no access') || user_access('form components - limited access')) && $user->uid != 1) {

      // Hide amount fields if user has limited or no access
      // @see #225 for details.
      $delta = $form['fundraiser_settings']['amount_wrapper']['amounts']['amount_delta']['#value'];
      for($i = 0; $i < $delta; ++$i) {

        // Convert amount field to value.
        $value = $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['amount_' . $i]['#default_value'];
        $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['amount_' . $i]['#type'] = 'value';
        $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['amount_' . $i]['#value'] = $value;
        
        // Convert label field to value.
        $label = $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['label_' . $i]['#default_value'];
        $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['label_' . $i]['#type'] = 'value';
        $form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['label_' . $i]['#value'] = $label;

        // Remove remove button.
        unset($form['fundraiser_settings']['amount_wrapper']['amounts'][$i]['remove_' . $i]);
        
        // Remove add another buttom.
        unset($form['fundraiser_settings']['amount_wrapper']['amount_more']);
      }
      
      // Fold up other amount checkbox and minimum donation amount textfield
      $show = $form['fundraiser_settings']['amount_wrapper']['show_other_amount']['#default_value'];
      $form['fundraiser_settings']['amount_wrapper']['show_other_amount']['#type'] = 'value';
      $form['fundraiser_settings']['amount_wrapper']['show_other_amount']['#value'] = $show;
      
      $min = $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount']['#default_value'];
      $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount']['#type'] = 'value';
      $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount'] ['#value'] = $min;

      // Overwrite ask amounts fieldset help message
      $form['fundraiser_settings']['amount_wrapper']['help']['#value'] = '<p>' . t('If you need to make changes to the ask amounts on your donation form, please contact your group administrator.') . '</p>';
    }
  }
  
}

/**
 * Implements hook_init().
 */
function fundraiser_adv_permissions_init() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'webform' && !arg(3)) {
    drupal_add_js(drupal_get_path('module', 'fundraiser_adv_permissions') . '/fundraiser_adv_permissions.js');
  }
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_adv_permissions_menu_alter(&$items) {
module_load_include('inc', 'fundraiser', 'fundraiser.admin');
  // Remove access to the form components UI in the webform tab for donation forms.
  $items['node/%webform_menu/webform']['page callback'] = 'fundraiser_adv_permissions_webform_page';
  $items['node/%webform_menu/webform/components']['access callback'] = 'fundraiser_adv_permissions_component_access';
  $items['node/%webform_menu/webform/components']['type'] = MENU_LOCAL_TASK;
  $items['node/%webform_menu/webform/confirmations']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['node/%webform_menu/webform/confirmations']['weight'] = -10;
  $items['node/%webform_menu/webform/mapping']['access callback'] = 'fundraiser_adv_permissions_mapping_access';
 // $items['node/%webform_menu/webform/mapping']['access arguments'] = array('access user/sf mappings');
}

/**
 * Implements hook_fundraiser_access_clone_alter().
 * 
 * @see fundraiser.module line 292.
 */
function fundraiser_adv_permissions_fundraiser_access_clone_alter(&$access, $node) {
  global $user;
  // drupal_set_message('hook invoked, user:' . print_r($user, TRUE));
  // drupal_set_message('node:' . print_r($node, TRUE));
  if (module_exists('og')) {
    foreach($node->og_groups as $group_id) {
      if (isset($user->og_groups[$group_id]) && $access) {
        $access = TRUE;
      }
      else {
        $access = FALSE;
      }
    }
  }
}


/**
 * Custom page callback for the webform link on donation form pages.
 * 
 * @return form
 * Returns confirmation page form on donation forms, otherwise displays standard component form.
 */
function fundraiser_adv_permissions_webform_page() {
  $args = func_get_args();
  $node = $args[0];
  if ($node->type == 'donation_form') {
   module_load_include('inc', 'fundraiser', 'fundraiser.admin');
    return drupal_get_form('fundraiser_confirmation_settings_form', $node);
  }
  else {
    return drupal_get_form('webform_components_form', $node);
  }
  
}

/**
 * Custom access function for form component menu item.
 */
function fundraiser_adv_permissions_component_access() {
  $args = func_get_args();
  $node = $args[1];
  global $user;

  if ($user->uid != 1 && !strcmp($node->type, 'donation_form') && user_access('form components - no access', $user)) {
    return FALSE;
  }
  // If no special conditions apply defer to original access function for this menu item.
  return node_access('update', $node);
}

/**
 * Access callback for user mapping tab.
 */
function fundraiser_adv_permissions_mapping_access($node) {
  return ($node->type == 'donation_form' && user_access('access user/sf mappings'));

}