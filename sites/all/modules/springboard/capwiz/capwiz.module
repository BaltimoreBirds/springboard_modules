<?php

/**
 * @file capwiz.module
 * Integrate with Capwiz service.
 *
 * @author Derek Dunagan <derek.dunagan@jacksonriver.com>
 */


/**
 * Define overwrite rules.
 *
 * Overwrite rules are used when Capwiz accounts are merged with
 * Drupal ones. Each individual profile field has a certain
 * "permission level."
 */
define('CAPWIZ_OVERWRITE_NEVER',  'never'); // Only set the value when adding a new account; never overwrite it
define('CAPWIZ_OVERWRITE_BLANK',  'blank'); // Overwrite only if blank
define('CAPWIZ_OVERWRITE_ALWAYS', 'always');


/*********\
** Hooks **
\*********/


/**
 * Implement hook_perm().
 */
function capwiz_perm() {

  return array('administer capwiz', 'administer capwiz credentials', 'administer capwiz advanced settings');
}


/**
 * Implement hook_menu().
 */
function capwiz_menu() {

  $items = array();

  $items['admin/user/capwiz'] = array(
    'title' => 'Capwiz settings',
    'description' => 'Integrate your Capwiz user base with your Drupal user base.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_settings_form'),
    'access arguments' => array('administer capwiz'),
    'file' => 'capwiz.admin.inc',
  );

  return $items;
}


/**
 * Implement hook_theme().
 */
function capwiz_theme() {

  return array(
    'capwiz_settings_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'capwiz.admin.inc',
    ),
  );
}


if ((bool)variable_get('capwiz_cron', 1)) {

  /**
   * Implement hook_cron().
   */
  function capwiz_cron() {

    include_once 'capwiz.cron.php';
  }

}


/**************************\
** User-related functions **
\**************************/


/**
 * Merge Capwiz accounts into Drupal.
 *
 * Use direct database calls to minimize processing
 * since this will be executed in potentially very large
 * batches. user_save(), drupal_write_record(), etc. are
 * intentionally not used.
 *
 * @param array $capwiz_accounts (optional)
 *   An array of StdClass instances, if not provided,
 *   accounts are fetched via the Capwiz API
 * @return void
 */
function capwiz_merge_accounts($capwiz_accounts = NULL) {

  if (is_null($capwiz_accounts)) {
    require_once 'capwiz.api.inc';

    CapwizApi::fetchAccounts();
    $capwiz_accounts = &CapwizApi::$accounts;
  }

  if (!empty($capwiz_accounts) && is_array($capwiz_accounts)) {

    $total_accounts = count($capwiz_accounts);
    for ($a = 0; $a < $total_accounts; $a++) {

      $capwiz_account = $capwiz_accounts[$a];

      if (!empty($capwiz_account->email_address) && !empty($capwiz_account->capwiz_id)) {

        $drupal_account = user_load(array('mail' => $capwiz_account->email_address));

        if (empty($drupal_account)) {
          capwiz_add_account($capwiz_account);
        }
        else {
          capwiz_update_account($capwiz_account, $drupal_account);
        }
      }

      unset($capwiz_accounts[$a]);
    }
  }
}


/**
 * Add a new account.
 *
 * @param StdClass $capwiz_account
 * @return StdClass
 *   A partial Drupal account, the full account
 *   via user_save() is not returned to keep
 *   processing down.
 *
 * @todo When advocacy actions are pulled down from Capwiz
 *       for a user who does not exist, their account is
 *       added, except for profile fields, which are
 *       unavailable from the actions API call. If this
 *       happens before the full user is pulled down,
 *       fields that are set to never overwrite will never
 *       be saved. This is an unlikely scenario, but needs
 *       to be addressed.
 */
function capwiz_add_account($capwiz_account = NULL) {

  if (!empty($capwiz_account->email_address) && !empty($capwiz_account->capwiz_id)) {

    $drupal_account_password = user_password();
    $drupal_account = array(
      'name'    => $capwiz_account->email_address,
      'pass'    => md5($drupal_account_password),
      'mail'    => $capwiz_account->email_address,
      'created' => $time = time(),
      'access'  => $time,
      'login'   => 0,
      'status'  => 1,
    );

    db_query('INSERT INTO {users} (name, pass, mail, created, access, login, status, data) VALUES ("%s", "%s", "%s", %d, %d, %d, %d, "%s")',
      $drupal_account + array('data' => serialize(array('capwiz_id' => $capwiz_account->capwiz_id))));

    $drupal_account = (object)$drupal_account;
    $drupal_account->uid  = db_last_insert_id('users', 'uid');
    $drupal_account->password = $drupal_account_password; // Provide the value for the !password token in emails.
    $drupal_account->language = 'en'; // Needed to send the English version of email messages

    static $email_message_op;
    if (empty($email_message_op)) {
      $email_message_options = capwiz_get_email_message_options();
      $email_message_op_code = (int)variable_get('capwiz_email_message', variable_get('user_register', 1));
      $email_message_op      = $email_message_options[$email_message_op_code];
    }

    if ($email_message_op != 'register_none') {
      _user_mail_notify($email_message_op, $drupal_account);
    }

    // Add the profile fields.
    foreach (capwiz_get_mapping() as $capwiz_field => $field_mapping) {
      $value = _capwiz_get_value($capwiz_account, $capwiz_field);
      if ($value !== FALSE) {
        db_query('INSERT INTO {profile_values} (uid, fid, value) VALUES (%d, %d, "%s") ON DUPLICATE KEY UPDATE value = "%s"', $drupal_account->uid, $field_mapping['profile_fid'], $value, $value);
      }
    }

    // If Salesforce integration modules are enabled:
    if (function_exists('sf_queue_insert')) {
      sf_queue_insert($drupal_account->uid, 'user', 'upsert');
    }

    return $drupal_account;
  }
}


/**
 * Update an existing account.
 *
 * @param StdClass $capwiz_account
 * @param StdClass $drupal_account (optional)
 * @return void
 */
function capwiz_update_account($capwiz_account, $drupal_account = NULL) {

  if (empty($drupal_account)) {
    $drupal_account = user_load(array('mail' => $capwiz_account->email_address));
  }

  if (!empty($drupal_account->uid) && !empty($capwiz_account->capwiz_id)) {

    // Make sure the Capwiz ID is correct.
    $drupal_account_data = (array)unserialize(db_result(db_query('SELECT data FROM {users} WHERE uid = %d', $drupal_account->uid)));
    $drupal_account_data['capwiz_id'] = $capwiz_account->capwiz_id;
    db_query('UPDATE {users} SET data = "%s" WHERE uid = %d', serialize($drupal_account_data), $drupal_account->uid);

    // Update the profile fields.
    foreach (capwiz_get_mapping() as $capwiz_field => $field_mapping) {

      // Ensure we abide by our overwrite rules.
      if ($field_mapping['overwrite_rule'] != CAPWIZ_OVERWRITE_NEVER &&
          !($field_mapping['overwrite_rule'] == CAPWIZ_OVERWRITE_BLANK && !empty($drupal_account->{$field_mapping['profile_field_name']}))) {

        $value = _capwiz_get_value($capwiz_account, $capwiz_field);
        if ($value !== FALSE) {
          db_query('INSERT INTO {profile_values} (uid, fid, value) VALUES (%d, %d, "%s") ON DUPLICATE KEY UPDATE value = "%s"', $drupal_account->uid, $field_mapping['profile_fid'], $value, $value);
        }
      }
    }

    // If Salesforce integration modules are enabled:
    if (function_exists('sf_queue_insert')) {
      sf_queue_insert($drupal_account->uid, 'user', 'upsert');
    }
  }
}


/**
 * Helper function: Get the value of a Capwiz personObject property.
 *
 * @param StdClass $capwiz_account
 * @param string $capwiz_field
 * @return string|bool
 *   Value as a string; FALSE if value does not exist
 */
function _capwiz_get_value($capwiz_account, $capwiz_field) {

  $value = FALSE;
$custom_fields = $capwiz_account->custom_fields;

  // If it is a normal field:
  if (isset($capwiz_account->$capwiz_field)) {
    $value = $capwiz_account->$capwiz_field;
  }

  // If it is a custom field:
  elseif (is_object($capwiz_account->custom_fields) && isset($capwiz_account->custom_fields->$capwiz_field)) {
    $value = $capwiz_account->custom_fields->$capwiz_field;
  }

  return $value;
}


/***************************************\
** (Advocacy) action-related functions **
\***************************************/


/**
 * Save Capwiz advocacy actions.
 *
 * @param array $capwiz_actions_all (optional)
 *   An array of StdClass instances, if not provided,
 *   actions are fetched via the Capwiz API
 * @return void
 */
function capwiz_save_actions($capwiz_actions_all = NULL) {

  if (is_null($capwiz_actions_all)) {
    require_once 'capwiz.api.inc';

    CapwizApi::fetchActions();
    $capwiz_actions_all = &CapwizApi::$actions;
  }

  if (!empty($capwiz_actions_all) && is_array($capwiz_actions_all)) {

    // Log only one action per user/alert pair.
    $capwiz_actions = array();
    $alerts_to_log  = array();

    foreach ($capwiz_actions_all as $key => $capwiz_action) {
      if (empty($alerts_to_log[$capwiz_action->capwiz_id][$capwiz_action->alert_id])) {
        $capwiz_actions[$key] = $capwiz_action;
        $alerts_to_log[$capwiz_action->capwiz_id][$capwiz_action->alert_id] = TRUE;
      }
      else {
        unset($capwiz_actions_all[$key]);
      }
    }

    // Store uids to avoid unnecessary db queries.
    $uids = array();

    foreach ($capwiz_actions as $key => $capwiz_action) {

      $uid = &$uids[$capwiz_action->email_address];
      if (empty($uid)) {
        $uid = db_result(db_query('SELECT uid FROM {users} WHERE mail = "%s"', $capwiz_action->email_address));

        // (Just in case) If we get a user who has not been added yet,
        // go ahead and add them even though they have no profile data.
        if (empty($uid)) {
          $drupal_account = capwiz_add_account((object)array('capwiz_id' => $capwiz_action->capwiz_id, 'email_address' => $capwiz_action->email_address));
          $uid = $drupal_account->uid;
        }
      }

      module_load_include('inc', 'capwiz', 'capwiz.api');
      $db_query_arguments = array('uid' => $uid) + array_intersect_key((array)$capwiz_action, array_flip(CapwizApi::getActionFields()));
      $db_query_fields = implode(', ', array_keys($db_query_arguments));
      $db_query_tokens = '%d' . str_repeat(', "%s"', count($db_query_arguments) - 1);
      db_query("REPLACE INTO {capwiz_actions} ($db_query_fields) VALUES ($db_query_tokens)", $db_query_arguments);

      // If Salesforce integration modules are enabled:
      if (function_exists('sf_queue_insert')) {
        sf_queue_insert($capwiz_action->event_id, 'capwiz_action', 'create');
      }

      unset($capwiz_actions_all[$key]);
    }
  }
}


/*********************\
** Utility functions **
\*********************/


/**
 * Get the profile field mapping.
 *
 * @return array (statically cached)
 */
function capwiz_get_mapping() {

  static $mapping = array();

  if (empty($mapping)) {

    $profile_fields = capwiz_get_profile_fields();
    $capwiz_mapping = variable_get('capwiz_mapping', array());

    foreach ($capwiz_mapping as $capwiz_field => $field_mapping) {

      // Only worry about profile fields that actually exist.
      if (isset($profile_fields[$field_mapping['profile_fid']])) {
        $mapping[$capwiz_field] = $field_mapping;
        $mapping[$capwiz_field]['profile_field_name'] = $profile_fields[$field_mapping['profile_fid']];
      }
    }
  }

  return $mapping;
}


/**
 * Get all profile fields.
 *
 * _profile_get_fields() is not used because it requires a category
 * and whether or not the field appears on the registration page.
 * We need all fields unconditionally.
 *
 * @param bool $get_titles (optional)
 *   Get titles instead of names when intended for UI presentation.
 * @return array (statically cached)
 */
function capwiz_get_profile_fields($get_titles = FALSE) {

  static $profile_fields = array();

  // Get an integer version of $get_titles, so it can be an array key.
  $get_titles = (int)(bool)$get_titles;

  if (empty($profile_fields[$get_titles])) {

    $profile_fields[$get_titles] = array();
    $value_field = $get_titles ? 'title' : 'name';

    $result = db_query("SELECT fid, $value_field FROM {profile_fields} ORDER BY $value_field");
    while ($data = db_fetch_object($result)) {
      $profile_fields[$get_titles][$data->fid] = $data->$value_field;
    }
  }

  return $profile_fields[$get_titles];
}


/**
 * Get new user email message options.
 * 
 * @param string $key_field
 * @param string $value_field
 *   Legal values for $key_field and $value_field:
 *     id
 *     name
 *     title
 * @return array|bool
 *   FALSE if illegal arguments are supplied
 */
function capwiz_get_email_message_options($key_field = 'id', $value_field = 'name') {

  static $legal_values = array('id', 'name', 'title');
  if (in_array($key_field, $legal_values) && in_array($value_field, $legal_values)) {

    static $id, $title;
    static $name = array(
      'register_admin_created',
      'register_no_approval_required',
      'register_pending_approval',
      'register_none',
    );

    if (empty($id) || empty($title)) {
      $id = range(0, 3);
      $title = array(
        t('Welcome, new user created by administrator'),
        t('Welcome, no approval required'),
        t('Welcome, awaiting administrator approval'),
        t('Do not send an email'),
      );
    }

    return array_combine($$key_field, $$value_field);
  }

  return FALSE;
}


/**************************\
** Salesforce integration **
\**************************/


/**
 * Implement hook_fieldmap_objects().
 *
 * @param string $type
 *    The type of object:
 *     drupal
 *     salesforce
 * @return array
 */
function capwiz_fieldmap_objects($type) {

  $objects = array();

  // Define the data fields available for capwiz actions.
  if ($type == 'drupal') {

    $objects['capwiz_action'] = array(
      'label' => t('Capwiz action'),
      'fields' => array(

        // Capwiz Action database fields
        'uid' => array('label' => t('User ID')),
        'event_id' => array('label' => t('Event ID')),
        'alert_id' => array('label' => t('Alert ID')),
        'alert' => array('label' => t('Alert')),
        'recipient_full' => array('label' => t('Recipient')),
        'action_date' => array('label' => t('Action Date')),
        'subject' => array('label' => t('Subject')),
        'intended_delivery_method' => array('label' => t('Intended Delivery Method')),
        'actual_delivery_method' => array('label' => t('Actual Delivery Method')),
        'delivery_status' => array('label' => t('Delivery Status')),

        // Salesforce fields
        'ContactId' => array('label' => t('Contact ID')),
      ),
    );
  }

  return $objects;
}


/**
 * Implement hook_fieldmap_assignment().
 *
 * @param StdObject $data
 *    Represents the current item being placed onto the heap
 * @return void
 */
function capwiz_queue_fieldmap_assignment_alter(&$data) {

  if ($data->type == 'capwiz_action' && $data->action == 'create') {
    $data->fieldmap = db_result(db_query('SELECT fieldmap FROM {salesforce_management_field_map} WHERE drupal = "capwiz_action"'));
  }
}


/**
 * Implement hook_queue_preprocess_batch().
 *
 * @param array $batch
 *   The batch currently being processed
 * @return void
 */
function capwiz_queue_preprocess_batch_alter(&$batch) {

  if ($batch['type'] == 'capwiz_action' && $batch['action'] == 'create') {

    foreach($batch['records'] as &$record) {

      $sf_fieldmap = _capwiz_sf_fieldmap($batch['fieldmap']);
      if (!empty($sf_fieldmap)) {

        $capwiz_action = db_fetch_object(db_query('SELECT * FROM {capwiz_actions} WHERE event_id = %d', $record->oid));
        if (!empty($capwiz_action)) {

          $sf_object = new StdClass();
          foreach ($sf_fieldmap as $sf_field => $drupal_field) {

            switch ($drupal_field) {

              // Store the Drupal user's ID in the Salesforce Contact ID field *temporarily*.
              // The real Salesforce Contact ID will be retrieved in hook_queue_batch_item_alter(),
              // because we have to wait until the Drupal users are sent to Salesforce and brought
              // back down. Otherwise, there is no Salesforce Contact ID to retrieve.
              case 'ContactId':
                $sf_object->$sf_field = $capwiz_action->uid;
                break;

              // For RecordTypeId, the value in the field map is the actual value (not the name of
              // the Drupal field that contains the value).
              case 'RecordTypeId':
                $sf_object->$sf_field = $drupal_field;
                break;

              default:
                $sf_object->$sf_field = $capwiz_action->$drupal_field;
            }
          }

          $record->object = $sf_object;
        }
      }
    }
  }
}


/**
 * Implementation of queue_batch_item_alter().
 * 
 * @todo Make CapWiz ID not the assumed Salesforce property.
 */
function capwiz_queue_batch_item_alter(&$object, $type, $action, $oid) {

	if ($type == 'capwiz_action' && $action == 'create') {

	  // Set the Salesforce object's Contact ID to the real one.
    // It is currently the Drupal user's ID, because
    // hook_queue_preprocess_batch_alter() runs before the users
    // are saved in Salesforce and brought back down with their
    // new ID.
    $sf_fieldmap = _capwiz_sf_fieldmap();
    if (is_array($sf_fieldmap)) {

      $field = array_search('ContactId', $sf_fieldmap);

      // Make sure the Salesforce Contact ID is actually mapped
      // and is a Drupal user ID before we do anything.
      if (property_exists($object, $field) && is_numeric($object->$field)) {

        $sf_info_sql = <<< SQL
SELECT
  CASE
    WHEN INSTR(u.data, 'salesforce_contact_id') THEN 
      SUBSTRING(
        u.data,
        INSTR(u.data, 'salesforce_contact_id') + 29,
        18)
    ELSE
      NULL
    END AS ContactId

FROM
  {users} u

WHERE
  u.uid = %d
SQL;

        $object->$field = db_result(db_query($sf_info_sql, $object->$field));
      }
  	}
  	else {
  	  watchdog('capwiz', 'Could not load the Salesforce fieldmap');
  	}
  }
  elseif ($type == 'user' && in_array($action, array('create', 'update', 'upsert'))) {
    
    $sf_info_sql = 'SELECT data FROM {users} WHERE uid = %d';
    $data = unserialize(db_result(db_query($sf_info_sql, $oid)));

    if (!empty($data) && array_key_exists('capwiz_id', $data)) {
      $object->CapWiz_ID__c = $data['capwiz_id'];
    }
  }
}


/**
 * Helper function: Get the Capwiz fieldmap for Salesforce.
 */
function _capwiz_sf_fieldmap($sf_fieldmap_id = NULL) {

  static $sf_fieldmap;

  if (empty($sf_fieldmap) && $sf_fieldmap_id !== NULL) {

    $result = db_object(db_query('SELECT fields, recordtype_id FROM {salesforce_management_field_map} WHERE fieldmap = %d', $sf_fieldmap_id));
    if ($result !== FALSE) {
      $sf_fieldmap = unserialize($result->fields);
      $sf_fieldmap->RecordTypeId = $result->recordtype_id;
    }
  }

  return $sf_fieldmap;
}

