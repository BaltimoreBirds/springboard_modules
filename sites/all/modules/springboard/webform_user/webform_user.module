<?php
// $Id$

/**
 * @file
 * Allows administrators to create petition webforms.
 */

/**
 * Implementation of hook_menu().
 */
function webform_user_menu() {
	$items['node/%webform_menu/edit/webform_user'] = array(
	  'title' => 'Related object field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_user_field_selection_form', 1),
		'access callback' => 'user_access',
    'access arguments' => array('Map webform submissions to Salesforce objects'),
    'weight' => 37,
    'type' => MENU_LOCAL_TASK,
    'file' => 'webform_user.admin.inc',
	);
	
	return $items;
}

/**
 * Implementation of hook_perm().
 */
function webform_user_menu_alter(&$items) {
	// only show related object tab if the webform is webform_user and a salesforce object has been mapped
	$items['node/%webform_menu/edit/webform_user']['access callback'] = '_webform_user_check_settings';
}

/** 
 * Only show the related object field tab if the form is webform_user and it has been mapped to a salesforce object
 */
function _webform_user_check_settings($op) {
	if ($op == 'Map webform submissions to Salesforce objects') {
		$node = node_load(arg(1));
		if ($node->is_webform_user && !empty($node->sf_webform_object)) {
			return true;
		}
	}
	return false;
}

/**
 * Implementation of hook_nodeapi().
 */
function webform_user_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  if ($node->type == 'webform') {
    switch ($op) {
      case 'validate':
        // Don't allow a node to be a Petition and Fundraiser form at the same time.
        if (isset($a3['webform_user']['is_webform_user']['#value']) && $a3['webform_user']['is_webform_user']['#value'] && module_exists('fundraiser') && $a3['fundraiser']['is_donation_form']['#value']) {
          form_set_error('is_webform_user', t('The webform_user webform cannot be used in conjunction with the fundraising webform.'));
        }

        if (isset($a3['webform_user']['is_webform_user']['#value']) && !_webform_user_validate_checkbox($a3['webform_user']['is_webform_user']['#value'])) {
          form_set_error('is_webform_user', t('Invalid choice for enabling webform user.'));
        }

        if (isset($a3['webform_user']['authenticate_submitters']['#value']) && !_webform_user_validate_checkbox($a3['webform_user']['authenticate_submitters']['#value'])) {
          form_set_error('authenticate_submitters', t('Invalid choice for webform user authentication.'));
        }
        break;

      case 'insert':
        if ($node->is_webform_user || $node->authenticate_submitters) {
          _webform_user_set_values($node);
          _webform_user_create_webform_components($node);
        }
        break;

      case 'update':
        // If the node hasn't been a webform_user form and it's set to be a webform_user form, make it one.
        $current_node = node_load(array('nid' => $node->nid));
        if (!_webform_user_is_webform_user($current_node->nid) && $node->is_webform_user && $current_node->webform['components'][1]['form_key'] != 'mail') {
          _webform_user_create_webform_components($node);
        }
				
				// save the values
        _webform_user_set_values($node);
        break;

      case 'delete revision':
        _webform_user_delete_revision_values($node);
        break;

      case 'delete':
        _webform_user_delete_node_values($node);
        break;

      case 'load':
      	$webform_user = _webform_user_load_webform_user($node->nid);
      	if ($webform_user) {
      		$node->is_webform_user = $webform_user['is_webform_user'];
      		$node->authenticate_submitters = $webform_user['authenticate_submitters'];
      		$node->related_object = $webform_user['related_object'];
      		$node->foreign_key_field = $webform_user['foreign_key_field'];
      	}

        // If the user is authenticated, populate the webform fields with values
        // from the user's profile fields.
        if ($user->uid && arg(0) == 'node' && is_numeric(arg(1)) && arg(2) != 'edit') {
          _webform_user_add_webform_defaults($node, $user);
        }

        break;
    }
  }
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_user_form_webform_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->nid) {
    $is_webform_user = $form['#node']->is_webform_user;
    $authenticate_submitters = $form['#node']->authenticate_submitters;
    $related_object = $form['#node']->related_object ? $form['#node']->related_object : 'none';
  }
  else {
    $is_webform_user = 0;
    $authenticate_submitters = 0;
    $related_object = 'none';
  }

  $form['webform_user'] = array(
    '#title' => t('Webform user settings'),
    '#type' => 'fieldset',
    '#collapsible' => 1,
    '#collapsed' => 1,
    '#weight' => 1,
    '#access' => 1,
  );
  
  $form['webform_user']['is_webform_user'] = array(
    '#title' => t('Create or update users when this webform is submitted.'),
    '#type' => 'checkbox',
    '#default_value' => $is_webform_user,
    '#description' => t('When checked, user profile fields will automatically be added to the webform. When the form is submitted, new users will be created using those form values.'),
  );
  
  if (module_exists('sf_webform')) {
	  $form['webform_user']['related_object'] = array(
	  	'#title' => t('Relate the user that submitted this webform to'),
	  	'#type' => 'radios',
	  	'#options' => array(
	  		'none' => t('None'),
	  		'account' => t('Account'),
	  		'contact' => t('Contact'),
	  	),
	  	'#default_value' => $related_object,
	  	'#description' => t('If the Salesforce webform integration module is enabled, the submission will be related back to the contact or account in Salesforce depending on what you select here.'),
	  );
  }
  
  $form['webform_user']['authenticate_submitters'] = array(
    '#title' => t('Authenticate form submitters based on e-mail address matches.'),
    '#description' => t('When the user submits the form, log them into an account corresponding to the e-mail address they entered. If the user doesn\'t have an account, one will be created for them.'),
    '#type' => 'checkbox',
    '#default_value' => $authenticate_submitters,
  );
}

/**
 * Implementation of hook_form_alter().
 */
function webform_user_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, "webform_client") !== FALSE) {
    // Add new submit handler.
    $form['#submit'][] = 'webform_user_webform_submit';
  }
}

function _webform_user_add_webform_defaults(&$node, &$user) {
  // Reload user object to ensure profile field values are present.
  $user = user_load(array('uid' => $user->uid));

  $fields = _webform_user_get_profile_fields();

  foreach ($node->webform['components'] as $ckey => $component) {
    foreach ($fields as $fkey => $field) {
      // Handle e-mail.
      if ($component['form_key'] == 'mail') {
        $node->webform['components'][$ckey]['value'] = check_plain($user->mail);
      }
      // Handle custom profile fields.
      elseif ($component['form_key'] == $field['name'] && isset($user->$component['form_key'])) {
        if ($field['type'] == 'checkbox') {
          $node->webform['components'][$ckey]['value'] = $component['form_key'];
        }
        elseif ($field['type'] == 'date') {
          $node->webform['components'][$ckey]['value'] = check_plain($user->profile_birthdate['month'] . '/' . $user->profile_birthdate['day'] . '/' . $user->profile_birthdate['year']);
        }
        else {
          $node->webform['components'][$ckey]['value'] = check_plain($user->$component['form_key']);
        }

        unset($fields[$fkey]);
      }
    }
  }
}

/**
 * Process webform submissions.
 */
function webform_user_webform_submit($form, &$form_state) {
  global $user;

  $node = node_load(array('nid' => $form_state['values']['details']['nid']));

  // Only process if the form is completed and it's a webform_user form.
  $submit_op = empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'];
  if ($form_state['values']['op'] == $submit_op && $node->is_webform_user) {
    $fields = _webform_user_flatten_tree($form_state['values']['submitted_tree']);

    // Authenticated user.
    if ($user->uid) {
      // Update the existing user account.
      _webform_user_update_user_profile_fields($user->uid, $fields);
    }
    // Anonymous user.
    elseif (_webform_user_validate_email($fields['mail'])) {
      if ($account = user_load(array('mail' => $fields['mail']))) {
        // Update the existing user account.
        _webform_user_update_user_profile_fields($account->uid, $fields);

        if ($node->authenticate_submitters) {
          // Log the user in.
          user_external_login($account);
        }
      }
      else {
        // Register the user.
        $user_fields = array(
          'name' => $fields['mail'],
          'mail' => $fields['mail'],
          'init' => $fields['mail'],
          'pass' => user_password(8),
          'status' => 1,
        );
        $account = user_save('', $user_fields);
        
        if ($fields['ms'] || $fields['cid']) {
          $fields['profile_ms'] = $fields['ms'];
          $fields['profile_cid'] = $fields['cid'];
        }
        
        // Update the new user account.
        _webform_user_update_user_profile_fields($account->uid, $fields, TRUE);
        
        // Update the submission record with the id of the new user
        $sid = $form_state['values']['details']['sid'];
        db_query("UPDATE {webform_submissions} SET uid = %d WHERE sid = %d", $account->uid, $sid);

				// Finally, if authenticate_submitters is true, log the user in
        if ($node->authenticate_submitters) {
          // Log the user in.
          user_external_login($account);
        }
      }
    }
  }
}

/**
 * Validates an e-mail address.
 * 
 * @param $mail
 *   The e-mail address to validate.
 * @return
 *   Returns TRUE if the e-mail address is valid; FALSE otherwise.
 */
function _webform_user_validate_email($mail) {
  return eregi("^[_a-z0-9+-]+(\.[_a-z0-9+-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})$", $mail) ? TRUE : FALSE;
}

/**
 * Flatten a tree into a flat list. Note: date values are not flattened.
 */
function _webform_user_flatten_tree($tree) {
  $items = array();

  foreach ($tree as $key => $val) {
    if (is_array($val)) {
      // If it's a date, don't flatten the value.
      if (isset($val[0]) && isset($val[1]) && isset($val[2])) {
        if ($val[0] && $val[1] && $val[2]) {
          $val['month'] = $val[0];
          $val['day'] = $val[1];
          $val['year'] = $val[2];
          unset($val[0], $val[1], $val[2]);
          $items[$key] = $val;
        }
        else {
          continue;
        }
      }
      else {
        $items = array_merge($items, _webform_user_flatten_tree($val));
      }
    }
    elseif (!empty($val)) {
      $items[$key] = $val;
    }
  }

  return $items;
}

/**
 * Update the user's profile fields.
 *
 * @param $uid
 *   The ID of the user.
 * @param $form_fields
 *   An array of the fields to update.
 * @param $all
 *   Whether to fetch all fields or just non-hidden ones. 
 */
function _webform_user_update_user_profile_fields($uid, $form_fields, $all = FALSE) {
  $user = user_load(array('uid' => $uid));

  $profile_fields = array();
  
  // Get existing profile fields.
  $results = db_query("SELECT pf.fid, pf.name
                       FROM profile_fields pf");
  while ($result = db_fetch_array($results)) {
    $profile_fields[$result['name']] = array(
      'fid' => $result['fid'],
      'name' => $result['name'],
      'value' => '',
    );
  }
  
  // Overwrite existing profile values with new values.
  foreach ($form_fields as $key => $val) {
    if (array_key_exists($key, $profile_fields)) {
      $profile_fields[$key]['value'] = is_array($val) ? serialize($val) : $val;
    }
  }
  
  // Insert all values back into the database.
  foreach ($profile_fields as $field) {
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field['fid'], $uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field['fid'], $uid, $field['value']);
  }
}

function _webform_user_log_user_in($fields) {
  $form_state = array('values' => $fields);
  drupal_execute('user_login', $form_state);
}

/**
 * Checks to see if a checkbox value is valid.
 *
 * @param $value
 *   The submitted value of a checkbox.
 * @return bool
 *   TRUE if valid; FALSE otherwise.
 */
function _webform_user_validate_checkbox($value) {
  if ($value !== 0 || $value !== 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _webform_user_load_webform_user($nid) {
	$result = db_fetch_array(db_query("SELECT * FROM {webform_user} WHERE nid = %d", $nid));
	return $result;
}

/**
 * Checks to see if the is_webform_user checkbox is enabled for the selected node.
 *
 * @param $nid
 *   The ID of the selected node.
 * @return bool
 *   Returns TRUE if is_webform_user is enabled, FALSE otherwise.
 */
function _webform_user_is_webform_user($nid) {
  $result = db_fetch_array(
    db_query(
      'SELECT is_webform_user
       FROM {webform_user}
       WHERE nid = %d',
      $nid
    )
  );

  return $result['is_webform_user'] == 1 ? TRUE : FALSE;
}

/**
 * Checks to see if the authenticate_submitters checkbox is enabled for the
 * selected node.
 *
 * @param $nid
 *   The ID of the selected node.
 * @return bool
 *   Returns TRUE if authenticate_submitters is enabled, FALSE otherwise.
 */
function _webform_user_authenticate_submitters($nid) {
  $result = db_fetch_array(
    db_query(
      'SELECT authenticate_submitters
       FROM {webform_user}
       WHERE nid = %d',
      $nid
    )
  );

  return $result['authenticate_submitters'] == 1 ? TRUE : FALSE;
}

/**
 * Saves the values of the is_webform_user and authenticate_submitters checkboxes
 * when the selected node is created.
 *
 * @param $node
 *   An object representation of the selected node.
 * @return unknown_type
 */
function _webform_user_set_values(&$node) {
  $is_webform_user = $node->is_webform_user ? 1 : 0;
  $authenticate_submitters = $node->authenticate_submitters ? 1 : 0;
  $related_object = $node->related_object ? $node->related_object : 'none';

	$exists = db_result(db_query("SELECT count(*) FROM {webform_user} WHERE nid = %d", $node->nid));

	if (!$exists) {
	  db_query(
	    "INSERT INTO {webform_user} (nid, is_webform_user, authenticate_submitters, related_object)
	     VALUES (%d, %d, %d, '%s')",
	    $node->nid, $is_webform_user, $authenticate_submitters, $related_object
	  );
	}
  else {
  	db_query(
	    "UPDATE {webform_user}
	     SET is_webform_user = %d, authenticate_submitters = %d, related_object = '%s'
	     WHERE nid = %d",
	    $is_webform_user, $authenticate_submitters, $related_object, $node->nid
	  );
  }
}

/**
 * Updates the values of the is_webform_user and authenticate_submitters checkboxes
 * when the selected node is updated.
 *
 * @param $node
 *   An object representation of the selected node.
 */
function _webform_user_update_values(&$node) {
  $is_webform_user = $node->is_webform_user ? 1 : 0;
  $authenticate_submitters = $node->authenticate_submitters ? 1 : 0;
	$related_object = $node->related_object ? $node->related_object : 'none';

  db_query(
    "UPDATE {webform_user}
     SET is_webform_user = %d, authenticate_submitters = %d, related_object = '%s'
     WHERE nid = %d",
    $is_webform_user, $authenticate_submitters, $related_object, $node->nid
  );
}

/**
 * Deletes the values of the is_webform_user and authenticate_submitters checkboxes
 * when the selected node is being deleted.
 *
 * @param $node
 *   An object representation of the selected node.
 */
function _webform_user_delete_node_values($node) {
  db_query('DELETE FROM {webform_user} WHERE nid = %d', $node->nid);
}

/**
 * Creates a machine-readable version of a given name.
 *
 * @param $name
 *   The name for which you'd like to create a normalized name.
 * @return string
 *   The normalized name.
 */
function _webform_user_normalize_name($name) {
  // make lowercase, drop special chars, replace spaces with underscores
  return preg_replace(array('/[^a-z0-9_\s]/', '/\s+/'), array('', '_'), strtolower($name));
}

function _webform_user_get_profile_fieldsets($all = FALSE) {
  $fieldsets = array();

  if ($all) {
    $results = db_query(
      'SELECT DISTINCT category
       FROM {profile_fields}
       ORDER BY category'
    );
  }
  else {
    $results = db_query(
      'SELECT DISTINCT category
       FROM {profile_fields}
       WHERE visibility IN (%s)
       ORDER BY category',
      implode(', ', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS))
    );
  }

  while ($result = db_fetch_array($results)) {
    $result['category_normalized'] = _webform_user_normalize_name($result['category']);
    $fieldsets[] = $result;
  }

  return $fieldsets;
}

function _webform_user_get_profile_fields() {
  $fields = array();

  $results = db_query(
    'SELECT fid, title, name, explanation, category, type, weight, required, visibility, options
     FROM {profile_fields}
     WHERE visibility IN (%s)
     ORDER BY category, weight',
    implode(', ', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS))
  );

  while ($result = db_fetch_array($results)) {
    $result['category_normalized'] = _webform_user_normalize_name($result['category']);
    $fields[] = $result;
  }

  return $fields;
}

function _webform_user_get_user_profile_data($uid) {
  $items = array();

  $results = db_query(
    'SELECT pf.name, pv.value
     FROM {profile_fields} AS pf
     INNER JOIN {profile_values} AS pv ON (pf.fid = pv.fid)
     WHERE pv.uid = %d
     AND pv.value <> ""',
    $uid
  );

  while ($result = db_fetch_array($results)) {
    if ($result['type'] == 'date') {
      $result['value'] = unserialize($result['value']);
    }

    $items[$result['name']] = $result['value'];
  }

  return $items;
}

/**
 * Creates Webform components for the selected Webform node based on custom
 * profile fields.
 *
 * @param $node
 *   An object representation of the selected node.
 */
function _webform_user_create_webform_components(&$node) {
  $fieldsets = _webform_user_get_profile_fieldsets();
  $fields = _webform_user_get_profile_fields();

  $items = array();
  $fieldset_lookup = array();

  // Add the e-mail field.
  $mail_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'mail',
    'name' => 'E-mail address',
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  webform_component_insert($mail_field);

  // Process fieldset results.
  foreach ($fieldsets as $fieldset) {
    // Create a Webform component array for the fieldset.
    $item = array(
      'nid' => $node->nid,
      'pid' => 0,
      'form_key' => $fieldset['category_normalized'],
      'name' => $fieldset['category'],
      'type' => 'fieldset',
      'weight' => 0,
      'extra' => array(
        'collapsible' => 1,
        'collapsed' => 0,
        'description' => '',
      ),
    );

    // Add the fieldset component and store its ID in a lookup table.
    $fieldset_lookup[$fieldset['category_normalized']] = webform_component_insert($item);
  }

  // Process non-fieldset results.
  foreach ($fields as $field) {
    $fieldset_id = 0;

    // Get the fieldset ID.
    foreach ($fieldset_lookup as $key => $val) {
      if ($key == $field['category_normalized']) {
        $fieldset_id = $val;
        break;
      }
    }

    // Create a Webform component array for the field.
    $item = array(
      'nid' => $node->nid,
      'pid' => $fieldset_id,
      'form_key' => $field['name'],
      'name' => $field['title'],
      'type' => $field['type'],
      'mandatory' => $field['required'],
      'weight' => $field['weight'],
      'email' => 1,
      'extra' => array(
        'description' => $field['explanation'],
      ),
    );

    // Transform the component array for certain field types.
    switch ($item['type']) {
      case 'checkbox':
        $item['type'] = 'select';
        $item['extra']['items'] = $field['name'] . '|' . $field['title'];
        $item['extra']['aslist'] = 0;
        $item['extra']['multiple'] = 'Y';
        break;

      case 'list':
        $item['type'] = 'textarea';
        break;

      case 'selection':
        $item['type'] = 'select';
        $item['extra']['items'] = $field['options'];
        $item['extra']['aslist'] = 'Y';
        $item['extra']['multiple'] = 0;
        break;

      case 'url':
        $item['type'] = 'textfield';
        break;
    }

    // Add the component to the Webform.
    webform_component_insert($item);
  }

  // Add the Market Source field.
  $ms_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'ms',
    'name' => 'Market Source',
    'type' => 'hidden',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  webform_component_insert($ms_field);

  // Add the Component ID field.
  $cid_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'cid',
    'name' => 'Campaign ID',
    'type' => 'hidden',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  webform_component_insert($cid_field);
}

/**
 * Implementation of hook_queue_batch_item_alter().
 */
function webform_user_queue_batch_item_alter(&$object, $type, $action, $oid) {
	if ($type == 'webform' && $action == 'create') {
		$relationship = _webform_user_get_relationship($oid);
		if (!empty($relationship)) {
			$user = _webform_user_load_user_salesforce_ids($oid);
			if ($relationship->related_object == 'account') {
				$id = $user->salesforce_account_id;
			}
			elseif ($relationship->related_object == 'contact') {
				$id = $user->salesforce_contact_id;
			}					
			
			// continue if we've got an id
			if ($id) {
				// add the extra relationship field
				$object[$relationship->foreign_key_field] = $id;
				return $object;
			}
		}
	}
}


/**
 * Returns user that made the webform submission
 */
function _webform_user_load_user_salesforce_ids($sid) {
	$result = db_query("SELECT substring(u.data, instr(u.data, 'salesforce_account_id')+29, 18) AS salesforce_account_id,
		substring(u.data, instr(u.data, 'salesforce_contact_id')+29, 18) AS salesforce_contact_id FROM {users} u 
		INNER JOIN {webform_submissions} w ON w.uid = u.uid WHERE w.sid = %d", (int) $sid);
		
	return db_fetch_object($result);
}

/**
 * Helper function to return the salesforce object (account or contact) and the foreign key field
 */
function _webform_user_get_relationship($sid) {
	return db_fetch_object(db_query("SELECT b.related_object, b.foreign_key_field FROM {webform_submissions} w 
		INNER JOIN {webform_user} b ON b.nid = w.nid WHERE w.sid = %d", (int) $sid));
}

/**
 * Function to return an array of object fields
 */
function _get_object_relation_fields($object_name) {
	$sf = salesforce_management_api_connect();
	if ($sf) {
		$object = $sf->client->describeSObject($object_name);
		foreach($object->fields as $field) {
			if ($field->type == 'reference' && $field->updateable) {
				$object_fields[$field->name] = $field->label;
			}
		}
		$object_fields[] = '--Select One--';
		asort($object_fields);
		return $object_fields;
	}	
	return array();
}