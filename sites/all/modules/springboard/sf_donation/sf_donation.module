<?php
// $Id: sf_donation.module,v 1.0.0.0 2009/08/14 06:44:28 pcave Exp $

/**
 * @file
 * Integrates webform submissions with the Salesforce API.
 */


/**
 * Implementation of hook_menu().
 */
function sf_donation_menu() {
	$items['node/%webform_menu/edit/salesforce-donation-mapping'] = array(
	    'title' => 'Salesforce Donation Mapping',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('sf_donation_mapping_form', 1),
	    'access callback' => 'mapping_form_access',
	    'weight' => 35,
	    'type' => MENU_LOCAL_TASK,
	);

	$items['admin/store/orders/%uc_order/export'] = array(
		'title' => t('Export to Salesforce'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('sf_donation_export_confirm_form'),
		'access callback' => 'check_order_export_status',
		'access arguments' => array(3),
		'weight' => 20,
		'type' => MENU_LOCAL_TASK,
	);
	
	$items['fix_one_offs'] = array(
		'title' => 'Fix one off donation errors',
		'page callback' => 'fix_one_off_errors',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Function to check whether or not an order has been exported to salesforce
 */
function check_order_export_status($order) {
	$sfid = db_result(db_query("SELECT sfid FROM {fundraiser_webform_order} WHERE order_id = %d UNION
		SELECT sf_opportunity_id AS sfid FROM {fundraiser_recurring} WHERE order_id = %d", $order->order_id, $order->order_id));

	if (!empty($sfid)) {
		return TRUE;
	}
	
	return FALSE;
}



/**
 * Confirmation form for manually exporting order to salesforce
 */
function sf_donation_export_confirm_form() {
	$order_id = arg(3);
	// get the user
	$user = db_fetch_object(db_query("SELECT billing_first_name, billing_last_name FROM {uc_orders} WHERE order_id = %d", $order_id));
	$donations = get_orders_for_export($order_id);
	
	// get recurring donations for close dates
	$result = db_query("SELECT order_id, next_charge FROM {fundraiser_recurring} WHERE master_order_id = %d", $order_id);
	while ($data = db_fetch_object($result)) {
		$close_dates[$data->order_id] = date('m-d-Y', $data->next_charge);
	}
	
	$output = '<h3>Donations</h3>';
	$header = array('Order ID', 'Salesforce ID', 'Donor Name', 'Amount', 'Close Date', 'Transaction Date');
	$rows = array();
	
	foreach ($donations as $key => $donation) {
		$rows[] = array(
			$donation['fields']['Order_ID__c'],
			$donation['fields']['Id'],
			$user->billing_first_name . ' ' . $user->billing_last_name,
			$donation['fields']['Amount'],
			$donation['fields']['CloseDate'] ? date('m-d-Y', strtotime($donation['fields']['CloseDate'])) : $close_dates[$donation['fields']['Order_ID__c']],
			$donation['fields']['Transaction_Date_Time__c'] ? date('m-d-Y h:i A', strtotime($donation['fields']['Transaction_Date_Time__c'])) : 'N/A',
		);
	}
	
	$output .= theme('table', $header, $rows);
	
	$form['order_id'] = array(
		'#type' => 'hidden',
		'#value' => $order_id,
	);
	return confirm_form($form, "Are you sure you want to re-export order $order_id to Salesforce?", 'admin/store/orders/'. $order_id, $output . "<p>Any values that have been changed in Salesforce will be overwritten.</p>", $yes = "Export", $no = "Cancel", $name = 'confirm');
}

/**
 * Logic to manually export an order to Salesforce
 */
function sf_donation_export_confirm_form_submit($form, &$form_state) {
	
	// get the webform submission id for mapped fields
	$order_id = $form_state['values']['order_id'];
	$donations = get_orders_for_export($order_id);
	
	// pop off the actual objects
	$donations_to_update = array();
	foreach ($donations as $value) {
		$donations_to_update[] = $value['fields'];
	}
	
	$sf = salesforce_management_api_connect();
	// only continue if we got a valid connection
	if ($sf) {
		$results = $sf->client->update($donations_to_update, 'Opportunity');
	}
	
	$failure_count = 0;
	$success_count = 0;
	$count = count($donations);
	
	// deal with salesforce's inconsistent returns
	if (!is_array($results)) {
		$temp = $results;
		$results = array();
		$results[] = $temp;
	}
	
	for ($i = 0; $i < $count; $i++) {
		if (!$results[$i]->success) {
			watchdog('salesforce', t('Order !order_id failed to update in Salesforce. Error: !error', array('!order_id' => $donations[$i]['order_id'], '!error' => print_r($results[$i]->error, true))), NULL, WATCHDOG_ERROR);
			$failure_count++;
		}
		else {
			$success_count++;
			uc_order_comment_save($donations[$i]['order_id'], 0, 'Order manually exported to Salesforce.', 'admin'); 
		}
	}
	
	drupal_set_message($success_count . ' orders successfully updated in Salesforce. ' . $failure_count . ' failed.');
	$form_state['redirect'] = 'admin/store/orders/' . $order_id;
}

function get_orders_for_export($order_id) {
	
	// only allow export en-mass (e.g., don't allow a single donation in a series, instead, get the whole series)
	$count = db_result(db_query("SELECT count(order_id) FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
	if ($count == 0) {
		$order_id = db_result(db_query("SELECT master_order_id FROM {fundraiser_recurring} WHERE order_id = %d", $order_id));
	}
	
	$result = db_query("SELECT f.sid, f.sfid, u.uid FROM {fundraiser_webform_order} f INNER JOIN 
		{uc_orders} u on u.order_id = f.order_id WHERE f.order_id = %d", $order_id);
	
	while ($data = db_fetch_object($result)) {
		$sid = $data->sid;
		$uid = $data->uid;
		$sfid = $data->sfid;
	}
	
	$order_ids_to_export[] = array(
		'order_id' => $order_id,
		'sfid' => $sfid,
	);
	
	// see if it is a recurring donation
	$result = db_query("SELECT order_id, sf_opportunity_id FROM {fundraiser_recurring} WHERE master_order_id = %d", $order_id);
	
	while ($data = db_fetch_object($result)) {
		$order_ids_to_export[] = array(
			'order_id' => $data->order_id,
			'sfid' => $data->sf_opportunity_id,
		);
	}

	$donations = array();
	
	if ($sid) {
		// load the user
		$user = user_load($uid);
		foreach($order_ids_to_export as $key => $value) {			
			$donation = _create_single_donation($value['order_id'], $user, $sid);
			// remove the name because we don't want to overwrite what was set orginally
			unset($donation['fields']['Name']);
			$donation['order_id'] = $value['order_id'];
			$donation['fields']['Id'] = $value['sfid'];
			$donations[] = $donation;
		}
	}

	return $donations;
}

/**
* Implementation of hook_theme().
*/
function sf_donation_theme() {
	return array(
		'sf_donation_mapping_form' => array(
		'arguments' => array(),
	)
	);
}

function sf_donation_mapping_form($form_state, $node) {
	$form = array(
    '#tree' => TRUE,
    '#node' => $node,
    'mapping' => array(),
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

	$sf = salesforce_management_api_connect();
	$donation = $sf->client->describeSObject("Opportunity");
	$donation_fields = array('' => '--Select One--');
	$mapping_config = _get_mapping_config();

	$output = '';
	foreach($mapping_config['predefined'] as $key => $value) {
		$output .= '<li>' . $key . ' = ' . $value . '</li>';
	}
	
	$form['predefined'] = array(
		'#prefix' => '<div id="sf_donation_predefined_mappings"><h3>Predefined Mappings</h3><div>The following fields will be mapped automatically.</div><ul>',
		'#value' => $output,
		'#suffix' => '</ul><div>',
	);
	
	$form['user_mappings'] = array(
		'#value' => '<h3>User Mappings</h3><div>Use this form to map additional fields to the opportunity object in salesforce.</div>',
		'#weight' => -1,
	);

	foreach($donation->fields as $field) {
		// exclude pre-mapped fields
		if (!in_array($field->name, $mapping_config['unmappable'])) {
			$donation_fields[$field->name] = $field->label;
		}
	}
	
	$node = $form['#node'];
	foreach($node->webform['components'] as $cid => $component) {
		if($component['type'] != 'fieldset' && !array_key_exists($component['form_key'], $mapping_config['predefined'])) {
			// component
			$form['mapping']['cid'][$cid] = array(
			'#type' => 'item',
			'#description' => t($component['name']." - (".$component['type'].")"),
			);
			// opportunity field
			$form['mapping']['salesforce'][$cid] = array(
				'#type' => 'select',
				'#options' => $donation_fields,
				'#default_value' => $node->salesforce_map[$cid],
			);
		}
	}
	
	$form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

	return $form;
}

/**
 * Implementation of hook_perm().
 */
function sf_donation_perm() {
  return array('sync donations with salesforce');
}

/*
 * Saves salesforce donation map
 */
function sf_donation_mapping_form_submit($form, &$form_state) {
	// remove salesforce mappings
	$sql = "delete from {fundraiser_salesforce_map} where nid = %d";
	db_query($sql, $form['#node']->nid);
	// re-add mappings
	foreach($form_state['values']['mapping']['salesforce'] as $key => $value) {
		if (!empty($value)) {
			$sql = "insert into {fundraiser_salesforce_map} set nid = %d, cid = %d, map_id = '%s'";
			db_query($sql, $form['#node']->nid, $key, $value);
		}
	}
	drupal_set_message(t('Salesforce mapping has been saved'));
}

/**
 * Clones a salesforce donation map
 */
function sf_donation_clone_map($nid, $new_nid) {
	// get profile map for the original donation form
	$result = db_query("select f.nid, f.cid, f.map_id, c.form_key from {fundraiser_salesforce_map} f inner join
		{webform_component} c on c.cid = f.cid and c.nid = f.nid where f.nid = %d", $nid);
	
	// loop over mapped components and find new component in cloned donation form
	while ($data = db_fetch_object($result)) {
		$cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE form_key = '%s' AND nid = %d", $data->form_key, $new_nid));
		if ($cid) {
			db_query("INSERT INTO {fundraiser_salesforce_map} (nid, cid, map_id) VALUES (%d, %d, '%s')", $new_nid, $cid, $data->map_id);
		}
	}
}

/**
 * Implementaion of hook_nodeapi().
 */
function sf_donation_nodeapi(&$node, $op, $teaser, $page) {
	if($node->type == 'webform') {
		$parts = explode("/",$_GET['q']);
		
		if($parts[0]=='node' && $parts[2]=='edit' && $parts[3] == 'salesforce-donation-mapping' && $op == 'load'){
			$result = db_query("select cid, map_id from {fundraiser_salesforce_map} where nid = %d", $node->nid);
			while($row = db_fetch_object($result)) {
				$map['salesforce_map'][$row->cid] = $row->map_id;
			}
			return $map;
		}
	}
}

/**
 * Implementation of hook_sf_donation().
 */
function sf_donation_sf_donation($op, $order_id, $sfid, $message) {
  $aids = _trigger_get_hook_aids('sf_donation', $op);
  $context = array(
    'hook' => 'sf_donation',
    'op' => $op,
    'order_id' => $order_id,
		'sfid' => $sfid,
		'message' => $message,
  );
	$dummy = new stdClass();
  actions_do(array_keys($aids), $dummy, $context, $order_id, $sfid, $message);
}

/**
 * Implemenation of hook_menu_alter().
 */
function sf_donation_menu_alter(&$items) {
	// not sure why this is needed, but the custom trigger was not showing up without it
	$items['admin/build/trigger/sf_donation']['access callback'] = TRUE;
}

/**
 * Implementation of hook_form_alter().
 */
function sf_donation_form_alter(&$form, $form_state, $form_id) {
	switch($form_id) {
		case 'webform_component_edit_form':
			if ($form['advanced']['form_key']['#default_value'] == 'cid') {
				// turn it into a select field
				// get campaigns from salesforce
				$campaigns = _get_campaigns();
				if (!empty($campaigns)) {
					$form['value']['#type'] = 'select';
					$form['value']['#options'] = $campaigns;
				}
			}
			break;
			
		case 'salesforce_management_api_settings_form':
			// get campaigns from salesforce
			$campaigns = _get_campaigns();
			array_unshift($campaigns, '-- Please select --');
			
			$form['sf_donation'] = array(
	      '#type' => 'fieldset',
	      '#title' => t('Donation integration'),
	      '#description' => t('Fundraiser module integration settings.'),
	      '#collapsible' => TRUE,
	      '#collapsed' => TRUE,
	      '#weight' => -1,
	    );

			$form['sf_donation']['sf_donation_debug'] = array(
				'#type' => 'checkbox',
				'#title' => t('Debug mode'),
				'#description' => t('Log detailed information about each API call.'),
				'#default_value' => variable_get('sf_donation_debug', 0),
			);

			$form['sf_donation']['sf_donation_default_campaign'] = array(
				'#type' => 'select',
				'#title' => t('Default campaign'),
				'#description' => t('The default campaign to which donations will be assigned.'),
				'#options' => $campaigns,
				'#default_value' => variable_get('sf_donation_default_campaign', ''),
			);


			break;
	}
}

/**
 * Implementation of hook_hook_info(). 
 */
function sf_donation_hook_info() {
	return array(
		'sf_donation' => array(
			'sf_donation' => array(
				'fails' => array(
					'runs when' => t('When a salesforce donation synchronization fails'),
				),
			),
		),
	);
}

/**
 * Implemenation of hook_cron().
 *
 * Exports ubercart orders that were created prior to now that have not previously been sync'd.
 * This function handles both single and recurring donations
 */
function sf_donation_cron() {

	$orders = db_query("select u.order_id, f.sid, u.uid from {uc_orders} u inner join {fundraiser_webform_order} f 
		on f.order_id = u.order_id where u.created < now() and f.sfid is null order by u.uid limit 200");
		
	// array used to hold all the donations we are going to create. this will cut down
	// on the number of api calls
	$donations_to_create = array();	
	$recurring_donations_to_create = array();	
		
	while ($data = db_fetch_object($orders)) {
		// first we need to see if the user is sync'd
		if ($user->uid != $data->uid && $data->uid != 0) {
			$user = user_load($data->uid); // prevent re-loading of user every loop
		}
		
		// make sure user has been sync'd up
		if ($user->salesforce_contact_id && $user->salesforce_account_id) {
			// determine if donation is recurring
			$donation_count = _recurring_donation_count($data->order_id, $user);
			if ($donation_count > 0) {
				$donation_count++; // account for original order
				$recurring_donations_to_create[] = _create_recurring_donation($data->order_id, $user, $donation_count, $data->sid);
			}
			else {
				$donations_to_create[] = _create_single_donation($data->order_id, $user, $data->sid);
			}
		}
	}

	// export them
	if (!empty($donations_to_create)) {
		_export_single_donations($donations_to_create);
	}
	
	if (!empty($recurring_donations_to_create)) {
		_export_recurring_donations($recurring_donations_to_create);
	}
}

/**
 * Exports recurring donations to salesforce. Not only does it create the recurring donation object,
 * but it also attempts to update all the opportunity objects that are automatically generated
 */
function _export_recurring_donations($donations) {
	global $base_url;
	global $user;
	
	if (variable_get('sf_donation_debug', 0)) {
		// log the activity
		$semaphore = variable_get('cron_semaphore', FALSE);
		$number_of_donations = count($donations);
		$data = print_r($donations, true);
		$sql = "insert into {sf_donation_log} (cron_semaphore, uid, type, number_of_donations, data) values (%d, %d, '%s', %d, '%s')";
		db_query($sql, $semaphore, $user->uid, 'recurring', $number_of_donations, $data);
	}
	
	$donations_to_create = array();
	foreach ($donations as $value) {
		$donations_to_create[] = $value['fields'];
	}

	$sf = salesforce_management_api_connect();
	// only continue if we got a valid connection
	if ($sf) {
		$results = $sf->client->create($donations_to_create, 'npe03__Recurring_Donation__c');
		$count = count($donations);
		for ($i=0; $i < $count; $i++) {
			// salesforce does not return an array if only one object is created
			if ($count == 1) {
				$success = $results->success;
				$sfid = $results->id;
				$errors = $results->errors;
			}
			else {
				$success = $results[$i]->success;
				$sfid = $results[$i]->id;
				$errors = $results[$i]->errors;
			}
			if ($success) {
				// load up the original order
				$order = uc_order_load($donations[$i]['order_id']);
			
				// we need to re-query salesforce and get all the opportunities that were created
				$opportunities = $sf->client->query("select Id, Name, CloseDate from Opportunity WHERE npe03__Recurring_Donation__c = '$sfid'");
				
				// get payment info for transaction date
				$payments = uc_payment_load_payments($order->order_id);

				// load up the map
				$map = _load_salesforce_map($donations[$i]['sid']);
				$child_donations = array();
			
				// get the number of recurring donations that were created
				$donation_count = count($opportunities->records);
			
				for ($j = 0; $j < $donation_count; $j++) {
					$donation = array();
					if ($j == 0) { 
						// the first donation has already been posted so update transaction date and stagename
						// deal with sf date handling
						$transaction_date = strtotime(date('H:i:s d-M-Y T', $payments[0]->received));
						$donation['StageName'] = 'Posted';
						$donation['CloseDate'] = date('Y-m-d', $transaction_date);
						$donation['Transaction_Date_Time__c'] = gmdate('c', $transaction_date);
						$donation['Probability'] = 100.00;
						$donation['Order_ID__c'] = $order->order_id;
						db_query("update {fundraiser_webform_order} set sfid = '%s' where order_id = %d", $opportunities->records[$j]->Id, $order->order_id);
					}
					else {
						// look up the recurring order based on date
						$order_id = db_result(db_query("select order_id from {fundraiser_recurring} where master_order_id = %d and 
							sf_opportunity_id is null order by next_charge asc limit 1", $order->order_id));
						$donation['Order_ID__c'] = $order_id;
						// update local fundraiser table
						$sql = "update {fundraiser_recurring} set sf_opportunity_id = '%s' where order_id = %d";
						db_query($sql, $opportunities->records[$j]->Id, $order_id);
					}
				
					$donation['Id'] = $opportunities->records[$j]->Id;
					$donation['Donation_Form_Name__c'] = $order->products[0]->title;
					$donation['Donation_Form_URL__c'] = $base_url . '/node/' . $order->products[0]->nid;
					$donation['CC_Last_4__c'] = !empty($order->payment_details['cc_number']) ? substr($order->payment_details['cc_number'], -4) : '';
					$donation['CC_Exp_Month__c'] = $order->payment_details['cc_exp_month'];
					$donation['CC_Exp_Year__c'] = $order->payment_details['cc_exp_year'];
					$donation['CC_Type__c'] = $order->payment_details['cc_type'];
					$donation['Billing_Street__c'] = $order->billing_street1;
					$donation['Billing_Street_Line_2__c'] = $order->billing_street2;
					$donation['Billing_City__c'] = $order->billing_city;
					$donation['Billing_Country__c'] = _convert_billing_country($order->billing_country);
					$donation['Billing_State__c'] = uc_get_zone_code($order->billing_zone);
					$donation['Billing_Zip__c'] = $order->billing_postal_code;
					$donation['Type'] = 'Donation';
					// merge in mapped data
					$donation = array_merge($donation, $map);
					$child_donations[] = $donation;
				}
				// update all child donations
				$donations_updated = $sf->client->update($child_donations, 'Opportunity');
			
				// process results
				_process_recurring_donation_updates($donations_updated, $child_donations);
				
				// clear the credit card cache
				uc_credit_cache('clear');
				
			} // success
			else {
				$order_id = $donations[$i]['order_id'];
				$errors = print_r($errors, true);
				$errors .= ' Object: ' . print_r($donations[$i], true);
				watchdog('error', "The recurring donation object for order $order_id was not created in salesforce. Errors: $errors");
				// pull trigger
				//module_invoke_all('sf_donation', 'fails', $order_id, NULL, "The recurring donation object for order $order_id was not created in salesforce. Errors: $errors");
				$params = array(
					'order_id' => $order_id,
					'errors' => $errors,
					'donation' => print_r($donations[$i], true),
				);
				drupal_mail('sf_donation', 'recurring_donation_failure', 'phillip.cave@jacksonriver.com,tom.williamson@jacksonriver.com,tj.griffin@jacksonriver.com', language_default(), $params);
			}
		}
	} // if ($sf)
}

/*
 * Processes the results of a recurring donation salesforce sync
 */
function _process_recurring_donation_updates(&$results, &$donations) {
	$count = count($donations);
	/*
	 *
	 * WHAT DO WE WANT TO DO WITH THE RESULTS?
	 *
	 */
	for ($i = 0; $i < $count; $i++) {
		if ($count == 1) {
			$success = $results->success;
			$sfid = $results->id;
			$errors = $results->$errors;
		}
		else {
			$success = $results[$i]->success;
			$sfid = $results[$i]->id;
			$errors = $results[$i]->errors;
		}
		
		$order_id = $donations[$i]['Order_ID__c'];
		
		if ($success) {
			// write to log
			uc_order_comment_save($order_id, 0, "Order successfully exported to salesforce opportunity. SFID = $sfid", 'admin');
		}
		else {
			// id of salesforce opportunity 
			$opp_id = $donations[$i]['Id'];
			// pull trigger
			module_invoke_all('sf_donation', 'fails', $order_id, $opp_id, "Donation object $opp_id was not updated in salesforce. The order id is $order_id."); 
			// failed to sync
			$errors = print_r($errors, true);
			watchdog('error', "Donation object $opp_id was not updated in salesforce. The order id is $order_id. Errors: $errors");
			$params = array(
				'order_id' => $order_id,
				'errors' => $errors,
				'donation' => print_r($donations[$i], true),
			);
			drupal_mail('sf_donation', 'recurring_donation_update_failure', 'phillip.cave@jacksonriver.com,tom.williamson@jacksonriver.com,tj.griffin@jacksonriver.com', language_default(), $params);
		}
	}
}

/**
 * Exports an array of opportunity objects to salesforce
 */
function _export_single_donations($donations) {
	global $user;
	
	if (variable_get('sf_donation_debug', 0)) {
		// log the activity
		$semaphore = variable_get('cron_semaphore', FALSE);
		$number_of_donations = count($donations);
		$data = print_r($donations, true);
		$sql = "insert into {sf_donation_log} (cron_semaphore, uid, type, number_of_donations, data) values (%d, %d, '%s', %d, '%s')";
		db_query($sql, $semaphore, $user->uid, 'single', $number_of_donations, $data);
	}
	
	$donations_to_create = array();
	foreach ($donations as $value) {
		$donations_to_create[] = $value['fields'];
	}

  $sf = salesforce_management_api_connect();
	// only continue if we got a valid connection
	if ($sf) {
		$results = $sf->client->create($donations_to_create, 'Opportunity');
		// indices in results should match original donations
		$contact_roles = array();
		
		$count = count($donations);
		for ($i=0; $i < $count; $i++) {
			// salesforce does not return an array if only one object is created
			if ($count == 1) {
				$success = $results->success;
				$sfid = $results->id;
				$errors = $results->errors;
			}
			else {
				$success = $results[$i]->success;
				$sfid = $results[$i]->id;
				$errors = $results[$i]->errors;
			}
			if ($success) {
				// create an array of contact opportunity roles
				$contact_roles[] = array(
					'ContactId' => $donations[$i]['ContactId'],
					'OpportunityId' => $sfid,
					'Role' => 'Donor',
				);
				_update_webform_order($donations_to_create[$i]['Order_ID__c'], $sfid);
				uc_order_comment_save($donations_to_create[$i]['Order_ID__c'], 0, "Order successfully exported to salesforce opportunity. SFID = $sfid", 'admin');
			}
			else {
				$order_id = $donations_to_create[$i]['Order_ID__c'];
				// log failure
				$errors = print_r($errors, true);
				watchdog('error', "The opportunity object for order $order_id was not created in salesforce. Errors: $errors");
				// pull trigger
				//module_invoke_all('sf_donation', 'fails', $order_id, NULL, "The opportunity object for order $order_id was not created in salesforce. Errors: $errors");
				// manually send email - TODO: change to trigger/action
				// call mail function and send email
				$params = array(
					'order_id' => $order_id,
					'errors' => $errors,
					'donation' => print_r($donations_to_create[$i], true),
				);
				drupal_mail('sf_donation', 'single_donation_failure', 'phillip.cave@jacksonriver.com,tom.williamson@jacksonriver.com,tj.griffin@jacksonriver.com', language_default(), $params);
			}
		}
		// create all roles
		$sf->client->create($contact_roles, 'OpportunityContactRole');
		watchdog('salesforce', t('Creating contact roles: !roles', array('!roles' => print_r($contact_roles, true))));
	} // if ($sf)
}

/*
 * Creates an array that represents a salesforce opportunity object
 */
function _create_single_donation($order_id, &$user, $sid) {
	global $base_url;

	// load up the order 
	$order = uc_order_load($order_id);

	// load up the payments because we need the received date of the payment
	$payments = uc_payment_load_payments($order_id);
	$donation = array(
		'ContactId' => $user->salesforce_contact_id,
	);
	
	$donation['fields'] = array(
		'Name' => 'Donation - ' . $order->order_id,
		'Amount' => $order->order_total,
		'AccountID' => $user->salesforce_account_id,
		'Order_ID__c' => $order->order_id,
		'Donation_Form_Name__c' => $order->products[0]->title,
		'Donation_Form_URL__c' => $base_url . '/node/' . $order->products[0]->nid,
		'CC_Last_4__c' => !empty($order->payment_details['cc_number']) ? substr($order->payment_details['cc_number'], -4) : '',
		'CC_Type__c' => $order->payment_details['cc_type'],
		'CC_Exp_Month__c' => $order->payment_details['cc_exp_month'],
		'CC_Exp_Year__c' => $order->payment_details['cc_exp_year'],
		'Billing_Street__c' => $order->billing_street1,
		'Billing_Street_Line_2__c' => $order->billing_street2,
		'Billing_City__c' => $order->billing_city,
		'Billing_Country__c' => _convert_billing_country($order->billing_country),
		'Billing_State__c' => uc_get_zone_code($order->billing_zone),
		'Billing_Zip__c' => $order->billing_postal_code,
		'Type' => 'Donation',
	);
	
	if ($payments) {
		// deal with sf date handling
		$transaction_date = strtotime(date('H:i:s d-M-Y T', $payments[0]->received));
		$donation['fields']['CloseDate'] = date('Y-m-d', $transaction_date);
		$donation['fields']['Transaction_Date_Time__c'] = gmdate('c', $transaction_date);
		$donation['fields']['Probability'] = 100.00;
		$donation['fields']['StageName'] = 'Posted';
	}
	
	$donation['fields'] = array_merge($donation['fields'], _load_salesforce_map($sid));
	
	// clear the credit card cache
	uc_credit_cache('clear');
	
	// add in any mapped fields
	return $donation;
}

function _convert_billing_country($country_id) {
	return db_result(db_query("select country_iso_code_2 from {uc_countries} where country_id = %d", $country_id));
}

/*
 * Creates an array that represents a salesforce recurring donation object
 */
function _create_recurring_donation($order_id, &$user, $count, $sid) {
	//print "recurring donation: $count<br>";
	$order = uc_order_load($order_id);

	$recurring_donation = array(
		'order_id' => $order->order_id, // store the order id because we'll need it later
		'sid' => $sid,
		'fields' =>	array(
			'Name' => 'Donation - ' . $order->order_id,
			'npe03__Amount__c' => $order->order_total,
			'npe03__Contact__c' => $user->salesforce_contact_id,
			'npe03__Installment_Period__c' => 'Monthly',
			'npe03__Schedule_Type__c' => 'Multiply By',
			'npe03__Installments__c' => $count,
		),
	);
	
	// clear the credit card cache
	uc_credit_cache('clear');
	return $recurring_donation;
}

/* 
 * Updates an opportunity when a donation payment processes.
 */
function sf_donation_update_donation_status($order_id) {
	// get the sfid from the recurring orders table
	$sfid = db_result(db_query("select sf_opportunity_id from {fundraiser_recurring} where order_id = %d", $order_id));
	if ($sfid) {
		// get order payment so we can get the transaction date
		$payments = uc_payment_load_payments($order_id);
		// deal with sf date handling
		$transaction_date = strtotime(date('H:i:s d-M-Y T', $payments[0]->received));
		
		$opportunity = array(
			'Id' => $sfid,
			'Transaction_Date_Time__c' => gmdate('c', $transaction_date),
			'Probability' => 100.00,
			'StageName' => 'Posted',
		);
		
		$sf = salesforce_management_api_connect();
		$results = $sf->client->update(array($opportunity), 'Opportunity');
		
		if (!$results->success) {
			// Log failure
			watchdog('error', "Opportunity $sfid was not updated in salesforce after a recurring payment was processed. Errors: $results->errors");
			// Trigger failure
			//module_invoke_all('sf_donation', 'fails', $order_id, $sfid, "Opportunity $sfid was not updated in salesforce after a recurring payment was processed. Errors: $results->errors");
			$params = array(
				'order_id' => $order_id,
				'errors' => $results->errors,
				'donation' => print_r($opportunity, true),
			);
			drupal_mail('sf_donation', 'recurring_donation_payment_failure', 'phillip.cave@jacksonriver.com,tom.williamson@jacksonriver.com,tj.griffin@jacksonriver.com', language_default(), $params);
		}
		else {
			watchdog('salesforce', t('Opportunity !sfid updated to stage Posted at !time. Order Id is !order_id', array('!sfid'=>$sfid, '!time'=>gmdate('c', $transaction_date), '!order_id'=>$order_id)), NULL, WATCHDOG_INFO);
		}
	}
} 

/**
 * Updates the donation amount of recurring orders
 */
function sf_donation_update_donation_amount($order_ids, $amount) {
	// get all of the recurring donations that have not been processed
	$sql = "select sf_opportunity_id from {fundraiser_recurring} where order_id in (%s)";
	$results = db_query($sql, implode(",", $order_ids));
	
	$donations = array();
	
	while ($data = db_fetch_object($results)) {
		$donation = array(
			'Id' => $data->sf_opportunity_id,
			'Amount' => $amount,
		);
		$donations[] = $donation;
	}
	
	$sf = salesforce_management_api_connect();
	$results = $sf->client->update($donations, 'Opportunity');
	
	// process results
	$count = count($donations);
	for ($i=0; $i < $count; $i++) {
		// salesforce does not return an array if only one object is created
		if ($count == 1) {
			$success = $results->success;
			$sfid = $results->id;
			$errors = $results->errors;
		}
		else {
			$success = $results[$i]->success;
			$sfid = $results[$i]->id;
			$errors = $results[$i]->errors;
		}
		if (!$success) {
			// Log failure
			$errors = print_r($errors, TRUE);
			watchdog('error', "Donation amount for opportunity $sfid was not updated in salesforce. Errors: $errors");
			// Trigger failure
			module_invoke_all('sf_donation', 'fails', NULL, $sfid, "Donation amount for opportunity $sfid was not updated in salesforce. Errors: $errors");
		}
	}
}

/**
 * Updates billing information for recurring orders
 */
function sf_donation_update_donation_billing($order_ids) {
	
	// load up one of orders to get the billing information
	$order = uc_order_load($order_ids[0]);
	
	// get all of the recurring donations that have not been processed
	$sql = "select sf_opportunity_id from {fundraiser_recurring} where order_id in (%s)";
	
	$results = db_query($sql, implode(",", $order_ids));
	$donations = array();
	
	while($data = db_fetch_object($results)) {
		$donation = array(
			'Id' => $data->sf_opportunity_id,
			'Billing_Street__c' => $order->billing_street1,
			'Billing_Street_Line_2__c' => $order->billing_street2,
			'Billing_State__c' => uc_get_zone_code($order->billing_zone),
			'Billing_Country__c' => _convert_billing_country($order->billing_country),
			'Billing_City__c' => $order->billing_city,
			'Billing_Zip__c' => $order->billing_postal_code,
			'CC_Last_4__c' => !empty($order->payment_details['cc_number']) ? substr($order->payment_details['cc_number'], -4) : '',
			'CC_Exp_Year__c' => $order->payment_details['cc_exp_year'],
			'CC_Exp_Month__c' => $order->payment_details['cc_exp_month'],
		);
		$donations[] = $donation;
	}
	
	$sf = salesforce_management_api_connect();
	$results = $sf->client->update($donations, 'Opportunity');
	
	// process results
	$count = count($donations);
	for ($i=0; $i < $count; $i++) {
		// salesforce does not return an array if only one object is created
		if ($count == 1) {
			$success = $results->success;
			$sfid = $results->id;
			$errors = $results->errors;
		}
		else {
			$success = $results[$i]->success;
			$sfid = $results[$i]->id;
			$errors = $results[$i]->errors;
		}
		if (!$success) {
			// Log failure
			watchdog('error', "Billing information for opportunity $sfid was not updated in salesforce. Errors: $errors");
			// Trigger failure
			module_invoke_all('sf_donation', 'fails', NULL, $sfid, "Billing information for opportunity $sfid was not updated in salesforce. Errors: $errors");
		}
	}
}

function sf_donation_canel_recurring_donations($order_id) {
	$sql = "select sf_opportunity_id, cancellation_reason from {fundraiser_recurring} where master_order_id = %d and gateway_resp = 'canceled'";
		
	$results = db_query($sql, $order_id);
	$donations = array();
	
	while ($data = db_fetch_object($results)) {
		$donation = array(
			'Id' => $data->sf_opportunity_id,
			'StageName' => 'Withdrawn',
			'Cancellation_Reason__c' => $data->cancellation_reason,
		);
		$donations[] = $donation;
	}
	
	$sf = salesforce_management_api_connect();
	$results = $sf->client->update($donations, 'Opportunity');
	
	// process results
	$count = count($donations);
	for ($i=0; $i < $count; $i++) {
		// salesforce does not return an array if only one object is created
		if ($count == 1) {
			$success = $results->success;
			$sfid = $results->id;
			$errors = $results->errors;
		}
		else {
			$success = $results[$i]->success;
			$sfid = $results[$i]->id;
			$errors = $results[$i]->errors;
		}
		if (!$success) {
			// Log failure
			watchdog('error', "Opportunity $sfid was not withdrawn in salesforce. Errors: " . print_r($errors, TRUE));
			// Trigger failure
			module_invoke_all('sf_donation', 'fails', NULL, $sfid, "Opportunity $sfid was not withdrawn in salesforce. Errors: " . print_r($errors, TRUE));
		}
	}
}

/*
 * Loads the donation -> salesforce map for this webform and populates it
 * with data from the actual webform submission
 */
function _load_salesforce_map($sid) {
	$sql = "SELECT f.map_id, c.form_key, s.data FROM {fundraiser_salesforce_map} f inner join {webform_component} c on c.cid = f.cid and c.nid = f.nid
		inner join {webform_submitted_data} s on s.cid = c.cid and s.nid = c.nid where s.sid = %d";
	
	$map = array();
	
	$results = db_query($sql, $sid);
	while ($data = db_fetch_object($results)) {
		$map[$data->map_id] = $data->data;
	}	

	return $map;
}

/*
 * Gets the number of times a given donation recurs
 */
function _recurring_donation_count($order_id) {
	return db_result(db_query("select count(order_id) from {fundraiser_recurring} where master_order_id = %d", $order_id));
}

/*
 * Updates a webform created order with the id from salesforce
 */
function _update_webform_order($order_id, $sfid) {
	db_query("update {fundraiser_webform_order} set sfid = '%s' where order_id = %d", $sfid, $order_id);
}

/**
 * Theme the mapping form
 */
function theme_sf_donation_mapping_form($form) {
	$output = drupal_render($form['user_mappings']);
	
	if ($form['mapping']['cid']) {
		foreach ($form['mapping']['cid'] as $key=>$cid) {
			if (is_numeric($key)) {
				$row = array();
				$row[] = drupal_render($form['mapping']['cid'][$key]);
				$row[] = drupal_render($form['mapping']['salesforce'][$key]);
				$rows[] = $row;
			}
		}
		$row = array();
		$row[] = drupal_render($form['submit']);
		$row[] = '&nbsp;';
		$rows[] = $row;
	
		$header = array("Webform Component","Opportunity Field");
	
		$output .= theme('table', $header, $rows, array('id' => 'sf_donation_mapping_form'));
		$output .= drupal_render($form);
	}
	else {
		$output = "<p>You must add some fields to the webform before you can map them.</p>";
	}
	return $output;
}

function _get_campaigns() {
	$sf = salesforce_management_api_connect();
	$campaigns = array();
	// only continue if we got a valid connection
	if ($sf) {
		$results = $sf->client->query("select Id, Name from Campaign where Status = 'In Progress'");
		if (count($results->records)) {
			foreach($results->records as $campaign) {
				$campaigns[$campaign->Id] = $campaign->Name;
			}
		}
	}
	return $campaigns;
}

/**
 * Mail handling function
 */
function sf_donation_mail($key, &$message, $params) {
	switch($key) {
		case 'single_donation_failure':
			$message['subject'] = t("Single donation export failure");
			break;
			
		case 'recurring_donation_failure':
			$message['subject'] = t("Recurring donation export failure");
			break;
			
		case 'recurring_donation_update_failure':
			$message['subject'] = t("Recurring donation update failure");
			break;
		
		case 'recurring_donation_payment_failure':
			$message['subject'] = t("Recurring donation payment failure");
			break;
	}
	$message['body'][] = t("Order !order_id has failed to export to Salesforce.\n", array('!order_id' => $params['order_id']));
	$message['body'][] = t("API Error\n\n!errors", array('!errors' => $params['errors']));
	$message['body'][] = t("Failed Object\n\n!object", array('!object' => $params['donation']));
}
function _get_mapping_config() {
	$fields = array(
		'unmappable' => array(
			'Name',
			'AccountID',
			'Probability',
			'StageName',
			'Order_ID__c',
			'CloseDate',
			'Transaction_Date_Time__c',
			'Donation_Form_Name__c',
			'Donation_Form_URL__c',
			'CC_Last_4__c',
			'CC_Type__c',
			'CC_Exp_Month__c',
			'CC_Exp_Year__c',
			'Type',
		),
		'predefined' => array(
			'card_number' => 'CC_Last_4__c',
			'card_expiration_date' => 'CC_Exp_Month__c',
			'amount' => 'Amount',
			'billing_address' => 'Billing_Street__c',
			'billing_address_2' => 'Billing_Street_Line_2__c',
			'billing_city' => 'Billing_City__c',
			'billing_country' => 'Billing_Country__c',
			'billing_state' => 'Billing_State__c',
			'billing_zipcode' => 'Billing_Zip__c',
		),
	);
	return $fields;
}