<?php

/**
 * Implementation of hook_menu().
 */
function page_wrappers_menu() {
  $items['admin/config/content/page-wrappers'] = array(
    'title' => 'Page Wrapper settings',
    'description' => 'Configure page wrapper settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_wrappers_settings_form'),
    'access arguments' => array('administer page wrappers'),
    'file' => 'page_wrappers.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function page_wrappers_permission() {
  return array(
    'administer page wrappers' => array(
      'title' => t('Administer page wrappers'),
      'description' => t('Perform administration tasks for Page Wrappers.'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Adds page wrapper tpl folder to theme registry.
 */
function page_wrappers_theme_registry_alter(&$theme_registry) {

  $path = variable_get('file_public_path', conf_path() . '/files') . '/page_wrappers/tpl';
  $theme_registry_copy = $theme_registry; // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('page');
  foreach ($hooks as $h) {
    _page_wrappers_insert_after_first_element($theme_registry[$h]['theme paths'], $path);
  }
}


/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _page_wrappers_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
  else {
    $a = array($element);
  }
}


/**
 * Implementation of hook_preprocess_page().
 *
 * Replace standard site theme with pagewrapper template for nodes that have page wrappers assigned.
 */
function page_wrappers_preprocess_page(&$vars) {

  // get out of here if we're on the edit page
  if (arg(0) == 'node' && arg(2) == 'edit') {
    return;
  }

  //if this is a webform confirmation page add the node variable
  if (arg(0) == 'node' && arg(2) == 'done') {
    $vars['node'] = node_load(arg(1));
  }

  // if the node type has a wrapper and has one assigned
  if (isset($vars['node']) && _page_wrappers_enabled_type($vars['node'], TRUE) && isset($vars['node']->wrapper)) {
    $template = _page_wrappers_template_filename($vars['node']->wrapper);

    // make sure template actually exists
    if (_page_wrappers_template_exists($template)) {
      //  add the template suggestion, this is the magic behind the theme layer hijack.
      array_unshift($vars['theme_hook_suggestions'], str_replace(array('-', '.tpl.php'), array('_', ''), $template)); //  replace hyphen with underscore, remove file ext.

      // load the wrapper node
      $wrapper_node = node_load($vars['node']->wrapper);

      // if there's a css file add it; also see this module's hook_css_alter function
      if (isset($wrapper_node->page_wrappers_css) && count($wrapper_node->page_wrappers_css)) {

        $css_files = field_get_items('node', $wrapper_node, 'page_wrappers_css');

        foreach ($css_files as $css_file) {
          drupal_add_css($css_file['uri']);
        }
      }

      // if there's a js file add it
      if (isset($wrapper_node->page_wrappers_js) && count($wrapper_node->page_wrappers_js)) {

        $js_files = field_get_items('node', $wrapper_node, 'page_wrappers_js');

        foreach ($js_files as $js_file) {
          drupal_add_js($js_file['uri']);
        }
      }
    }
  }
}

/**
 * Implementation of hook_css_alter().
 */
function page_wrappers_css_alter(&$css) {
  // get out of here if we're not on a node page, or if we're on the node edit page
  if (arg(0) != 'node' || (arg(0) == 'node' && arg(2) == 'edit')) {
    return;
  }

  //if this is a node page load it up, also cover webform 'done' page
  if (arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'done' || !arg(2))) {
    $node = node_load(arg(1));
  }

  //if this is a node that has a wrapper assigned remove most of the style sheets
  if (isset($node) &&_page_wrappers_enabled_type($node, TRUE) && isset($node->wrapper)) {
    $wrapper_node = node_load($node->wrapper);
    if (isset($wrapper_node->field_css_file['und']) && !empty($wrapper_node->field_css_file['und'][0]['fid'])) {
      //create an array of stylesheets to keep
      $keep = array(
        $wrapper_node->field_css_file['und'][0]['uri'],
        drupal_get_path('module', 'system') . '/system.base.css',
        drupal_get_path('module', 'system') . '/system.menus.css',
        drupal_get_path('module', 'system') . '/system.messages.css',
        drupal_get_path('module', 'overlay') . '/overlay-parent.css',
        drupal_get_path('module', 'toolbar') . '/toolbar.css',
        drupal_get_path('module', 'shortcut') . '/shortcut.css',
      );
      foreach ($css as $path => $info) {
        if (!in_array($path, $keep)) {
          unset($css[$path]);
        }
      }
    }
  }
}

/*
 * Node API Functions
 */

/**
 * Implements hook_load().
 */
function page_wrappers_load($nodes) {
  if (arg(2) != 'clone' && arg(2) != 'delete') {
    $result = db_query('SELECT nid, template FROM {page_wrappers} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
    foreach ($result as $record) {
      $nodes[$record->nid]->wrapper_template = $record->template;
      // Also add the nid as a wrapper value for previewing
      $nodes[$record->nid]->wrapper = $record->nid;
    }
  }
}


/**
 * Implementation of hook_form().
 */
function page_wrappers_form(&$node, &$form_state) {
  $type = node_type_get_type($node);

  //title field is not included since base is set to this module
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  return $form;
}

/**
 * Implementation of hook_node_view().
 */
function page_wrappers_node_view($node, $view_mode) {
  if (($view_mode == 'full') && ($node->type == 'page_wrapper') && node_is_page($node)) {
     $node->content = array();
     $node->content['preview'] = array(
       '#markup' => drupal_render(drupal_get_form('_page_wrapper_preview_form')),
     );
  }
  return $node;
}



/**
 * Implements hook_node_update().
 */
function page_wrappers_node_update($node) {

  if ($node->type == 'page_wrapper') {
    $template = _page_wrappers_create_template($node);

    db_update('page_wrappers')
      ->fields(array(
       'nid' => $node->nid,
        'template' => $template,
      ))
      ->condition('nid', $node->nid)
      ->execute();

    // Nuke caches so page wrapper is applied to itself by the theme layer.
    drupal_flush_all_caches();
  }
  elseif (_page_wrappers_enabled_type($node)) {
    _page_wrappers_assign_wrapper($node->nid, $node->wrapper);
  }
}

/**
 * Implements hook_node_insert().
 */
function page_wrappers_node_insert($node) {
  if (_page_wrappers_enabled_type($node)) {
    _page_wrappers_assign_wrapper($node->nid, $node->wrapper);
  }
  elseif ($node->type == 'page_wrapper') {
    $template = _page_wrappers_create_template($node);

    db_insert('page_wrappers')
      ->fields(array(
        'nid' => $node->nid,
        'template' => $template,
      ))
      ->execute();
  }
  // Nuke caches so page wrapper is applied to itself by the theme layer.
  drupal_flush_all_caches();
}

/**
 * Implements hook_node_load().
 */
function page_wrappers_node_load($nodes, $types) {

  // Let a page wrapper theme it's own node page.
  if (in_array('page_wrapper', $types)) {
    foreach ($nodes as $nid => $node) {
      if ($node->type == 'page_wrapper') {
        $nodes[$nid]->wrapper = $nid;
      }
    }
  }

  $enabled_types = variable_get('page_wrapper_enabled_node_types', array('donation_form' => 'donation_form'));

  // We can use $types to figure out if we need to process any of these nodes.
  $our_types = array();
  foreach ($types as $type) {
    if (isset($enabled_types[$type])) {
      $our_types[] = $type;
    }
  }

  // Now $our_types contains all the types from $types that we want
  // to deal with. If it's empty, we can safely return.
  if (!count($our_types)) {
    return;
  }

  // Create an array of nids for the db query, and add an empty wrapper value
  foreach ($nodes as $node) {
    if (isset($enabled_types[$node->type])) {
      $nids[] = $node->nid;
      $nodes[$node->nid]->wrapper = NULL;
    }
  }

  // Ensure we have nids to work with
  if (!isset($nids) || !count($nids)) {
    return;
  }

  $result = db_query('SELECT nid, wrapper_nid FROM {node_page_wrappers} WHERE nid IN(:nids)', array(':nids' => $nids));
  foreach ($result as $record) {
    $nodes[$record->nid]->wrapper = $record->wrapper_nid;
  }
}

/**
 * Implements hook_node_delete().
 */
function page_wrappers_node_delete($node) {
  // remove the template from any nodes that are assigned to it
  if ($node->type == 'page_wrapper') {
    $template = _page_wrappers_template_filename($node->nid);
    $files_dir = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
    $path = $files_dir . '/page_wrappers/tpl/' . $template;
    file_unmanaged_delete($path);
    db_delete('node_page_wrappers')
      ->condition('wrapper_nid', $node->nid)
      ->execute();
    // remove the wrapper
    db_delete('page_wrappers')
      ->condition('nid', $node->nid)
      ->execute();
  }
  else {
    db_delete('node_page_wrappers')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_form_BASE_FORM_ID_alter.
 */
function page_wrappers_form_node_form_alter(&$form, $form_state, $form_id) {

  // add the list of available wrappers to the node form
  if (_page_wrappers_enabled_type($form['#node'])) {

    $wrappers = _page_wrappers_available_wrappers();

    if (count($wrappers)) {
      if (module_exists('og') && variable_get('page_wrappers_filter_by_og', FALSE)) {
        // Add an ajax event to the group select box, so we can filter
        // available page wrappers by group selection.
        $language = $form['og_group_ref']['#language'];
        $form['og_group_ref'][$language][0]['default']['#ajax'] = array(
          'callback' => 'page_wrappers_og_ajax_callback',
          'wrapper' => 'page-wrappers-options',
        );

        // If a group has been selected limit available wrappers to
        // ones assigned to the selected group.
        if (isset($form_state['values']['og_group_ref'][$language][0]['target_id'])) {
          $nid = $form_state['values']['og_group_ref'][$language][0]['target_id'];
          $filtered_wrappers = _page_wrappers_list_wrappers_by_group($nid);
          $wrappers = array_merge(array(t('-- Select --')), $filtered_wrappers);
        }
      }
      $form['wrapper'] = array(
        '#type' => 'fieldset',
        '#title' => t('Page wrapper settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        "#group" => 'additional_settings',
      );

      $form['wrapper']['wrapper'] = array(
        '#type' => 'select',
        '#title' => t('Page wrapper'),
        '#prefix' => '<div id="page-wrappers-options">',
        '#suffix' => '</div>',
        '#default_value' => (isset($form['#node']->wrapper)) ? $form['#node']->wrapper : '',
        '#options' => $wrappers,
        '#description' => t('Select the page wrapper to use when displaying this node.'),
      );

    }
  }

  // page_wrapper_node_form
  if ($form_id == 'page_wrapper_node_form') {
    // add some help the body (Template HTML) field
    // TODO: fix language lookup.
    $form['body']['und'][0]['#prefix'] = t('The template should only include the content of the HTML &lt;body&gt; tag. <strong>Do not</strong> include the &lt;html&gt;, &lt;head&gt, or &lt;body&gt  tags in the template.');
    $form['body']['und'][0]['#prefix'] .= t(' Use the placeholder <strong>[content]</strong> to denote where the body content should be output, and <strong>[title]</strong> where the page title should appear, and <strong>[messages]</strong> where the error messages should appear.');
  }
}


function page_wrappers_og_ajax_callback($form, $form_state) {
  return $form['wrapper']['wrapper'];
}

/**
 * Implementation of hook_file_insert().
 */
function page_wrappers_file_insert($file) {

  //add timestamps to files and rename js files, do not do this on clone process
  if (arg(2) != 'clone' && ($file->source == 'field_js_file_und_0' || $file->source == 'field_css_file_und_0')) {

    $dir = drupal_dirname($file->uri);
    $filename = _page_wrappers_add_timestamp($file->filename);

    // for .js files, strip off the .txt extension that gets added
    if ($file->source == 'field_js_file_und_0') {
      $filename = substr($filename, 0, strlen($filename) - 4);
    }

    $destination = $dir . '/' . $filename;

    file_move($file, $destination);
  }
}

/**
 * Adds a timestamp to a filename.
 *
 * @param $filename
 *   The filename to add the timestamp to.
 */
function _page_wrappers_add_timestamp($filename) {
  $parts = explode('.', $filename);
  $parts[0] = $parts[0] . '-' . time();
  return implode('.', $parts); // glue the parts back together with a period
}

/**
 * Checks if a node is an enabled type
 *
 * @param $node
 * The node object to check
 *
 * @param $preview
 * If this is true, then a page wrapper node will also pass validation for previewing a template
 */
function _page_wrappers_enabled_type($node, $preview = FALSE) {
  $enabled_types = variable_get('page_wrapper_enabled_node_types', array('donation_form' => 'donation_form'));

  // make sure the node type is in the enabled types array
  if (isset($enabled_types[$node->type]) && $enabled_types[$node->type]) {
    return TRUE;
  }
  // else if this is a wrapper itself and we're previewing
  elseif ($preview && $node->type == 'page_wrapper') {
    return TRUE;
  }

  return FALSE;
}


/**
 * Gets all configured wrappers.
 */
function _page_wrappers_available_wrappers() {
  global $user;

  $result = db_query("SELECT n.title, n.nid FROM {node} n WHERE type = 'page_wrapper'")->fetchAll();
  $wrappers = array(t('-- Select --'));
  foreach ($result as $data) {
    $wrappers[$data->nid] = $data->title;
  }

  // Optionally filter available wrappers by organic groups the user is enrolled in.
  if (module_exists('og') && variable_get('page_wrappers_filter_by_og', FALSE)) {
    $wrapper_nids = array_keys($wrappers);
    $user_groups = og_get_entity_groups();
    $result = db_select('og_membership', 'o')
      ->fields('o', array('gid', 'etid'))
      ->condition('entity_type', 'node')
      ->condition('etid', $wrapper_nids, 'IN')
      ->execute();
    $results = $result->fetchAll();
    $wrappers_og = array(t('-- Select --'));
    foreach ($results as $data) {

      // to avoid dupes we make sure the wrapper hasn't already been added to wrappers_og
      if (in_array($data->gid, $user_groups['node']) && !in_array($data->etid, array_keys($wrappers_og))) {
        $wrappers_og[$data->etid] = $wrappers[$data->etid];
      }
    }
    $wrappers = $wrappers_og;
  }

  // allow other modules to alter the array of available templates
  drupal_alter('available_page_wrappers', $wrappers);
  return $wrappers;
}

/**
 * Assigns a page wrapper to a node.
 *
 * @param $nid
 *   The id of the node that is being assigned the wrapper.
 * @param $wrapper_nid
 *   The id of the wrapper being assigned.
 */
function _page_wrappers_assign_wrapper($nid, $wrapper_nid) {
  // check if there is an existing entry at all for this node.
  $exists = db_query('SELECT nid FROM {node_page_wrappers} WHERE nid = :nid', array(':nid' => $nid))->fetchField();

  // wrapper is being assigned
  if ($wrapper_nid) {
    if (!$exists) {
      db_insert('node_page_wrappers')
        ->fields(array(
          'nid' => $nid,
          'wrapper_nid' => $wrapper_nid,
        ))
        ->execute();
    }
    else {
      db_update('node_page_wrappers')
        ->fields(array(
          'nid' => $nid,
          'wrapper_nid' => $wrapper_nid,
        ))
        ->condition('nid', $nid)
        ->execute();
    }
  }
  // we have a record but its been removed on the node form
  elseif ($exists) {
    // remove it
    db_delete('node_page_wrappers')
      ->condition('nid', $nid)
      ->execute();
  }
}

/**
 * Returns the path to where all page wrapper files are stored.
 */
function _page_wrappers_base_path() {
  return drupal_realpath(file_default_scheme() . '://') . '/page_wrappers';
}

function _page_wrappers_template_path() {
  return _page_wrappers_base_path() . '/tpl';
}

function _page_wrappers_css_path() {
  return _page_wrappers_base_path() . '/css';
}

function _page_wrappers_js_path() {
  return _page_wrappers_base_path() . '/js';
}

/**
 * Creates a template file.
 *
 * This function will create a template file in the /theme subdirectory of the module. It uses
 * the title of the node to generate a unique template filename.
 *
 * @param $node
 *   The page wrapper node.
 */
function _page_wrappers_create_template($node) {
  $base_path = _page_wrappers_base_path();

  // see if a template file already exists for this node
  $filename =  _page_wrappers_template_filename($node->nid);

  if (empty($filename)) {
    // create a template file name based on title
    $filename = 'page--' . strtolower(str_replace(' ', '-', $node->title)) . '-' . time() . '.tpl.php'; // TODO: Better filename creator
  }

  $full_path = $base_path . '/tpl';

  if (file_prepare_directory($full_path, FILE_CREATE_DIRECTORY)) {
    $full_path = $full_path . '/' . $filename;
    // open the file for writing
    $file = fopen($full_path, 'w');

    // build up template markup
    $html_template = field_get_items('node', $node, 'page_wrappers_html_template');

    $body = _page_wrappers_tokens($html_template[0]['value']);

    fputs($file, $body);

    fclose($file);

    return $filename;
  }

  return FALSE;

}


/**
 * Replaces tokens in the template content.
 *
 * @param $content
 *   The content that contains the tokens.
 */
function _page_wrappers_tokens($content) {
  $tokens = array('[title]', '[messages]', '[content]', '[styles]', '[scripts]');
  $replaces = array(
    '<?php if ($title): print \'<h1>\'. $title .\'</h1>\'; endif; ?>',
    '<?php if ($show_messages && $messages): print $messages; endif; ?>',
    '<?php if ($tabs = render($tabs)): ?><div class="tabs"><?php print $tabs; ?></div><?php endif; ?><?php print render($page["content"]); ?>',
    '<?php print $styles; ?>',
    '<?php print $scripts; ?>',
  );
  return str_replace($tokens, $replaces, $content);
}

/**
 * Determines if a wrapper template file actually exists on disk.
 *
 * @param $template
 *   The template filename.
 */
function _page_wrappers_template_exists($template) {
  $path = _page_wrappers_template_path() . '/' . $template;

  if (file_exists($path)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_clone_node_alter().
 *
 * Make a copy of the css and js files when a node is cloned.
 */
function page_wrappers_clone_node_alter(&$node, $context) {
  if ($context['method'] == 'save-edit' && $node->type == 'page_wrapper') {
    $original_node = $context['original_node'];

    // make copies of any css and js files accordingly
    if (isset($original_node->field_css_file['und']) && isset($original_node->field_js_file['und'][0]['fid'])) {
      $node->field_js_file['und'][0]['source'] = 'field_js_file_und_0';
      $node->field_js_file['und'][0] = _page_wrappers_clone_file($node->field_js_file['und'][0]);
    }

    if (isset($original_node->field_css_file['und']) && isset($original_node->field_css_file['und'][0]['fid'])) {
      $node->field_css_file['und'][0]['source'] = 'field_css_file_und_0';
      $node->field_css_file['und'][0] = _page_wrappers_clone_file($node->field_css_file['und'][0]);
    }

    //need to clear caches for theme updates
    drupal_flush_all_caches();
  }
}

/**
 * Clones a file associated with a page wrapper.
 *
 * @param $file
 *   The original file being cloned.
 */
function _page_wrappers_clone_file($file) {
  $file = (object) $file;

  if ($copy = file_copy($file, $file->uri, FILE_EXISTS_RENAME)) {
    return (array) $copy;
  }
}

/**
 * Returns a fake form for previewing wrappers.
 */
function _page_wrapper_preview_form() {
  $form['donation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Donation'),
    '#weight' => 1,
  );

  $form['donation']['amount'] = array(
    '#type' => 'radios',
    '#title' => t('Please select your tax-deductible gift amount below'),
    '#options' => array('$10', '$20', '$50', '$100'),
  );

  $form['personal'] = array(
    '#type' => 'fieldset',
    '#title' => 'Your Information',
    '#weight' => 2,
  );
  $form['personal']['firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
  );

  $form['personal']['lastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
  );

  $form['personal']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
  );

  $form['billing'] = array(
    '#type' => 'fielset',
    '#title' => t('Credit Card Billing Information'),
    '#weight' => 3,
  );

  $form['billing']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
  );

  $form['billing']['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address Line 2'),
  );

  $form['billing']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
  );

  $form['billing']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => array('United States'),
  );

  $form['billing']['state'] = array(
    '#type' => 'select',
    '#title' => t('State/Province'),
    '#options' => array('Alabama', 'Alaska'),
  );

  $form['billing']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('ZIP/Postal Code'),
  );

  $form['cc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#weight' => 4,
  );

  $form['cc']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
  );

  $form['cc']['expdate'] = array(
    '#type' => 'date',
    '#title' => t('Expiration Date'),
  );

  $form['cc']['cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Security Code'),
  );

  $form['cc']['recurs'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Recurring Payment'),
    '#options' => array('Yes'),
    '#multiple' => TRUE,
  );

  return $form;
}

/**
 * loads the template filename from the database
 *
 * @param $nid
 *   The page wrapper nid
 */
function _page_wrappers_template_filename($nid) {
  return db_query('SELECT template FROM {page_wrappers} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
}


/**
 * Fetch an array of email wrapper node ids.
 *
 * @return
 * An indexed array of email_wrapper node ids.
 */
function page_wrappers_get_nodes() {
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'page_wrapper')
    ->execute();

  return $result->fetchCol();
}

/**
 * List page wrappers by group.
 *
 * @param $nid
 * Group id.
 *
 * @return array associative array of page wrapper titles keyed by node id
 * or FALSE if none are found.
 */
function _page_wrappers_list_wrappers_by_group($nid) {
   $wrappers = array();
   // SELECT n.nid, n.title
   // FROM node n
   // INNER JOIN og_membership o ON o.etid = n.nid
   // WHERE n.type = 'page_wrapper' AND o.gid = 3
   // GROUP BY n.nid;

  $query = db_select('node', 'n');
  $query->addField('n', 'nid', 'nid');
  $query->addField('n', 'title', 'title');
  $query->join('og_membership', 'o', 'o.etid=n.nid');
  $query->condition('n.type', 'page_wrapper');
  $query->condition('o.gid', $nid);
  $query->groupBy('n.nid');
  $results = $query->execute();
  while ($record = $results->fetchAssoc()) {
    $wrappers[$record['nid']] = $record['title'];
  }
  return count($wrappers) ? $wrappers : FALSE;
}