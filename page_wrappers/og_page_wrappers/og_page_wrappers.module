<?php
// $Id: og_page_wrappers.module,v 1.0 2011/05/09 13:11:04 pcave Exp $

/**
 * @file
 * This module allows page wrappers to be assigned to organic groups. 
 * 
 */

/**
 * Implementation of hook_views_pre_execute().
 *
 * Alters the page wrapper admin view by restricting access to wrappers 
 * assigned to the current user's groups.
 */
function og_page_wrappers_views_pre_execute(&$view) {
  // skip this check in the user has administer group page wrappers permission
  if ($view->name == 'page_wrappers' && !user_access('administer group page wrappers')) {
    $view->build_info['query'] = "SELECT DISTINCT(node.nid) AS nid, node.title AS node_title, node.created AS node_created, node.changed AS node_changed, node.uid AS node_uid, node.type AS node_type, node_revisions.format AS node_revisions_format FROM node node  LEFT JOIN og_ancestry og_ancestry ON node.nid = og_ancestry.nid INNER JOIN node node_og_ancestry ON og_ancestry.group_nid = node_og_ancestry.nid LEFT JOIN og_uid node_og_ancestry__og_uid ON node_og_ancestry.nid = node_og_ancestry__og_uid.nid LEFT JOIN node_revisions node_revisions ON node.vid = node_revisions.vid WHERE (node.type in ('page_wrapper')) AND (node_og_ancestry__og_uid.uid = ***CURRENT_USER***) GROUP BY nid";
    
    //SELECT node.nid AS nid, node.title AS node_title, users.name AS users_name, og_ancestry.nid AS og_ancestry_nid, node.created AS node_created, node.changed AS node_changed, node.uid AS node_uid, node.type AS node_type, node_revisions.format AS node_revisions_format FROM node node  INNER JOIN users users ON node.uid = users.uid LEFT JOIN og_ancestry og_ancestry ON node.nid = og_ancestry.nid LEFT JOIN node_revisions node_revisions ON node.vid = node_revisions.vid WHERE node.type in ('page_wrapper')
  }
}

/**
 * Implementation of hook_perm().
 */
function og_page_wrappers_perm() {
  return array('administer group page wrappers');
}

/**
 * Implementation of available_page_wrappers_alter().
 *
 * @param $wrappers
 *   The currently available list of page wrappers.
 */
function og_available_page_wrappers_alter(&$wrappers) {
  global $user;
  
  foreach($wrappers as $nid => $title) {
    if ($nid) {
      $groups = _og_page_wrappers_groups($nid);
      if (count($groups)) {
        // see if the page wrapper and user have any groups in common
        $intersect = array_intersect_key($groups, $user->og_groups);
        if (count($intersect) == 0) {
          unset($wrappers[$nid]);  
        }
      }
      else {
        unset($wrappers[$nid]); // remove wrapper. it's not assigned to any groups
      }
    }
  }
}

/**
 * Returns all groups a page wrapper is assigned to.
 *
 * @param $nid
 *   The nid of the page wrapper node.
 */
function _og_page_wrappers_groups($nid) {
  $result = db_query("SELECT group_nid FROM {og_ancestry} WHERE nid = %d", $nid);
  $groups = array();
  while ($data = db_fetch_object($result)) {
    $groups[$data->group_nid] = $data->group_nid;
  }

  return $groups;
}
 
 
/**
 * Implmentation of hook_form_alter().
 */
function og_page_wrappers_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch ($form_id) {
    case 'page_wrapper_node_form':
      // select the user's groups by default
      if (empty($form['og_initial_groups']['#value'])) {
        $groups = array_keys($user->og_groups);
        $form['og_nodeapi']['visible']['og_groups']['#default_value'] = $groups;
      }
      break;
  }
}