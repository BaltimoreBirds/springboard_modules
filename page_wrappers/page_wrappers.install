<?php
// $Id$

/**
 * @file
 * Install routine for page wrappers module.
 *
 */

/**
 * Implementation hook_install().
 */
function page_wrappers_install() {
  // change the clone module's cloning method to save-edit cause that's the way we like it.
  variable_set('clone_method', 'save-edit');
  _page_wrappers_create_fields();
}

/**
 * Implementation of hook_uninstall().
 */
function page_wrappers_uninstall() {
	drupal_uninstall_schema('page_wrappers');
	variable_del('page_wrapper_enabled_node_types');
}

/**
 * Implementation of hook_schema().
 */
function page_wrappers_schema() {
  $schema['page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'template' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['node_page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'wrapper_nid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

function _page_wrappers_create_fields() {
  $t = get_t();

  // implement node type.
  if (!in_array('page_wrapper', node_type_get_names())) {
    $type = array(
      'type' => 'page_wrapper',
      'name' => $t('Page Wrapper'),
      'description' => $t('Allows a user to define custom page templates that can then be assigned to specific nodes.'),
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'title_label' => $t('Internal Title'),
      'body_label' => $t('Template HTML'),
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
  }

  $fields = array(
    'css_filefield' => array(
      'field_name' => 'page_wrappers_css',
      'type' => 'file',
      'cardinality' => 0,
      'settings' => array(
        'instance_settings' => array(
          'file_extensions' => 'css',
          'file_directory' => 'page_wrappers/styles',
        ),
        'label' => $t('Upload a stylesheet'),
        'description' => $t('If your page wrapper utilizes external stylesheets, upload them here.'),
        'file_extensions' => 'css',
      ),
      '_instance' => array(
        'field_name' => 'page_wrappers_css',
        'entity_type' => 'node',
        'bundle' => 'page_wrappers',
        'label' => $t('Upload a stylesheet'),
        'description' => $t('If your page wrapper ulitizes external stylesheets, upload them here.'),
        'widget' => array(
          'type' => 'file_generic',
          'weight' => 0,
        ),
        'display' => array(
          'default' => array(
            'type' => 'file_default',
            'weight' => 0,
          ),
        ),
      ),
    ),
    'js_filefield' => array(
      'field_name' => 'page_wrappers_js',
      'type' => 'file',
      'cardinality' => 0,
      'settings' => array(
        'instance_settings' => array(
          'file_extensions' => 'js',
          'file_directory' => 'page_wrappers/scripts',
        ),
        'label' => $t('Upload a JavaScript file'),
        'description' => $t('If your page wrapper utilizes external JavaScript files, upload them here.'),
        'file_extensions' => 'js',
      ),
      '_instance' => array(
        'field_name' => 'page_wrappers_js',
        'entity_type' => 'node',
        'bundle' => 'page_wrappers',
        'label' => $t('Upload a JavaScript file'),
        'description' => $t('If your page wrapper ulitizes external JavaScript files, upload them here.'),
        'widget' => array(
          'type' => 'file_generic',
          'weight' => 0,
        ),
        'display' => array(
          'default' => array(
            'type' => 'file_default',
            'weight' => 0,
          ),
        ),
      ),
    ),
  );
  
  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);

    field_create_field($values);
    field_create_instance($instance);
  }
}