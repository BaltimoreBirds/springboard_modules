<?php

/**
 * @file
 * Install routine for page wrappers module.
 *
 */

/**
 * Implementation hook_install().
 */
function page_wrappers_install() {
  // change the clone module's cloning method to save-edit cause that's the way we like it.
  variable_set('clone_method', 'save-edit');
  _page_wrappers_create_fields();
}

/**
 * Implementation of hook_uninstall().
 */
function page_wrappers_uninstall() {
  variable_del('page_wrapper_enabled_node_types');
  _page_wrappers_delete_nodes();
  _page_wrappers_delete_fields();

  node_type_delete('page_wrapper');
  field_purge_batch(1000);
}

/**
 * Implementation of hook_schema().
 */
function page_wrappers_schema() {
  $schema['page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'template' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['node_page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('Node nid.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'wrapper_nid' => array(
        'description' => t('Nid of the Page Wrapper node.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'ruleset' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'ID for this ruleset. A 1 signifies this as the default page wrapper',
        'default' => '1',
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Weight of assignment.',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'weight' => array('weight'),
      'nid_weight' => array('nid', 'weight'),
      'wrapper_nid' => array('wrapper_nid'),
    ),
  );

  return $schema;
}

/**
 * Node and associated field setup for Page Wrappers content type.
 */
function _page_wrappers_create_fields() {
  $t = get_t();

  // implement node type.
  if (!in_array('page_wrapper', node_type_get_names())) {
    $type = array(
      'type' => 'page_wrapper',
      'name' => $t('Page Wrapper'),
      'description' => $t('Allows a user to define custom page templates that can then be assigned to specific nodes.'),
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'title_label' => $t('Internal Title'),
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
  }

  $fields = array(
     'css_textarea' => array(
      'field_name' => 'page_wrappers_css_textarea',
      'type' => 'text_long',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_textarea',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st(''),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textarea',
          'weight' => -3,
          'settings' => array(
            'rows' => 15,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'js_textarea' => array(
      'field_name' => 'page_wrappers_js_textarea',
      'type' => 'text_long',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_js_textarea',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('Javascript'),
        'description' => st('Opening and closing &lt;script&gt; tags are not required.'),
        'widget' => array(
          'type' => 'text_textarea',
          'weight' => -2,
          'settings' => array(
            'rows' => 15,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'css_path' => array(
      'field_name' => 'page_wrappers_css_path',
      'type' => 'text',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'locked' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_path',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('CSS Path'),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'js_path' => array(
      'field_name' => 'page_wrappers_js_path',
      'type' => 'text',
      'cardinality' => 1,
      'locked' => TRUE,
      'no_ui' => TRUE,
      'settings' => array(
      ),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_js_path',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('JS Path'),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
          'no_ui' => TRUE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'css_source' => array(
      'field_name' => 'page_wrappers_css_source',
      'type' => 'number_integer',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'locked' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_source',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('CSS Source nid'),
        'description' => st(''),
        'widget' => array(
          'type' => 'number',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    // html template
    'html_template' => array(
      'field_name' => 'page_wrappers_html_template',
      'type' => 'text_with_summary',
      'cardinality' => 1,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_html_template',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => TRUE,
        'label' => st('HTML Template'),
        'description' => st('HTML version of the email body.'),
        'widget' => array(
          'type' => 'text_with_summary',
          'weight' => 6,
          'settings' => array(),
        ),
      ),
    ),
  );

  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);

    field_create_field($values);
    field_create_instance($instance);
  }
}

function _page_wrappers_delete_fields() {
  $fields = array(
    'page_wrappers_css',
    'page_wrappers_js',
    'page_wrappers_html_template',
    'page_wrappers_css_textarea',
    'page_wrappers_js_textarea',
    'page_wrappers_css_path',
    'page_wrappers_js_path',
  );
  foreach ($fields as $field_name) {
    $field = field_info_instance('node', $field_name, 'page_wrapper');
    if(!empty($field)) {
      field_delete_instance($field);
      $field = field_info_field($field_name);
      field_delete_field($field);
    }
  }
  drupal_set_message(t('Page Wrapper fields deleted.'));
}

function _page_wrappers_delete_nodes() {
  require_once 'page_wrappers.module';
  $nids = page_wrappers_get_nodes();
  node_delete_multiple($nids);
  drupal_set_message(t('Page Wrappers have been deleted.'));
}

/**
 * Remove the primary key and add an index
 */
function page_wrappers_update_7001() {
  db_drop_primary_key('node_page_wrappers');
  db_add_index('node_page_wrappers', 'wrapped_nid', array('nid'));
  db_add_field('node_page_wrappers', 'ruleset', array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'ID for this ruleset.',
    'default' => '1',
    'not null' => TRUE,
  ));
  db_add_field('node_page_wrappers', 'weight', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Weight of assignment.',
  ));
  return array();
}

/**
 * Add indexes to tables.
 */
function page_wrappers_update_7002() {
  $ret = array();

  db_drop_index('node_page_wrappers', 'indexes');
  db_add_index('node_page_wrappers', 'nid', array('nid'));
  $ret[] = t('Renamed index "indexes" to "nid" on {node_page_wrappers} table.');


  db_add_index('node_page_wrappers', 'nid_weight', array('nid', 'weight'));
  db_add_index('node_page_wrappers', 'wrapper_nid', array('wrapper_nid'));
  db_add_index('node_page_wrappers', 'weight', array('weight'));
  $ret[] = t('Added additional indexes to {node_page_wrappers} table.');

  return implode("\n", $ret);
}

/**
 * add css and js textareas
 */
function page_wrappers_update_7003() {
  $fields = array(
    'css_textarea' => array(
      'field_name' => 'page_wrappers_css_textarea',
      'type' => 'text_long',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_textarea',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st(''),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textarea',
          'weight' => -3,
          'settings' => array(
            'rows' => 15,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'js_textarea' => array(
      'field_name' => 'page_wrappers_js_textarea',
      'type' => 'text_long',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_js_textarea',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('Javascript'),
        'description' => st('Opening and closing &lt;script&gt; tags are not required.'),
        'widget' => array(
          'type' => 'text_textarea',
          'weight' => -2,
          'settings' => array(
            'rows' => 15,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'above',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'css_path' => array(
      'field_name' => 'page_wrappers_css_path',
      'type' => 'text',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'locked' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_path',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('CSS Path'),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'js_path' => array(
      'field_name' => 'page_wrappers_js_path',
      'type' => 'text',
      'cardinality' => 1,
      'locked' => TRUE,
      'no_ui' => TRUE,
      'settings' => array(
      ),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_js_path',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('JS Path'),
        'description' => st(''),
        'widget' => array(
          'type' => 'text_textfield',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
          'no_ui' => TRUE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
    'css_source' => array(
      'field_name' => 'page_wrappers_css_source',
      'type' => 'number_integer',
      'cardinality' => 1,
      'no_ui' => TRUE,
      'locked' => TRUE,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_css_source',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => FALSE,
        'label' => st('CSS Source nid'),
        'description' => st(''),
        'widget' => array(
          'type' => 'number',
          'weight' => 6,
          'settings' => array(
            'size' => 60,
          ),
        ),
        'settings' => array(
          'text_processing' => 0,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
          'teaser' => array(
            'type' => 'hidden',
            'label' => 'hidden',
            'settings' => array(),
            'weight' => 0,
          ),
        ),
      ),
    ),
  );

  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);
    field_create_field($values);
    field_create_instance($instance);
  }
}

/**
 * populate css and js textareas
 */
function page_wrappers_update_7004(&$sandbox) {

  $filedir = file_default_scheme() . '://' . '/page_wrappers';
  $css_folder = $filedir . '/styles/';
  $js_folder = $filedir . '/scripts/';

  $css_dir = file_prepare_directory($css_folder, FILE_MODIFY_PERMISSIONS);
  if(!$css_dir) {
    $css_dir = file_prepare_directory($css_folder, FILE_CREATE_DIRECTORY);
  }

  $js_dir = file_prepare_directory($js_folder, FILE_MODIFY_PERMISSIONS);
  if(!$js_dir) {
    $js_dir = file_prepare_directory($js_folder, FILE_CREATE_DIRECTORY);
  }

  if(!$css_dir || !$js_dir) {
    throw new DrupalUpdateException('Update could not configure the page wrapper css or javascript directory. Please check file system permissions');
  }

  if(!isset($sandbox['progress'])){
    $sandbox['progress'] = 0;
    $sandbox['last_nid'] = 0;
    $sandbox['limit'] = 10;
    $sandbox['max'] = db_query("SELECT COUNT(DISTINCT nid) FROM {node} WHERE type = :page", array(':page' => 'page_wrapper'))->fetchField();
  }
  $nids = db_query('SELECT nid FROM {node} WHERE type = :page && nid > '. $sandbox['last_nid'] .' LIMIT '. $sandbox['limit'] .'',  array(':page' => 'page_wrapper'))->fetchCol();

  $wrappers = node_load_multiple($nids, array());
  foreach($wrappers as $node){
    $css_contents = '';
    $js_contents = '';

    $existing_css = db_query("SELECT * FROM {field_data_page_wrappers_css} WHERE entity_id = :nid", array(':nid' => $node->nid));
    foreach ($existing_css as $css) {
     $existing_css_file = file_load($css->page_wrappers_css_fid);
     if($existing_css_file) {
       $fhandle = @fopen($existing_css_file->uri, 'r');
       if(!empty($fhandle)) {
         $css_contents .= fread($fhandle, filesize($existing_css_file->uri));
         fclose($fhandle);
       }
       else {
          $messages[] = t('CSS file was missing: @name for node @nid', array('@name' => $existing_css_file->filename, '@nid' => $node->nid));
         //don't throw exception for missing files, per discussion
        //throw new DrupalUpdateException('Update 7004 did not complete. file was missing: ' . $existing_css_file->filename . '. Fix this error and try again');
       }
     }
    }
    if($css_contents != '') {
      $css_name = $node->title . "_" . $node->nid . "_style.css";
      $css_file = file_save_data($css_contents, $css_folder . $css_name, FILE_EXISTS_RENAME);
      if(isset($css_file)) {
        $css_file->filemime = 'text/css';
        file_save($css_file);
      }
      $node->page_wrappers_css_textarea[LANGUAGE_NONE][0]['value'] = $css_contents;
      $node->page_wrappers_css_path[LANGUAGE_NONE][0]['value'] = $css_folder . $css_file->filename;
      $node->page_wrappers_css_source[LANGUAGE_NONE][0]['value'] = '-1';
    }

    $existing_js = db_query("SELECT * FROM {field_data_page_wrappers_js} WHERE entity_id = :nid", array(':nid' => $node->nid));
    foreach ($existing_js as $js) {
      $existing_js_file = file_load($js->page_wrappers_js_fid);
      if($existing_js_file) {
        $fhandle = @fopen($existing_js_file->uri, 'r');
        if(!empty($fhandle)) {
          $js_contents .= fread($fhandle, filesize($existing_js_file->uri));
          fclose($fhandle);
        }
        else {
          $messages[] = t('Javascript file was missing: @name for node @nid', array('@name' => $existing_js_file->filename, '@nid' => $node->nid));
        //throw new DrupalUpdateException('Update 7004 did not complete. file was missing: ' . $existing_css_file->filename . '. Fix this error and try again');
       }
      }
    }
    if($js_contents != '') {
      $js_name = $node->title . "_" . $node->nid . "_script.js";
      $js_file = file_save_data($js_contents, $js_folder . $js_name, FILE_EXISTS_RENAME);
      if(isset($js_file)) {
        $js_file->filemime = 'text/plain';
        file_save($js_file);
      }
      $node->page_wrappers_js_textarea[LANGUAGE_NONE][0]['value'] = $js_contents;
      $node->page_wrappers_js_path[LANGUAGE_NONE][0]['value'] = $js_folder . $js_file->filename;
    }

    field_attach_update('node', $node); //or node_save()
    $sandbox['progress']++;

  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  $sandbox['last_nid'] = $node->nid;
  if(!empty($messages)) {
    $message = implode(' ', $messages);
    return $message;
  }
}



/**
 * remove old file upload fields
 */

function page_wrappers_update_7005() {
  $fields = array(
    'page_wrappers_css',
    'page_wrappers_js',
  );
  foreach ($fields as $field_name) {
    $field = field_info_instance('node', $field_name, 'page_wrapper');
    field_delete_instance($field);
    $field = field_info_field($field_name);
    field_delete_field($field);
  }

  field_cache_clear();
  drupal_clear_css_cache();
  drupal_clear_js_cache();
}
