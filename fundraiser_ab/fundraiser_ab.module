<?php
/**
 * @file
 * Fundraiser A/B Test
 *
 * Adds special functionality to the Webform A/B Test module for use with Fundraising
 * forms.
 */

/**
 * Implementation of hook_webform_ab_get_webform_types().
 */
function fundraiser_ab_webform_ab_get_webform_types() {
  return array('fundraiser' => 'Fundraiser');
}


/**
 * Implementation of hook_webform_ab_validate_conversion().
 * Only returns TRUE if the webform type is fundraiser and the donation payment
 * was successful. This way, failed credit card payments are not counted as
 * conversions
 */
function fundraiser_ab_webform_ab_validate_conversion($webform_types, $test_node, $form_state) {
  if ($webform_types == 'fundraiser') {
    // If abort is TRUE, the payment failed.
    // Only return TRUE if the abort flag is NOT set to TRUE
    return ($form_state['values']['abort'] !== TRUE);
  }
}


/**
 * Implementation of hook_webform_ab_valid_webforms().
 * Return an array of donation forms that may be included in an A/B Test.
 */
function fundraiser_ab_webform_ab_valid_webforms($webform_types) {
  if ($webform_types == 'fundraiser') {
    $forms = array();

    // If Webform 2.x is in use, jump through hoops to determine the donation
    // forms
    if (_fundraiser_ab_is_webform_2x()) {
      $result = db_query("SELECT n.nid, n.title, fg.internal_name
          FROM {node} n
          LEFT JOIN {fundraiser_gateway} fg ON fg.nid=n.nid
          WHERE n.status > 0 AND n.type='%s' AND fg.is_donation_form=1
          ORDER BY title",
        array('webform'));
    }
    // Fundraiser for Webform 3.x and above stores donation forms in a node type
    // of their own
    else {
      $donation_types = fundraiser_enabled_types();
      $result = db_query("SELECT n.nid, n.title, f.internal_name
          FROM {node} n
          LEFT JOIN {fundraiser} f ON f.nid=n.nid
          WHERE n.status > 0 AND n.type IN (" . db_placeholders($donation_types, 'text') . ")
          ORDER BY title",
        $donation_types);
    }

    while ($row = db_fetch_array($result)) {
      if ($row['internal_name']) {
        $row['title'] .= ' (' . $row['internal_name'] . ')';
      }
      $forms[] = $row;
    }
    return $forms;
  }
}


/**
 * Implementation of hook_webform_ab_valid_webforms_alter().
 * If not using Fundraiser forms in this test, don't include them in the list of
 * webforms that can be included in the test
 */
function fundraiser_ab_webform_ab_valid_webforms_alter(&$indexed_forms, $webform_types) {
  if ($webform_types != 'fundraiser') {
    // If Webform 2.x is in use, jump through hoops to determine the donation
    // forms
    if (_fundraiser_ab_is_webform_2x()) {
      $result = db_query("SELECT n.nid
          FROM {node} n
          LEFT JOIN {fundraiser_gateway} fg ON fg.nid=n.nid
          WHERE n.status > 0 AND n.type='%s' AND fg.is_donation_form=1",
        array('webform'));
    }
    // Fundraiser for Webform 3.x and above stores donation forms in a node type
    // of their own
    else {
      $donation_types = fundraiser_enabled_types();
      $result = db_query("SELECT nid FROM {node} WHERE status > 0 AND type IN (" . db_placeholders($donation_types, 'text') . ")", $donation_types);
    }

    // Remove each donation form from the list of forms that can be included in
    // the A/B test
    while ($nid = db_result($result)) {
      unset($indexed_forms[$nid]);
    }
  }
}

/**
 * Implementation of hook_webform_ab_conversion().
 * Save updated stats for this donation form/test node combo.
 */
function fundraiser_ab_webform_ab_conversion($test_node, $form_state_values) {
  if ($webform_node = node_load($form_state_values['webform_nid'])) {
    // Only update on donation form submissions
    // 3.x use donation_form node type
    // 2.x use is_donation_form flag on webform node
    if (fundraiser_is_donation_type($webform_node->type) || $webform_node->is_donation_form > 0) {
      // Flatten the submitted values, for convenience
      // Use _fundraiser_array_flatten() if it's available (only in 3.x)
      if (function_exists('_fundraiser_array_flatten')) {
        $fundraiser_fields = _fundraiser_array_flatten($form_state_values);
      }
      else {
        $fundraiser_fields = array_flatten($form_state_values);
      }

      $recurs = FALSE;
      // If the recurring flag is close at hand, use it (Fundraiser 2.x)
      if (isset($fundraiser_fields['recurs'])) {
        $recurs = ($fundraiser_fields['recurs'] == 'recurs');
      }
      elseif (!empty($fundraiser_fields['recurs_monthly'])) {
        $recurs = $fundraiser_fields['recurs_monthly'];
      }
      // Lets jump through some hoops to see if this was a recurring donation
      // (Fundraiser 3.x)
      else {
        $recurs_cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE form_key = 'recurs_monthly' AND nid = %d", $webform_node->nid));
        if (!empty($recurs_cid)) {
          $value = $form_state_values['submitted'][$recurs_cid];
          if (is_array($value)) {
            // if this is an array, then it is a single item checkbox
            $recurs = $value[0] == 'recurs' ? TRUE : FALSE;
          }
          else {
            $recurs = $value == 'recurs' ? TRUE : FALSE;
          }
        }
      }
      // end jumping through hoops

      // Check if Other amount field was used
      $donation_amount = $fundraiser_fields['amount'];
      if ($donation_amount == "other") {
        $donation_amount = preg_replace("/[^\d\.]/i", "", $fundraiser_fields['other_amount']);
      }



      // Check if the stat record already exists
      if (db_result(db_query('SELECT test_nid FROM {fundraiser_ab_stats} WHERE test_nid = %d AND webform_nid = %d', $test_node->nid, $webform_node->nid))) {
        // Update existing record

        // Prep placeholders for query
        $placeholders = array(
          $donation_amount,
        );

        // Start query
        $sql = 'UPDATE {fundraiser_ab_stats} SET
          donation_count = donation_count + 1,
          total_donations = total_donations + %f';

        // If it's a sustainer, increase those values too
        if ($recurs) {
          $sql .= ', sustainer_count = sustainer_count + 1,
            total_sustainer_donations = total_sustainer_donations + %f';
          $placeholders[] = $donation_amount;
        }

        // Make sure the right row is updated
        $sql .= ' WHERE test_nid = %d AND webform_nid = %d';

        // And add the placeholder values used for the where clause
        $placeholders[] = $test_node->nid;
        $placeholders[] = $webform_node->nid;

        db_query($sql, $placeholders);
      }
      else {
        // Create a new stat record
        $row = array(
          'test_nid' => $test_node->nid,
          'webform_nid' => $webform_node->nid,
          'total_donations' => $donation_amount,
          'donation_count' => 1,
          'total_sustainer_donations' => ($recurs) ? $donation_amount : 0,
          'sustainer_count' => ($recurs) ? 1 : 0,
        );
        drupal_write_record('fundraiser_ab_stats', $row);
      }
    }
  }
}


/**
 * Implementation of hook_ctools_plugin_directory().
 * Tell ctools where this module's plugins live
 */
function fundraiser_ab_ctools_plugin_directory($module, $plugin) {
  if ($module == 'webform_ab') {
    return 'plugins/' . $plugin;
  }
}



/**
 * Implements hook_nodeapi().
 *
 * When loading a webform_ab node, load any fundraiser stats for it
 */
function fundraiser_ab_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($node->type == 'webform_ab' && $op == 'load') {
    // Load all avialable fundraiser stats for webforms in this test
    $result = db_query('SELECT * FROM {fundraiser_ab_stats} WHERE test_nid=%d', $node->nid);
    while ($row = db_fetch_array($result)) {
      // Set the stats right on the node object instead of returning values,
      // because returned values overwrite the existing included_webforms values
      $node->included_webforms[$row['webform_nid']]['fundraiser'] = $row;
    }
  }
}


/**
 * Implementation of hook_webform_ab_reset_data().
 * Reset data about a given A/B test
 */
function fundraiser_ab_webform_ab_reset_data($test_nid) {
  db_query('DELETE FROM {fundraiser_ab_stats} WHERE test_nid=%d', $test_nid);
}


/**
 * Implementation of hook_webform_ab_remove_form().
 * Remove data about a form when it is removed from a test
 */
function fundraiser_ab_webform_ab_remove_form($test_nid, $webform_nid) {
  db_query('DELETE FROM {fundraiser_ab_stats} WHERE test_nid=%d AND webform_nid=%d', $test_nid, $webform_nid);
}


/**
 * Check if running Webform 2.x, because the way that donation forms are stored
 * changed from 2.x and 3.x
 */
function _fundraiser_ab_is_webform_2x() {
  static $is_2x = '';

  if ($is_2x === '') {
    $info = unserialize(db_result(db_query('SELECT info FROM {system} WHERE name = "webform" AND type = "module"')));
    $is_2x = strpos($info['version'], '6.x-2.') === 0;
  }

  return $is_2x;
}
