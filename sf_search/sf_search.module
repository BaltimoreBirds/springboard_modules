<?php
/**
 * @file
 * Salesforce search
 *
 * Provides interfaces and API methods for searching Salesforce data
 */
 
/**
 * Implementation of hook_menu().
 */
function sf_search_menu() {
  $items = array();

  $items['admin/settings/salesforce-management/search'] = array(
    'title' => t('Search settings'),
    'description' => t('Salesforce search settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_search_settings_form'), 
    'access arguments' => array('administer salesforce search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/sf_search.admin.inc',
  );

  $items['salesforce-search'] = array(
    'title' => 'Salesforce search test',
    'description' => 'Test out the available search functions',
    'page callback' => 'sf_search_test',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['js/salesforce-search/lookup/%/%'] = array(
    'title' => 'Contact lookup',
    'page callback' => 'sf_search_lookup',
    'page arguments' => array(3, 4),
    'access arguments' => array('Find contacts in Salesforce'),
  );
  
  $items['js/salesforce-search/find/%/%'] = array(
    'title' => 'Contact find',
    'page callback' => 'sf_search_sosl',
    'page arguments' => array(3, 4),
    'access arguments' => array('Find contacts in Salesforce'),
  );
  
  return $items;
}

/**
 * Implmentation of hook_perm().
 */
function sf_search_perm() {
  return array(
    'Find contacts in Salesforce',
    'administer salesforce search',
  );
}

/**
 * Performs a full-text SOSL search on Salesforce contacts.
 *
 * @param $query
 *   The value to search for.
 */
function sf_search_sosl($nid, $query) {   // get a data structure that maps Salesforce contact properties to form field keys
  if ($map = sf_search_create_form_map($nid)) {
    $donor_id_field = variable_get('sf_search_donor_id_field', NULL);
    $sosl = _sf_search_create_search_query($query, $map);
    $data = _sf_search_run_search($sosl);
    
    // adjust results because salesforce doesn't return a field if it's empty
    _sf_search_restore_properties($data, $map);
    
    // return a json data structure
    return drupal_json($data);
  }
  
  // TODO: return a structured json response with error message
  return FALSE;
}

/**
 * Performs a contact lookup by donor id field.
 *
 * @param $donor_id
 *   The donor id to lookup.
 */
function sf_search_lookup($nid, $donor_id) {
  // get a data structure that maps Salesforce contact properties to form field keys
  if ($map = sf_search_create_form_map($nid)) {
    // get the donor id field
    $donor_id_field = variable_get('sf_search_donor_id_field', NULL);
    $soql = _sf_search_create_lookup_query($donor_id_field, 'string', $donor_id, $map);
    $data = _sf_search_run_soql_select($soql);
    
    // return a json data structure
    return drupal_json($data);
  }
  
  // TODO: return a structured json response with error message
  return FALSE;
}

/**
 * Creates a SOQL statement to find a contact by id field.
 *
 * @param $lookup_field
 *   The field to use for the lookup.
 * @param $field_type
 *   The lookup field's data type.
 * @param $value
 *   The value to search for in the lookup field.
 * @param $select_fields
 *   An array of fields to select.
 */
function _sf_search_create_lookup_query($lookup_field, $field_type, $value, $map) {
  switch ($field_type) {
    case 'int':
    case 'boolean':
    case 'double':
      return sprintf("SELECT %s FROM Contact WHERE %s = %d", implode(', ', array_keys($map)), $lookup_field, $value);
      break;
    default: 
      return sprintf("SELECT %s FROM Contact WHERE %s = '%s'", implode(', ', array_keys($map)), $lookup_field, $value);
  }
}

/**
 * Creates a SOSL statement to find contact via full-text search.
 *
 * @param $query
 *   The text to search for.
 * @param $map
 *   The fields to return.
 */
function _sf_search_create_search_query($query, $map) {
  // Reserved symbols in SSOL need to be escaped in the query.
  // Reserved characters are: & | ! { } [ ] ( ) ^ ~ : \ " ' + -
  $reserved = array('&', '|', '!', '{', '}', '[', ']', '(', ')', '^', '~', ':', '"', "'", '+', '-', '\\');
  $reserved_map = array();
  foreach ($reserved as $reserve) {
    $reserved_map[$reserve] = '\\' . $reserve;
  }
  $query = strtr($query, $reserved_map);
  return sprintf("FIND {%s} returning contact(%s)", $query, implode(', ', array_keys($map)));
}

/**
 * Runs a SOQL select statement and returns all records.
 *
 * @param $soql
 *   The SOQL string to run.
 */
function _sf_search_run_soql_select($soql) {
  $data = array();  
  $continue = TRUE;
  $sf = salesforce_management_api_connect();
  
  // make sure we've got a good connection
  if (is_object($sf)) {
    $query = $sf->client->query($soql);
    while ($continue) {
      for ($i = 0; $i < $query->size; $i++) {
        $data[] = $query->records[$i];
      }
      if ($query->done) {
        $continue = FALSE;
      }
      else {
        $query = $sf->client->queryMore($query->queryLocator);
      }
    }   
  }
  
  return $data;
}

/**
 * Runs a SOSL statement using the Salesforce API.
 *
 * @param $sosl
 *   The sosl statement to run.
 */
function _sf_search_run_search($sosl) {
  $data = array();
  $sf = salesforce_management_api_connect();

  if (is_object($sf)) {
    $result = $sf->client->search($sosl);
    if ($result->searchRecords) {
      // deal with salesforce's inconsistent returns
      if (is_array($result->searchRecords)) {
        foreach ($result->searchRecords as $record) {
          $data[] = $record->record;
        }
      }
      else {
        $data[] = $result->searchRecords->record;
      }
    }
  }
  
  return $data;
}

/**
 * This function adds empty properties back to the Salesforce SOSL search result.
 *
 * @param $data
 *   The array of contact objects returned from Salesforce.
 * $param $map
 *   The array of fields that was used in the SOSL statement.
 */
function _sf_search_restore_properties(&$data, $map) {
  // adjust results because salesforce doesn't return a field if it's empty
  foreach ($data as &$contact) {
    foreach ($map as $property => $value) {
      if (empty($contact->{$property})) {
        $contact->{$property} = NULL;
      }
    }
  }
}

/**
 * Return an array of fields that have been mapped in the user -> contact fieldmap.
 *
 * @param $reset
 *   Flag to flush the cached version of the fields and load a fresh copy.
 */
function _sf_search_fieldmap_field_list($reset = FALSE) {
  // get the fieldmap assigned to the authenticated user role
  static $fields;

  if (empty($fields) || $reset) {
    $fieldmap = _sf_search_get_user_fieldmap();
    $fields = array_keys($fieldmap['fields']);
  }
  
  return $fields;
}

/**
 * Returns the fieldmap that is assigned to the authenticated user role.
 */
function _sf_search_get_user_fieldmap() {
  $user_fieldmap = cache_get('sf_search_user_fieldmap');

  if (!$user_fieldmap) {
    $authenticated_user_rid = 2;
    $fid = salesforce_management_api_fieldmap_rid_load($authenticated_user_rid);
    if (!empty($fid)) {
      $user_fieldmap = salesforce_management_api_fieldmap_load($fid);
      // cache the fieldmap for 1 day
      cache_set('sf_search_user_fieldmap', $user_fieldmap, 'cache', time() + 360);
      return $user_fieldmap;
    }
  }
  
  return $user_fieldmap->data;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function sf_search_form_fundraiser_offline_form_alter(&$form, &$form_state) {

  // operate in offline mode only and with salesforce working only.
  if (module_exists('salesforce_management_api') && variable_get('salesforce_management_api_wsdl_updated', '')) {
    $sf = salesforce_management_api_connect();
  }
  if (is_object($sf)) {
    // add in client side scripts
    _sf_search_add_scripts();
    
    // get the user fieldmap
    $user_fieldmap = _sf_search_get_user_fieldmap();

    // create some convenience vars
    $nid = $form['#node']->nid;
    $fid = $user_fieldmap['fieldmap'];

    // add some hidden fields so that our javascript can pluck out some values
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $nid,
    );
    
    $form['fid'] = array(
      '#type' => 'hidden',
      '#value' => $fid,
    );
  
    // get the metadata of the mapped object so we can extract some nice field labels  
    $saleforce_metadata = salesforce_management_api_fieldmap_objects_load('salesforce', $user_fieldmap['salesforce']);

    // grab the fields that are configured to display in a search resultset
    $display_fields = variable_get('sf_search_result_display_fields', array());

    // use the component hierarchy to create a javascript data structure that can be used to populate field values client-side
    $form_map = sf_search_create_form_map($nid, $fid);

    // create a variable to hold the client-side field map
    $donor_id_field = variable_get('sf_search_donor_id_field', NULL);
    
    // get a list of countries to store client-side
    $countries = _sf_search_countries();
    
    // get a list of zones to store client-side
    $zones = _sf_search_zones();
      
    // create a data structure to hold client-side settings
    $sf_search_settings = array(
      'sf_search' => array(
        'field_map' => array(),
        'display_columns' => array(),
        'donor_id_field' => $donor_id_field,
        'nid' => $nid,
        'countries' => $countries,
        'zones' => $zones,
      ),
    );
  
    /**
     * iterate over the form map and create some settings to pass over to the client side
     *
     * field_map: an array that maps salesforce object properties to form fields (using DOM id)
     * display_columns: the columns that should display in search results
     * donor_id_field: the field that represents the unique id of the donor
     * nid: the node of the form we're altering
    */
    foreach($form_map as $key => $field) {
      if (array_key_exists($field, $form['#component_hierarchy'])) {
        $sf_search_settings['sf_search']['field_map'][$key] = $form['#component_hierarchy'][$field]['field_id'];
      }
    }
    
    foreach($display_fields as $key => $field) {
      if (array_key_exists($key, $saleforce_metadata['fields'])) {
        if (array_key_exists($key, $display_fields) && $display_fields[$key]) {
          $sf_search_settings['sf_search']['display_columns'][$key] = $saleforce_metadata['fields'][$key]['label'];
        }
      }
    }
    
    // add the donor id field, because it won't be mapped
    $sf_search_settings['sf_search']['display_columns'] = array($donor_id_field => 'Donor Id') + $sf_search_settings['sf_search']['display_columns'];

    // add client side fieldmap to Drupal.settings
    drupal_add_js($sf_search_settings, 'setting');

    $form['sf_search'] = array(
      '#type' => 'fieldset',
      '#title' => t('Salesforce Search'),
      '#weight' => -9,
      '#suffix' => '<div id="sf-search-container"><div id="sf-search-panel">' .
        '<table cellpadding="0" cellspacing="0" border="0" class="display" id="sf-contacts" width="100%"></table>' .
        '</div></div><div id="search-results"></div>',
      '#attributes' => array('id' => 'sf-search-search-form'),
    );
    $form['sf_search']['sf_search_type'] = array(
      '#type' => 'radios',
      '#options' => array('lookup' => 'Donor Id', 'search' => 'Search'),
      '#default_value' => 'lookup',
    );
    $form['sf_search']['sf_search_query'] = array(
      '#type' => 'textfield',
    );
    $form['sf_search']['sf_search_search_form_submit'] = array(
      '#type' => 'submit',
      '#value' => 'Find',
      '#validate' => array(),
      '#executes_submit_callback' => FALSE,
      '#suffix' => '<span id="sf-search-no-results">No contacts found</span>',
    );
  }
  else {
    drupal_set_message(t('Unable to make a connection to Salesforce. Salesforce Search has been disabled on this page.'), 'error');
  }
}

/**
 * Returns a map of Salesforce object property to webform field key.
 *
 * @param $nid
 *   The id of the webform node.
 */
function sf_search_create_form_map($nid) {
  // get the donation form -> profile fieldmap
  if ($donation_form_fieldmap = _sf_search_form_user_maps($nid)) {  
    $donation_form_fieldmap = array_flip($donation_form_fieldmap);
    
    // get the user -> saleforce fieldmap
    $user_fieldmap = _sf_search_get_user_fieldmap();
    
    // array to hold the resulting map
    $salesforce_formkey_map = array();
    
    // create a new map that denotes which salesforce fields should populate which form fields
    foreach ($user_fieldmap['fields'] as $salesforce_field => $profile_field) {
      if (array_key_exists($profile_field, $donation_form_fieldmap)) {
        $salesforce_formkey_map[$salesforce_field] = $donation_form_fieldmap[$profile_field];
      }
    }
    
    // add in any display fields that aren't actually mapped
    $display_fields = variable_get('sf_search_result_display_fields', array());
    foreach ($display_fields as $key => $value) {
      if ($value && !array_key_exists($key, $salesforce_formkey_map)) {
        $salesforce_formkey_map[$key] = NULL;
      }
    }
    
    // if donor id field isn't mapped, add it
    $donor_id_field = variable_get('sf_search_donor_id_field', NULL);
    if (!array_key_exists($donor_id_field, $salesforce_formkey_map)) {
      $salesforce_formkey_map[$donor_id_field] = NULL; 
    }
    
    return $salesforce_formkey_map;
  }
  
  return FALSE;
}

/**
 * Maintains a cache of donation form -> profile fieldmaps for quicker lookups.
 *
 * @param $nid
 *   The id of the webform node.
 */
function _sf_search_form_user_maps($nid) {
  $maps = cache_get('sf_search_donation_profile_maps');
  
  if (!$maps || !$maps->data || !array_key_exists($nid, $maps->data)) {
    $map = fundraiser_user_map($nid);
    $maps = $maps->data;
    $maps[$nid] = $map;
    cache_set('sf_search_donation_profile_maps', $maps, 'cache', time() + 360);  
    return $map;
  }
  
  // return the cached map for this node
  if (!empty($maps->data[$nid])) {
    return $maps->data[$nid];
  }
  
  return FALSE;
}

/**
 * Returns an array of all ubercart countries.
 */
function _sf_search_countries() {
  $countries = cache_get('sf_search_countries');

  if (!$countries) { 
    $countries = array();
    $result = db_query("SELECT country_id, country_iso_code_2 FROM {uc_countries}");
    while ($data = db_fetch_object($result)) {
      $countries[$data->country_iso_code_2] = $data->country_id;
    }
    
    cache_set('sf_search_countries', $countries, 'cache', time() + 360);
    // return hot version
    return $countries;
  }
  
  // return cached version
  return $countries->data;
}

/**
 * Return an array of all ubercart zones.
 */
function _sf_search_zones() {
  $zones = cache_get('sf_search_zones');
  
  if (!$zones) {
    $zones = array();
    $result = db_query("SELECT zone_id, zone_code FROM {uc_zones}");
    while ($data = db_fetch_object($result)) {
      $zones[$data->zone_code] = $data->zone_id;
    }
    cache_set('sf_search_zones', $zones, 'cache', time() + 360); 
    // return hot version 
    return $zones;
  }
  
  // return cached version
  return $zones->data;
}

/**
 * Adds the module's scripts to the page.
 */
function _sf_search_add_scripts() {
  $path = drupal_get_path('module', 'sf_search');
  drupal_add_js($path . '/js/jquery.dataTables.min.js');
  drupal_add_js($path . '/js/jquery-ui-1.8.19.custom.min.js');
  drupal_add_js($path . '/js/sf_search.js');
  drupal_add_css($path . '/css/sf_search.css');
}