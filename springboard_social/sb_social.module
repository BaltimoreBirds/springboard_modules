<?php


/**
 * @file: core hooks
 */

// db helper functions
require_once('includes/sb_social.db.inc');
require_once('includes/sb_social.salesforce.inc');
require_once('includes/sb_social.ctools.inc');

/**
 * Implements hook_permission().
 */
function sb_social_permission() {
  $permissions = array(
    'administer springboard social' => array(
      'title' => t('Administer Springboard Social'),
      'description' => t('Configure Springboar Social module settings'),
    ),
    'edit own share content' => array(
      'title' => t('Edit own share content'),
      'description' => t('Edit shared content on own nodes'),
    ),
    'edit any share content' => array(
      'title' => t('Edit any share content'),
      'description' => t('Edit shared content on all nodes'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function sb_social_menu() {
  $items['admin/config/services/springboard_social'] = array(
    'title' => 'Springboard Social',
    'description' => 'Social sharing integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_admin'),
    'access arguments' => array('administer springboard social'),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/springboard_social/services'] = $items['admin/config/services/springboard_social'];
  $items['admin/config/services/springboard_social/services']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/config/services/springboard_social/services']['weight'] = -1;
  $items['admin/config/services/springboard_social/path-settings'] = array(
    'title' => 'Path settings',
    'description' => 'Configure custom share settings for non-node pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_path_admin'),
    'access arguments' => array('administer springboard social'),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/services/springboard_social/path-settings/add'] = array(
    'title' => 'Add path share settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_path_settings'),
    'access arguments' => array('administer springboard social'),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/springboard_social/path-settings/edit/%'] = array(
    'title' => 'Edit path share settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_path_settings', 6),
    'access arguments' => array('administer springboard social'),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/springboard_social/path-settings/delete/%'] = array(
    'title' => 'Delete path share settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_path_settings_delete_form', 6),
    'access arguments' => array('administer springboard social'),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/share_settings'] = array(
    'title' => t('Social'),
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sb_social_node_settings', 1),
    'access callback' => 'sb_social_access_node_settings',
    'access arguments' => array(1),
    'file' => 'includes/sb_social.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // service, id, type, market source
  $items['sb_social/share_event/%/%/%/%'] = array(
    'title' => '',
    'page callback' => 'sb_social_share_tracker',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => TRUE,
    'file' => 'includes/sb_social.share.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Implements hook_block_info().
 */
function sb_social_block_info() {
  $blocks['social_sharing'] = array(
    'info' => t('Social Sharing'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sb_social_block_view($delta = '') {
  if ($delta = 'social_sharing') {
    $node = menu_get_object();
    if (!$node) {
      // is it a confirmation page?
      $node = menu_get_object('webform_menu');
      // if we still don't have a node id then we must assume this isn't a node
      // or confirmation page and any settings that may be available will come
      // from the current path.
      $id = !$node ? current_path() : $node->nid;
    }
    else {
      $id = $node->nid;
    }

    $sid = _sb_social_sid_by_id($id);
    $settings = sb_social_settings_load($sid);
    $plugins = sb_social_get_enabled_plugins();

    // render button for each enabled service
    foreach ($plugins as $service => $plugin) {
      $vars['service'] = $service;
      $vars['extra'] = '';

      if (isset($plugin['button_extra'])) {
        $func = $plugin['button_extra'];
        if (function_exists($func)) {
          $vars['extra'] = $func($settings['data'][$service], $node);
        }
      }
      $buttons[] = theme('sb_social_share_button', $vars);
    }
    $buttons = implode("\n", $buttons);
    $block['subject'] = NULL;
    $block['content'] = theme('sb_social_share', array('buttons' => $buttons));
    return $block;
  }
}

/**
 * Get social network plugins for enabled services.
 */
function sb_social_get_enabled_plugins() {
  static $enabled_plugins = array();
  if (empty($enabled_plugins)) {
    $plugins = sb_social_list_plugins();
    $enabled_services = sb_social_get_enabled_services();
    $services = array_keys($plugins);
    foreach ($enabled_services as $service) {
      if (in_array($service, $services)) {
        $enabled_plugins[$service] = $plugins[$service];
      }
    }
  }
  return $enabled_plugins;
}

/**
 * List all available plugins.
 */
function sb_social_list_plugins() {
  static $plugins = array();
  if (empty($plugins)) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('sb_social', 'social_networks');
  }
  return $plugins;
}

/**
 * Access callback for node share content form.
 */
function sb_social_access_node_settings($node) {
  global $user;
  // hide share content settings tab on disabled content types
  $enabled_content_types = variable_get('springboard_social_enabled_content_types', array());

  if (empty($enabled_content_types[$node->type])) {
    return FALSE;
  }
  // grant access to content owned by user that they have permissions to edit.
  if (user_access('edit own share content') && $node->uid == $user->uid && node_access('update', $node)) {
    return TRUE;
  }
  // grant access to content user can edit regardless of ownership.
  elseif (user_access('edit any share content') && node_access('update', $node)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_node_delete
 *
 * purge share content settings when a node is deleted
 */
 function sb_social_node_delete($node) {
   sb_social_webform_settings_delete($node->nid);
}

/**
 * Implements hook_init().
 *
 * Add OpenGraph meta tags.
 *
 * Generate shortened url on confirmation page view.
 *
 * Package social tracking cookie value as javascript setting.
 *http://d7-springboard.dev/
 */
function sb_social_init() {
  $node = FALSE;
  $submission_id = FALSE;

  $js_settings = array(
    'id' => 0,
    'id_type' => '',
    'pubid' => variable_get('springboard_social_addthis_profile_id'),
    'market_source' => '',
  );

  if (isset($_GET['sid']) && is_numeric($_GET['sid'])) {
    $submission_id = $_GET['sid'];
    $js_settings['submission_id'] = $_GET['sid'];
   // $js_settings['id_type'] = 'sid';
  }
  if (arg(0) == 'node' && is_numeric(arg(1))) { // TODO: replace this with a valid core hook
    $node = node_load(arg(1));

    $id = is_object($node) ? $node->nid : FALSE;
    if ($id) {
      $sid = sb_social_get_sid_by_id($id, 'node');
    }

    if (!$js_settings['id']) {
      $js_settings['id'] = is_object($node) ? $node->nid : 0;
      $js_settings['id_type'] = 'nid';
    }
  }
  else {
    // social supports both internal paths and path aliases so
    // we need to check both
    $path = current_path();
    $alias = drupal_get_path_alias($path);
    $path = !empty($alias) ? array($path, $alias) : $path;
    $id = sb_social_get_path_id($path);
    $sid = sb_social_get_sid_by_id($id, 'path');

    if (!$js_settings['id']) {
      $js_settings['id'] = $id;
      $js_settings['id_type'] = 'path';
    }
  }

  if ($id) {
    $settings = sb_social_settings_load($sid);

    if (!empty($settings['data']['market_source']['ms'])) {
      $js_settings['market_source'] = $settings['data']['market_source']['ms'];
    }
    else {
      // initialize to a non-null value
      $js_settings['market_source'] = '0';
    }
    $plugins = sb_social_get_enabled_plugins();
    $path = drupal_get_path('module', 'sb_social');

    foreach ($plugins as $service => $plugin) {

      // run config callbacks, this sets up js settings, opengraph tags, etc.
      $func = $plugin['share_config'];
      if (function_exists($func)) {
        $func($settings, $node, $submission_id);
      }

      // if the plugin has a js file to add, include it here. Note: only one include per plugin is supported.
      if (!empty($plugin['js'])) {
        drupal_add_js($path . '/' . $plugin['js']);
      }
    }

    $prefix = !empty($_SERVER['HTTPS']) ? 'https://' : 'http://';
    drupal_add_js($prefix . 's7.addthis.com/js/250/addthis_widget.js', array('type' => 'external', 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module', 'sb_social') . '/scripts/sb_social.addthis.js', 'file');

  }


  drupal_add_js(array('sb_social' => $js_settings), 'setting');
  // stash cookie payload in js
  // TODO: this should probably live somewhere else.
  /*
  if (!empty($_COOKIE['sb_social_event_submission'])) {
    $data = explode("::", $_COOKIE['sb_social_event_submission']);
    drupal_add_js(array('sb_social' => array(
        'uid' => $data[0],
        'mail' => $data[1],
        'sid' => $data[2],
      )), 'setting');
  }*/
}



/**
 * Implements hook_market_source_field_info().
 */
function sb_social_market_source_field_info() {

  $fields = array();
  // transaction that generated the refered conversion (sid)
  $fields['social_referer_transaction'] = array(
    '#title' => t('social referrer transaction'),
    '#type' => 'hidden',
    '#value' => '',
    '#required' => 0,
    '#extra' => array(
      'description' => '',
      'hidden_type' => 'hidden',
    ),
  );

  return $fields;
}

/**
 * Implements hook_market_source_external_field_keys().
 */
function sb_social_market_source_external_field_keys() {
  $items = array(
    'social_referer_transaction' => array(
      'key' => 'social_referer_transaction',
      'name' => t('Social referer transaction'),
      'default' => '',
      'persistence' => 'on',
    ),
    'social_referer_network' => array(
      'key' => 'social_referer_network',
      'name' => t('Social referer transaction'),
      'default' => '',
      'persistence' => 'on',
    ),
    'social_referer_contact' => array(
      'key' => 'social_referer_contact',
      'name' => t('Social referer transaction'),
      'default' => '',
      'persistence' => 'on',
    ),
  );
  return $items;
}

/**
 * Implements hook_webform_submission_update().
 *
 * Set tracking cookie when anonymous user submits a webform user enabled webform.
 * hook_webform_submission_update() is invoked by webform user after setting the uid
 * in the submission.
 */
function sb_social_webform_submission_update($node, $submission) {

  // update/set tracking cookie when a webform user enabled form is submitted.
  if (!empty($node->is_webform_user) && $node->is_webform_user) {
    global $user;
    // prevent updating authenticated user's cookie when editing another user's submission.
    if ($user->uid && ($submission->uid != $user->uid)) {
      return;
    }
    // find email field value
    // TODO: break dependency on fundraiser_webform.
    $component = _fundraiser_webform_get_component_by_nid_key($node->nid, 'mail');
    $mail = $submission->data[$component->cid]['value'][0];
    _sb_social_set_tracking_cookie($submission->uid, $mail, $submission->sid);
  }
}

/**
 * Implements hook_webform_submission_insert().
 *
 * Set tracking cookie when form is submitted by an authenticated user.
 * Since the submission has a valid UID, we can update the cookie.
 *
 * Anonymous webform submissions have to be handled during update since webform_user()
 * backfills the user id in the submission after it's been inserted.
 */
function sb_social_webform_submission_insert($node, $submission) {
  if (!empty($node->is_webform_user) && $node->is_webform_user) {
    global $user;
    if ($user->uid == $submission->sid) {
      $component = _fundraiser_webform_get_component_by_nid_key($node->nid, 'mail');
      $mail = $submission->data[$component->cid]['value'][0];
      _sb_social_set_tracking_cookie($submission->uid, $mail, $submission->sid);
    }
  }
}

/**
 * Implements hook_token_info().
 */

function sb_social_token_info() {
  $enabled_services = sb_social_get_enabled_services();
  $enabled_plugins = sb_social_get_enabled_plugins();

  $info['types']['sb_social'] = array(
    'name' => t('Springboard Social'),
    'description' => t('Tokens related to Springboard Social sharing content.'),
  );
  // share links, displays addthis div and share links as a bundle.
  $info['tokens']['sb_social']['share_links'] = array(
    'name' => t('Share links'),
    'description' => t('Render standard addthis share links for all social services that are currently enabled.'),
  );
  foreach ($enabled_plugins as $service => $plugin) {
    if (!empty($plugin['token_info'])) {
      $info['tokens']['sb_social'] = array_merge($info['tokens']['sb_social'], $plugin['token_info']);
    }
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function sb_social_tokens($type, $tokens, $data = array(), $options = array()) {

  if ($type = 'sb_social') {
    $replacements = array();
    $node = !empty($data['node']) ? $data['node'] : FALSE;

    if (isset($node->nid) && $node->nid) {
      $id = $node->nid;
    }
    else {
      // attempt to load path settings
      $path = current_path();
      $alias = drupal_get_path_alias($path);
      $id = $alias ? array($path, $alias) : $path;
    }
    $sid = _sb_social_sid_by_id($id);
    $settings = sb_social_settings_load($sid);
    $enabled_plugins = sb_social_get_enabled_plugins();
    $submission_id = (isset($_GET['sid']) && is_numeric($_GET['sid'])) ? $_GET['sid'] : FALSE;

    foreach ($enabled_plugins as $service => $plugin) {
      if (!empty($plugin['token_replace'])) {
        $func = $plugin['token_replace'];
        // convolution required to establish "extra" url parameters when generating share links
        $extra = isset($plugin['button_extra']) ? $plugin['button_extra'] : FALSE;
        $func($tokens, $replacements, $settings, $node, $submission_id, $extra);
      }
    }
    // do share links
    $keys = array_keys($tokens);
    if (in_array('share_links', $keys)) {
      foreach ($enabled_plugins as $service => $plugin) {
        $vars['service'] = $service;
        $vars['extra'] = '';

        // Some buttons (like email) require additional html attributes. The button_extra callback
        // provides these values.
        if (isset($plugin['button_extra'])) {
          $func = $plugin['button_extra'];
          if (function_exists($func)) {
            $vars['extra'] = $func($settings['data'][$service], $node, $submission_id);
          }
        }
        $buttons[] = theme('sb_social_share_button', $vars);
      }
      $buttons = implode("\n", $buttons);
      $replacements['[sb_social:share_links]'] = $enabled_plugins ? theme('sb_social_share', array('buttons' => $buttons)) : '';
    }
    return $replacements;
  }
}

function sb_social_webform_confirmations_token_replace_alter(&$tokens, $sid) {
  $settings = _sb_social_get_settings_by_sid($sid);

}

/**
 * Implements hook_theme().
 */
function sb_social_theme($existing, $type, $theme, $path) {

  $items['sb_social_share'] = array(
    'variables' => array(
      'vars' => NULL,
    ),
    'template' => 'templates/sb_social.share',
  );
  $items['sb_social_share_button'] = array(
    'variables' => array(
      'settings' => NULL,
    ),
    'template' => 'templates/sb_social.share_button',
  );
  // TODO: redo fb image upload as an image picker of existing uploads with optional upload field and ajaxy UI.
  $items['sb_social_share_image_preview'] = array(
    'render element' => 'element',
  );
  return $items;
}


/**
 * Generate url for share tracking purposes
 *
 * @param $share_id
 * Social share event id
 *
 * @param $settings
 * an array of additional share settings
 *
 * @param $url_path
 *
 *
 * @return string
 * Returns an absolute url including share tracking id and market source values.
 */
function sb_social_share_tracker_url($share_id, $settings, $url_path) {
  //$node = node_load($nid);

  $options = array(
    'absolute' => TRUE,
    'query' => array(
      'social_referer_transaction' => $share_id,
    ),
  );

  if (module_exists('market_source') && isset($settings['data']['market_source'])) {
    foreach ($settings['data']['market_source'] as $key => $value) {
      if (!$value) {
        continue;
      }
      $options['query'][$key] = $value;
    }
  }
  $url = url($url_path, $options);
  return $url;
}

// TODO: find time to get the image preview working.
function theme_sb_social_share_image_preview($variables) {
  $element = $variables['element'];

  if (isset($element['#file']->uri)) {
    $output = '<div id="edit-logo-ajax-wrapper"><div class="form-item form-type-managed-file form-item-logo"><span class="file">';
    $output .= '<img height="50px" src="' . file_create_url($element['#file']->uri) . '" />';
    $output .= '</span><input type="submit" id="edit-' . $element['#name'] . '-remove-button" name="' . $element['#name'] . '_remove_button" value="Remove" class="form-submit ajax-processed">';
    $output .= '<input type="hidden" name="' . $element['#name'] . '[fid]" value="' . $element['#file']->fid . '">';

    return $output;
  }
}

/**
 * Provides list of market source fields to exclude on administration pages.
 */
function _sb_social_component_blacklist() {
  return array(
    'referrer',
    'initial_referrer',
    'search_engine',
    'search_string',
    'user_agent',
    'social_referer_transaction',
    'social_referer_network',
    'social_referer_contact',
  );
}

// TODO: find somewhere other than this module for the springboard tracking cookie to live.
function _sb_social_set_tracking_cookie($uid, $mail, $sid) {
  $payload = $uid . '::' . $mail . '::' . $sid;
  $set = setcookie("sb_social.event_submission", $payload, strtotime('+1 year'));
}

/**
 * Token replacement.
 *
 * @param type $string
 * @param type $account
 * User object
 * @param type $node
 * Node object
 * @return string with tokens replaced
 */
function _sb_social_replace_tokens($string, $node, $sid = NULL) {

  $rep = array();
  if (strpos($string, '%title') !== FALSE) {
    $rep['%title'] = !empty($node->title) ? $node->title : drupal_get_title();
  }
  if (strpos($string, '%teaser') !== FALSE) {
    $lang = !empty($node->language) ? $node->language : '';
    $teaser = !empty($node->body[$lang][0]['summary']) ? $node->body[$lang][0]['summary'] : '';
    $rep['%teaser'] = $teaser;
  }

  foreach ($rep as $target => $value) {
    $string = str_replace($target, $value, $string);
  }

  // Do token.module tokens
  $account = NULL;
  $donation = NULL;
  if ($sid) {
    $donation = _fundraiser_webform_get_donation_by_sid($sid);
    $account = user_load($donation->uid);
  }
  // Do token replacement on body.

  $token_set = array(
    'node' => $node,
  );
  if (!empty($donation)) {
    $token_set['donation'] = $donation;
  }
  if (!empty($account)) {
    $token_set['user'] = $account;
  }

  $token_set['node'] = $node;
  $string = token_replace($string, $token_set);
  return $string;
}


/**
 * Implements hook_salesforce_queue_create_item_alter().
 *
 * If the donation was created by a user who came to the site from a share
 * URL (social_referrer_transaction market source field set) we want to
 * try to add the sfid of the original share event to the opportunity as it's
 * going into the queue.
 *
 * If the original share event hasn't been synced yet (no sfid) we go ahead and
 * sync the opportunity anyway, when the share event syncs we'll requeue any applicable
 * donations and queue them for resync.
 *
 * @param mixed $item
 * Salesforce queue item array.
 */
function sb_social_salesforce_queue_create_item_alter(&$item) {
  if ($item['object_type'] == 'Opportunity') {
    if (!empty($item['sobject']->fields['Social_Referrer_Transaction__c'])) {
      $sfid = _sb_social_get_share_salesforce_id_from_map($item['sobject']->fields['Social_Referrer_Transaction__c']);
      // the original share event has synced at some point, requeue with the sfid for the share event.
      if ($sfid) {
        $item['sobject']->fields['Social_Share__c'] = $sfid;
      }

    }
  }
}


/**
 * When an opportunity syncs successfully assign it's salesforce id to any
 * related share events.
 *
 * @param mixed $item
 * Salesforce queue item
 *
 * @param object $result
 * Salesforce queue respons result
 */
function sb_social_salesforce_sync_pass_item($item, $result) {
  if ($item->object_type === 'Opportunity' && !empty($item->drupal_id)) {
    sb_social_update_opportunity_id($item, $result);
  }

  if ($item->object_type === 'Social_Share__c' && !empty($item->drupal_id) && $item->operation == 'CREATE') {
    // stash the returned salesforce id in the sb_social_shares table. This
    // does duplicate data in {salesforce_sync_map} but it may come in handy later
    // to have everything in one place. This may let us sidestep future performance issues
    // as {salesforce_sync_map} has a ton of records.
    sb_social_update_sf_share_id($item, $result);

    // check for donations related to this share event and resync them with the
    // correct sfid for the share event
    $donation_ids = sb_social_load_related_donation_ids($item->drupal_id);

    // requeue, alter hook should add the sfid of the share.
    foreach($donation_ids as $donation_id) {
      $donation = fundraiser_donation_get_donation($donation_id, TRUE);
      salesforce_genmap_send_object_to_queue('salesforce_donation', 'update', $donation->node, $donation->did, $donation, 'donation');
    }
  }
}


/**
 * Implements hook_fundraiser_donation_success().
 *
 * On successful donation, if the donation came from a share url, we want to add that event
 * to the submissions table.
 *
 * @param $donation
 */
function sb_social_fundraiser_donation_success($donation) {
  // social MS field has a share transaction value, submission
  // is associated with a share.
  if (!empty($donation->donation['social_referer_transaction'])) {
    sb_social_submission_save($donation->donation['social_referer_transaction'], $donation->sid, $donation->did);
  }
}

// TODO: Future development - add similar tracker for petitions and other webform submissions?
