<?php

/**
 * @file: install, uninstall && update functions
 */

/**
 * Implements hook_install().
 */
function sb_social_install() {
  $path = drupal_realpath(file_default_scheme() . '://') . '/social_images';
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
}


function sb_social_uninstall() {
  variable_del('springboard_social_services');
  variable_del('springboard_social_addthis_profile_id');
  variable_del('springboard_social_facebook_description');
  variable_del('springboard_social_debug_mode');
  variable_del('springboard_social_enabled_content_types');
  variable_del('springboard_social_default_block_title');
  variable_del('springboard_social_default_block_description');

  db_query('DELETE FROM {variable} WHERE name LIKE :name', array(':name' => 'springboard_social_facebook%'));
  db_query('DELETE FROM {variable} WHERE name LIKE :name', array(':name' => 'springboard_social_twittere%'));
  db_query('DELETE FROM {variable} WHERE name LIKE :name', array(':name' => 'springboard_social_email%'));
  db_query('DELETE FROM {variable} WHERE name LIKE :name', array(':name' => 'sb_social_market_source%'));
  db_query('DELETE FROM {variable} WHERE name LIKE :name', array(':name' => 'springboard_social_ms%'));

  // Purge any uploaded images associated with Social.
  $result = db_query('SELECT fid FROM {file_usage} WHERE module = :module', array(':module' => 'sb_social'));
  foreach ($result as $record) {
    $file = file_load($record->fid);
    if ($file) {
      file_usage_delete($file, 'sb_social', NULL, NULL, 0);
      file_delete($file);
    }
  }
}
/**
 * Implements hook_schema().
 */
function sb_social_schema() {
  $schema['sb_social_shares'] = array(
    'description' => 'Stores data for share events',
    'fields' => array(
      'share_id' => array(
        'description' => 'The node id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'user id associated with webform submission',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'webform submission id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'description' => 'donation id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'webform node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'page_name' => array(
        'description' => 'shared page name',
        'type' => 'varchar',
        'length' => 255,
      ),
      'internal_name' => array(
        'description' => 'shared page internal name',
        'type' => 'varchar',
        'length' => 255,
      ),
      'type' => array(
        'description' => 'share type',
        'type' => 'varchar',
        'length' => 255,
      ),
      'market_source' => array(
        'description' => 'share URL market source',
        'type' => 'varchar',
        'length' => 255,
      ),
      'created' => array(
        'description' => 'created timestamp',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'service' => array(
        'description' => 'social sharing service',
        'type' => 'varchar',
        'length' => 60,
      ),
      'status' => array(
        'description' => 'sync status',
        'type' => 'varchar',
        'length' => 40,
      ),
      'url' => array(
        'description' => 'shared URL',
        'type' => 'text',
      ),
      'sf_share_id' => array(
        'description' => 'Salesforce Share ID',
        'type' => 'varchar',
        'length' => 60,
      ),
      'opportunity_id' => array(
        'description' => 'Salesforce Opportunity ID',
        'type' => 'varchar',
        'length' => 60,
      ),
    ),
    'primary key' => array('share_id'),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );
  $schema['sb_social_settings'] = array(
    'description' => 'shared content settings for individual paths',
    'fields' => array(
      'sid' => array(
        'description' => 'settings id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'id' => array(
        'description' => 'drupal id, path or node id.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'node, path, etc',
        'type' => 'varchar',
        'length' => '60',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'serialized settings array',
        'type' => 'text',
      ),
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );
  $schema['sb_social_path'] = array(
    'description' => 'lookup table, provides numeric ID for individual drupal paths with settings.',
    'fields' => array(
      'pid' => array(
        'description' => 'path id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'drupal id, path or node id.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'path' => array('path'),
    ),
  );
  $schema['sb_social_submissions'] = array(
    'description' => 'lookup table, stores webform submission id and donation id for submissions related to a share',
    'fields' => array(
      'share_id' => array(
        'description' => 'share id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'webform submission id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'did' => array(
        'description' => 'donation id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
  return $schema;
}

/**
 * Add indexes to tables.
 */
function sb_social_update_7001() {
  db_add_index('sb_social_shares', 'sid', array('sid'));
  db_add_index('sb_social_settings', 'type', array('type'));

  return t('Added index to {sb_social_shares} and {sb_social_settings} tables.');
}

/**
 * Add social tracker fields.
 */
function sb_social_update_7002() {
  db_add_field('sb_social_shares', 'market_source', array('type' => 'varchar', 'length' => 255, 'description' => 'Share URL market source'));
  db_add_field('sb_social_shares', 'page_name', array('type' => 'varchar', 'length' => 255, 'description' => 'shared page name'));
  db_add_field('sb_social_shares', 'internal_name', array('type' => 'varchar', 'length' => 255, 'description' => 'shared page internal name'));
  db_add_field('sb_social_shares', 'type', array('type' => 'varchar', 'length' => 255, 'description' => 'share type'));

  return t('Added columns to {sb_social_shares}');
}

/**
 * Add sb_social_path table
 */
function sb_social_update_7003() {
  $schema['sb_social_path'] = array(
    'description' => 'lookup table, provides numeric ID for individual drupal paths with settings.',
    'fields' => array(
      'pid' => array(
        'description' => 'path id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'drupal id, path or node id.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'path' => array('path'),
    ),
  );
  db_create_table('sb_social_path', $schema['sb_social_path']);
}

/**
 * Add columns for Salesforce IDs
 */
function sb_social_update_7004() {
  db_add_field('sb_social_shares', 'sf_share_id', array('type' => 'varchar', 'length' => 60, 'description' => 'Salesforce Share ID'));
  db_add_field('sb_social_shares', 'opportunity_id', array('type' => 'varchar', 'length' => 60, 'description' => 'Salesforce Opportunity ID'));
}

/**
 * Adds lookup table to track webform submissions and donation ids associated with a share.
 */
function sb_social_update_7005() {
  $schema['sb_social_submissions'] = array(
    'description' => 'lookup table, stores webform submission id and donation id for submissions related to a share',
    'fields' => array(
      'share_id' => array(
        'description' => 'share id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'webform submission id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'did' => array(
        'description' => 'donation id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
  db_create_table('sb_social_submissions', $schema['sb_social_submissions']);
}

/*
 * Add did column to shares table
 */
function sb_social_update_7006() {
  $field = array(
    'description' => 'donation id',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('sb_social_shares', 'did', $field);

}

/*
 * Add share counts to settings
 */
function sb_social_update_7007() {
  $result = db_query('SELECT sid FROM {sb_social_settings}')->fetchCol();
  foreach ($result as $sid) {
    $settings = sb_social_settings_load($sid);
    if($settings['type'] == 'node') {
      foreach($settings['data'] as $name => $values) {
        $count = db_query('SELECT count(nid) FROM {sb_social_shares} WHERE nid = :nid AND service = :service', array(':nid' => $settings['id'], ':service' => $name))->fetchfield();
        if($count) {
          $settings['data'][$name]['count'] = $count;
        }
      }
    }
    else {
      $path = sb_social_get_path($settings['id']);
      $pages = db_query("SELECT share_id, url FROM {sb_social_shares} WHERE type = 'page'");
      foreach ($pages as $page) {
         $url = sb_social_share_tracker_url($page->share_id, $settings, $path);
         foreach($settings['data'] as $name => $values) {
           $count = db_query('SELECT count(type) FROM {sb_social_shares} WHERE url = :url AND service = :service', array(':url' => $url, ':service' => $name))->fetchfield();
          if($count) {
            $settings['data'][$name]['count'] = $count;
          }
        }
      }
    }
   sb_social_settings_save($settings);
  }
}
    

