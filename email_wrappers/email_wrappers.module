<?php

/**
 * @file
 */

// @see: http://drupal.org/node/921398 #3
module_load_include('inc', 'webform', 'includes/webform.components');
require_once('email_wrappers.mail.inc');

function email_wrappers_perm() {

}

function email_wrappers_menu() {

  $items['admin/content/email-wrappers'] = array(
    'title' => 'Confirmation Email Templates',
    'description' => '',
    'page callback' => 'email_confirmation_template_list',
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/email-wrappers'] = array(
    'title' => 'Confirmation settings',
    'description' => 'Administer email confirmation settings.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_wrappers_admin'),
    'file' => 'email_wrappers.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  // TODO: implement preview modal.
  $items['email_wrappers/preview_modal/%ctools_js'] = array(
    'title' => 'AJAX modal dialog',
    'page callback' => 'email_wrappers_preview_modal',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

// TODO: fix modal.
function email_wrappers_preview_modal() {
return 'hi';
    module_load_include('inc', 'ctools', 'includes/modal');
    $title = 'Template Preview';
    $values = $_POST['template_wrapper'];

    $output = array();
    $output['subject'] = $values['confirmation_subject'];
    $output['email'] = array(
      'from' => '&lt;' . $values['confirmation_from_name'] . '&gt;' . $values['confirmation_reply_email'],
      'bcc' => $values['confirmation_bcc_email'],
    );
    $output['HTML'] = _email_confirmation_preview('html', $values['confirmation_html_email_message'], $values['email_template']);
    $output['text'] = _email_confirmation_preview('text', $values['confirmation_text_email_message'], $values['email_template']);
    $keys = array_keys($output);
    foreach($keys as $key) {
      if (is_array($output[$key])) {
 
        $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
        $subkeys = array_keys($output[$key]);
        foreach ($subkeys as $subkey) {
          $preview .= '<p>' . ucfirst($subkey) . ':&nbsp; ' . $output[$key][$subkey] . '</p>';
        }
        $preview .= '</fieldset>';
      }
      else {
        $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
        $preview .= '<div>' . $output[$key] . '</div>';
        $preview .= '</fieldset>';
      }
    }
    ctools_modal_render($title, $preview);

}

/**
 * Implements hook_form_alter().
 *
 * Adds mail template UI to Fundraiser donation form and webform confirmation settings form.
 */
function email_wrappers_form_alter(&$form, $form_state, $form_id) {

  // Add a few tweaks to the webform email list form.
  if ($form_id === 'webform_email_edit_form') {
    $template_nid = FALSE;
    if (isset($form_state['input']['email_wrappers_email_template']) && $form_state['input']['email_wrappers_email_template']) {
      $template_nid = $form_state['input']['email_wrappers_email_template'];
    }
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    global $base_path;

    $path = $base_path . drupal_get_path('module', 'email_wrappers') . '/email_wrappers.preview_modal.js';
    $form['#attached']['js'][] = $path;
    $defaults = array();
    // check the db for settings
    if (isset($form['eid']['#value'])) {
      $defaults = email_wrappers_load_settings($form['node']['#value']->nid, $form['eid']['#value']);
    }
  
    // no settings available, load defaults from the selected template
    if ($template_nid && !isset($defaults['tid'])) {
      $defaults = email_wrappers_load_defaults_from_template($form_state['input']['email_wrappers_email_template']);
    }
    
    // alter email header values based on defaults
    if (isset($defaults['subject'])) {
      _email_wrappers_webform_option_defaults($form, 'subject', $defaults['subject']);
    }
    if (isset($defaults['from_mail'])) {
      _email_wrappers_webform_option_defaults($form, 'from_address', $defaults['from_mail']);
    }
    if (isset($defaults['from_name'])) {
      _email_wrappers_webform_option_defaults($form, 'from_name', $defaults['from_name']);
    }
  
    // we're gonna cache these since they may come in handy later.
    $form['email_wrappers_defaults'] = array(
      '#type' => 'value',
      '#value' => $defaults,
    );
    
    // set ajax target div
    $form['#prefix'] = '<div id="webform-email-form-wrapper">';
    $form['#suffix'] = '</div>';
  
  
    $form['email_wrappers_email_template'] = array(
      '#type' => 'select',
      '#title' => t('Template'),
      '#options' => _email_wrappers_list_templates(),
      '#weight' => -50,
      '#default_value' => isset($defaults['tid']) ? $defaults['tid'] : '',
      '#ajax' => array(
        'callback' => 'email_wrappers_email_ajax',
        'wrapper' => 'webform-email-form-wrapper',
        'effect' => 'fade',
      ),
    );
    
    // add bcc field
    $form['email_wrappers_bcc'] = array(
      '#type' => 'textfield',
      '#title' => t('BCC addresses'),
      '#description' => t('BCC the following email addresses when an email is sent. Addresses must be separated by a comma. Example: test1#example.com,test2@example.com.'),
      '#weight' => 7,
      '#value' => isset($defaults['bcc_email']) ? $defaults['bcc_email'] : '',
    );

    // Throw some defaults at webform's built in templating system since it's being overridden anyway.
    if ((isset($form_state['input']['email_wrappers_email_template']) && $form_state['input']['email_wrappers_email_template']) || isset($defaults['html_message'])) {
      $form['template']['template_option']['#access'] = FALSE;
     
      $form['template']['template']['#access'] = FALSE;
      // TODO: add BCC fields.
      // TODO: include filter settings.
      $form['template']['email_wrappers_html_message'] = array(
        '#type' => 'textarea',
        '#title' => t('HTML message'),
        '#description' => t('This version of your message will be displayed by users who can view HTML email'),
        '#value' => $defaults['html_message'],
        '#required' => TRUE,
      );

      $form['template']['email_wrappers_text_message'] = array(
        '#type' => 'textarea',
        '#title' => t('Text-only message (no HTML allowed)'),
        '#description' => t('This version of your message will be displayed if a user can only view email in plaintext.'),
        '#default_value' => $defaults['text_message'],
        '#required' => TRUE,
      );

      $form['template']['tokens']['#weight'] = 9;
      $form['template']['components']['#weight'] = 10;
    }

    // TODO: rebuild modal preview
    // Ctools modals setup for preview button
    $form['template']['preview'] = array(
      '#type' => 'button',
      '#id' => 'email-wrappers-preview',
      '#value' => t('Preview'),
      '#attributes' => array('class' => array('ctools-use-modal')),
      '#weight' => 20,
    );
    $form['#submit'][] = 'email_wrappers_email_submit_callback';
  }
  
  if ($form_id == 'webform_email_delete_form') {
    $form['#submit'][] = 'email_wrappers_delete_callback';
  }
}

/**
 * Validation callback for webform email edit form.
 */
function email_wrappers_email_validate_callback(&$form, &$form_state) {
  // TODO: validate and clean up email addresses.
}

/**
 * Submit callback for webform email edit form.
 */
function email_wrappers_email_submit_callback($form, $form_state) {

  $values = $form_state['values'];

  if (is_numeric($values['email_wrappers_email_template']) && $values['email_wrappers_email_template'] > 0) {
    $settings = array(
      'tid' => $values['email_wrappers_email_template'],
      'bcc' => $values['email_wrappers_bcc'],
      'html_message' => $values['email_wrappers_html_message'],
      'html_message_format' => '',
      'text_message' => $values['email_wrappers_text_message'],
    );
    email_wrappers_delete_settings($values['node']->nid, $values['eid']);
    email_wrappers_save_settings($values['node']->nid, $values['eid'], $settings);
  }
}

/**
 * Submit callback for the Webform email delete form.
 *
 * Remove any settings for an email that is being deleted.
 */
function email_wrappers_delete_callback($form, $form_state) {
  $nid = $form_state['values']['email']['nid'];
  $eid = $form_state['values']['email']['eid'];
  email_wrappers_delete_settings($nid, $eid);
}
/**
 * Delete settings for a given webform email
 *
 * @param $nid
 * Webform node id
 *
 * @param $eid
 * Email id.
 */
function email_wrappers_delete_settings($nid, $eid) {
  db_delete('email_wrappers_webform')
    ->condition('nid', $nid)
    ->condition('eid', $eid)
    ->execute();
}

/**
 * Save webform email settings
 *
 * @param $nid
 * Webform node id.
 *
 * @param $eid
 * Email id.
 *
 * @param $settings
 * associative array of settings.
 * valid keys:
 * tid: template node id
 * bcc: comma separated list of BCC email addresses
 * html_message: html version of the email message body, should not include structural markup defined in the template.
 * text_message: text-only version of the email message body.
 */
function email_wrappers_save_settings($nid, $eid, array $settings) {
  db_insert('email_wrappers_webform')
    ->fields(array(
      'nid' => $nid,
      'eid' => $eid,
      'tid' => $settings['tid'],
   //   'bcc' => $settings['bcc'],
      'html_message' => $settings['html_message'],
      'text_message' => $settings['text_message'],
    ))
    ->execute();
}


/**
 * Fetch an array of email wrapper node ids.
 *
 * @return
 * An indexed array of email_wrapper node ids.
 */
function email_wrappers_get_nodes() {
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'email_wrapper')
    ->execute();

  return $result->fetchCol();
}


/**
 * Implements hook_mail().
 */
function email_wrappers_mail($key, &$message, $params) {

  if ($key == 'wf_submission') {
    // fish the original message array out of params.
    $message = $params['message'];
    $message['module'] = 'email_wrappers';

    $eid = $params['email']['eid'];
    $nid = $params['email']['nid'];
    $settings = email_wrappers_load_settings($nid, $eid);

    $message['params']['boundary'] = '----=_NextPart_' . md5(uniqid());
    $message['headers']['MIME-version'] = '1.0';
    $message['headers']['Content-Type'] = 'multipart/alternative; boundary="' . $message['params']['boundary'] . '"';
    $message['body'] = array(email_wrappers_render_email_body($eid, $message, $settings));
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Halt processing of the original email and re-process using Email Wrappers implementation
 * of MailSystemInterface. Required to send HTML email since core strips HTML.
 */
function email_wrappers_mail_alter(&$message) {
  global $user;
  $account = $user;
  if ($message['id'] == 'webform_submission' && $message['module'] == 'webform') {
    $eid = $message['params']['email']['eid'];
    $nid = $message['params']['email']['nid'];
    
    if ($settings = email_wrappers_load_settings($nid, $eid)) {
      $params = $message['params'];
      $params['settings'] = $settings;
      $params['message'] = $message;

      drupal_mail('email_wrappers', 'wf_submission', $message['to'], user_preferred_language($account), $params);
      $message['send'] = FALSE;
    }
  }
}

/**
 * Render email message body.
 *
 * Concat message & template content fragments and perform token replacement.
 *
 * @param $eid
 * Webform email id.
 *
 * @param $message
 * Email message array.
 *
 * @param $settings
 * Email Wrappers settings for this email.
 *
 * @return
 * Email message body, formatted for multipart MIME.
 */
function email_wrappers_render_email_body($eid, $message, $settings) {
  $eid = $message['params']['email']['eid'];
  $boundary = $message['params']['boundary'];
  $html_raw = str_replace('%html_message', $settings['html_message'], $settings['html_template']);
  $text_raw = str_replace('%text_message', $settings['text_message'], $settings['text_template']);
  
  $multi_body  = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed;
Content-Transfer-Encoding: 8bit

$text_raw

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed;
Content-Transfer-Encoding: 8bit

$html_raw

";
  
  // perform webform token replacement.
  return  _webform_filter_values($multi_body, $message['params']['node'], $message['params']['submission'], $message['params']['node']->webform['emails'][$eid], TRUE);
}


/**
 * List available email template nodes.
 *
 * @return
 * An array of node titles keyed to nid.
 */
function _email_wrappers_list_templates() {
  $options = array('0' => t('- Select -'));
  $results = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'email_wrapper')
    ->execute();
  while ($record = $results->fetchAssoc()) {
    $options[$record['nid']] = $record['title'];
  }
  return $options;
}

/**
 * Load template settings for a specific webform & email
 *
 * @param $nid
 * Webform node id
 *
 * @param $eid
 * Webform email id
 *
 * @return
 * Keyed array of settings. Array keys:
 *   nid - Webform node id
 *   eid - Webform email id
 *   tid - email template node id
 *   html_message - HTML version of the message portion of this email.
 *   html_template - HTML template value, shared by any emails that use a given template
 *   text_message - plaintext version of the message portion of this email.
 *   text_template - plaintext template value, shared by any emails that use a given template
 */
function email_wrappers_load_settings($nid, $eid) {
  static $settings;
  
  if (!isset($settings[$nid][$eid])) {
    $query = db_select('email_wrappers_webform', 'e');
    $query->join('field_data_email_wrapper_html_template', 'f', 'e.tid = f.entity_id');
    $query->join('field_data_email_wrapper_text_template', 't', 'e.tid = f.entity_id');
    $query->fields('e', array('nid', 'eid', 'tid', 'html_message', 'text_message', 'bcc_email'))
      ->condition('e.nid', $nid)
      ->condition('eid', $eid);
    $query->addField('f', 'email_wrapper_html_template_value', 'html_template');
    $query->addField('t', 'email_wrapper_text_template_value', 'text_template');

    $results = $query->execute();

    $settings[$nid][$eid] = $results->fetchAssoc();
  }

  return $settings[$nid][$eid];
}


/**
 * Load email settings from db.
 *
 * @param $nid
 * Node id.
 *
 * @return
 * associative array of defaults taken from the template node.
 */
function email_wrappers_load_defaults_from_template($nid) {

  $node = node_load($nid);


  // So appaently retrieving field values can't just rely on the node->lang property.
  // When the node language is set (example: en) these fields still store values under 'und'.
  // This leads to mass confusion if you're trying to use the node language setting to fish
  // for field values directly in the node object. True story.

  $subject = field_get_items('node', $node, 'email_wrapper_subject');
  $from_name = field_get_items('node', $node, 'email_wrapper_from_name');
  $from_mail = field_get_items('node', $node, 'email_wrapper_from_email');
  $reply_to_email = field_get_items('node', $node, 'email_wrapper_reply_to_email');
  $bcc_email = field_get_items('node', $node, 'email_wrapper_bcc_email');
  $html_template = field_get_items('node', $node, 'email_wrapper_html_template');
  $html_message = field_get_items('node', $node, 'email_wrapper_html_message');
  $text_template = field_get_items('node', $node, 'email_wrapper_text_template');
  $text_message = field_get_items('node', $node, 'email_wrapper_text_message');

  return array(
    'subject' => $subject[0]['value'],
    'from_name' => $from_name[0]['value'],
    'from_mail' => $from_mail[0]['value'],
    'reply_to_email' => $reply_to_email[0]['value'],
    'bcc_email' => $bcc_email[0]['value'],
    'html_template' => $html_template[0]['value'],
    'html_message' => $html_message[0]['value'], 
    'text_template' => $text_template[0]['value'],
    'text_message' => $text_message[0]['value'],
  );

}

/**
 * Translate template node BCC field values into a comma-separated list.
 *
 * @param $node
 * email template node object.
 *
 * @return
 * returns BCC field values as a comma-separated string.
 */
function _email_wrappers_concat_bcc($node) {
  $bccs = array();
  $lang = $node->language;
  foreach ($node->email_wrapper_bcc_email[$lang] as $bcc) {
    $bccs[] = $bcc['value'];
  }
  return implode(',', $bccs);
}

/**
 * Toggle email header form elements to "custom" and set a default value.
 *
 * Webform does some interesting things with form elements in the "email header details" section
 * of the e-mail add/edit form.
 *
 * @param $form
 * form array
 *
 * @param $field_key
 * Valid options: subject, from_name, from_address
 *
 * @param $value
 * default value for the "custom" textfield.
 */
function _email_wrappers_webform_option_defaults(&$form, $field_key, $value) {
    $form[$field_key . '_option']['default']['#value'] = '';
    $form[$field_key . '_option']['custom']['#value'] = 'custom';
    $form[$field_key . '_custom']['#value'] = $value;
}

/**
 * Ajax callback for template select box.
 */
function email_wrappers_email_ajax($form, $form_state) {
  return $form;
}
