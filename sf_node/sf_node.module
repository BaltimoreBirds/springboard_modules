<?php

/**
 * @file
 * Integrates the core node object and various node related modules with the Salesforce API.
 */


/**
 * Implementation of hook_menu().
 */
function sf_node_menu() {
  /*
   $items['node/%/salesforce-management'] = array(
   'title' => 'Salesforce Management',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('sf_node_salesforce_management_form', 1),
   'access arguments' => array('sync nodes with salesforce'),
   'type' => MENU_LOCAL_TASK,
   'file' => 'sf_node.admin.inc',
   );
   $items['node/%/download'] = array(
   'title' => 'Export Errors',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('sf_node_results_download_form', 1),
   'access arguments' => array('sync nodes with salesforce'),
   'file' => 'sf_node_report.inc',
   'weight' => 7,
   'type' => MENU_LOCAL_TASK,
   );

   return $items;
   */
}

/**
 * Implementation of hook_perm().
 */
function sf_node_perm() {
  return array('sync nodes with salesforce');
}

/**
 * Implementation of hook_form_alter().
 */
function sf_node_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'salesforce_management_api_settings_form') {
    $form['sf_node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node integration'),
      '#description' => t('Salesforce node integration settings.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -1,
    );
    $form['sf_node']['sf_node_delete_action_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('When a node is deleted, keep the Salesforce record.'),
      '#default_value' => variable_get('sf_node_delete_action_enabled', FALSE),
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function sf_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  switch ($op) {
    case 'load':
      $node->salesforce = salesforce_management_api_id_load('node_' . $node->type, $node->nid);

      // add the author's salesforce ids to the node so they can be sync'd
      if (salesforce_manangement_api_fieldmap_exists('node_' . $node->type)) {
        $ids = _sf_node_load_user_salesforce_ids($node->uid);
        if (!empty($ids)) {
          $node->salesforce_account_id = $ids->salesforce_account_id;
          $node->salesforce_contact_id = $ids->salesforce_contact_id;
        }
      }
      break;

    case 'insert':
      if (salesforce_manangement_api_fieldmap_exists('node_' . $node->type) && !$node->updated_by_salesforce) {
        sf_queue_insert($node->nid, 'node_' . $node->type, 'upsert');
      }
      break;

    case 'update':
      if (salesforce_manangement_api_fieldmap_exists('node_' . $node->type)) {
        $action = 'upsert';
        $salesforce = salesforce_management_api_id_load('node_' . $node->type, $node->nid);
        // if the node has already been exported, put back into queue as update
        if ($salesforce['fieldmap'] && $salesforce['sfid']) {
          $action = 'update';
        }
        // don't put into queue if salesforce did the updating
        if (!$node->updated_by_salesforce) {
          sf_queue_insert($node->nid, 'node_' . $node->type, $action);
        }
      }
      break;

    case 'delete':
      if (salesforce_manangement_api_fieldmap_exists('node_' . $node->type)) {
        $salesforce = salesforce_management_api_id_load('node_' . $node->type, $node->nid);
        // delete the object in salesforce (maybe make a setting)
        if ($salesforce['fieldmap'] && $salesforce['sfid']) {
          // Are delete actions enabled globally?
          if (variable_get('sf_node_delete_action_enabled', FALSE)) {
            // Insert a delete action into the queue.
            sf_queue_insert($node->nid, 'node_' . $node->type, 'delete');
          }
          // Delete this node from {salesforce_management_object_map} table.
          salesforce_management_api_id_delete('node_' . $node->type, $node->nid);
        }
      }
      break;

  }
}

/**
 * Implemenation of salesforce_management_field_map().
 */
function sf_node_salesforce_management_field_map($op, $drupal, $salesforce) {
  // the queue needs to be aware of any node types that are set to export
  if (substr($drupal, 0, 5) == 'node_') { //#301 - only respond to node fieldmaps
    switch ($op) {
      case 'insert':
        // add the node type the queue processing order array
        queue_processor_add_type($drupal);
        break;

      case 'delete':
        // remove the node type from the queue processing order array
        queue_processor_remove_type($drupal);
        break;
    }
  }
}

/**
 * Implementation of queue_fieldmap_assignment_alter().
 */
function sf_node_queue_fieldmap_assignment_alter(&$data) {
  $pos = strpos($data->type, 'node_');
  // account for node_ being at the start of the string
  if (!($pos === FALSE)) {
    $result = db_query("SELECT fieldmap, dedupe_key FROM {salesforce_management_field_map} WHERE drupal = '%s'", $data->type);
    $fieldmap = db_fetch_array($result);
    $data->fieldmap = $fieldmap['fieldmap'];
  }
}

/**
 * Implemenation of queue_preprocess_batch_alter().
 */
function sf_node_queue_preprocess_batch_alter(&$batch) {
  $pos = strpos($batch['type'], 'node_');
  if (!($pos === FALSE)) {

    switch ($batch['action']) {
      case 'upsert':
      case 'update':
        // get any objects that have already been exported to salesforce. these will be used when generating the export objects and cut down on api calls
        $objects = queue_processor_get_objects_in_batch($batch['sfids'], $batch['fieldmap']);
        foreach ($batch['records'] as $record) {
          $node = node_load((int) $record->oid, NULL, TRUE);
          // determine which nodes have already been exported. use their sfids to create an array of salesforce objects to pass to the object creation function
          $object = salesforce_management_api_fieldmap_export_create($batch['fieldmap'], $node, $record->sfid, $objects);
          // add the object to the batch record
          $record->object = $object;
        }
        break;

      case 'delete':

        break;
    }
  }
}

/**
 * Implemenation of hook_queue_postprocess_batch().
 */
function sf_node_queue_postprocess_batch($batch, $responses, $item_count) {
  $pos = strpos($batch['type'], 'node_');
  if (!($pos === FALSE)) {
    switch ($batch['action']) {
      case 'upsert':
      case 'update':
        // create an array of ids for the newly exported nodes
        $sfids = array();

        for ($i = 0; $i < $item_count; $i++) {
          if ($responses[$i]->success) {
            $sfids[$responses[$i]->id] = $batch['records'][$i]->oid;
          }
        }

        watchdog('salesforce node', t('Importing !count node records', array('!count' => count($sfids))), NULL, WATCHDOG_INFO);

        // import the nodes
        import_node_updates($sfids, $batch['fieldmap']);
        break;

      case 'delete':

        break;
    }
  }
}

/**
 * Implementation of queue_report_item_name().
 */
function sf_node_queue_report_item_title_alter(&$row) {
  $pos = strpos($row['type'], 'node_');
  if (!($pos === FALSE)) {
    $title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", (int) $row['oid']));
    $row['title'] = $title;
  }
}

/**
 * Implementation of hook_fieldmap_objects_alter().
 */
function sf_node_fieldmap_objects($type) {
  $objects = array();

  // Define the data fields available for Drupal objects.
  if ($type == 'drupal') {
    // Add a definition for each node type.
    foreach (node_get_types() as $type) {
      // Define the node type object with the node ID field.
      $objects['node_' . $type->type] = array(
        'label' => t('@name node', array('@name' => $type->name)),
        'fields' => array(
          'nid' => array(
            'label' => t('Node ID'),
            'type' => SALESFORCE_FIELD_SOURCE_ONLY,
          ),
        ),
      );

      // Add a title field if the node type has one.
      if ($type->has_title) {
        $objects['node_' . $type->type]['fields']['title'] = array(
          'label' => check_plain($type->title_label),
          'type' => SALESFORCE_FIELD_REQUIRED,
        );
      }

      // Add a body field if the node type has one.
      if ($type->has_body) {
        $objects['node_' . $type->type]['fields']['body'] = array('label' => check_plain($type->body_label));
      }

      // Add the rest of the core fields.
      $objects['node_' . $type->type]['fields'] += array(
        'type' => array('label' => t('Node type')),
        'status' => array('label' => t('Is the node published?')),
        'promote' => array('label' => t('Is the node promoted?')),
        'created' => array('label' => t('Created timestamp')),
        'uid' => array('label' => t("Author's user ID")),
        'mail' => array('label' => t("Author's email")),
        'name' => array('label' => t("Author's username")),
        'salesforce_account_id' => array('label' => t("Author's Salesforce Account ID")),
        'salesforce_contact_id' => array('label' => t("Author's Salesforce Contact ID")),
        'blank' => array('label' => t("(blank)")),
      );
    }

    // Add CCK fields to the node object definitions.
    if (module_exists('content')) {
      // Loop through each of the content types.
      foreach (content_types() as $type) {
        // Add each of the fields to the node object definition.
        foreach ((array) $type['fields'] as $field) {
          $type_key = 'node_' . $type['type'];
          $field_key = $field['field_name'];
          $objects[$type_key]['fields'][$field_key] = array(
            'label' => check_plain($field['widget']['label']),
            'group' => t('CCK fields'),
          );
          // Choose a handler based on the type of the CCK field.
          switch ($field['type']) {
            // TODO: Decide if we want to make more specific handlers...
            // case 'text':
            // For example, I might set a handler for text fields that takes
            // the selected input format into account.
            case 'filefield':
              $objects[$type_key]['fields'][$field_key]['export'] = '_sf_node_export_cck_file';
              $objects[$type_key]['fields'][$field_key]['import'] = '_sf_node_import_cck_file';
              break;
            case 'nodereference':
              $objects[$type_key]['fields'][$field_key]['export'] = '_sf_node_export_cck_nodereference';
              $objects[$type_key]['fields'][$field_key]['import'] = '_sf_node_import_cck_nodereference';
              $objects[$type_key]['fields'][$field_key . '__title'] = array(
                'label' => t('@label (title only)', array('@label' => $field['widget']['label'])),
                'group' => t('CCK fields'),
                'export' => '_sf_node_export_cck_nodereference_title',
                'import' => '_sf_node_import_cck_nodereference_title',
              );
              break;
            case 'userreference':
              $objects[$type_key]['fields'][$field_key]['export'] = '_sf_node_export_cck_userreference';
              $objects[$type_key]['fields'][$field_key]['import'] = '_sf_node_import_cck_userreference';
              $objects[$type_key]['fields'][$field_key . '__name'] = array(
                'label' => t('@label (username only)', array('@label' => $field['widget']['label'])),
                'group' => t('CCK fields'),
                'export' => '_sf_node_export_cck_userreference_name',
                'import' => '_sf_node_import_cck_userreference_name',
              );
              break;
            case 'link':
              $objects[$type_key]['fields'][$field_key]['export'] = '_sf_node_export_cck_link';
              $objects[$type_key]['fields'][$field_key]['import'] = '_sf_node_import_cck_link';
              break;
            default:
              $objects[$type_key]['fields'][$field_key]['export'] = '_sf_node_export_cck_default';
              $objects[$type_key]['fields'][$field_key]['import'] = '_sf_node_import_cck_default';
          }

          // If the field was a date field, add the "To" date if enabled.
          if ($field['type'] == 'date' && !empty($field['todate'])) {
            $objects[$type_key]['fields'][$field_key . '_todate'] = array(
              'label' => t('@label (to date)', array('@label' => $field['widget']['label'])),
              'group' => t('CCK fields'),
              'export' => '_sf_node_export_cck_todate',
              'import' => '_sf_node_import_cck_todate',
            );
          }
        }
      }
    }
  }

  return $objects;
}

function _sf_node_export_cck_nodereference($source, $field) {
  $data = $source->$field;

  // look up SF object id for the referenced node
  $nid = $data[0]['nid'];
  $sfid = NULL;
  if ($nid) {
    $sfid = db_result(db_query(
      "SELECT sfid FROM {salesforce_management_object_map} WHERE oid=%d AND drupal_type LIKE 'node_%%';",
      $nid
    ));
  }
  return $sfid;
}

function _sf_node_import_cck_nodereference(&$node, $key, $value) {
  $data = $node->$key;

  if (!empty($value)) {
    // convert SF object id to Drupal nid
    $nid = db_result(db_query(
      "SELECT oid FROM {salesforce_management_object_map} WHERE sfid='%s' AND drupal_type LIKE 'node_%%';",
      $value
    ));
    if ($nid) {
      $data[0]['nid'] = $nid;
      $node->$key = $data;
    }
  }
}

function _sf_node_export_cck_nodereference_title($source, $field) {
  $field = substr($field, 0, -7); // remove '__title' to get the node field key
  $data = $source->$field;
  
  // look up title of the referenced node
  $nid = $data[0]['nid'];
  $title = '';
  if ($nid) {
    $title = db_result(db_query("SELECT title FROM {node} WHERE nid=%d;", $nid));
  }
  return $title;
}

function _sf_node_import_cck_nodereference_title(&$node, $key, $value) {
  $data = $node->$key;

  if (!empty($value)) {
    // find most recently-saved Drupal node with title matching the string from SF
    $nid = db_result(db_query("SELECT nid FROM {node} WHERE title LIKE '%s' ORDER BY changed DESC LIMIT 1;", $value));
    if ($nid) {
      $data[0]['nid'] = $nid;
      $node->$key = $data;
    }
  }
}

function _sf_node_export_cck_userreference($source, $field) {
  $data = $source->$field;

  // look up SF object id for the referenced user
  $uid = $data[0]['uid'];
  $sfid = NULL;
  if ($uid) {
    $sfid = db_result(db_query(
      "SELECT sfid FROM {salesforce_management_object_map} WHERE oid=%d AND drupal_type='user';",
      $uid
    ));
  }
  return $sfid;
}

function _sf_node_import_cck_userreference(&$node, $key, $value) {
  $data = $node->$key;

  if (!empty($value)) {
    // convert SF object id to Drupal uid
    $uid = db_result(db_query(
      "SELECT oid FROM {salesforce_management_object_map} WHERE sfid='%s' AND drupal_type='user';",
      $value
    ));
    if ($uid) {
      $data[0]['uid'] = $uid;
      $node->$key = $data;
    }
  }
}

function _sf_node_export_cck_userreference_name($source, $field) {
  $field = substr($field, 0, -6); // remove '__name' to get the node field key
  $data = $source->$field;
  
  // look username of the referenced user
  $uid = $data[0]['uid'];
  $name = '';
  if ($uid) {
    $name = db_result(db_query("SELECT name FROM {users} WHERE uid=%d;", $uid));
  }
  return $name;
}

function _sf_node_import_cck_userreference_name(&$node, $key, $value) {
  $data = $node->$key;

  if (!empty($value)) {
    // find Drupal user with name matching the string from SF
    $uid = db_result(db_query("SELECT uid FROM {users} WHERE name LIKE '%s';", $value));
    if ($uid) {
      $data[0]['uid'] = $uid;
      $node->$key = $data;
    }
  }
}


// Returns the basic value of a CCK field from $array[0]['value'].
function _sf_node_export_cck_default($source, $field) {
  // Get the data array for the field.
  $data = $source->$field;

  // Return the first value; currently doesn't support multiple value fields.
  return $data[0]['value'];
}

// Returns the basic value of a CCK field from $array[0]['value'].
function _sf_node_import_cck_default(&$node, $key, $value) {
  $data = $node->$key;

  $data[0]['value'] = $value;

  $node->$key = $data;
}

// Returns the url value of a CCK link.
function _sf_node_export_cck_link($source, $field) {
  // Get the data array for the field.
  $data = $source->$field;

  // Return the first value; currently doesn't support multiple value fields.
  return $data[0]['url'];
}

// Sets the url and title values of a CCK link.
function _sf_node_import_cck_link(&$node, $key, $value) {
  $data = $node->$key;

  $data[0]['title'] = $data[0]['url'] = $value;

  $node->$key = $data;
}

// Returns the todate for a CCK date field.
function _sf_node_export_cck_todate($source, $field) {
  // Get the name of the actual CCK field.
  // drupal_* string functions are not necessary since these are machine names.
  $key = substr($field, 0, strlen($field) - 7);

  // Get the data array for the field.
  $data = $source->$key;

  // Return the to date from the field data.
  return $data[0]['value2'];
}

// Returns the todate for a CCK date field.
function _sf_node_import_cck_todate(&$node, $key, $value) {
  // drupal_* string functions are not necessary since these are machine names.
  $key = substr($key, 0, strlen($key) - 7);

  $data = $node->$key;

  $data[0]['value2'] = $value;

  $node->$key = $data;
}

// Returns the url of a CCK file field.
function _sf_node_export_cck_file($source, $field) {
  global $base_url;
  // Get the data array for the field.
  $data = $source->$field;

  // Return the first value; currently doesn't support multiple value fields.
  if (!empty($data[0]['filepath'])) {
    return $base_url . '/' . $data[0]['filepath'];
  }
  return '';
}

function _sf_node_import_cck_file(&$node, $key, $value) {
  $data = $node->$key;
  if (!empty($value)) {
    global $base_url;
    // drupal_* string functions are not necessary since these are machine names.
    $key = substr($key, 0, strlen($key) - 7);
    $data = $node->$key;
    $data[0]['filepath'] = str_replace($base_url . '/', '', $value); // strip the base url if found
    $node->$key = $data;
  }
}

/**
 * Imports data from Salesforce back into nodes.
 *
 * @param $sfids
 *  An array of Salesforce object ids to import
 * @param $fieldmap
 *  The fieldmap to apply to the imported objects
 *
 */
function import_node_updates($sfids, $fieldmap) {
  if (!empty($sfids)) {

    $sf = salesforce_management_api_connect();
    if ($sf) {
      try {
        $objects = _normalize_salesforce_response($sf->retrieve(array_keys($sfids), $fieldmap)); // grab all salesforce objects in the batch
      }
      catch (Exception $e) {
        watchdog('salesforce user', t('Failed to retrieve objects from Salesforce. Drupal nodes will not be updated.'), NULL, WATCHDOG_CRITICAL);
      }

      // load the fieldmap data.
      $map = salesforce_management_api_fieldmap_load($fieldmap);
      // load drupal object definition
      $drupal = salesforce_management_api_fieldmap_objects_load('drupal', $map['drupal']);
      // load salesforce object definition
      $salesforce = salesforce_management_api_fieldmap_objects_load('salesforce', $map['salesforce']);

      // process each node
      foreach ($objects as $object) {
        // load the node
        $node = node_load($sfids[$object->Id]);
        if ($nid = update_node_values($node, $object, $map, $drupal, $salesforce)) {
          module_invoke_all('sf_node_node_updated', $node, $object);
        }
      }
    }
    else {
      watchdog('salesforce user', t('Failed to connect to Salesforce. Drupal nodes will not be updated.'), NULL, WATCHDOG_CRITICAL);
      // TODO: MOVE RECORDS TO A PLACE WHERE THEY CAN BE IMPORTED LATER
    }
  }
}

/**
 * Imports data from Salesforce into a node.
 *
 * @param $node
 *   The node that is being exported
 * @param $object
 *   The Salesforce object that represents the node
 * @param $map
 *   The field map used for the export
 * @param $drupal
 *   The Drupal type (node_TYPE)
 * @param $salesforce
 *   The Salesforce object type
 *
 * @return
 *   The nid of the imported node or FALSE on failure.
 */
function update_node_values(&$node, &$object, $map, $drupal, $salesforce) {

  // Loop through the fields on the fieldmap.
  foreach ($map['fields'] as $value => $key) {
    // Otherwise set the field on the export object to the value of the source field if it's present on the source object.
    $sf_value = $object->$value;
    $rule = $map['businessSD'][$value];

    // Pull the current Drupal value of the field
    $drupal_value = $drupal['fields'][$key]['export'] ? $drupal['fields'][$key]['export']($node, $key, $object, $value) : $node->$key;

    // Pick which value to apply
    $map_value = salesforce_management_api_import_fieldmap_control($rule, $key, $sf_value, $node, $drupal_value);

    // Let the import handler do it's work
    if (isset($drupal['fields'][$key]['import'])) {
      $drupal['fields'][$key]['import']($node, $key, $map_value);
    }
    else {
      $node->$key = $map_value;
    }

    // call hook_sf_node_update_node_value() to allow custom value alterations
    foreach (module_implements('sf_node_update_node_value') as $module) {
      $function = $module . '_sf_node_update_node_value';
      $function($value, $key, $node, $object, $sf_value, $drupal_value, $rule, $drupal['fields'][$key]);
    }
  }
  // add something to the node we can check on nodeapi so that we don't put it back into the queue
  $node->updated_by_salesforce = TRUE;

  node_save($node);
  return $node->nid;
}

/**
 * Implementation of sf_import_updated_objects().
 */
function sf_node_sf_import_updated_objects($objects, $type, $fieldmap, $import_new_objects) {
  $pos = strpos($type, 'node_');
  if (!($pos === FALSE)) {
    // load the fieldmap data.
    $map = salesforce_management_api_fieldmap_load($fieldmap);
    // load drupal object definition
    $drupal = salesforce_management_api_fieldmap_objects_load('drupal', $map['drupal']);
    // load salesforce object definition
    $salesforce = salesforce_management_api_fieldmap_objects_load('salesforce', $map['salesforce']);

    foreach ($objects->records as $object) {
      // look up the node id
      $nid = db_result(db_query("SELECT oid FROM {salesforce_management_object_map} WHERE sfid = '%s' and drupal_type = '%s'", $object->Id, $type));

      if ($nid) {
        $node = node_load($nid);
        update_node_values($node, $object, $map, $drupal, $salesforce);
        module_invoke_all('sf_node_node_updated', $node, $object);
      }
      elseif ($import_new_objects) {
        module_load_include('inc', 'node', 'node.pages');
        $node = new stdClass();
        $node->type = str_replace('node_', '', $type);
        node_object_prepare($node);
        update_node_values($node, $object, $map, $drupal, $salesforce);
        module_invoke_all('sf_node_node_imported', $node, $object);

        salesforce_management_api_id_save($type, $node->nid, $object->Id, $fieldmap);

        // stick the node back in the queue so that it can be exported to SF with any additional drupal values
        sf_queue_insert($node->nid, $type, 'update');
      }
    }
  }

}

/**
 * Returns a user's salesforce contact and account ids if available
 */
function _sf_node_load_user_salesforce_ids($uid) {

  $result = db_query("SELECT
    CASE
      WHEN
        instr(u.data, 'salesforce_account_id') THEN substring(u.data, instr(u.data, 'salesforce_account_id')+29, 18)
      ELSE
        NULL
      END AS salesforce_account_id,
    CASE
      WHEN instr(u.data, 'salesforce_contact_id') THEN substring(u.data, instr(u.data, 'salesforce_contact_id')+29, 18)
      ELSE
        NULL
    END  AS salesforce_contact_id
    FROM {users} u
    WHERE u.uid = %d", $uid);

  return db_fetch_object($result);

}

/**
 * Set business rule to map SF values with Drupal object and fieldmap.
 */
function salesforce_management_api_import_fieldmap_control($rule, $key, $sf_value = NULL, &$node, $drupal_value = NULL) {
  switch ($rule) {
    case 'blank':
      // if Drupal object value is null then overwrite
      return ($drupal_value == '' ? $sf_value : $drupal_value);

    case 'append':
      // append with the Drupal object value
      return $drupal_value . ' ' . $sf_value;

    case 'always':
      // always overwrite with the Drupal value
      return $sf_value;

    case 'never':
      // never overwrite with the Drupal value
      return $drupal_value;
  }

}
