<?php

function springboard_m2t_menu() {
  $items = array();

  $items['admin/config/system/m2t'] = array(
    'title' => 'Message to Target',
    'description' => '',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('springboard_m2t_admin'),
    'page callback' => 'drupal_get_form',
  );

  $items['sunlightlookup'] = array(
    'title' => 'Get district info from sunlight',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => '_springboard_mt2_sunlight_lookup',
    'access arguments' => array(1),
  );
  $items['censuslookup'] = array(
    'title' => 'Get district info from sunlight',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => '_springboard_mt2_census_lookup',
    'access arguments' => array(1),
  );
  $items['geocodiolookup'] = array(
    'title' => 'Get district info from geocodio',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => '_springboard_mt2_geocodio_lookup',
    'access arguments' => array(1),
  );
  return $items;
}

function springboard_m2t_webform_user_profile_fields_alter(&$fields, $node) {
  if($node->type == 'springboard_m2t') {
    foreach ($fields as $index => $profile_field) {
      if ($profile_field['name'] != 'sbp_address_line_2'){
        $fields[$index]['mandatory'] = 1;
      }
      if ($profile_field['name'] == 'sbp_state'){
        unset($fields[$index]);
      }
      if ($profile_field['name'] == 'mail'){
        $fields[$index]['weight'] = 14;
      }
    } 
  }
}

function springboard_m2t_node_insert($node) {

  module_load_include('inc', 'webform', 'includes/webform.components');

  $fields[] = array(
    'nid' => $node->nid,
    'form_key' => 'springboard_m2t_phone',
    'pid' => 0,
    'name' => t('Phone Number'),
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => 13,
    'email' => 1,
    'extra' => array(
    'description' => t(''),
    ),
  );

  $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'springboard_m2t_message',
      'pid' => 0,
      'name' => t('Message'),
      'type' => 'textarea',
      'mandatory' => 1,
      'weight' => 18,
      'email' => 1,
      'extra' => array(
      'description' => t('Customize your message'),
    ),
  );

  $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'sbp_state',
      'pid' => 0,
      'name' => t('State'),
      'type' => 'select',
      'mandatory' => 1,
      'weight' => 12,
      'email' => 1,
      'extra' => array(
      'options_source' => 'united_states', //may have to remove some.
      'aslist' => 'Y',
      'multiple' => 0,
    ),
  );

  // Add the component to the Webform.
  foreach ($fields as $field) {
    $cid = webform_component_insert($field);
    if ($field['name'] == 'sbp_state') {
          $map = array(
          'nid' => $node->nid,
          'cid' => $cid,
          'map_id' => $field['name'],
        );
        drupal_write_record('webform_user_component_map', $map);
    }
  }
}

function springboard_m2t_form_alter(&$form, &$form_state, $form_id) {
  if(isset($form['#node'])) {
    $node = $form['#node'];
    if($node->type == 'springboard_m2t') {
      $form['#attributes']['class'][] = 'geocode-form';
      if (variable_get('springboard_m2t_geocoder', '') == 'googlej') {
        $form['#attached']['js'][]  = array('data' => 'https://maps.googleapis.com/maps/api/js?sensor=false', 'type' => 'external');
      }
      $form['#attached']['js'][] = array('data' => drupal_get_path('module', 'springboard_m2t') . '/js/m2t.js'); 
      $form['#attached']['js'][] = array(
        'data' => array(
          'springboard_m2t' => array(
              'geocoder' => variable_get('springboard_m2t_geocoder', ''),
            ),
          ),
        'type' => 'setting',
      );
    }
  }
}

function _springboard_mt2_sunlight_lookup($latitude = FALSE, $longitude = FALSE) {
  
  $responses = array();

  if (!empty($_POST['coords'][0]) && !$latitude) {
    $latitude = $_POST['coords'][0];
    $longitude = $_POST['coords'][1]; 
  }

  if($latitude) {
    $is_long = preg_match('/([0-9.-]+).+?([0-9.-]+)/', $longitude);
    $is_lat = preg_match('/([0-9.-]+).+?([0-9.-]+)/', $latitude);
  }

  $apikey = variable_get('springboard_m2t_apikey', '');

  $fquery =  array(
    'latitude' => $latitude,
    'longitude' => $longitude,
    'apikey' => $apikey,
  );
  $squery =  array(
    'lat' => $latitude,
    'long' => $longitude,
    'apikey' => $apikey,
  );

  if ($is_lat && $is_long) {

    setcookie('m2t_user_coords', $latitude . ' ' . $longitude);
    
    $fed = url('https://congress.api.sunlightfoundation.com/districts/locate', array('query' => $fquery));
    $state = url('http://openstates.org/api/v1/legislators/geo', array('query' => $squery));

    //there's no real way to rate limit this in the script if a form gets lots of traffic
    $responses['fed'] = drupal_http_request($fed);
    usleep(500000);
    $responses['state'] = drupal_http_request($state);
    
    foreach (responses as $key => $response) {
      if(!isset($response->status_message) || $response->status_message != 'OK') {
        $response[$key] = array('error' => 'Sunlight server returned invalid response');
      }
    }

    if (isset($responses['state']->data)) {
      $districts = array();
      $data = json_decode($responses['state']->data);
      if($data) {
        foreach ($data as $legislator) {
          $districts[]['district'] = $legislator->district;
          $districts[]['state'] = $legislator->state;
          $districts[]['boundary_id'] = $legislator->boundary_id;
        }
      }
      $responses['state']->districts = $districts;
    }
    return drupal_json_output($responses);
  }
  else {
    return drupal_json_output(array('error' => 'coordinates were not valid.'));
  }
}

function _springboard_mt2_census_lookup() {
  
  $responses = array();
  $address = $_POST['onelineaddress'];

  $query =  array(
    'address' => $address,
    'benchmark' => 'Public_AR_Current',
    'vintage' => 'Current_Current',
    'layers' => '54,55,56,57,58,59',
    'format' => 'json'
  );
 
  if (!empty($address)) {

    //setcookie('m2t_user_coords', $latitude . ' ' . $longitude);
    
    $url = url('http://geocoding.geo.census.gov/geocoder/geographies/onelineaddress', array('query' => $query));

    $response = drupal_http_request($url);
 
    $data = json_decode($response->data);
    $matches = $data->result->addressMatches;
    $num = count($matches);
    foreach ($matches as $index => $match) {
      $coords[$index] = $match->coordinates;
      $all_districts[$index] = $match->geographies;
    }
    $districts = array();
    foreach ($all_districts as $key => $all_district) {
      foreach ($all_district as $district_type => $district_info) {
        foreach ($district_info as $index => $district) {
          $districts[$district_type][$district->NAME]['district'] = $district->NAME;
          $districts[$district_type][$district->NAME]['state'] = $district->STATE;
          $districts[$district_type][$district->NAME]['lsadc'] = $district->LSADC;
       } 
    }
  }
    return drupal_json_output($districts);
  }
  else {
    return drupal_json_output(array('error' => 'coordinates were not valid.'));
  }
}


function _springboard_mt2_geocodio_lookup() {
  
  $responses = array();
  $address = $_POST['onelineaddress'];

  $query =  array(
    'q' => $address,
    'api_key' => variable_get('springboard_m2t_geocodio_apikey',''),
    'fields' => 'cd,stateleg',
  );
 
  if (empty($address)) {

    //setcookie('m2t_user_coords', $latitude . ' ' . $longitude);
    
    $url = url('https://api.geocod.io/v1/geocode', array('query' => $query));

    $response = drupal_http_request($url);

    if (!isset($response->status_message) || $response->status_message != 'OK') {
      return drupal_json_output(array('error' => 'Server returned invalid response'));
    }
    if (!empty($response->data)) {

      $data = json_decode($response->data);
      $districts = $data->results[0]->fields;

      return drupal_json_output($districts);
    }
  }
  else {
    return drupal_json_output(array('error' => 'address not supplied'));
  }
}

function springboard_m2t_admin() {
  
  $form = array();

  $form['geo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Geocoding configuration'),
  );
  $options = array(
    'googlej' => 'Google Javascript API (Free, no rate limit, no api key)',
    'geocodio' => 'Geocod.io (Free, 2,000 requests per day, api key is required)',
    'smartystreets' => 'SmartyStreets (Pay, API key is required)',



  );
  $form['geo']['springboard_m2t_geocoder'] = array(
    '#type' => 'radios',
    '#title' => t('Active Geocoding service'),
    '#options' => $options,
    '#description' => t('Choose the geocoding service to use. All but Google Javascript API require an API Key'),
    '#default_value' => variable_get('springboard_m2t_geocoder', ''),
  );

  $form['geo']['smarty'] = array(
    '#type' => 'fieldset',
    '#title' => t('Smarty Streets configuration'),
  );

  $form['geo']['smarty']['springboard_m2t_smarty_authid'] = array(
    '#type' => 'textfield',
    '#title' => t('Smarty Streets Auth ID'),
    '#description' => t(''),
    '#default_value' => variable_get('springboard_m2t_smarty_authid', ''),
  );

  $form['geo']['smarty']['springboard_m2t_smarty_authtoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Smarty Streets Auth Token'),
    '#description' => t(''),
    '#default_value' => variable_get('springboard_m2t_smarty_authtoken', ''),
  );

  $form['geo']['smarty']['springboard_m2t_smarty_htmltoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Smarty Streets HTML token'),
    '#description' => t(''),
    '#default_value' => variable_get('springboard_m2t_smarty_htmltoken', ''),
  );


  $form['geo']['springboard_m2t_geocodio_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Geocod.io API Key'),
    '#description' => t(''),
    '#default_value' => variable_get('springboard_m2t_geocodio_apikey', ''),
  );

  $form['districts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Districting configuration'),
  );

  $form['districts']['springboard_m2t_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Sunlight API Key'),
    '#description' => t(''),
    '#default_value' => variable_get('springboard_m2t_apikey', ''),
  );



  return system_settings_form($form);
}

