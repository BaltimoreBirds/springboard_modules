<?php
/**
 * @file
 * Drupal hooks.
 */

/**
 * Implements hook_menu().
 */
function springboard_dw_queue_legacy_menu() {
  // Page to view progress.
  $items['admin/config/services/springboard-dw/dashboard'] = array(
    'title'            => 'Springboard Data Warehouse - Progress Dashboard',
    'description'      => 'View queueing progress.',
    'page callback'    => 'springboard_dw_queue_legacy_dashboard',
    'access arguments' => array('administer springboard data warehouse'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function springboard_dw_queue_legacy_form_springboard_dw_settings_form_alter(&$form, &$form_state, $form_id) {

  $form['springboard_dw_queue_legacy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Queueing legacy data'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => 'Queing legacy Advocacy messages for ingestion to the data wareshouse requires gathering information from the advocacy server.',
  );

  $form['springboard_dw_queue_legacy']['springboard_dw_advocacy_api_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Advocacy server url: (I.E https://advocacy.gospringboard.io or https://advocacy-staging.gospringboard.io)'),
    '#default_value' => variable_get('springboard_dw_advocacy_api_endpoint', NULL),
    '#required' => TRUE,
  );

  $form['springboard_dw_queue_legacy']['springboard_dw_advocacy_authentication_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Advocacy server authentication token'),
    '#default_value' => variable_get('springboard_dw_advocacy_authentication_token', NULL),
    '#required' => TRUE,
  );
}

/**
 * Page callback for progress dashboard.
 */
function springboard_dw_queue_legacy_dashboard() {
  $output = 'PROCESSED - Records in springboard_data_warehouse table: <strong>';
  $query = db_select('springboard_data_warehouse', 'w')
    ->fields('w', array('id'))
    ->execute();
  $output .= db_query("SELECT count(id) FROM {springboard_data_warehouse}")->fetchField();

  $output .= '</strong><br>IN PROCESS - Records in queue table: <strong>';
  $output .= db_query("SELECT count(item_id) FROM {queue} WHERE name = 'springboard_dw_export'")->fetchField();
  $output .= '</strong><br>TO BE PROCESSED - Records where created date > current highwater mark: ';
  $output .= '<br><em>* Note, these numbers may not reach zero on sites where content is actively being created. Newly created records get submitted immediately to the DW but remain above the highwater mark used by the legacy data processing script.</em>';

  $output .= '<br>--contacts: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('contact');
  $output .= db_query("SELECT count(uid) FROM {users} WHERE created > :highwater", array(':highwater' => $highwater))->fetchField();

  $output .= '<br>--donations: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('donation');
  $output .= db_query("SELECT count(did) FROM {fundraiser_donation} WHERE created > :highwater", array(':highwater' => $highwater))->fetchField();

  $output .= '<br>--actions: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('action');
  $output .= db_query("SELECT count(s.sid) FROM {webform_submissions} s INNER JOIN {node} n ON s.nid = n.nid WHERE n.type IN ('sba_message_action', 'sba_social_action', 'springboard_petition') AND s.submitted > :highwater", array(':highwater' => $highwater))->fetchField();

  $output .='<br>--messages: unknown (highwater mark not supported)';

  $output .= '<br>--petition messages: ';
  // $nbr_records = db_query("SELECT count(nid) FROM {joke}")->fetchField();
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('petition message');
  $output .= db_query("SELECT count(s.sid) FROM {webform_submissions} s INNER JOIN {node} n ON s.nid = n.nid WHERE n.type = 'springboard_petition' AND s.submitted > :highwater", array(':highwater' => $highwater))->fetchField();

  $output .= '<br>--forms: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('form');
  $output .= db_query('SELECT count(n.nid) FROM {node} n INNER JOIN {webform} w ON n.nid = w.nid WHERE n.created > :highwater', array(':highwater' => $highwater))->fetchField();

  $output .= '<br>--submissions: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('submission');
  $excluded_types = springboard_dw_get_donation_types();
  $excluded_types[] = 'springboard_petition';
  $excluded_types[] = 'sba_message_action';
  $excluded_types[] = 'sba_social_action';
  $output .= db_query("SELECT count(s.sid) FROM {webform_submissions} s INNER JOIN {node} n ON s.nid = n.nid WHERE n.type NOT IN (:excluded_types) AND s.submitted > :highwater", array(':highwater' => $highwater, ':excluded_types' => $excluded_types))->fetchField();

  $output .= '<br>--payments: ';
  $highwater = springboard_dw_queue_legacy_get_highwater_mark('payment');
  $output .= db_query('SELECT count(transaction_id) FROM {commerce_payment_transaction} WHERE created > :highwater', array(':highwater' => $highwater))->fetchField();

  return $output;
}

/**
 * Gets timestamp of the last queued item.
 *
 * Can be reset to 0 for a particular type by passing the --reset flag.
 *
 * @param string $type
 *   Type of queue record to create. eg contact, petition, message action, etc.
 *
 * @return int
 *   Number of seconds since the Unix Epoch.
 */
function springboard_dw_queue_legacy_get_highwater_mark($type) {
  return db_query('SELECT highwater FROM {springboard_data_warehouse_queue_legacy} WHERE type = :type', array(':type' => $type))->fetchAssoc();
}

/**
 * Records timestamp of last queued item so the next batch can start afterwards.
 *
 * @param string $type
 *   Type of queue record to create. eg contact, petition, message action, etc.
 * @param int $timestamp
 *   of seconds since the Unix Epoch.
 *   Number of seconds since the Unix Epoch.
 *
 * @return mixed
 *   FALSE on error. Otherwise, SAVED_NEW or SAVED_UPDATED.
 */
function springboard_dw_queue_legacy_set_highwater_mark($type, $timestamp) {

  $record = array('type' => $type, 'highwater' => $timestamp);
  return drupal_write_record('springboard_data_warehouse_queue_legacy', $record, 'type');
}

/**
 * Resets all highwater marks to zero.
 */
function springboard_dw_queue_legacy_reset_highwater_marks() {
  $types = array(
    'contact',
    'form',
    'submission',
    'action',
    'message',
    'donation',
    'petition message',
    'payment',
  );
  foreach ($types as $type) {
    springboard_dw_queue_legacy_set_highwater_mark($type, 0);
  }
}
