<?php
/**
 * @file
 * Base Springboard data warehouse functions.
 */

/**
 * Implements hook_menu().
 */
function springboard_dw_menu()
{
  $items['admin/config/services/springboard-dw'] = array(
    'title'            => 'Springboard Data Warehouse',
    'description'      => 'Configuration settings for Springboard Data Warehousing.',
    'page callback'    => 'springboard_dw_settings_page',
    'access arguments' => array('administer springboard data warehouse'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'includes/springboard_dw.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_schema().
 */
function springboard_dw_schema()
{

  $schema['springboard_data_warehouse'] = array(
    'description' => 'The base table for data warehousing',
    'fields'      => array(
      'id'        => array(
        'description' => 'The auto-increment field identifier for this data warehouse record.',
        'type'        => 'serial',
        'unsigned'    => true,
        'not null'    => true,
      ),
      'type'      => array(
        'description' => 'The type of item that has been warehoused.',
        'type'        => 'varchar',
        'length'      => 64
      ),
      'drupal_id' => array(
        'description' => 'The unique Drupal id for this item.',
        'type'        => 'numeric',
        'unsigned'    => true
      ),
      'created'   => array(
        'description' => 'The timestamp this record was created.',
        'type'        => 'numeric',
        'unsigned'    => true
      )
    ),
    'primary key' => array('id')
  );

  return $schema;
}

/**
 * Implements hook_update().
 */
function springboard_dw_update_7001()
{
  $schema = module_invoke('springboard_dw', 'schema');

  if (db_table_exists('springboard_data_warehouse') == false) {
    db_create_table('springboard_data_warehouse', $schema['springboard_data_warehouse']);
  }
}

/**
 * Get all entity properties by way of a wrapper.
 * @param $wrapper
 * @return array
 */
function get_all_entity_properties($wrapper)
{
  $values = array();
  foreach ($wrapper->getPropertyInfo() as $key => $val) {
    $values[$key] = $wrapper->$key->value();
  }

  return $values;
}

/**
 * Implements hook_fundraiser_donation_success().
 * @param $donation
 */
function springboard_dw_fundraiser_donation_success($donation)
{

  // Get the Drupal data warehouse queue
  $queue = DrupalQueue::get("springboard_dw_export");

  // Queue the donation object which should not be in the queue, so there's no need to check if this item is warehoused
  $donation_item = springboard_dw_map_donation_item($donation);
  $queue->createItem($donation_item);

  // Create the user item in the queue if not warehoused
  if (!springboard_dw_item_is_warehoused('contact', $donation->uid)) {
    $contact_item = springboard_dw_map_contact_item($donation);
    $queue->createItem($contact_item);
  }

  // Create the form item in the queue if not warehoused
  if (!springboard_dw_item_is_warehoused('form', $donation->node->nid)) {
    $form_item = springboard_dw_map_form_item($donation);
    $queue->createItem($form_item);
  }

}

/**
 * Map the donation object to an array formatted for an API call for data warehousing.
 * @param $donation
 * @return array
 */
function springboard_dw_map_donation_item($donation)
{
  // Get the donation object details and prep for warehousing (sb_donation)
  $donation_item = array();

  $donation_item['queue_type'] = 'donation';
  $donation_item['donation_id'] = $donation->did;
  $donation_item['group_id'] = ''; // Will come later
  $donation_item['amount'] = $donation->amount;
  $donation_item['currency'] = $donation->currency;
  $donation_item['quantity'] = $donation->donation['quantity'];

  // Todo: Where do these come from ?
  $donation_item['quick_submit'] = '';
  $donation_item['click_submit'] = '';

  $donation_item['ms'] = $donation->donation['ms'];
  $donation_item['cid'] = $donation->donation['cid'];
  $donation_item['first_name'] = $donation->donation['first_name'];
  $donation_item['last_name'] = $donation->donation['last_name'];
  $donation_item['email'] = $donation->donation['mail'];
  $donation_item['address'] = $donation->donation['address'];
  $donation_item['address_line_2'] = $donation->donation['address_line_2'];
  $donation_item['city'] = $donation->donation['city'];
  $donation_item['state'] = $donation->donation['state'];
  $donation_item['country'] = $donation->donation['country'];
  $donation_item['zip'] = $donation->donation['zip'];
  $donation_item['referrer'] = $donation->donation['referrer'];
  $donation_item['initial_referrer'] = $donation->donation['initial_referrer'];
  $donation_item['payment_method'] = $donation->donation['payment_method'];
  $donation_item['recurs_monthly'] = $donation->donation['recurs_monthly'];
  $donation_item['search_engine'] = $donation->donation['search_engine'];
  $donation_item['search_string'] = $donation->donation['search_string'];
  $donation_item['user_agent'] = $donation->donation['user_agent'];
  $donation_item['device_type'] = $donation->donation['device_type'];
  $donation_item['device_name'] = $donation->donation['device_name'];
  $donation_item['device_os'] = $donation->donation['device_os'];
  $donation_item['device_browser'] = $donation->donation['device_browser'];
  $donation_item['form_id'] = $donation->nid;
  $donation_item['user_id'] = $donation->uid;
  $donation_item['submission_id'] = $donation->sid;
  $donation_item['status'] = $donation->status;
  $donation_item['transaction_id'] = $donation->txn_id;
  $donation_item['gateway'] = $donation->gateway['id'];
  $donation_item['card_type'] = $donation->data['payment_fields']['credit']['card_type'];
  $donation_item['card_last_4'] = $donation->data['payment_fields']['credit']['card_number'];
  $donation_item['card_expiration_month'] = $donation->data['payment_fields']['credit']['card_expiration_month'];
  $donation_item['card_expiration_year'] = $donation->data['payment_fields']['credit']['card_expiration_year'];

  # Todo: fix these
  $donation_item['bank_account_mask'] = '';
  $donation_item['ip_address'] = '';

  $donation_item['created_at'] = date('U');
  $donation_item['updated_at'] = date('U');

  // Todo: Add the extra props attributes
  $donation_item['extra_props'] = json_encode(array());

  return $donation_item;
}

/**
 * Map the donation object to a contact array formatted for an API call for data warehousing.
 * @param $donation
 * @return array
 */
function springboard_dw_map_contact_item($donation)
{

  $user_obj = entity_metadata_wrapper('user', $donation->user);
  $user_data = get_all_entity_properties($user_obj);

  // Get the user account details and prep for warehousing (sb_contact)
  $contact_item = array();
  $contact_item['queue_type'] = 'contact';
  $contact_item['contact_id'] = $donation->uid;
  $contact_item['group_id'] = ''; // Will come later
  $contact_item['username'] = $user_data['name'];
  $contact_item['email'] = $user_data['mail'];
  $contact_item['first_name'] = $user_data['sbp_first_name'];
  $contact_item['last_name'] = $user_data['sbp_last_name'];
  $contact_item['address'] = $user_data['sbp_address'];
  $contact_item['address_line_2'] = $user_data['sbp_address_line_2'];
  $contact_item['city'] = $user_data['sbp_city'];
  $contact_item['state'] = $user_data['sbp_state'];
  $contact_item['country'] = $user_data['sbp_country'];
  $contact_item['zip'] = $user_data['sbp_zip'];
  $contact_item['ms'] = $user_data['sbp_ms'];
  $contact_item['cid'] = $user_data['sbp_cid'];
  $contact_item['referrer'] = $user_data['sbp_referrer'];
  $contact_item['initial_referrer'] = $user_data['sbp_initial_referrer'];
  $contact_item['search_engine'] = $user_data['sbp_search_engine'];
  $contact_item['search_string'] = $user_data['sbp_search_string'];
  $contact_item['user_agent'] = $user_data['sbp_user_agent'];
  $contact_item['salesforce_account_id'] = $user_data['sbp_salesforce_account_id'];
  $contact_item['salesforce_contact_id'] = $user_data['sbp_salesforce_contact_id'];
  $contact_item['created_at'] = $user_data['created'];
  $contact_item['updated_at'] = $user_data['created'];

  // Todo: Add the extra props attributes
  $contact_item['extra_props'] = json_encode(array());

  return $contact_item;

}

/**
 * Map the donation object to a form array formatted for an API call for data warehousing.
 * @param $donation
 * @return array
 */
function springboard_dw_map_form_item($donation)
{

  // Get the user account details and prep for warehousing (sb_contact)
  $form_item = array();
  $form_item['queue_type'] = 'form';
  $form_item['form_id'] = $donation->node->nid;
  $form_item['group_id'] = ''; // Will come later
  $form_item['form_type'] = $donation->node->type;
  $form_item['name'] = $donation->node->title;
  $form_item['url'] = drupal_get_path_alias('node/' . $donation->node->nid);
  $form_item['created_at'] = $donation->node->created;
  $form_item['updated_at'] = $donation->node->changed;

  // Todo: Add the extra props attributes
  $form_item['extra_props'] = json_encode(array());

  return $form_item;

}

/**
 * Sends an item to the data warehouse receiver app.
 */
function springboard_dw_export_item($item)
{
  // watchdog('springboard data warehouse', 'sending item to the warehouse...');
  if ($item['queue_type'] == 'donation') {
    return springboard_dw_donation($item);
  } elseif ($item['queue_type'] == 'contact') {
    return springboard_dw_contact($item);
  } elseif ($item['queue_type'] == 'form') {
    return springboard_dw_form($item);
  } elseif ($item['queue_type'] == 'advocacy') {
    return springboard_dw_advocacy($item);
  }
  // ... other queues
}

/**
 * Returns a new instance of Guzzle Http client.
 * @return \GuzzleHttp\Client
 */
function springboard_api_client()
{

  // Composer Vendor autoload
  drush_autoload("sites/all/vendor/autoload.php");

  // Load Guzzle client
  $guzzle = new GuzzleHttp\Client(['http_errors' => false]);

  // Return an instance of the client
  return $guzzle;
}

/**
 * Removes the queue type used to distinguish api calls and adds authentication token and client ID to the item params.
 * @param $item
 */
function springboard_api_prep_call($item)
{
  // Remove the queue type from the item
  unset($item['queue_type']);

  // Add the authentication token and client id
  $item['authenticationToken'] = variable_get('authentication_token', NULL);
  $item['sbClientId'] = variable_get('client_id', NULL);

  return $item;
}

/**
 * Returns the endpoint used to make API calls to the data warehouse receiver app.
 */
function springboard_dw_api_endpoint($endpoint)
{
  return 'http://159.203.115.210/'.ltrim($endpoint,'/');
}

/**
 * Helper function to query the data warehouse table to determine if this item has been recorded as being warehoused already.
 * @param $type
 * @param $drupal_id
 */
function springboard_dw_item_is_warehoused($type, $drupal_id)
{

  // Query items from the data warehouse table that match the item id and type
  $query = db_query("select * from {springboard_data_warehouse} where drupal_id = :drupal_id and type = :type", array(':type' => $type, ':drupal_id' => $drupal_id));

  // If an item is found, we do not need to warehouse this item
  if ($query->rowCount() > 0) {
    return True;
  }

  // If this item is not warehoused, return false
  return False;

}

/**
 * Send a contact record to the Springboard data warehouse API.
 * @param $item
 */
function springboard_dw_contact($item)
{

  // Define the endpoint
  $endpoint = springboard_dw_api_endpoint('contact/create');

  // Instantiate an API client instance
  $APIClient = springboard_api_client();

  // Clean up the item and add authentication to the form params
  $item = springboard_api_prep_call($item);

  // Attempt Guzzle client request
  $res = $APIClient->request('POST', $endpoint, array(
    'form_params' => $item
  ));

  // Response body
  $resBody = json_decode($res->getBody());

  // Looks like the api response was good
  if ($res->getStatusCode() == 200) {
    // Insert the user account into the Drupal data warehouse table
    db_insert('springboard_data_warehouse')->fields(array(
      'type'      => 'contact',
      'drupal_id' => $item['contact_id'],
      'created'   => time()
    ))->execute();

    return True;

  } else {
    drush_log('Error sending contact API call.', 'warning');
    drush_print($endpoint.'?'.url_encode($item));
    drush_print_r($resBody);

    // Respond back with failure to retry in the queue
    return False;
  }

}

/**
 * Send a donation record to the Springboard data warehouse API.
 * @param $item
 */
function springboard_dw_donation($item)
{

  // Define the endpoint
  $endpoint = springboard_dw_api_endpoint('donation/create');

  // Instantiate an API client instance
  $APIClient = springboard_api_client();

  // Clean up the item and add authentication to the form params
  $item = springboard_api_prep_call($item);

  // Attempt Guzzle client request
  $res = $APIClient->request('POST', $endpoint, array(
    'form_params' => $item
  ));


  // Response body
  $resBody = json_decode($res->getBody());

  // If the response is successful, add the user_warehoused parameter to the Drupal user account so we can skip this check in subsequent donations
  if ($res->getStatusCode() == 200) {
    // Insert the user account into the Drupal data warehouse table
    db_insert('springboard_data_warehouse')->fields(array(
      'type'      => 'donation',
      'drupal_id' => $item['donation_id'],
      'created'   => time()
    ))->execute();

    // Respond back successfully to the queue to remove the item
    return True;

  } else {
    drush_log('Error sending donation API call.', 'warning');
    drush_print($endpoint.'?'.http_build_query($item));
    drush_print_r($resBody);

    // Respond back with failure to retry in the queue
    return False;
  }

}

/**
 * Send a form record to the Springboard data warehouse API.
 * @param $item
 */
function springboard_dw_form($item)
{

  // Define the endpoint
  $endpoint = springboard_dw_api_endpoint('form/create');

  // Instantiate an API client instance
  $APIClient = springboard_api_client();

  // Clean up the item and add authentication to the form params
  $item = springboard_api_prep_call($item);

  // Attempt Guzzle client request
  $res = $APIClient->request('POST', $endpoint, array(
    'form_params' => $item
  ));

  // Response body
  $resBody = json_decode($res->getBody());

  // Looks like the api response was good
  if ($res->getStatusCode() == 200) {
  //if ($res->getStatusCode() == 200 && $resBody['message'] == 'Successfully created form.') {

    // Insert the user account into the Drupal data warehouse table
    db_insert('springboard_data_warehouse')->fields(array(
      'type'      => 'form',
      'drupal_id' => $item['form_id'],
      'created'   => time()
    ))->execute();

    // Respond back successfully to the queue to remove the item
    return True;

  } else {

    // Log the API error
    drush_log('Error sending form API call.', 'warning');
    drush_print($endpoint.'?'.http_build_query($item));
    drush_print_r($resBody);

    // Respond back with failure to retry in the queue
    return False;
  }

}

/**
 * Send an advocacy record to the Springboard data warehouse API.
 * @param $item
 */
function springboard_dw_advocacy($item)
{
  // Todo: build this out
  return True;
}

/**
 * Implements hook_cron_queue_info().
 */
function springboard_dw_cron_queue_info()
{
  $queues['springboard_dw_export'] = array(
    'worker callback' => 'springboard_dw_export_item',
    'time'            => 60,
    'skip on cron'    => true,
  );

  return $queues;
}

/**
 * STOLEN FROM drupal_cron_run. Needs improvement.
 * Ideas:
 *  - Add a time argument.
 *  - Add a queue argument (like salesforce queue).
 *  - Make sure this is locked correctly.
 */
function springboard_dw_process_queue()
{
  $callback = 'springboard_dw_export_item';

  $end = time() + 60;

  // Get an instance of the Drupal data warehouse queue
  $queue = DrupalQueue::get('springboard_dw_export');

  // Lock and claim an item for queue processing
  while (time() < $end && ($item = $queue->claimItem())) {

    // If the api responds back correctly, remove the queue item
    if (call_user_func($callback, $item->data)) {
      $queue->deleteItem($item);
    } else {
      // Release the item back onto the queue for retry
      //
      drush_log('Bad API call, releasing item. ', 'warning');
      drush_print_r($item);
      $queue->releaseItem($item);
      break;
    }

    /*
     * WHAT DO WE BENEFIT WITH USING WATCHDOG EXCEPTION DIRECTLY?
     *
        try {
          $queue->deleteItem($item);

        } catch (Exception $e) {

          // In case of exception log it and leave the item in the queue
          // to be processed again later.
          watchdog_exception('cron', $e);

          // Release the item back onto the queue for retry
          // $queue->releaseItem($item);
        }
    */

  }

}