<?php

/**
 * @file
 * Installs any global tables needed for Salesforce integration.
 */


/**
 * Implementation of hook_install().
 */
function salesforce_management_api_install() {
  drupal_install_schema('salesforce_management_api');
}

/**
 * Implementation of hook_uninstall().
 */
function salesforce_management_api_uninstall() {
  variable_del('salesforce_management_api_connect');
  variable_del('salesforce_management_api_wsdl_updated');
  variable_del('salesforce_management_api_wsdl_file_path');
  drupal_uninstall_schema('salesforce_management_api');
}

/**
 * Implementation of hook_schema().
 */
function salesforce_management_api_schema() {
  $schema['salesforce_management_object_map'] = array(
    'description' => t('Drupal to Salesforce object mapping table'),
    'fields' => array(
      'drupal_type' => array(
        'description' => 'Drupal object type (e.g. "node", "comment")',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'oid' => array(
        'description' => 'Specific Drupal object identifier (e.g. node id or comment id)',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '0',
      ),
      'sfid' => array(
        'description' => 'Salesforce object identifier (e.g. "node", "comment")',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'fieldmap' => array(
        'description' => 'Fieldmap id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'drupal_object' => array('drupal_type', 'oid'),
      'sfid' => array('sfid'),
    ),
    'primary key' => array('drupal_type', 'oid'),
  );
  $schema['salesforce_management_field_map'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'fieldmap' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'drupal' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'salesforce' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'action' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'automatic' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'fields' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'text',
        'not null' => TRUE,
      ),
      'business' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'text',
        'not null' => TRUE,
      ),
      'businessSD' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'text',
        'not null' => TRUE,
      ),
      'dedupe_key' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
        'default' => '',
      ),
      'rid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'recordtype_id' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'validation' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('fieldmap'),
  );

   $schema['salesforce_management_api_error'] = array(
    'description' => t('Drupal to Salesforce error reporting table'),
    'fields' => array(
      'drupal_type' => array(
        'description' => 'Drupal object type (e.g. "node", "user")',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'did' => array(
        'description' => 'Specific Drupal object identifier (e.g. node id or user id)',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '0',
      ),
      'error' => array(
        'description' => 'Salesforce error',
        'type' => 'text',
        'size' => 'normal',
      ),
      'fieldmap' => array(
        'description' => 'Fieldmap',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
    'error_time' => array(
          'type' => 'datetime',
          'not null' => true,
       ),
    ),
   );
   return $schema;
}

/**
 * Update 6101: Convert oid columns to strings, so they can store very large numbers and non-numeral characters.
 */
function salesforce_management_api_update_6101() {

  $updates = array();

  db_change_field($updates, 'salesforce_management_object_map', 'oid', 'oid', array('type' => 'varchar', 'length' => 32, 'default' => '0', 'not null' => TRUE));
  db_change_field($updates, 'salesforce_management_api_error',  'did', 'did', array('type' => 'varchar', 'length' => 32, 'default' => '0', 'not null' => TRUE));

  return $updates;
}

/**
 * Encrypt sensitive settings in the variable table.
 * @see http://drupal.org/project/encrypt
 */
function salesforce_management_api_update_6300() {
  $ret = array();
  module_load_include('module', 'encrypt');

  $username = variable_get('salesforce_management_api_username', '');
  $password = variable_get('salesforce_management_api_password', '');
  $token = variable_get('salesforce_management_api_token', '');

  if ($username) {
    variable_set('salesforce_management_api_username', encrypt($username));
    $ret[] = array('success' => TRUE, 'query' => 'The Salesforce Management API Username has been encrypted.');
  }
  if ($password) {
    variable_set('salesforce_management_api_password', encrypt($password));
    $ret[] = array('success' => TRUE, 'query' => 'The Salesforce Management API Password has been encyrpted.');
  }
  if ($token) {
    variable_set('salesforce_management_api_token', encrypt($token));
    $ret[] = array('success' => TRUE, 'query' => 'The Salesforce Management Token has been encyrpted.');
  }

  // Set the WSDL path variable
  variable_set('salesforce_management_api_wsdl_file_path', drupal_get_path('module', 'salesforce_management_api') . '/toolkit/soapclient');
  $ret[] = array('success' => TRUE, 'query' => 'The Salesforce Management WSDL path has been set to the module path.');

  return $ret;
}

/**
 * Set the WSDL path variable, in SB2 it was the module's directory, this is now configurable in SB3
 */
function salesforce_management_api_update_6301() {
  $ret = array();

  variable_set('salesforce_management_api_wsdl_file_path', drupal_get_path('module', 'salesforce_management_api') . '/toolkit/soapclient');
  $ret[] = array('success' => TRUE, 'query' => 'The Salesforce Management WSDL path has been set to the module path.');

  return $ret;
}