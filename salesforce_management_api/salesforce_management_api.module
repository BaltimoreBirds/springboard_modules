<?php
/**
 * @file
 * Defines an API that enables modules to interact with the Salesforce server.
 *
 * 1. Get your security token.
 * 2. Get the Toolkit.
 * 3. Download your WSDL.
 */
 // TODO: remove these path constants because they make me sad when I'm examining hook_menu().
ini_set("soap.wsdl_cache_enabled", "0");

// Define directory paths for the Toolkit and WSDL files.
define('SALESFORCE_DIR', drupal_get_path('module', 'salesforce_management_api'));
define('SALESFORCE_DIR_TOOLKIT', SALESFORCE_DIR .'/toolkit');
define('SALESFORCE_DIR_SOAPCLIENT', SALESFORCE_DIR_TOOLKIT .'/soapclient');
define('SALESFORCE_DIR_WSDL', variable_get('salesforce_management_api_wsdl_file_path', file_directory_path()));

// Define Drupal paths for various parts of the Salesforce UI.
define('SALESFORCE_PATH_ADMIN', 'admin/settings/salesforce-management');
define('SALESFORCE_PATH_FIELDMAPS', 'admin/settings/salesforce-management/fieldmap');
define('SALESFORCE_PATH_UPDATE_WSDL', 'admin/settings/salesforce-management/update-wsdl');
define('SALESFORCE_PATH_TEST', 'admin/settings/salesforce-management/test');

// Define field importing requirements.
// TODO: I believe we need to use bitwise operators instead.
// Reference this tutorial - http://www.litfuel.net/tutorials/bitwise.htm
define('SALESFORCE_FIELD_OPTIONAL', 0);
define('SALESFORCE_FIELD_REQUIRED', 1);
define('SALESFORCE_FIELD_SOURCE_ONLY', 2);

// Define reporting levels for watchdog messages.
define('SALESFORCE_LOG_NONE', 0);
define('SALESFORCE_LOG_SOME', 5);
define('SALESFORCE_LOG_ALL', 10);


/**
 * Implementation of hook_menu().
 */
function salesforce_management_api_menu() {
  $items[SALESFORCE_PATH_ADMIN] = array(
    'title' => 'Salesforce Management',
    'description' => 'Administer settings related to your Salesforce integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_settings_form'),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_ADMIN .'/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Add tab for WSDL upload
  $items[SALESFORCE_PATH_UPDATE_WSDL] = array(
    'title' => 'Update WSDL',
    'description' => 'Upload a new WSDL XML file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_update_wsdl_form'),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_TEST] = array(
    'title' => 'Test Connection',
    'page callback' => 'salesforce_management_api_test_connection',
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );


  $items[SALESFORCE_PATH_FIELDMAPS] = array(
    'title' => 'Fieldmaps',
    'description' => 'Administer fieldmap relationships between Drupal objects and Salesforce objects.',
    'page callback' => 'salesforce_management_api_fieldmap_admin',
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer salesforce management'),
    'weight' => 0,
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/add'] = array(
    'title' => 'Add',
    'description' => 'Create a new fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_fieldmap_add_form'),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/edit'] = array(
    'title' => 'Edit fieldmap',
    'description' => 'Edit an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_fieldmap_edit_form', 4),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/clone'] = array(
    'title' => 'Clone a fieldmap',
    'description' => 'Clone an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_fieldmap_clone_form', 4),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/delete'] = array(
    'title' => 'Delete fieldmap',
    'description' => 'Delete an existing fieldmap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_management_api_fieldmap_delete_form', 4),
    'access arguments' => array('administer salesforce management'),
    'type' => MENU_CALLBACK,
    'file' => 'salesforce_management_api.admin.inc',
  );
  $items[SALESFORCE_PATH_FIELDMAPS .'/%/dedupe'] = array(
   'title' => 'Dedupe fieldmap',
   'description' => 'Dedupe key for mapping fieldmap.',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('salesforce_management_api_fieldmap_dedupe_form', 4),
   'access arguments' => array('administer salesforce management'),
   'type' => MENU_CALLBACK,
   'file' => 'salesforce_management_api.admin.inc',
  );
  $items['js/select-drupal-object'] = array(
    'page callback' => 'salesforce_management_api_drupal_object_select',
    'access callback' => 'user_access',
    'access arguments' => array('administer salesforce management'),
    'file' => 'salesforce_management_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['js/select-salesforce-object'] = array(
    'page callback' => 'salesforce_management_api_salesforce_object_select',
    'access callback' => 'user_access',
    'access arguments' => array('administer salesforce management'),
    'file' => 'salesforce_management_api.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function salesforce_management_api_perm() {
  return array('administer salesforce management');
}

/**
 * Creates an object used for communicating with the Salesforce server and
 *   performs a login to verify the API credentials.
 *
 * @param $username
 *   Uername for Salesforce. An email address, most likely. If none passed,
 *     sitewide creds will be used
 * @param $password
 *   Password to Salesforce account.
 * @param $token
 *   Security token from Salesforce.
 * @param $reconnect
 *   By default, subsequent calls to this function will return the same, already
 *     connected Salesforce object as preceding calls. Setting this variable to
 *     TRUE will cause a new connection to be established instead.
 * @return
 *   The DrupalSalesforce object used to communicate with the Salesforce server
 *     if successful or FALSE if a connection could not be established.
 */
function salesforce_management_api_connect($username = FALSE, $password = FALSE, $token = FALSE, $reconnect = FALSE) {
  static $sf = FALSE;

  // Return the previously connected object.
  if ($sf && !$reconnect) {
    return $sf;
  }

  $sf = _salesforce_management_api_open_connection($username, $password, $token);
  if (is_object($sf)) {
    return $sf;
  }
  else {
    return FALSE;
  }
}


/**
 * Local function to actually make the Salesforce connection.
 * If successful, this function returns a DrupalSalesforce object.
 * If there is an error, an int is returned. See the SALESFORCE_ERROR_* defines at the top of this file
 */
function _salesforce_management_api_open_connection($username = FALSE, $password = FALSE, $token = FALSE) {
  $errors = array();

  // Load up the sitewide API credentials if no others were provided:
  $username = $username ? $username : decrypt(variable_get('salesforce_management_api_username', ''));
  $password = $password ? $password : decrypt(variable_get('salesforce_management_api_password', ''));
  $token = $token ? $token : decrypt(variable_get('salesforce_management_api_token', ''));

  // Fail early if we didn't receive an API username, password, or token.
  if (empty($username) || empty($password) || empty($token)) {
    watchdog('salesforce', 'Connection to Salesforce failed because API credentials have not been set.', array(), WATCHDOG_ERROR);
    if (empty($username)) {
      $errors[] = t('Missing username.');
    }
    if (empty($password)) {
      $errors[] = t('Missing password.');
    }
    if (empty($token)) {
      $errors[] = t('Missing token.');
    }
    return $errors;
  }

  // Include the file that defines the class.
  require_once(drupal_get_path('module', 'salesforce_management_api') .'/salesforce_management.class.inc');

  // Create a new Salesforce object with the API credentials.
  $sf = new DrupalSalesforce($username, $password, $token);

  // Attempt a login, and...
  if (($login_result = $sf->login()) === TRUE) {
    // Return the object if a connection and login were successful, log the event and cache connect info to a variable.
    variable_set('salesforce_management_api_connect', array('status' => 'Connected', 'time' => time()));
    watchdog('salesforce', t('Connection to Salesforce from !ip has been set.', array('!ip' => $_SERVER['REMOTE_ADDR'])));
    return $sf;
  }
  else {
    $sf = FALSE;
    variable_set('salesforce_management_api_connect', array('status' => 'Failed', 'time' => time()));
    watchdog('salesforce', t('Connection to Salesforce failed because API credentials are incorrect.', array()));
    $errors[] = $login_result;
  }
  return $errors;
}


/**
 * Callback for Test Connection page
 */
function salesforce_management_api_test_connection() {
  // Attempt to connect to Salesforce. This will set the salesforce_management_api_connect variable
  $sf = _salesforce_management_api_open_connection();

  $last_connect = variable_get('salesforce_management_api_connect', array('status' => 'Unknown', 'time' => ''));
  if (!$last_connect['status']) {
    $last_connect['status'] = 'Unknown';
    $last_connect['time'] = 0;
  }

  // System status
  $output .= '<p class="sf-status">Salesforce connection: <span class="springboard-connect-status ' . $last_connect['status'] . '">' . $last_connect['status'] . '</span></p>';

  if ($last_connect['status'] == 'Failed' && is_array($sf)) {
    $output .= '<p>Error: ' . implode(' ', $sf) . '</p>';
  }

  // Connection info (status, last date/time)
  if ($last_connect['time']) {
    $output .= '<p><span class"' . $last_connect['status'] . '">' . $last_connect['status'] . '</span> to SF: ' . date('Y-m-d g:i:sA', $last_connect['time']) . '</p>';
  }
  else {
    $output .= '<p><span class"' . $last_connect['status'] . '">Last connected to SF: never</span>';
  }

  return $output;
}

/**
 * Implementation of hook_fieldmap_objects().
 *
 * This will pull a cached version (if possible) of the available SF fields for
 * the object(s) in question. Prevent excess querying!
 */
function salesforce_management_api_fieldmap_objects($type) {
  $objects = array();
  // Define the data fields available for Salesforce objects.
  if ($type == 'salesforce') {
    $cache = cache_get('salesforce_management_api_sf_objects');
    if ($cache->data == '') {
      $sf_objects = array();
      $sf = salesforce_management_api_connect();
      if ($sf) {
        $all_objects = $sf->client->describeGlobal();
        foreach ($all_objects->sobjects as $object) {
          if ($object->createable) {
            $sf_objects[] = $object->name;
          }
        }

        // We need to limit this to 100 objects at a time
        $chunked_objects = array_chunk($sf_objects, 100);
        $result = array();
        foreach ($chunked_objects as $object_set) {
          $tmp = $sf->client->describeSObjects($object_set);
          $result = array_merge($result, $tmp);
        }

        foreach ($result as $key => $object) {
          $objects[$sf_objects[$key]] = array(
            'label' => t($sf_objects[$key]),
            'fields' => array(),
          );
          foreach ($object->fields as $field) {
            $objects[$sf_objects[$key]]['fields'][$field->name] = array(
              'label' => t($field->label),
              'field_type' => $field->type,
              'nillable' => $field->nillable,
              'length' => $field->length,
            );
            if ($field->createable != 1) {
              $objects[$sf_objects[$key]]['fields'][$field->name]['type'] = SALESFORCE_FIELD_SOURCE_ONLY;
            }
            elseif ($field->nillable != 1 && $field->defaultedOnCreate != 1) {
              $objects[$sf_objects[$key]]['fields'][$field->name]['type'] = SALESFORCE_FIELD_REQUIRED;
            }
          }
        }
        cache_set('salesforce_management_api_sf_objects', $objects);
      }
    }
    else {
      $objects = $cache->data;
    }
  }

  return $objects;
}

// Returns an array of system fields that are retrievable from Salesforce.
function salesforce_management_api_fieldmap_system_fields() {
  $fields = array(
    'Id' => array('label' => t('Salesforce ID')),
    'IsDeleted' => array('label' => t('Is the object deleted?')),
    'CreatedById' => array('label' => t('User ID of the creator')),
    'CreatedDate' => array('label' => t('Creation date and time')),
    'LastModifiedById' => array('label' => t('User ID of the last modifier')),
    'LastModifiedDate' => array('label' => t('Last user modification date and time')),
    'SystemModstamp' => array('label' => t('Last user or system modification date and time')),
  );

  return $fields;
}


/**
 * Saves a fieldmap to the database.
 *
 * @param $map;
 *   An array containing the fieldmap data using the following keys and values:
 *   - fieldmap: the numeric index of the fieldmap.
 *   - drupal: the name of a Drupal object.
 *   - salesforce: the name of a Salesforce object.
 *   - action: the action this fieldmap is used for; 'import' or 'export'.
 *   - automatic: whether or not the sync should be automatic
 *   - fields: an array that maps source fields (as keys) to their corresponding
 *       target fields (as values).
 */
function salesforce_management_api_fieldmap_save(&$map) {
  $op = 'insert';

  if ($map['fieldmap']) {
    $primary_keys = array('fieldmap');
    $op = 'update';
  }

  if (is_array($map['fields'])) {
    $map['fields'] = serialize($map['fields']);

  }

  if (is_array($map['business'])) {
    $map['business'] = serialize($map['business']);
  }

  if (is_array($map['businessSD'])) {
    $map['businessSD'] = serialize($map['businessSD']);
  }

  if (is_array($map['validation'])) {
    $map['validation'] = serialize($map['validation']);
  }

  drupal_write_record('salesforce_management_field_map', $map, $primary_keys);

  // fire a hook so that other modules can respond to fieldmap updates
  module_invoke_all('salesforce_management_field_map', $op, $map['drupal'], $map['salesforce']);

}

/**
 * Loads a fieldmap from the database.
 *
 * @param $fieldmap
 *   The index of the fieldmap to load.
 * @return
 *   An array containing the fieldmap data.
 */
function salesforce_management_api_fieldmap_load($fieldmap) {
  static $maps;
  if (!isset($maps[$fieldmap]) && $fieldmap != '') {
    $result = db_query("SELECT * FROM {salesforce_management_field_map} WHERE fieldmap = %d", $fieldmap);
    $map = db_fetch_array($result);
    $map['fields'] = unserialize($map['fields']);
    $map['business'] = unserialize($map['business']);
    $map['businessSD'] = unserialize($map['businessSD']);
    $map['validation'] = unserialize($map['validation']);
    $maps[$fieldmap] = $map;
  }

  return $maps[$fieldmap];
}

/**
 * Clones a fieldmap, updating fields as necessary for a change in action.
 *
 * @param $fieldmap
 *   The index of the fieldmap to clone.
 * @param $action
 *   The action to switch to for the cloned fieldmap.
 * @return
 *   The newly created fieldmap or FALSE if the clone failed.
 */
function salesforce_management_api_fieldmap_clone($fieldmap, $action) {
  // Load the fieldmap from the database.
  $map = salesforce_management_api_fieldmap_load($fieldmap);

  // Return FALSE if the source fieldmap does not exist.
  if (empty($map)) {
    return FALSE;
  }

  // Switch the action and update the fields if necessary.
  if ($map['action'] != $action) {
    $map['action'] = $action;
    $fields = array();

    // Loop through all the fields to reverse the associations.
    foreach ($map['fields'] as $key => $value) {
      // If a value hasn't been set for the old source field, set it now.
      if (empty($fields[$value])) {
        $fields[$value] = $key;
      }
    }

    // Update the fieldmap with the new fields array.
    $map['fields'] = $fields;
  }

  // Save the new fieldmap and return its index.
  salesforce_management_api_fieldmap_save($map);

  return $map;
}

/**
 * Deletes a fieldmap from the database.
 *
 * @param $fieldmap
 *   The index of the fieldmap to delete.
 */
function salesforce_management_api_fieldmap_delete($fieldmap) {
  $result = db_query("SELECT drupal, salesforce FROM  {salesforce_management_field_map} WHERE fieldmap = %d", $fieldmap);
  while ($data = db_fetch_object($result)) {
    $salesforce = $data->salesforce;
    $drupal = $data->drupal;
  }

  db_query("DELETE FROM {salesforce_management_field_map} WHERE fieldmap = %d", $fieldmap);
  db_query("DELETE FROM {salesforce_management_object_map} WHERE fieldmap = %d", $fieldmap);

  // fire a hook so that other modules can respond to fieldmap deletes
  module_invoke_all('salesforce_management_field_map', 'delete', $drupal, $salesforce);
}

/**
 * Returns an array of fieldmaps for use as options in the Forms API.
 *
 * @param $action
 *   Filters the fieldmaps by action.
 * @param $drupal
 *   Filters the fieldmaps by Drupal object.
 * @param $salesforce
 *   Filters the fieldmaps by Salesforce object.
 * @param $automatic
 *   Optional: Filter the fieldmaps to only pull those marked automatic.
 * @return
 *   A FAPI options array of all the matching fieldmaps.
 */
function salesforce_management_api_fieldmap_options($drupal = NULL, $salesforce = NULL, $automatic = FALSE) {
  $options = array();

  $result = db_query("SELECT fieldmap, drupal, salesforce, automatic, dedupe_key FROM {salesforce_management_field_map}");
  while ($map = db_fetch_array($result)) {

    // Skip the fieldmap if it is not for the appropriate Drupal object.
    if (!empty($drupal) && $map['drupal'] != $drupal) {
      continue;
    }


    // Skip the fieldmap if it is not for the appropriate Salesforce object.
    if (!empty($salesforce) && $map['salesforce'] != $salesforce) {
      continue;
    }

   // Skip the fieldmap if it is not for the appropriate Salesforce object.
    if (empty($map['dedupe_key'])) {
      continue;
    }

    // Setup some replacement args for the label.
    $args = array(
      '@drupal' => salesforce_management_api_fieldmap_object_label('drupal', $map['drupal']),
      '@salesforce' => salesforce_management_api_fieldmap_object_label('salesforce', $map['salesforce']),
    );

    $options[$map['fieldmap']] = t('Drupal @drupal to Salesforce @salesforce', $args);
  }

  return $options;
}

/**
 * Returns all or a subset of the objects defined via hook_sf_fieldmap().
 *
 * @param $type
 *   Specify a type to filter the return value to objects of that type.
 * @param $name
 *   Specify an object name to filter the return value to that object alone.
 *     If this parameter is supplied, you must specify the correct type as well.
 * @return
 *   An array of all objects sorted by type with no arguments.  Otherwise an
 *     array of objects filtered as specified by the parameters.
 */
function salesforce_management_api_fieldmap_objects_load($type = NULL, $name = NULL) {
  static $objects = array();

  // If we have not yet cached the object definitions...
  if (empty($objects)) {
    // Find all the Drupal objects defined by hook_sf_fieldmap().
    $objects['drupal'] = module_invoke_all('fieldmap_objects', 'drupal');
    // Get all the Salesforce objects defined by hook_sf_fieldmap().
    $objects['salesforce'] = module_invoke_all('fieldmap_objects', 'salesforce');

    // Allow other modules to modify the object definitions.
    foreach (module_implements('fieldmap_objects_alter') as $module) {
      $function = $module .'_fieldmap_objects_alter';
      $function($objects);
    }
  }

  // If a particular object type was specified...
  if (!empty($type)) {
    // And a particular object was specified...
    if (!empty($name)) {
      // Return that object definition if it exists or FALSE if it does not.
      if (isset($objects[$type][$name])) {
        return $objects[$type][$name];
      }
      else {
        return FALSE;
      }
    }
    else {
      // If no object was specified, return all objects of the specified type or
      // FALSE if the type does not exist
      if (isset($objects[$type])) {
        return $objects[$type];
      }
      else {
        return FALSE;
      }
    }
  }

  return $objects;
}

// Returns the label for the object of the specified type and name.
function salesforce_management_api_fieldmap_object_label($type, $name) {
  // Get the object definition.
  $object = salesforce_management_api_fieldmap_objects_load($type, $name);

  // If no label is specified, return the object name.
  if (empty($object['label'])) {
    return check_plain($name);
  }

  return $object['label'];
}

// Returns a string of description text for the specified fieldmap.
function salesforce_management_api_fieldmap_description() {
  return t('Fieldmap @index maps Salesforce %salesforce objects to Drupal %drupal objects.', array('@index' => $map['fieldmap'], '%drupal' => salesforce_management_api_fieldmap_object_label('drupal', $map['drupal']), '%salesforce' => salesforce_management_api_fieldmap_object_label('salesforce', $map['salesforce'])));
}

/**
 * Returns a FAPI options array for specifying a field from the source object to
 *   associate with the target field.
 *
 * @param $object
 *   The source object whose fields we need to filter into the options array.
 * @param $type
 *   The type of the target field's object.
 * @param $name
 *   The name of the target object.
 * @param $field
 *   The name of the target field.
 * @return
 *   A FAPI options array of all the available fields that can map to the
 *     target field.
 */
function salesforce_management_api_fieldmap_field_options($object, $type = NULL, $name = NULL, $field = NULL) {
  // Define the options array with a blank value.
  $options = array('' => '');

  // TODO: Consider filtering these based on the object definition.  For now
  // this function simply uses any field defined for the source object.

  // Loop through all the fields of the source object.
  foreach ($object['fields'] as $key => $data) {
    // Add the field to the options array in the right options group.
    if (!empty($data['group'])) {
      $options[$data['group']][$key] = $data['label'];
    }
    else {
      $options[t('Core fields')][$key] = $data['label'];
    }
  }

  return $options;
}

/**
 * Creates an object for export to Salesforce based on the supplied source
 *   object and fieldmap.
 *
 * @param $fieldmap
 *   The index of the fieldmap used to filter the source object into the export.
 * @param $source
 *   The source object used to generate the export.
 * @return
 *   An object of the source type ready for export to Salesforce or FALSE if
 *     the operation failed.
 */
function salesforce_management_api_fieldmap_export_create($fieldmap, $source = NULL, $sfid = NULL, &$objects = array()) {
  // Load the fieldmap from the database.
  $map = salesforce_management_api_fieldmap_load($fieldmap);

  // Fail if the fieldmap does not exist.
  if (!$map) {
    return FALSE;
  }

  // Load the source object definition so we know how to get values for its various fields.

  if ($map['action'] == 'import') {
    $source_object = salesforce_management_api_fieldmap_objects_load('salesforce', $map['salesforce']);
  }
  else {
    $source_object = salesforce_management_api_fieldmap_objects_load('drupal', $map['drupal']);
  }

  $object = new stdClass();

  // if $sfid is empty, the object is being exported for the first time
  if (empty($sfid)) {
    // Loop through the fields on the fieldmap.
    foreach ($map['fields'] as $key => $value) {
      // If a handler is specified for retrieving a value for the source field...
      $rule = $map['business'][$key];
      if (isset($source_object['fields'][$value]['export'])) {
        // Get the value for the field from the handler function.
        if ($rule == 'always') { // only add fields that are always set to overwrite when doing an initial export
          $object->$key = $source_object['fields'][$value]['export']($source, $value);
        }
      }
      elseif (isset($source->$value)) {
        // Otherwise set the field on the export object to the value of the source field if it's present on the source object.
        if ($rule == 'always') { // only add fields that are always set to overwrite when doing an initial export
          $object->$key = $source->$value;
        }
      }
    }
   }
   else {
    // pcave: load the object up once here instead of on each iteration of loop. so this will still get called once for
    $salesforce_object = NULL;
    // see if our object is in the passed in object array
    // TODO: REMOVE THIS TEST. THE OBJECT SHOULD BE IN THE ARRAY!!!
    if (!empty($objects)) {
      $index = search_object_array('Id', $sfid, $objects);
      if ($index >= 0) {
        $salesforce_object = $objects[$index];
      }
    }
    else {
      $sf = salesforce_management_api_connect();
      if ($sf) {
        $salesforce_object = $sf->retrieve(array($sfid), $fieldmap);
      }
    }

    // Loop through the fields on the fieldmap.
    foreach ($map['fields'] as $key => $value) {
      // If a handler is specified for retrieving a value for the source field...
      if (isset($source_object['fields'][$value]['export'])) {
        // Get the value for the field from the handler function.
        $drupalValue = $source_object['fields'][$value]['export']($source, $value);
        $rule = $map['business'][$key];
        $fieldKey = $key;
        $mapValue = salesforce_management_api_fieldmap_control($rule , $fieldKey, $drupalValue, $salesforce_object, $map['fieldmap']);
        // do not add the property to the object if the rule is never
        if ($rule != 'never') {
          $object->$key = $mapValue;
        }
      }
      elseif (isset($source->$value)) {
        // Otherwise set the field on the export object to the value of the source
        // field if it's present on the source object.
        $drupalValue = $source->$value;
        $rule = $map['business'][$key];
        $fieldKey = $key;
        $mapValue = salesforce_management_api_fieldmap_control($rule , $fieldKey, $drupalValue, $salesforce_object, $map['fieldmap'], $map['validation'][$key]);
        // do not add the property to the object if the rule is never
        if ($rule != 'never') {
          $object->$key = $mapValue;
        }
      }
    } // foreach
  }

  // only add recordtype if a valid one is assigned to the fieldmap
  if ($map['recordtype_id'] != 0) {
    $object->RecordTypeId = $map['recordtype_id'];
  }

  // add salesforce id if available
  if (!empty($sfid)) {
    $object->Id = $sfid;
  }

  return $object;
}
/**
 * Set bussiness rule to map drupal values with SF
 *   object and fieldmap.
 */

function salesforce_management_api_fieldmap_control($rule, $fieldKey, $drupal = NULL, $data = NULL, $fieldmap = NULL, $validation = NULL) {

  // return if we don't have an object to deal with
  if (empty($data)) {
    return FALSE;
  }

  // inspect the rule
  switch ($rule) {
    case 'blank':
      // if SF object value is null then overwrite
      if ($data->$fieldKey == '') {
        return $drupal;
      }
      else {
        return $data->$fieldKey;
      }
      break;

    case 'append':
      // append with the SF object value
      return $data->$fieldKey . ' ' . $drupal;
      break;

    case 'always':
      // always overwrite with the SF value with the drupal value
      return $drupal;
      break;

    case 'never':
      // never overwrite with the SF value
      return $data->$fieldKey;
      break;
  }
}

/**
 * Loads the Salesforce ID and fieldmap index of a Drupal object.
 *
 * @param $type
 *   The type of the Drupal object you are requesting data for; node or user.
 * @param $id
 *   The associated unique ID used to identify the object in Drupal.
 * @return
 *   An array containing the associated Salesforce object type and ID or an
 *     empty array if no data was found.
 */
function salesforce_management_api_id_load($type, $id) {
  // Query the main ID table for the associated data.
  $result = db_query("SELECT sfid, fieldmap FROM {salesforce_management_object_map} WHERE drupal_type = '%s' AND oid = '%s'", $type, $id);

  // Return an empty array if no data was found.
  if (!$data = db_fetch_array($result)) {
    return array();
  }
  else {
    // Otherwise return the Salesforce object type and ID.
    return $data;
  }
}

/**
 * Loads the best available fieldmap for the given drupal type
 */
function salesforce_management_api_fieldmap_rid_load($rid) {
  $result = db_query("SELECT fieldmap FROM {salesforce_management_field_map} WHERE rid = %d", $rid);

  if (!$data = db_fetch_array($result)) {
    return NULL;
  }

  return $data['fieldmap'];
}

/**
 * Saves the Salesforce ID and fieldmap index of a Drupal object.
 *
 * @param $drupal_type
 *   The type of the Drupal object you are requesting data for; node or user.
 * @param $oid
 *   The associated unique ID used to identify the object in Drupal.
 * @param $sfid
 *   The Salesforce ID of the associated object in the Salesforce database.
 * @param $fieldmap
 *   The index of the fieldmap used to generate the export.
 */
function salesforce_management_api_id_save($drupal_type, $oid, $sfid, $fieldmap) {
  db_query("DELETE FROM {salesforce_management_object_map} WHERE drupal_type = '%s' AND (oid = '%s' OR sfid = '%s')", $drupal_type, $oid, $sfid);
  db_query("INSERT INTO {salesforce_management_object_map} (drupal_type, oid, sfid, fieldmap) VALUES ('%s', '%s', '%s', %d)", $drupal_type, $oid, $sfid, $fieldmap);
}

function salesforce_management_api_id_delete($drupal_type, $oid) {
  db_query("DELETE FROM {salesforce_management_object_map} WHERE drupal_type = '%s' AND oid = '%s'", $drupal_type, $oid);
}

/**
 * Implementation of hook_theme().
 *
 * Registers theme callback for admin screen
 */
function salesforce_management_api_theme($existing, $type, $theme, $path) {
  return array(
    'salesforce_management_api_fieldmap_edit_form_table' => array(
      'file' => 'salesforce_management_api.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    'salesforce_management_api_map_user_role_form' => array(
      'file' => 'salesforce_management_api.admin.inc',
      'arguments' => array(),
    ),

  );
}

/**
 * Saves the Salesforce ID and fieldmap index of a Drupal object.
 *
 * @param $drupal_type
 *   The type of the Drupal object you are requesting data for; node or user.
 * @param $oid
 *   The associated unique ID used to identify the object in Drupal.
 * @param $sfid
 *   The Salesforce ID of the associated object in the Salesforce database.
 * @param $fieldmap
 *   The index of the fieldmap used to generate the export.
 */
function salesforce_management_error_save($drupal_type, $did, $message, $fieldmap)  {
 $error_message = str_replace("<br/>", "" , $message);
 db_query("INSERT INTO {salesforce_management_api_error} (drupal_type, did, error, fieldmap, error_time) VALUES ('$drupal_type', $did, '$error_message', '$fieldmap' ,NOW())");
}

function salesforce_management_api_map_user_role_form() {
  $form['#tree'] = TRUE;

  $drupal_roles = user_roles(TRUE);

  $fieldmaps = array('0' => '-- Please select --');
  $results = db_query("SELECT fieldmap, drupal, salesforce FROM {salesforce_management_field_map} WHERE drupal = 'user'");
  while ($data = db_fetch_object($results)) {
    $fieldmaps[$data->fieldmap] = $data->fieldmap . ': ' . $data->drupal . ' to ' . $data->salesforce;
  }

  $mapped_roles = array();
  $results = db_query("SELECT fieldmap, rid FROM {salesforce_management_role_field_map}");
  while ($data = db_fetch_object($results)) {
    $mapped_roles[$data->rid] = $data->fieldmap;
  }

  foreach ($drupal_roles as $role_id => $role) {
    $form['fieldmap']['rid'][$role_id] = array(
    '#value' => t($role),
    );
    $form['fieldmap']['map'][$role_id] = array(
      '#type' => 'select',
      '#options' => $fieldmaps,
      '#default_value' => $mapped_roles[$role_id],
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Map Drupal Roles'),
  );

  return $form;
}

function salesforce_management_api_map_user_role_form_submit($form, &$form_state) {
  // remove existing mappings
  db_query("DELETE FROM {salesforce_management_role_field_map}");
  foreach ($form_state['values']['fieldmap']['map'] as $key => $value) {
    if ($value > 0) {
      $sql = "INSERT INTO {salesforce_management_role_field_map} SET fieldmap = %d, rid = %d";
      db_query($sql, $value, $key);
    }
  }
  drupal_set_message(t('Role fieldmaps have been saved'));
}

function salesforce_management_api_map_role_form() {
  $form = array();

  $header = array(t('Salesforce Role'), t('Drupal Role'));
  $rows = array();

  $sf = salesforce_management_api_connect();
  if (!$sf) {
    $form['salesforce_management_default_map_record'] = array(
      '#value' => "Could not connect to Salesforce. Please doublecheck your API credentials.",
    );
    return $form;
  }

  else {
    $response_role = $sf->client->query(('SELECT id, Name FROM UserRole'));
    $drupal_roles = user_roles();

    $sf_variable = unserialize(variable_get("sf_drupal_role_map", ''));
    foreach ($response_role->records as $sroles) {
      $drupal_value = '<select name="' . $sroles->Id . '"><option value="">Select Drupal Role</option>';
      foreach ($drupal_roles as $did => $dval) {
        $d_role_sel = $sf_variable[$sroles->Id] == $did ? 'selected' : '';
        $drupal_value .= '<option value="' . $did . '" ' . $d_role_sel . '>' . $dval . '</option>';
      }
      $rows[] = array(
        $sroles->Name,
        $drupal_value,
      );
    }

    $form['salesforce_management_default_map_role'] = array(
        '#value' => theme('table', $header, $rows),
      );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Map Drupal Roles'),
    );

    return $form;
  }
}
function salesforce_management_api_map_role_form_submit($form, &$form_state) {
  $sf = salesforce_management_api_connect();
  $response_role = $sf->client->query(('select id,Name from UserRole'));
  $submitted = array();
  foreach ($response_role->records as $sroles) {
    $test = $form_state['clicked_button']['#post'][$sroles->Id];
    $submitted[$sroles->Id] = $test;
  }
  variable_set("sf_drupal_role_map", serialize($submitted));
  drupal_set_message(t('Your Role Mapping has been Successfully Done.'));
}


function salesforce_management_api_map_record_form() {
  $form = array();
  $header = array(t('Drupal Role'), t('Salesforce Record type'));
  $rows = array();
  $sf = salesforce_management_api_connect();
  if (!$sf) {
    $form['salesforce_management_default_map_record'] = array(
      '#value' => "Could not connect to Salesforce. Please doublecheck your API credentials.",
    );
    return $form;
  }
  else {
    $response_account = $sf->client->query(('SELECT id, Name ,SobjectType FROM RecordType'));
    $drupal_roles = user_roles();
    $sf_variable = unserialize(variable_get("sf_drupal_record_map", ''));
    foreach ($response_account->records as $srecords) {
         $SobjectTypeName[] = $srecords->SobjectType;
    }

    foreach ($drupal_roles as $did => $dval) {
     $drupal_value = '<select name="' . $did . '"><option value=""></option>';
      foreach (array_unique($SobjectTypeName) as $key => $SobjectType) {
        $drupal_value .= '<optgroup label="' . $SobjectType . '">';
        foreach ($response_account->records as $srecords) {
         $records_sel = $sf_variable[$did]==$srecords->Id?'selected':'';
           if ($srecords->SobjectType == $SobjectType) {
            $drupal_value .= '<option value="' . $srecords->Id . '" ' . $records_sel . '>' . $srecords->Name . '</option>';
          }
        }
      }
      $drupal_value .= '</select>';
      $rows[] = array(
        $dval,
        $drupal_value,
        );
    }
    $form['salesforce_management_default_map_record'] = array(
        '#value' => theme('table', $header, $rows),
      );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Map Record Type'),
    );

    return $form;
  }
}

function salesforce_management_api_get_object_recordtypes($object) {
  if (empty($object)) {
    return array();
  }

  $sf = salesforce_management_api_connect();
  if (is_object($sf)) {
    $result = $sf->client->describeSObjects(array($object));
    if (count($result->recordTypeInfos)) {
      foreach ($result->recordTypeInfos as $recordtype) {
        $types[$recordtype->recordTypeId] = $recordtype->name;
      }
    }
  }
  else {
    return array();
  }
  return $types;
}

/**
 * Returns all campaigns defined in Salesforce. The campaigns are cached for 24 hours.
 */
function salesforce_management_api_get_campaigns() {
  // To the cache!
  $cache = cache_get('salesforce_campaigns');
  if ($cache->data) {
    $campaigns = $cache->data;
  }
  // No cache? Do it the hard way.
  else {
    $sf = salesforce_management_api_connect();
    $campaigns = array();
    // only continue if we got a valid connection
    if ($sf) {
      $results = $sf->client->query("select Id, Name from Campaign Order By Name");
      if (count($results->records)) {
        foreach ($results->records as $campaign) {
          $campaigns[$campaign->Id] = $campaign->Name;
        }
      }
    }
    // We like to keep the campaign names alphabetical for all those juicy select boxes that use this data.
    foreach ($campaigns as $campaign_id => $campaign_name) {
      $temp_campaigns[$campaign_id] = strtolower($campaign_name);
    }
    asort($temp_campaigns);

    // Restore the original capitalization for the campaign names.
    foreach ($temp_campaigns as $key => $value) {
      $temp_campaigns[$key] = $campaigns[$key];
    }
    $campaigns = $temp_campaigns;
    cache_set($cid, $campaigns, 'cache', time() + (60 * 60 * 24));
  }

  return $campaigns;
}

function salesforce_management_api_map_record_form_submit($form, &$form_state) {
  $drupal_roles = user_roles();
  $record_type = array();
  foreach ($drupal_roles as $did => $dval) {
    $record = $form_state['clicked_button']['#post'][$did];
    $record_type[$did] = $record;
  }
  variable_set("sf_drupal_record_map", serialize($record_type));
  drupal_set_message(t('Your Record Type Mapping has been set successfully.'));
}

function search_object_array($needle_key, $needle_val, $haystack) {
  // iterate through our haystack
  for ( $i = 0; $i < count($haystack); $i++) {
    // ensure this array element is an object and has a key that matches our needle's key
    if ( is_object($haystack[$i]) and property_exists($haystack[$i], $needle_key) ) {
      // determine if comparison is case sensitive
      if ( strtolower($needle_val) == strtolower($haystack[$i]->$needle_key) ) return $i;
    }
  }
  // no match found
  return FALSE;
}

/**
 * Determines whether or not an object has a fieldmap
 */
function salesforce_manangement_api_fieldmap_exists($drupal_type) {
  $count = db_result(db_query("SELECT COUNT(fieldmap) FROM {salesforce_management_field_map} WHERE drupal = '%s'", $drupal_type));
  if ($count > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Utility function to produce an 18-character (case-insensitive) sfid from the 15-character version
 * Thanks to http://astadiaemea.wordpress.com/2010/06/21/15-or-18-character-ids-in-salesforce-com-%E2%80%93-do-you-know-how-useful-unique-ids-are-to-your-development-effort/
 */
function salesforce_management_api_get_sfid18($sfid15) {
  if ($sfid15 == NULL || strlen($sfid15) != 15) {
    return '';
  }
  $checksum = '';
  for ($i = 0; $i < 3; $i++) { // for each group of 5 characters
    $bitmask = 0;
    for ($j = 0; $j < 5; $j++) { // for each character
      $char = substr($sfid15, $i*5 + $j, 1);
      if (strpos('ABCDEFGHIJKLMNOPQRSTUVWXYZ', $char) !== FALSE) {
        $bitmask += 1 << $j;
      }
    }
    $checksum .= substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ012345', $bitmask, 1);
  }
  return $sfid15 .''. $checksum;
}
