<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_menu().
 */
function springboard_advocacy_menu() {
  $items['admin/config/springboard/advocacy'] = array(
    'title' => 'Springboard Advocacy Settings',
    'description' => 'Configuration settings for Springboard advocacy features.',
    'page callback' => 'springboard_advocacy_settings_page',
    'access arguments' => array('administer springboard advocacy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/springboard_advocacy.admin.inc',
  );

  $items['admin/config/springboard/advocacy/index'] = array(
    'title' => 'Springboard Advocacy',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/springboard/advocacy/alerts'] = array(
    'title' => 'Advocacy',
    'page arguments' => array('alerts'),
  ) + springboard_advocacy_menu_common();

  $items['admin/springboard/advocacy/alerts/all'] = array(
    'title' => 'Advocacy',
    'page arguments' => array('alerts/all'),
  ) + springboard_advocacy_menu_common();

   $items['admin/springboard/advocacy/custom-targets'] = array(
    'title' => 'Advocacy',
    'page arguments' => array('custom-targets'),
  ) + springboard_advocacy_menu_common();

  return $items;
}

/**
 * Defines common values for advocacy menu items.
 * Including a themed page callback for advocacy admin views.
 */
function springboard_advocacy_menu_common() {
  return array(
    'page callback' => 'springboard_advocacy_dashboard',
    'file' => 'springboard_advocacy.admin.inc',
    'file path' => drupal_get_path('module', 'springboard_advocacy') . '/includes',
    'access arguments' => array('administer springboard advocacy'),
    'type' => MENU_NORMAL_ITEM
    );
}

/**
 * Implements hook_permission().
 */
function springboard_advocacy_permission() {
  return array(
    'administer springboard advocacy' => array(
      'title' => t('Administer Springboard advocacy'),
      'description' => t('Perform administration tasks for Springboard advocacy.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function springboard_advocacy_libraries_info() {
  $libraries['springboard_advocacy'] = array(
    'name' => 'Springboard Advocacy',
    'vendor url' => 'https://github.com/JacksonRiver/springboard-sdk-php',
    'download url' => 'https://github.com/JacksonRiver/springboard-sdk-php',
    'version callback' => 'springboard_advocacy_library_version',
    'path' => 'advocacy',
    'files' => array(
      'php' => array(
        'SpringboardAdvocacyAPIClient.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Version callback for hook_libraries_info().
 */
function springboard_advocacy_library_version($library) {
  return '1';
}

/**
* Implements hook_views_api().
*/
function springboard_advocacy_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 * Implements hook_node_insert
 *
 * Saves a UUID for alert nodes.
 *
 * @param $node
 */
function springboard_advocacy_node_insert($node) {
  $types = variable_get('springboard_advocacy_alert_types', array());
  if(in_array($node->type, $types)) {
    $uuid = array(
      'nid' => $node->nid,
      'advocacy_id' => uniqid(variable_get('site_name', 'Drupal') . '-'),
    );
    drupal_write_record('springboard_advocacy_alert_id', $uuid);
  }
}

/**
  *
  * Implements hook_node_load
  *
  * @param $nodes
  *   An array of the nodes being loaded, keyed by nid.
  * @param $types
  *   An array containing the node types present in $nodes.
  *
  * Add the unique form_id and messages references to alert nodes.
  *
  */
function springboard_advocacy_node_load($nodes, $types) {
  $alert_types = variable_get('springboard_advocacy_alert_types', array());

  if (count(array_intersect($alert_types, $types))) {
    $uuids = db_query(
      'SELECT advocacy_id, nid FROM {springboard_advocacy_alert_id} WHERE nid IN (:nids)', 
       array(':nids' => array_keys($nodes))
     );
    foreach ($uuids as $uuid) {
      $nodes[$uuid->nid]->advocacy_id = $uuid->advocacy_id;
    }

    $message_ids = db_query(
      'SELECT entity_id, field_sba_alert_id_target_id FROM {field_data_field_sba_alert_id} WHERE field_sba_alert_id_target_id IN (:nids)',
      array(':nids' => array_keys($nodes)));
    foreach ($message_ids as $message_id) {
      $nodes[$message_id->field_sba_alert_id_target_id]->message_ids[] = $message_id->entity_id;
    }
  }
}

/**
 * Implemenets hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * Add alert UUIDs and Message IDs to hidden fields on the alert form.
 * Define a custom submit handler for alert node types.
 */
function springboard_advocacy_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'springboard_advocacy', 'includes/springboard_advocacy.webform');

  $types = variable_get('springboard_advocacy_alert_types', array());

  if (isset($form['#node']) && in_array($form['#node']->type, $types)) {
    //springboard_advocacy_form_vertical_nav($form);
    $node = $form['#node'];

    if (isset($form['form_id'])) {

      $pos = strpos($form['form_id']['#value'], 'webform_client_form');

      if (!empty($node->message_ids) && $pos !== FALSE) {
        $form['messages']['#tree'] = TRUE;
        foreach ($node->message_ids as $id) {
          $form['messages'][$id] = array(
            '#type' => 'hidden',
            '#value' => $id,
          );
        }
      }

      if (!empty($node->advocacy_id) && $pos !== FALSE) {
        $form['advocacy_id'] = array('#type' => 'hidden', '#value' => $node->advocacy_id);
        $form['#submit'][] = 'springboard_advocacy_webform_submit';
      }

    }
  }
}

/**
 * Implements hook_theme().
 *
 * Wraps various views in a common theme template
 */
function springboard_advocacy_theme($existing, $type, $theme) {
  $path = drupal_get_path('module', 'springboard_advocacy');

  $templates = array(
    'springboard_advocacy_dashboard' => array(
      'variables' => array('views' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-advocacy-dashboard',
    ),
  );

  // Look for theme templates in springboard_advocacy.
  $templates += drupal_find_theme_functions($existing, array($theme));
  $templates += drupal_find_theme_templates($existing, '.tpl.php', $path);

  return $templates;
}
