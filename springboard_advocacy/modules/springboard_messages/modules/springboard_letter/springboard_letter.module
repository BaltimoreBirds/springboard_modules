<?php

/**
 * Implements hook_node_insert
 */
function springboard_letter_node_insert($node) {
  if($node->type == 'springboard_letter') {
    module_load_include('inc', 'webform', 'includes/webform.components');

    //add custom fields for the messages
    $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'springboard_letter_phone',
      'pid' => 0,
      'name' => t('Phone Number'),
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => 13,
      'email' => 1,
      'extra' => array(
      'description' => t(''),
      ),
    );

    $fields[] = array(
        'nid' => $node->nid,
        'form_key' => 'springboard_letter_message',
        'pid' => 0,
        'name' => t('Message'),
        'type' => 'textarea',
        'mandatory' => 1,
        'weight' => 18,
        'email' => 1,
        'extra' => array(
        'description' => t('Customize your message'),
      ),
    );
    //limit the sate field to US states
    $fields[] = array(
        'nid' => $node->nid,
        'form_key' => 'sbp_state',
        'pid' => 0,
        'name' => t('State'),
        'type' => 'select',
        'mandatory' => 1,
        'weight' => 12,
        'email' => 1,
        'extra' => array(
        'options_source' => 'united_states', //may have to remove some.
        'aslist' => 'Y',
        'multiple' => 0,
      ),
    );
    $fields[] = array(
        'nid' => $node->nid,
        'form_key' => 'sbp_zip',
        'pid' => 0,
        'name' => t('Zip Code'),
        'type' => 'textfield',
        'mandatory' => 1,
        'weight' => 13,
        'email' => 1,
        'extra' => array(
        'maxlength' => 5,
      ),
    );
    // Add the component to the Webform.
    foreach ($fields as $field) {
      //dpm($field);
      $cid = webform_component_insert($field);
      //user map the state field
      if ($field['form_key'] == 'sbp_state' || $field['form_key'] == 'sbp_zip') {
            $map = array(
            'nid' => $node->nid,
            'cid' => $cid,
            'map_id' => $field['form_key'],
          );
          drupal_write_record('webform_user_component_map', $map);
      }
    }
  }
}

/**
 * Implements hook_webform_user_profile_fields_alter
 *
 */
function springboard_letter_webform_user_profile_fields_alter(&$fields, $node) {
  if($node->type == 'springboard_letter') {
    foreach ($fields as $index => $profile_field) {
      //make all fields except address2 mandatory
      if ($profile_field['name'] != 'sbp_address_line_2'){
        $fields[$index]['mandatory'] = 1;
      }
      //setup removeal of non-US provinces
      if ($profile_field['name'] == 'sbp_state'){
        unset($fields[$index]);
      }
      //remove zip
      if ($profile_field['name'] == 'sbp_zip'){
        unset($fields[$index]);
      }
      //move email field lower
      if ($profile_field['name'] == 'mail'){
        $fields[$index]['weight'] = 14;
      }
    } 
  }
}

/**
 * Implements hook_form_alter
 */
function springboard_letter_form_alter(&$form, &$form_state, $form_id) {;
  if(isset($form['#node']) && $form['#node']->type == 'springboard_letter') {
    $pos = strpos($form_id, 'client_form');
    if($pos !== FALSE) {
      $form['#submit'][] = 'springboard_letter_submit';
    }
  }
}

function springboard_letter_submit($form, $form_state) {
  $values = $form_state['values']['submitted_tree'];

  module_load_include('inc', 'springboard_advocacy', 'includes/springboard_advocacy.smarty_streets');
  $geo = springboard_advocacy_smarty_lookup($values);
  if (!empty($geo)) {
    $_SESSION['letter_geo'] = $geo;
    if(!empty($geo['zip']) && !empty($geo['plus4'])) {
       $zip = $geo['zip'] . '-' . $geo['plus4'];
    }
  }

  if(!empty($zip)) {
    $loader = new AdvocacyApiClientLoader();
    $client = $loader->getClient();
    $response = $client->getLegislators($zip);
    if (!empty($response) && empty($response->error)) {
      $persons = springboard_letter_prep_for_display($response);
      $_SESSION['legislators'] = $persons;
    }
  }
}

function springboard_letter_prep_for_display($response) {
  $items = array();

  foreach ($response as $district => $legistors) {
    foreach($legistors as $legislator) {
      $items[]['data'] = $legislator->salutation . 
      ' ' . $legislator->first_name . 
      ' ' . $legislator->last_name . 
      ': ' . $legislator->district_name;
    }
  }
  $title = t('Legislators');
  $attributes = array(
    'id' => 'legislator-list',
  );
  if (empty($items)) {
    $items[]['data'] = 'No Results';
  }
  return theme_item_list(array('items' => $items, 'title' => $title, 'type' => 'ul', 'attributes' => $attributes));;
}

function springboard_letter_preprocess_webform_confirmation(&$vars) {
  if ($vars['node']->type == 'springboard_letter') {
    if (!empty($_SESSION['legislators'])) {
      $vars['confirmation_message'] = $_SESSION['legislators'];
      unset($_SESSION['legislators']);
    }
  }
}

/**
 * Implements hook_webfrom_submission insert
 */
function springboard_letter_webform_submission_insert($node, $submission) {
  if(isset($_SESSION['letter_geo']) && $node->type == 'springboard_letter') {
    $data = array(
      'nid' => $submission->nid,
      'sid' => $submission->sid,
      'uid' => $submission->uid,
      'zip' => isset($_SESSION['letter_geo']['zip']) ? $_SESSION['letter_geo']['zip'] : '',
      'plus4' => isset($_SESSION['letter_geo']['plus4']) ? $_SESSION['letter_geo']['plus4'] : '',
      'lat' => isset($_SESSION['letter_geo']['latitude']) ? $_SESSION['letter_geo']['latitude'] : '',
      'lon' => isset($_SESSION['letter_geo']['longitude']) ? $_SESSION['letter_geo']['longitude'] : '',
    );
    drupal_write_record('springboard_messages_location', $data);
    unset($_SESSION['letter_geo']);
  };
}

function springboard_letter_form_springboard_letter_node_form_alter(&$form, &$form_state) {
  $form['options'] = array(
    '#title' => t('Options'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -20,
  ); 
  $form['targets'] = array(
    '#title' => t('Targets'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -19,
  ); 
  $form['messages'] = array(
    '#title' => t('Messages'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -18,
  );
  $form['social'] = array(
    '#title' => t('Social'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -17,
  );
  $form['goals'] = array(
    '#title' => t('Goals'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -16,
  );
  $form['display'] = array(
    '#title' => t('Display'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#weight' => -15,
  ); 
}