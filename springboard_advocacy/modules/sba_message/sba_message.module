<?php

/**
 * @file
 * Module for the SBA Message Entity - a starting point to create your own Entity
 * and associated administration interface
 */  


/**
 * Implements hook_menu_alter().
 *
 * Add a complex permission for views message landing page.
 *
 *  @todo refactor as normal menu item, remove path from view?
 */
function sba_message_menu_alter(&$items) {
  // Set a custom access callback function for our message view page display path.
  $items['node/%/messages']['access callback'] = 'sba_message_access';
  $items['node/%/messages']['access arguments'] = array('edit');
}


/**
 * Determines whether the given user has access to a sba_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $sba_message
 *   Optionally a sba_message or a sba_message type to check access for. If nothing is
 *   given, access for all sba_messages is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function sba_message_access($op, $sba_message = NULL, $account = NULL) {

  global $user;

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $types = variable_get('springboard_advocacy_alert_types', array());
    if (!in_array($node->type, $types)) {
      return FALSE;
    }
    // Grant access to content owned by user that they have permissions to edit.
    if (user_access('administer springboard advocacy') && $node->uid == $user->uid && node_access('update', $node)) {
      return TRUE;
    }
    // Grant access to content user can edit regardless of ownership.
    elseif (user_access('administer springboard advocacy') && node_access('update', $node)) {
      return TRUE;
    }
  }

  if (user_access('administer sba messages', $account)) {
    return TRUE;
  }

  if (is_object($sba_message) && $type_name = $sba_message->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name sba message", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Implements hook_module_implements_alter
 *
 * Helps add custom access control to a path defined in sba_message views.
 *
 * @param $implementations
 * @param $hook
 *
 * @todo refactor as normal menu item, remove path from view?
 */
function sba_message_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['sba_message'])) {
      unset($implementations['sba_message']);
      $implementations['sba_message'] = FALSE;
    }
  }
}

/**
 * Implement hook_entityreference_prepopulate_providers_info().
 *
 * Grab our entity reference fromthe node url rather than query string
 */
function sba_message_entityreference_prepopulate_providers_info() {
  return array(
    'node_url' => array(
      'title' => t('Node URL'),
      'description' => t('Prepopulate reference ID from node/%/message URL. Only for use by Springboard Advocacy content types.'),
      'callback' => 'sba_message_prepopulate_get_values_from_node_url',
    ),
  );
}

/**
 * Get values for prepopulating fields via URL.
 *
 * @param $field
 *   The field info array.
 * @param $instance
 *   The instance info array.
 *
 * @see
 *   entityreference_prepopulate_get_values()
 */
function sba_message_prepopulate_get_values_from_node_url($field, $instance) {
  $field_name = $field['field_name'];
  if (arg(0) == 'node' && arg(2) == 'messages' && is_numeric(arg(1))) {
    return array(arg(1));
  }
}

/**
 * Implements hook_node_delete
 *
 * When an alert node is deleted, delete its messages
 *
 * @param $node
 */
function sba_message_node_delete($node) {
  $types = variable_get('springboard_advocacy_alert_types', array());
  if (in_array($node->type, $types)) {
    $sba_message_ids = db_query(
      'SELECT entity_id FROM {field_data_field_sba_alert_id} a WHERE a.field_sba_alert_id_target_id = :nid',
       array(':nid' => $node->nid))
       ->fetchAllAssoc('entity_id');

    sba_message_delete_multiple(array_keys($sba_message_ids));
  } 
}

/**
 * Implements hook_entity_info().
 *
 * We define two entities here - SBA Message Type and SBA Message.
 * Different Alert types will have different message types.
 */
function sba_message_entity_info() {
  $return['sba_message'] = array(
    'label' => t('SBA Message'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'SbaMessage',
    'controller class' => 'SbaMessageController',
    'base table' => 'sba_message',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'sba_message_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the sba_message types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'sba_message_create',
    'access callback' => 'sba_message_access',
    'module' => 'sba_message',
    // The information below is used by the SBA MessageUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'node/%node/messages',
      'file' => 'sba_message.admin.inc',
      'controller class' => 'SbaMessageUIController',
      'menu wildcard' => '%sba_message',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['sba_message_type'] = array(
    'label' => t('SBA Message Type'),
    'entity class' => 'SbaMessageType',
    'controller class' => 'SbaMessageTypeController',
    'base table' => 'sba_message_type',
    'fieldable' => FALSE,
    'bundle of' => 'sba_message',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'sba_message_type_access',
    'module' => 'sba_message',
    // Enable the entity API's admin UI.
   // @todo remove
    'admin ui' => array(
      'path' => 'admin/structure/sba_message_types',
      'file' => 'sba_message_type.admin.inc',
      'controller class' => 'SbaMessageTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the sba_message types via a hook to avoid a recursion
 * issue as loading the sba_message types requires the entity info as well.
 *
 *  @TODO items defining admin paths for the message entities will be removed, eventually.
 */
function sba_message_entity_info_alter(&$entity_info) {
  foreach (sba_message_get_types() as $type => $info) {
    $entity_info['sba_message']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/sba_message_types/manage/%sba_message_type',
        'real path' => 'admin/structure/sba_message_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer sba message types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 *
 *  @TODO Admin perms are to be removed.
 */
function sba_message_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer sba message types' => array(
      'title' => t('Administer sba message types'),
      'description' => t('Create and delete fields for sba message types, and set their permissions.'),
    ),
    'administer sba messages' => array(
      'title' => t('Administer sba_messages'),
      'description' => t('Edit and delete all sba_messages'),
    ),  
  );
  
  //Generate permissions per sba_message 
  foreach (sba_message_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name sba message" => array(
        'title' => t('%type_name: Edit any sba message', array('%type_name' => $type->label)),
      ),
      "view any $type_name sba_message" => array(
        'title' => t('%type_name: View any sba message', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Access callback for the entity API.
 * @TODO To be removed.
 */
function sba_message_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer sba message types', $account);
}


/**
 * Gets an array of all sba_message types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return SbaMessageType[]
 *   Depending whether $type isset, an array of  types or a single one.
 */
function sba_message_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our sba_message entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('sba_message_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a sba_message type by string.
 *
 * @param $type
 *   The machine-readable name of a sba_message type to load.
 * @return
 *   A sba_message type array or FALSE if $type does not exist.
 */
function sba_message_type_load($type) {
  return sba_message_get_types($type);
}


/**
 * Fetch a sba_message object.
 *
 * @param $sba_message_id
 *   Integer specifying the sba_message id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $sba_message object or FALSE if it cannot be loaded.
 *
 * @see sba_message_load_multiple()
 */
function sba_message_load($sba_message_id, $reset = FALSE) {
  $sba_messages = sba_message_load_multiple(array($sba_message_id), array(), $reset);
  return reset($sba_messages);
}


/**
 * Load multiple sba_messages based on certain conditions.
 *
 * @param $sba_message_ids
 *   An array of sba_message IDs.
 * @param $conditions
 *   An array of conditions to match against the {sba_message} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of sba_message objects, indexed by sba_message_id.
 *
 * @see entity_load()
 * @see sba_message_load()
 */
function sba_message_load_multiple($sba_message_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('sba_message', $sba_message_ids, $conditions, $reset);
}


/**
 * Deletes a sba_message.
 */
function sba_message_delete(SbaMessage $sba_message) {
  $sba_message->delete();
}


/**
 * Delete multiple sba_messages.
 *
 * @param $sba_message_ids
 *   An array of sba_message IDs.
 */
function sba_message_delete_multiple(array $sba_message_ids) {
  entity_get_controller('sba_message')->delete($sba_message_ids);
}


/**
 * Create a sba_message object.
 */
function sba_message_create($values = array()) {
  return entity_get_controller('sba_message')->create($values);
}


/**
 * Saves a sba_message to the database.
 *
 * @param $sba_message
 *   The sba_message object.
 */
function sba_message_save(SbaMessage $sba_message) {
  return $sba_message->save();
}


/**
 * Saves a sba_message type to the db.
 */
function sba_message_type_save(SbaMessageType $type) {
  $type->save();
}


/**
 * Deletes a sba_message type from the db.
 */
function sba_message_type_delete(SbaMessageType $type) {
  $type->delete();
}


/**
 * URI callback for sba_messages
 */
function sba_message_uri(SbaMessage $sba_message){
  return array(
    'path' => 'sba_message/' . $sba_message->sba_message_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function sba_message_page_title(SbaMessage $sba_message){
  return $sba_message->name;
}


/**
 * Sets up content to show an individual sba_message
 *  @TODO Probably won't need a message page view. Remove.
 */
function sba_message_page_view($sba_message, $view_mode = 'full') {    
  $controller = entity_get_controller('sba_message');  
  $content = $controller->view(array($sba_message->sba_message_id => $sba_message));
  drupal_set_title($sba_message->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function sba_message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sba_message') . '/views',
  );
}


/**
 * Implement hook_theme().
 *
 *  @TODO remove.
 */
function sba_message_theme() {
  return array(
    'sba_message_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'sba_message.admin.inc',
    ),
    'sba_message' => array(
      'render element' => 'elements',
      'template' => 'sba_message',
    ),
   'sba_message_sample_data' => array(
      'variables' => array('sba_message_sample_data', 'sba_message' => NULL),
      'template' => 'sba_message-sample-data',
    ),
    'views_exposed_form' => array(
      'template' => 'templates/views-exposed-form--targets-block-3',
      'render element' => 'form',

    ),
  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Adds a message add action link node/%/messages
 *
 * @todo replace with springboard theme wrapper?
 */
//function sba_message_menu_local_tasks_alter(&$data, $router_item, $root_path) {
//
//  // Add action link on node/%/messages page
//  $on_message_landing = !arg(3);
//  if ($root_path == 'node/%/messages' && !empty($on_message_landing) && is_numeric(arg(1))) {
//    $message_types = variable_get('sba_message_node_types', array());
//    $node = node_load(arg(1));
//    $data['actions']['output'][] = array(
//      '#theme' => 'menu_local_action',
//      '#link' => array(
//        'title' => t('Add message'),
//        'href' => 'node/' . arg(1) . '/messages/add/' . $message_types[$node->type],
//        'localized_options' => array(
//          'path' => 'g',
//          'attributes' => array(
//            'title' => t('Add new message'),
//          ),
//        ),
//      ),
//    );
//  }
//
//}


/**
 * The class used for sba_message entities
 */
class SbaMessage extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'sba_message');
  }

  protected function defaultLabel() {
    return $this->name;
  }
// @todo remove if we don't need a view path
  protected function defaultUri() {
    return array('path' => 'sba_message/' . $this->sba_message_id);
  }
  
  
}


/**
 * The class used for sba_message type entities
 */
class SbaMessageType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'sba_message_type');
  }
  
}


/**
 * The Controller for SBA Message entities
 */
class SbaMessageController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a sba_message - we first set up the values that are specific
   * to our sba_message schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the sba_message.
   *
   * @return
   *   A sba_message object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our SBA Message
    $values += array( 
      'sba_message_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $sba_message = parent::create($values);
    return $sba_message;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
//    $content['sba_message_sample_data'] =  array(
//      '#markup' => theme('sba_message_sample_data', array('sba_message_sample_data' => check_plain($entity->data['sample_data']), 'sba_message' => $entity)),
//    );

    return $content;
  }
  
}


/**
 * The Controller for SBA Message entities
 */
class SbaMessageTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a sba_message type - we first set up the values that are specific
   * to our sba_message type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the sba_message.
   *
   * @return
   *   A sba_message type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our SBA Message
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $sba_message_type = parent::create($values);
    return $sba_message_type;
  }

}