<?php
/**
 * @file
 * Sets up the springboard message action module and content type.
 */

/**
 * Implements hook_schema().
 *
 * Table to save confirmations.
 */
function sba_message_action_schema() {

  // Store a unique ID for use with advocacy server.
  $schema['sba_message_action_confirm'] = array(
    'description' => 'Store message action confirmation state.',
    'fields' => array(
      'nid' => array(
        'description' => 'messages node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'custom_confirmation' => array(
        'description' => 'confirmation toggle state',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fail_message' => array(
        'description' => 'confirmation fail message',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function sba_message_action_install() {

  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install');
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_taxonomy');
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_examples');

  _sba_message_action_create_content_type();
  _sba_message_action_install_vocab_sba_legislative_issues();
  _sba_message_action_create_example_message_action();
}

/**
 * Implements hook_uninstall().
 */
function sba_message_action_uninstall() {
  // Delete email_wrapper nodes.
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install');
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_fields');

  _sba_message_action_delete_nodes();
  // Remove fields implemented by this module.
  // _sba_message_action_delete_fields();
  // Delete the message action content type.
  node_type_delete('sba_message_action');
  field_purge_batch(1000);
}


/**
 * Rename alert var to action.
 */
function sba_message_action_update_7001() {
  $types = variable_get('springboard_advocacy_alert_types', array(''));
  variable_set('sba_action_types', $types);
  variable_del('springboard_advocacy_alert_types');
}

/**
 * Add message action confirmation table.
 */
function sba_message_action_update_7002() {
  $schema = module_invoke('sba_message_action', 'schema');
  if (db_table_exists('sba_message_action_confirm') == FALSE) {
    db_create_table('sba_message_action_confirm', $schema['sba_message_action_confirm']);
  }
}
/**
 * Add message action confirmation table fail message field.
 */
function sba_message_action_update_7003() {
  $schema = module_invoke('sba_message_action', 'schema');
  if (db_field_exists('sba_message_action_confirm', 'fail_message') == FALSE) {
    db_add_field('sba_message_action_confirm', 'fail_message', $schema['sba_message_action_confirm']['fields']['fail_message']);
  }
}

/**
 * Create call to action field, make body field required.
 */
function sba_message_action_update_7004() {
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_fields');
  _sba_message_action_create_node_fields(TRUE);
  $instance_info = field_read_instance('node', 'body', 'sba_message_action');
  $instance_info['required'] = 1;
  field_update_instance($instance_info);
}

/**
 * Update description of the test mode field.
 */
function sba_message_action_update_7005() {
  $field = field_info_instance('node', 'field_test_mode_email', 'sba_message_action');
  if ($field) {
    $field['description'] = t(
      'Enter an email address for test mode. Test messages will be sent to this address instead of to the configured targets.'
    );
    field_update_instance($field);
  }
}

/**
 * Add user edit flag to existing actions.
 */
function sba_message_action_update_7006() {

  $nodes = db_query('select n.nid from {node} n
    WHERE n.type = :type',
    array(':type' => 'sba_message_action')
  );

  foreach ($nodes as $node) {

    $nid = db_query('select nid from {webform_component}
      WHERE nid = :nid AND form_key = :key',
      array(':nid' => $node->nid, ':key' => 'sba_user_edit_flag')
    )->fetchField();

    if (!$nid) {
      $field = array(
        'nid' => $node->nid,
        'form_key' => 'sba_user_edit_flag',
        'pid' => 0,
        'name' => t('User Edit Flag'),
        'type' => 'hidden',
        'value' => 0,
        'weight' => 13,
        'email' => 1,
      );
      webform_component_insert($field);
    }
  }
}


/**
 * Enable springboard_taxonomy dependency.
 */
function sba_message_action_update_7007() {
  if (!module_exists('springboard_taxonomy')) {
    module_enable(array('springboard_taxonomy'));
  }
}

/**
 * Add message action to taxonomy node types.
 */
function sba_message_action_update_7008() {
  $taxonomy_types = variable_get('springboard_taxonomy_node_types', array());
  $taxonomy_types = array_merge($taxonomy_types, array('sba_message_action' => 'sba_message_action'));
  variable_set('springboard_taxonomy_node_types', array_unique($taxonomy_types));
}

/**
 * Install legislative issues vocabulary if missing.
 */
function sba_message_action_update_7009() {
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_taxonomy');
  _sba_message_action_install_vocab_sba_legislative_issues();
  _sba_message_action_install_taxonomy_fields();
}

/**
 * Install deliverable_message_count if missing.
 */
function sba_message_action_update_7010() {

  $nodes = db_query('select n.nid from {node} n
    WHERE n.type = :type',
    array(':type' => 'sba_message_action')
  );

  foreach ($nodes as $node) {
    $nid = db_query('select nid from {webform_component}
      WHERE nid = :nid AND form_key = :key',
      array(':nid' => $node->nid, ':key' => 'sba_user_edit_flag')
    )->fetchField();

    if (!$nid) {
      $field = array(
        'nid' => $node->nid,
        'form_key' => 'sba_deliverable_count',
        'pid' => 0,
        'name' => t('Deliverable message count'),
        'type' => 'hidden',
        'value' => 0,
        'weight' => 13,
        'email' => 1,
      );
      webform_component_insert($field);
    }
  }
}

/**
 * Install zip+4 profile field and component if missing.
 */
function sba_message_action_update_7011() {
  module_load_include('inc', 'sba_message_action', 'includes/install/sba_message_action.install_profile');

  _sba_message_action_create_zip_plus_four();

  $nodes = db_query('select n.nid from {node} n
    WHERE n.type = :type',
    array(':type' => 'sba_message_action')
  );

  foreach ($nodes as $node) {
    $nid = db_query('select nid from {webform_component}
      WHERE nid = :nid AND form_key = :key',
      array(':nid' => $node->nid, ':key' => 'sbp_zip_plus_four')
    )->fetchField();
    if (!$nid) {
      $field = array(
        'nid' => $node->nid,
        'form_key' => 'sbp_zip_plus_four',
        'pid' => 0,
        'name' => t('Zip+4'),
        'type' => 'hidden',
        'value' => '',
        'weight' => 13,
        'email' => 1,
      );
      webform_component_insert($field);
    }
  }
}

/**
 * Namespace the test_mode fields.
 */
function sba_message_action_update_7012() {

  $names = array(
    'field_test_mode' => 'field_sba_test_mode',
    'field_test_mode_email' => 'field_sba_test_mode_email',
  );

  foreach ($names as $old_name => $new_name) {
    if (db_table_exists('field_data_' . $old_name)) {

      // Get the "value" and "format" storage column names.
      $field_info = field_info_field($old_name);
      $storage = $field_info['storage']['details'];

      // Rename the value and format fields and reset the indexes.
      foreach ($storage['sql']['FIELD_LOAD_CURRENT'] as $field) {
        foreach ($field as $key => $old_storage_column) {

          // Drop indexes.
          db_drop_index('field_data_' . $old_name, $old_storage_column);
          db_drop_index('field_revision_' . $old_name, $old_storage_column);

          // Rename storage columns.
          $spec = $field_info['columns'][$key];
          $new_storage_column = $new_name . '_' . $key;
          db_change_field(
            'field_data_' . $old_name,
            $old_storage_column,
            $new_storage_column,
            $spec,
            array('indexes' => array($new_storage_column => array($new_storage_column)))
          );
          db_change_field(
            'field_revision_' . $old_name,
            $old_storage_column,
            $new_storage_column,
            $spec,
            array('indexes' => array($new_storage_column => array($new_storage_column)))
          );
        }
      }

      // Rename the tables.
      db_rename_table('field_data_' . $old_name, 'field_data_' . $new_name);
      db_rename_table('field_revision_' . $old_name, 'field_revision_' . $new_name);

      // Update the config records with the new names.
      db_update('field_config')->fields(array('field_name' => $new_name))
        ->condition('field_name', $old_name)
        ->execute();
      db_update('field_config_instance')->fields(array('field_name' => $new_name))
        ->condition('field_name', $old_name)
        ->execute();

    }
  }

  // Namespace the field group.
  $field_group = field_group_load_field_group('group_test_mode', 'node', 'sba_message_action', 'form');
  $table = 'field_group';

  // If the group exists make sure its not disabled.
  if ($field_group) {
    $field_group->identifier = 'group_sba_test_mode|node|sba_message_action|form';
    $field_group->group_name = 'group_sba_test_mode';
    $field_group->children = array('field_sba_test_mode', 'field_sba_test_mode_email');
    ctools_export_crud_save($table, $field_group);
  }
}
