<?php
/**
 * @file
 * Sets up the springboard message action module and content type.
 */

/**
 * Implements hook_install().
 */
function sba_message_action_install() {
  $webform_node_types = variable_get('webform_node_types', array());
  $webform_node_types[] = 'sba_message_action';
  variable_set('webform_node_types', $webform_node_types);
  $webform_node_types_primary = variable_get('webform_node_types_primary', array());
  $webform_node_types_primary[] = 'sba_message_action';
  variable_set('webform_node_types_primary', $webform_node_types_primary);
  // Create default SF map insert into table.
  if (module_exists('salesforce_genmap')) {
    $map = array();
    $map = entity_create('salesforce_genmap_map', $map);
    $map->nid = -1;
    $map->map_handler = 'webform';
    $map->salesforce_object_type = 'Actions__c';
    $object_type = '';
    module_load_include('inc', 'salesforce_genmap', 'includes/salesforce_genmap.map');
    if (function_exists('salesforce_get_api')) {
      $sfapi = salesforce_get_api();
      if ($sfapi->isAuthorized()) {
        if (function_exists('_sfw_salesforce_record_type_list')) {
          $sf_records = _sfw_salesforce_record_type_list($sfapi, 'Actions__c');
          $sf_records = array_flip($sf_records);
          $object_type = $sf_records['Message to Target Submission'];
        }
      }
    }
    $map->salesforce_record_type = $object_type;
    $map->field_map = array(
      'webform_map' => array(
        'cid' => 'Campaign__c',
        'ms' => 'Market_Source__c',
        'referrer' => 'Referrer__c',
        'initial_referrer' => 'Initial_Referrer__c',
        'search_engine' => 'Search_Engine__c',
        'search_string' => 'Search_String__c',
        'user_agent' => 'User_Agent__c',
      ),
      'salesforce_node_map' => array(
        'nid' => 'Drupal_Node_ID__c',
        'title' => 'Action_Name__c',
      ),
      'salesforce_submission_map' => array(
        'sid' => 'Submission_ID__c',
        'date' => 'Action_Date__c',
      ),
    );

    $map->sync_options = array(
      'insert' => 'insert',
      'update' => 'update',
      'delete' => 'delete',
    );
    $map->status = 1;
    $map->module = 'sba_message_action';
    salesforce_genmap_save_map($map, 'webform');
  }
  sba_message_action_add_content_type();

  $instance_info = field_read_instance('node', 'field_webform_user_internal_name', 'sba_message_action');
  $instance_info['widget']['weight'] = 1;
  field_update_instance($instance_info);

  $instance_info = field_read_instance('node', 'field_message_action_img', 'sba_message_action');
  $instance_info['widget']['weight'] = 2;
  field_update_instance($instance_info);

  $instance_info = field_read_instance('node', 'body', 'sba_message_action');
  $instance_info['widget']['weight'] = 3;
  field_update_instance($instance_info);

  sba_message_action_add_example_message_action();
}

/**
 * Creates the sba_message_action content type.
 */
function sba_message_action_add_content_type() {
  $type = node_type_set_defaults();
  $type->name = t('Message Action');
  $type->type = 'sba_message_action';
  $type->description = '';
  $type->title_label = t('Title');
  $type->has_title = TRUE;
  $type->base = 'node_content';
  $type->custom = TRUE;
  $type->modified = TRUE;
  $type->module = 'sba_message_action';
  // Save or reset persistent variable values.
  $variables = array(
    'additional_settings__active_tab' => 'edit-webform-user',
    'field_bundle_settings_node_' => array(),
    'menu_parent' => 'main-menu:0',
    'menu_options' => array(
      0 => 'main-menu',
    ),
    'node_submitted' => 0,
    'node_preview' => 1,
    'node_options' => array(
      0 => 'status',
    ),
    'fundraiser' => 0,
    'webform_user' => 1,
    'webform_user_default_fields' => array(
      'sbp_first_name' => 'sbp_first_name',
      'sbp_last_name' => 'sbp_last_name',
      'mail' => 'mail',
      'sbp_address' => 'sbp_address',
      'sbp_address_line_2' => 'sbp_address_line_2',
      'sbp_city' => 'sbp_city',
      'sbp_state' => 'sbp_state',
      'sbp_zip' => 'sbp_zip',
      'sbp_cid' => 'sbp_cid',
      'sbp_market_source' => 'sbp_market_source',
      'sbp_referrer' => 'sbp_referrer',
      'sbp_initial_referrer' => 'sbp_initial_referrer',
      'sbp_search_engine' => 'sbp_search_engine',
      'sbp_search_string' => 'sbp_search_string',
      'sbp_user_agent' => 'sbp_user_agent',
      'sbp_salesforce_account_id' => 'sbp_salesforce_account_id',
      'sbp_salesforce_contact_id' => 'sbp_salesforce_contact_id',
    ),
  );
  foreach ($variables as $key => $value) {
    $variable_new = $key . '_' . $type->type;
    if (is_array($value)) {
      $value = array_keys(array_filter($value));
    }
    variable_set($variable_new, $value);
  }
  node_type_save($type);
  node_types_rebuild();
  node_add_body_field($type, 'Call to Action');
  sba_message_action_add_fields();

  // Add as a webform.
  $webform_node_types = variable_get('webform_node_types', array('webform'));
  $webform_node_types_primary = variable_get('webform_node_types_primary', array('webform'));
  $webform_node_types = array_merge($webform_node_types, array('sba_message_action'));
  $webform_node_types_primary = array_merge($webform_node_types_primary, array('sba_message_action'));
  variable_set('webform_node_types', array_unique($webform_node_types));
  variable_set('webform_node_types_primary', array_unique($webform_node_types_primary));

  //enable form_layuts
  variable_set('form_layouts_sba_message_action', 1);

  // Add as an advocacy message type.
  $springboard_advocacy_alert_types = variable_get('springboard_advocacy_alert_types', array(''));
  $springboard_advocacy_alert_types = array_merge($springboard_advocacy_alert_types, array('sba_message_action'));
  variable_set('springboard_advocacy_alert_types', array_unique($springboard_advocacy_alert_types));


  require_once(drupal_get_path('module', 'webform_user') . '/includes/webform_user.fields.inc');
  _webform_user_add_default_fields('sba_message_action');
  // Done.
  drupal_set_message(t('The content type Springboard Message to Target has been added.'));
  watchdog('sba_message_action', 'Added content type Message to Target.');

  // Add opt-in field to list of default fields enabled for this content type.
  // This keeps Webform User happy and ensures our opt-in component gets created.
  $default_fields = variable_get('webform_user_default_fields_sba_message_action', '');
  //$default_fields[] = 'sba_message_action_optin';
  variable_set('webform_user_default_fields_sba_message_action', $default_fields);

  // Weighting the module to ensure submission handlers run after Webform User.
  // This ensures that the user id in webform_submissions has been updated by
  // Webform User before we get to it.
  db_query('UPDATE {system} SET weight = :weight WHERE name = :name', array(':weight' => 1000, ':name' => 'sba_message_action'));
}

function sba_message_action_add_fields() {

  $fields = array(
    'field_message_action_img' => array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array('node'),
      'field_name' => 'field_message_action_img',
      'foreign keys' => array(
        'fid' => array(
          'columns' => array(
            'fid' => 'fid',
          ),
          'table' => 'file_managed',
        ),
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
        ),
      ),
      'locked' => 0,
      'module' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
      'translatable' => 0,
      'type' => 'image',

      '_instance' => array(
        'bundle' => 'sba_message_action',
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'module' => 'image',
            'settings' => array(
              'image_link' => '',
              'image_style' => '',
            ),
            'type' => 'image',
            'weight' => -1,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => 'field_message_action_img',
        'label' => 'Image',
        'required' => 0,
        'settings' => array(
          'alt_field' => 1,
          'default_image' => 0,
          'file_directory' => '',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '',
          'max_resolution' => '',
          'min_resolution' => '',
          'title_field' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'image',
          'settings' => array(
            'preview_image_style' => 'thumbnail',
            'progress_indicator' => 'throbber',
          ),
          'type' => 'image_image',
          'weight' => 0,
        ),
      ),
    ),
  );



  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);

    field_create_field($values);
    field_create_instance($instance);
  }
}


function sba_message_action_add_example_message_action() {
  $node = new stdClass();
  $node->is_new = 1;
  $node->type = 'sba_message_action';
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->title = 'Example Message Action Form';
  $node->status = 1;
  $node->promote = 0;
  $node->body[LANGUAGE_NONE][0]['value'] = 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, ' .
    'imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend ' .
    'sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce ' .
    'magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. ' .
    'Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper ' .
    'eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla. Nunc est ipsum, ' .
    'pretium quis, dapibus sed, varius non, lectus. Proin a quam. Praesent lacinia, eros quis aliquam porttitor, ' .
    'urna lacus volutpat urna, ut fermentum neque mi egestas dolor.';
  $node->body[LANGUAGE_NONE][0]['summary'] = 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet ' .
    'sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, ' .
    'gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida ' .
    'in, feugiat ac, molestie eget, wisi.';
  $node->body[LANGUAGE_NONE][0]['format'] = 'filtered_html';
  $node->webform = array(
    'confirmation' => 'Thank you, %value[sbp_first_name] for participating in the messaging campaign.',
    'confirmation_format' => 'filtered_html',
    'redirect_url' => '<confirmation>',
    'teaser' => 0,
    'block' => 0,
    'allow_draft' => 0,
    'auto_save' => 0,
    'submit_notice' => 1,
    'submit_text' => t('Sign'),
    'submit_limit' => -1,
    'submit_interval' => -1,
    'total_submit_limit' => -1,
    'total_submit_interval' => -1,
    'status' => 1,
    'record_exists' => '',
    'roles' => array(
      '0' => 1,
      '1' => 2,
    ),
    'emails' => array(),
    'components' => array(),
  );
  $email_nid =sba_message_action_email_wrapper_add();
  if ($email_nid != NULL) {
    $node->webform['emails'][1] = array(
      'email' => '',
      'template' => 'default',
      'subject' => 'Thank you for your participation!',
      'from_name' => 'Springboard',
      'from_address' => 'example-from@example.com',
      'html' => 0,
      'attachments' => 0,
      'excluded_components' => array(),
    );
  }
  $node->is_webform_user = 1;
  $node->send_new_user_email = 0;
  node_save($node);
  $node = node_load($node->nid);

  // Save confirmation details.
  $confirmation['nid'] = $node->nid;
  $confirmation['confirmation_page_title'] = 'Thank you for your participation!';
  _webform_confirmations_update($confirmation);
  // Save email wrapper details.
  foreach ($node->webform['components'] as $component) {
    if ($component['form_key'] == 'mail') {
      $cid = $component['cid'];
      $node->webform['emails'][1]['email'] = $cid;
    }
  }
  if ($email_nid != NULL) {
    $settings = array(
      'nid' => $node->nid,
      'eid' => 1,
      'tid' => $email_nid,
      'bcc_email' => '',
      'html_message' => 'Thank you for your participation!',
      'html_message_format' => 'filtered_html',
      'text_message' => 'Thank you for your participation!',
      'extra' => serialize(array()),
    );
  }
  // One last save.
  node_save($node);
  email_wrappers_save_settings($node->nid, 1, $settings);
  drupal_set_message(t('An example message to target form has been created.'));
}

function sba_message_action_email_wrapper_add() {
  $node = new stdClass();
  $node->is_new = 1;
  $node->type = 'email_wrapper';
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->title = 'Example Message Action Email Wrapper';
  $node->status = 0;
  $node->promote = 0;
  $node->email_wrapper_from_name[LANGUAGE_NONE][0] = array(
    'value' => 'Springboard',
    'format' => '',
    'safe_value' => 'Springboard',
  );
  $node->email_wrapper_from_email[LANGUAGE_NONE][0] = array(
    'value' => 'example-from@example.com',
    'format' => '',
    'safe_value' => 'example-from@example.com',
  );
  $node->email_wrapper_reply_email[LANGUAGE_NONE][0] = array(
    'value' => 'example-to@example.com',
    'format' => '',
    'safe_value' => 'example-to@example.com',
  );
  $node->email_wrapper_subject[LANGUAGE_NONE][0] = array(
    'value' => 'Thank you for your participation!',
    'format' => '',
    'safe_value' => 'Thank you for your participation!',
  );
  $node->email_wrapper_html_template[LANGUAGE_NONE][0] = array(
    'value' => 'Thank you for your participation!' . "\n" .
      "\n" .
      '%html_message' . "\n" .
      "\n" .
      '-----' . "\n" .
      'Springboard Example',
    'summary' => '',
    'format' => 'filtered_html',
    'safe_value' => '<p>Thank you for your participation!</p>' . "\n" .
      '<p>%html_message</p>' . "\n" .
      '<p>-----<br>' . "\n" .
      'Springboard Example</p>',
  );
  $node->email_wrapper_html_message[LANGUAGE_NONE][0] = array(
    'value' => 'Please visit us again soon.',
    'summary' => '',
    'format' => 'filtered_html',
    'safe_value' => '<p>Please visit us again soon.</p>',
  );
  $node->email_wrapper_text_template[LANGUAGE_NONE][0] = array(
    'value' => 'Thank you for your participation!' . "\n" .
      "\n" .
      '%text_message' . "\n" .
      "\n" .
      '-----' . "\n" .
      'Springboard Example',
    'format' => '',
    'safe_value' => 'Thank you for your participation!' . "\n" .
      "\n" .
      '%text_message' . "\n" .
      "\n" .
      '-----' . "\n" .
      'Springboard Example',
  );
  $node->email_wrapper_text_message[LANGUAGE_NONE][0] = array(
    'value' => 'Please visit us again soon.',
    'format' => 'filtered_html',
    'safe_value' => '<p>Please visit us again soon.</p>',
  );
  node_save($node);
  // Save extras.
  drupal_set_message(t('An example message to target email wrapper has been created.'));
  return $node->nid;
}

/**
 * Implements hook_uninstall().
 */
function sba_message_action_uninstall() {
  // Delete email_wrapper nodes.
  _sba_message_action_delete_nodes();

  // Remove fields implemented by this module.
  _sba_message_action_delete_fields();

  // Delete the email wrapper content type.
  node_type_delete('sba_message_action');
  field_purge_batch(1000);
}


/**
 * Delete springboard message action fields
 */
function _sba_message_action_delete_fields() {
  $fields = array(
    'sba_message_action_call_to_action',
  );
  foreach ($fields as $field_name) {
    $field = field_info_instance('node', $field_name, 'sba_message_action');
    field_delete_instance($field);
    $field = field_info_field($field_name);
    field_delete_field($field_name);
  }
  drupal_set_message('Springboard message action fields deleted.');
}


/**
 * Delete springboard message action nodes and their messages.
 */
function _sba_message_action_delete_nodes() {

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'sba_message_action')
    ->execute();

  $nids = $result->fetchCol();

  if (!empty($nids)) {
    //@todo fix this so can be deleted if both modules are disabled.
//    $message_ids = db_query(
//      'SELECT entity_id FROM {field_data_field_sba_alert_id} WHERE field_sba_alert_id_target_id IN (:nids)',
//      array(':nids' => $nids))->fetchAssoc();
//
//    sba_message_delete_multiple($message_ids);
    node_delete_multiple($nids);

    drupal_set_message('Springboard message actions have been deleted.');
  }
}
