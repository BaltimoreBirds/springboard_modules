<?php
/**
 * @file
 * Provides content type and config for message actions.
 */

function sba_message_action_node_presave($node) {
  if (empty($node->nid)) {
    $node->webform['submit_text'] = t('Send your message');
  }
}

/**
 * Implements hook_node_insert
 *
 * Adds some custom fields to new webforms.
 */
function sba_message_action_node_insert($node) {
  if($node->type == 'sba_message_action') {
    module_load_include('inc', 'webform', 'includes/webform.components');

    $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'sba_salutation',
      'pid' => 0,
      'name' => t('Salutation'),
      'type' => 'select',
      'mandatory' => 1,
      'weight' => -10,
      'email' => 1,
      'value' => 'mr',
      'extra' => array(
        'description' => t(''),
        'items' => "mr|Mr. \nmrs|Mrs. \nms|Ms.",
        'multiple' => 0,
        'aslist' => 1,
        'title_display' => 'none',

      ),
    );

    //add custom fields for the messages
    $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'sba_phone',
      'pid' => 0,
      'name' => t('Phone Number'),
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => 13,
      'email' => 1,
      'extra' => array(
        'description' => t(''),
      ),
    );

    //limit the state field to US states
    $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'sbp_state',
      'pid' => 0,
      'name' => t('State'),
      'type' => 'select',
      'mandatory' => 1,
      'weight' => 12,
      'email' => 1,
      'extra' => array(
        'options_source' => 'united_states', //may have to remove some.
        'aslist' => 'Y',
        'multiple' => 0,
      ),
    );
    $fields[] = array(
      'nid' => $node->nid,
      'form_key' => 'sbp_zip',
      'pid' => 0,
      'name' => t('Zip Code'),
      'type' => 'textfield',
      'mandatory' => 1,
      'weight' => 13,
      'email' => 1,
      'extra' => array(
        'maxlength' => 5,
      ),
    );

    // Add the component to the Webform.

    foreach ($fields as $field) {
      $cid = webform_component_insert($field);
      //user map the state field
      if ($field['form_key'] == 'sbp_state' || $field['form_key'] == 'sbp_zip') {
        $map = array(
          'nid' => $node->nid,
          'cid' => $cid,
          'map_id' => $field['form_key'],
        );
        drupal_write_record('webform_user_component_map', $map);
      }
    }
  }
}

/**
 * Implements hook_webform_user_profile_fields_alter
 *
 */
function sba_message_action_webform_user_profile_fields_alter(&$fields, $node) {
  if($node->type == 'sba_message_action') {
    foreach ($fields as $index => $profile_field) {
      //make all fields except address2 mandatory
      if ($profile_field['name'] != 'sbp_address_line_2'){
        $fields[$index]['mandatory'] = 1;
      }
      //setup removal of non-US provinces
      if ($profile_field['name'] == 'sbp_state'){
        unset($fields[$index]);
      }
      //remove zip
      if ($profile_field['name'] == 'sbp_zip'){
        unset($fields[$index]);
      }
      //move email field lower
      if ($profile_field['name'] == 'sbp_first_name'){
        $fields[$index]['weight'] = -5;
      }
      //move email field lower
      if ($profile_field['name'] == 'sbp_last_name'){
        $fields[$index]['weight'] = -4;
      }
      //move email field lower
      if ($profile_field['name'] == 'mail'){
        $fields[$index]['weight'] = -3;
      }
    }
  }
}


/**
 * Implements hook_node_load.
 */
function sba_message_action_node_load($nodes, $types) {
  // If no message_action nodes are loaded no need to continue.
  if (!in_array('sba_message_action', $types)) {
    return;
  }

  // Add full messages to each node so we can utilize them later.
  foreach ($nodes as $nid => $node) {
    if ($node->type == 'sba_message_action') {
      if (!empty($node->message_ids)) {
        $messages = sba_message_load_multiple($node->message_ids);
        $node->messages = $messages;
      }
      else {
        $node->messages = array();
      }
    }
  }
}

/*
 * Implements hook_form_alter().
 *
 * Add message fields to the main webform form.
 */

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sba_message_action_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type == 'sba_message_action') {
    $pos = strpos($form_id, 'client_form');

    if ($pos !== FALSE) {
      if(!empty($form['#node']->form_layouts)) {
        $form['#attached']['css'][] = drupal_get_path('module', 'sba_message_action')
          . '/css/message-action-form-layouts.css';
      }
      else {
        $form['#attached']['css'][] = drupal_get_path('module', 'sba_message_action')
          . '/css/no-form-layouts.css';
      }
      // Create a container on the form for all messages.
      $form['sba_messages'] = array(
        '#type' => 'container',
        '#tree' => TRUE,
        '#attributes' => array(
          'id' => array('sba-messages-form'),
        ),
      );

      $multiple = count($form['#node']->messages) > 1 ? TRUE : FALSE;
      // Create a set of fields for each message assigned to the form.
      foreach ($form['#node']->messages as $message) {
        sba_message_action_editable_message_form($form['sba_messages'], $message, $multiple);
      }
      $form['#validate'][] = 'sba_message_action_form_validate';

      array_unshift($form['#submit'], 'sba_message_action_form_submit');
    }
  }
}


/**
 * Build a form to represent each message attached to the action node. This
 * function will need to be sophisticated enough to handle both read-only
 * and editable messages. If it is a ready only message the form should be
 * presented without inputs and the message properties can be stashed in
 * 'value' type field elements so they can be read on submission (alternately
 * read-only messages could be reloaded during submission if that's easier -
 * might be a peformance hit though.
 *
 * $form in this case represents the webform_client_form.
 */
function sba_message_action_editable_message_form(&$form, $message, $multiple)
{
  $wrapper = entity_metadata_wrapper('sba_message', $message);

  if (!$multiple) {
    $form['message'][$message->sba_message_id] = array(
      '#type' => 'fieldset',
      '#title' => t('Your Message'),
      '#attributes' => array('class' => array('sba-message')),
    );
  }
  else {
    $form['message'][$message->sba_message_id] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('sba-message')),
    );
  }

  $form['message'][$message->sba_message_id]['message_id'] = array(
    '#type' => 'value',
    '#value' => $message->data['message_id'],
  );

  $form['message'][$message->sba_message_id]['sba_message_id'] = array(
    '#type' => 'value',
    '#value' => $message->sba_message_id,
  );

  $subject = $wrapper->field_sba_subject->value();

  if ($wrapper->field_subject_editable->value() != 'Not editable') {
    $form['message'][$message->sba_message_id]['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $subject,
    );
  }
  else {
    if (!$multiple) {
      $form['message'][$message->sba_message_id]['subject_show'] = array(
        '#type' => 'item',
        '#title' => t('Subject'),
        '#markup' => check_plain($subject),
      );
    }

    $form['message'][$message->sba_message_id]['subject'] = array(
      '#type' => 'value',
      '#value' => $subject,
    );
  }

  $body = $wrapper->field_sba_message->value();
  $editable = $wrapper->field_user_editable[0]->value() == 'editable' ? TRUE : FALSE;
  $required = $wrapper->field_editable_area_optional[0]->value() == 'required' ? TRUE : FALSE;
  $greeting = $wrapper->field_sba_placeholder_greeting->value();

  $form['message'][$message->sba_message_id]['greeting_show'] = array(
    '#type' => 'item',
    '#title' =>'',
    '#markup' => $greeting,
  );

  $form['message'][$message->sba_message_id]['greeting'] = array(
    '#type' => 'value',
    '#value' => $wrapper->field_sba_greeting->value(),
  );

  $form['message'][$message->sba_message_id]['body'] = array(
    '#type' => 'value',
    '#value' => $body,
  );

  if(!empty($body) && !$multiple) {
      if ($editable) {
        $title = t('');
      } else {
        $title = t('Message');
      }
      $form['message'][$message->sba_message_id]['body_show'] = array(
        '#type' => 'item',
        '#title' => $title,
        '#markup' => $body,
      );
  }

  if ($wrapper->field_user_editable[0]->value() == 'editable' && !$multiple) {

    $form['message'][$message->sba_message_id]['body_editable'] = array(
      //'#title' => t('Your Message'),
      '#type' => 'textarea',
      '#default_value' => $wrapper->field_editable_area->value(),
    );

    $form['message'][$message->sba_message_id]['body_required'] = array(
      '#type' => 'value',
      '#value' => $required,
    );

    $concl = $wrapper->field_bottom_conclusion->value();
    if(!empty($concl)) {
      $form['message'][$message->sba_message_id]['body_bottom'] = array(
        '#type' => 'item',
        '#title' => t('Conclusion'),
        '#markup' => check_plain($concl),
      );
    }
  }
  if(!$multiple) {
    $form['message'][$message->sba_message_id]['signature'] = array(
      '#markup' => '<p>Sincerely,<br />[Your name]<br />[Your Address]<br />[City, State, Zip]</p>',
    );
  }
}


/**
 * Validation handler for message action forms.
 */
function sba_message_action_form_validate($form, &$form_state) {
//  $is_single = count($form_state['values']['sba_messages']['message']) == 1 ? TRUE : FALSE;
//
//  if ($is_single) {
////    $message_id = array_keys($form_state['values']['sba_messages']['message']);
////    $message = $form['sba_messages']['message'][$message_id[0]];
////    if ($message['body_required']['#value'] == 1) {
////      $default = $message['body_editable']['#value'];
////      $edited = $form_state['values']['sba_messages']['message'][$message_id[0]]['body_editable'];
////      dpm($edited);
////      dpm($default);
////      dpm($form_state);
////      if ($edited == $default) {
////        form_set_error('body_editable', t('Editing of the the default message is required.'));
////      }
////    }
//  }
}

/**
 * Submit handler for message action forms.
 *
 * Capture all messages, combine with contact information and
 * submit to API.
 */
function sba_message_action_form_submit($form, &$form_state) {
  // Create array of messages to submit for target resolution.
//  $messages = array();
//
//  foreach ($form_state['values']['sba_messages']['message'] as $id => $message) {
//    $body_editable = isset( $message['body_editable']) ?  $message['body_editable'] : '';
//    $messages[$id]['body'] = sba_message_action_build_message_bodies($message['sba_message_id'], $body_editable);
//    $messages[$id]['subject'] = $message['subject'];
//  }
//  module_load_include('inc', 'springboard_advocacy', 'includes/springboard_advocacy.webform');
//  springboard_advocacy_send_message($messages, $form_state);

}

/**
 * Combines user edited message data with other static properties
 * to create the final message to deliver to the transaction server.
 */
function sba_message_action_build_message_bodies($sba_message_id, $body_editable) {
  // Load the message entity using the message entity id. We'll use the entity
  // to construct the full message.
  $message = entity_load('sba_message', array($sba_message_id));
  $message = array_shift($message);
  $wrapper = entity_metadata_wrapper('sba_message', $message);

  $user_message = array();
  $user_message[] =  $wrapper->field_sba_greeting->value();
  $user_message[] = $wrapper->field_sba_message->value();
  $user_message[] = $body_editable;
  $user_message[] = $wrapper->field_bottom_conclusion->value();
  $user_message[] = $wrapper->field_sba_signature->value();

  $user_message = implode("\n\n", array_filter($user_message));

  return $user_message;
}

/**
 * Implements hook_form_layouts_info().
 */
function sba_message_action_form_layouts_info() {
  $templates = array();

  $templates['two_column_message_left_vertical'] = array(
    'name' => t('Two column: message form left, vertical user form right'),
    'types' => array('sba_message_action'),
    'theme' => 'two_column_message_left_vertical',
    'pattern' => 'two_column_message_left_vertical\'0-9\'+',
    'template' => 'two-column-message-left-vertical',
    'path' => drupal_get_path('module', 'sba_message_action') . '/templates/form_layouts',
    'hide title' => FALSE,
  );

  $templates['two_column_message_left'] = array(
    'name' => t('Two column: message form left, horizontal user form right'),
    'types' => array('sba_message_action'),
    'theme' => 'two_column_message_left',
    'pattern' => 'two_column_message_left\'0-9\'+',
    'template' => 'two-column-message-left',
    'path' => drupal_get_path('module', 'sba_message_action') . '/templates/form_layouts',
    'hide title' => FALSE,
  );

  $templates['two_column_message_right'] = array(
    'name' => t('Two column: message form right, horizontal user form Left.'),
    'types' => array('sba_message_action'),
    'theme' => 'two_column_message_right',
    'pattern' => 'two_column_message_right\'0-9\'+',
    'template' => 'two-column-message-right',
    'path' => drupal_get_path('module', 'sba_message_action') . '/templates/form_layouts',
    'hide title' => FALSE,
  );

  $templates['two_column_body_left'] = array(
    'name' => t('Two column: call to action and image left, forms right.'),
    'types' => array('sba_message_action'),
    'theme' => 'two_column_body_left',
    'pattern' => 'two_column_body_left\'0-9\'+',
    'template' => 'two-column-body-left',
    'path' => drupal_get_path('module', 'sba_message_action') . '/templates/form_layouts',
    'hide title' => FALSE,
  );

  $templates['two_column_body_right'] = array(
    'name' => t('Two column: call to action and image right, forms left.'),
    'types' => array('sba_message_action'),
    'theme' => 'two_column_body_right',
    'pattern' => 'two_column_body_right\'0-9\'+',
    'template' => 'two-column-body-right',
    'path' => drupal_get_path('module', 'sba_message_action') . '/templates/form_layouts',
    'hide title' => FALSE,
  );

  return $templates;
}

/**
 * @param $vars
 */
function sba_message_action_preprocess_two_column_message_right(&$vars) {
  sba_message_action_build_preprocess($vars);
}

/**
 * @param $vars
 */
function sba_message_action_preprocess_two_column_message_left(&$vars) {
  sba_message_action_build_preprocess($vars);
}

/**
 *
 * Implements hook_preprocess_hook.
 *
 * Form layouts preprocess function.
 *
 * @param $vars
 */
function sba_message_action_preprocess_two_column_message_left_vertical(&$vars) {
  sba_message_action_build_preprocess($vars);
}

/**
 * Implements hook_preprocess_hook.
 *
 * Form layouts preprocess function.
 *
 * @param $vars
 */
function sba_message_action_preprocess_two_column_body_left(&$vars) {
  sba_message_action_build_preprocess($vars);
}

/**
 * Implements hook_preprocess_hook.
 *
 * Form layouts preprocess function.
 *
 * @param $vars
 */
function sba_message_action_preprocess_two_column_body_right(&$vars) {
  sba_message_action_build_preprocess($vars);
}

/**
 * Helper function for form layouts preprocessors.
 *
 * @param $vars
 */
function sba_message_action_build_preprocess(&$vars) {
  $element = $vars['element'];
  $node = $element['#node'];

  $vars['webform'] = drupal_render($element['submitted']);
  $vars['message_fieldset'] = drupal_render($element['sba_messages']);
  $vars['form'] = $element;
  $vars['social'] = '';

  // insert social icons
  if(module_exists('sb_social')) {
    $social_enabled = in_array($node->type, array_filter(variable_get('springboard_social_enabled_content_types', array())));
    $social_configured = variable_get('springboard_social_addthis_profile_id', FALSE);
    if ($social_enabled && !empty($social_configured)) {
      $vars['social'] = token_replace('[sb_social:share_links]', array('node' => $node));
    }
  }

  //fieldset legends
  $vars['form_legend'] = t('Take Action Now!');
  $vars['user_legend'] = t('Your Information');

  // We remove image field in the default node--sba-message-action.tpl.php
  // and put it into form layouts here
  $image_field = field_get_items('node', $node, 'field_message_action_img');
  $image = field_view_value('node', $node, 'field_message_action_img', $image_field[0]);
  if(!empty($image['#item'])) {
    $vars['image'] = drupal_render($image);
  }

  // We remove call to action field in the default node--sba-message-action.tpl.php
  // and put it into form layouts here
  $body_field = field_get_items('node', $node, 'body');
  $body = field_view_value('node', $node, 'body', $body_field[0]);
  $vars['body'] = drupal_render($body);

  // Insert webform goals.
  if (module_exists('webform_goals')) {
    $goals = webform_goal_load_multiple($node->nid);
    $goal = array_pop($goals);  //get the most recently enabled goal
    if (!empty($goal)) {
      $vars['goal'] = '<div class="wg-goal" style="display: none;" data-gid="' . $goal['gid'] . '"></div>';
    }
  }

}

/**
 * Implements hook_preprocess_node.
 *
 * Define theme wrappers for non-form-layouts nodes.
 * So they can have a "layout".
 *
 * @param $vars
 */
function sba_message_action_preprocess_node(&$vars) {
  if($vars['node']->type == 'sba_message_action') {
    $vars['use_layouts'] = !empty($vars['form_layouts']) ? TRUE : FALSE;
    if (empty($vars['use_layouts'])) {
      $vars['content']['webform']['#theme_wrappers'][] = 'message_action_webform_wrapper';
      $vars['content']['webform']['#form']['submitted']['#theme_wrappers'][] = 'message_action_submitted_wrapper';
      $vars['content']['webform']['#form']['sba_messages']['#theme_wrappers'][] = 'message_action_messages_wrapper';
    }
  }
}


/**
 * Theme wrapper to create "Your Information" fieldset
 * and fluid bootstrap divs on non-form-layout nodes.
 *
 * @param $vars
 * @return string
 */
function theme_message_action_submitted_wrapper($vars) {
  $legend = t('Your Information');
  return '<div id = "left" class = "span5"><fieldset id="your-information-wrapper" class = "form-wrapper"><legend>' . $legend . '</legend>' . $vars['element']['#children']  . '</fieldset></div>';
}

/**
 * Theme wrapper to create fluid bootstrap divs around "Your Message" fieldset
 * on non-form-layout nodes.
 *
 * @param $vars
 * @return string
 */
function theme_message_action_messages_wrapper($vars) {
  return '<div id = "right" class = "span7">' . $vars['element']['#children']  . '</div>';
}

/**
 * Theme wrapper to create "Take Action Now" fieldset
 * and fluid bootstrap divs on non-form-layout nodes.
 *
 * @param $vars
 * @return string
 */
function theme_message_action_webform_wrapper($vars) {
  $legend = t('Take action now');
  return ' <div class="row-fluid"><fieldset id="webform-wrapper" class = "form-wrapper"><legend>' . $legend . '</legend>' . $vars['element']['#children']  . '</fieldset></div>';
}

/**
 * Implements hook_theme
 * @return array
 */
function sba_message_action_theme() {
  return array(
    'message_action_submitted_wrapper' => array(
      'render element'  => 'element',
    ),
    'message_action_messages_wrapper' => array(
      'render element'  => 'element',
    ),
    'message_action_webform_wrapper' => array(
      'render element'  => 'element',
    ),
  );
}


/**
 * Implements hook_node_view.
 *
 * Theme the messages into the node's content.
 */
//function sba_message_action_node_view($node, $view_mode, $langcode) {
//  if ($node->type == 'sba_message_action') {
//    $node->content['messages'] = array(
//      '#markup' => theme('sba_message_action_messages', array('messages' => $node->messages)),
//      '#weight' => 100,
//    );
//  }
//}


//function sba_message_action_theme() {
//  return array(
//    'sba_message_action_messages' => array(
//      'variables' => array('messages' => array()),
//    ),
//  );
//}
//
//function theme_sba_message_action_messages($vars) {
//  $output = '';
//  foreach ($vars['messages'] as $message) {
//    $controller = entity_get_controller('sba_message');
//    $content = $controller->view(array($message->sba_message_id => $message));
//      $output .= drupal_render($content);
//  }
//   return $output;
//}
