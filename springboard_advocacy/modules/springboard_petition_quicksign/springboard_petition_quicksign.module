<?php

/**
 * Quick sign form.
 */
function springboard_petition_quicksign_form() {
  global $user;
  $node = node_load(arg(1));

  $form = array();
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Your email address'),
    '#default_value' => $user->uid ? $user->mail : '',
  );
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign our petiton'),
  );
  $form['#validate'][] = 'springboard_petition_quicksign_form_validate';
  $form['#submit'][] = 'springboard_petition_quicksign_form_submit';
  return $form;
}

/**
 * Validation callback for quicksign form.
 */
function springboard_petition_quicksign_form_validate(&$form, &$form_state) {
  // Validate mail field
  $mail = isset($form_state['values']['mail']) ? $form_state['values']['mail'] : FALSE;
  if (!valid_email_address($mail)) {
    form_set_error('mail', t('Invalid email address.'));
    return;
  }

  $node = node_load($form_state['values']['nid']);
  // Load user profile from email
  $account = user_load_by_mail($mail);
  // No profile available
  if (!$account) {
    $_SESSION['springboard_petition_quicksign']['profile']['mail'] = $mail;
    drupal_set_message(t('Your user profile is missing some information. Please fill out the full form to sign our petition.'));
    drupal_redirect_form($form_state);
  }

  // Compile list of webform required fields
  $required_fields = springboard_petition_quicksign_get_required_fields($node);
  // compare profile to required fields via the Webform User field map.
  $map = webform_user_user_map($node->nid);
  $missing_fields = FALSE;
  foreach ($map as $webform_field => $profile_field) {
    $items  = field_get_items('user', $account, $profile_field);
    $profile[$webform_field] = !empty($items[0]['value']) ? $items[0]['value'] : FALSE;
    // special handling for mail
    if ($webform_field == 'mail') {
      $profile['mail'] = $mail;
    }
    if (in_array($webform_field, $required_fields) && empty($profile[$webform_field])) {
      if (!empty($items[0]['value'])) {
        $profile[$webform_field] = $items[0]['value'];
      }
      else {
        // One or more required fields are missing.
        $profile[$webform_field] = '';
        $missing_fields = TRUE;
      }
    }
  }

  if ($missing_fields) {
    $_SESSION['springboard_petition_quicksign']['profile'] = $profile;
    drupal_set_message(t('Your user profile is missing some information. Please fill out the full form to sign our petition.'));
    drupal_redirect_form($form_state);
  }

  // If everything has gone smoothly to this point package up the
  // loaded profile and pass it off for use during the submit callback.
  $form_state['node'] = $node;
  $form_state['springboard_petition_quicksign']['profile'] = $profile;
  // No validation errors, set quicksign flag in session so we can pick this up
  // in webform submission insert hook.
  $_SESSION['springboard_petition_quicksign'] = TRUE;
}

/**
 * Submit callback for quicksign form.
 */
function springboard_petition_quicksign_form_submit($form, &$form_state) {
  $node = $form_state['node'];
  $profile = isset($form_state['springboard_petition_quicksign']['profile']) ? $form_state['springboard_petition_quicksign']['profile'] : FALSE;
  if ($profile) {
    // Build submission

    // Execute form submission
    _springboard_petition_quicksign_build_submission($form, $form_state, $node, $profile);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function springboard_petition_quicksign_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Modify the options on a specific instance of this node type.
  $node = isset($form['#node']) ? $form['#node'] : FALSE;
  if (isset($node->type) && springboard_petition_is_petition_type($node->type)) {
    $node->quicksign_enabled = springboard_petition_quicksign_is_enabled($node);
    $form['springboard_petition_quicksign'] = array(
      '#type' => 'fieldset',
      '#title' => t('Quick Sign settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['springboard_petition_quicksign']['quicksign_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Quick Sign'),
      '#description' => t('Turning on Quick Sign will allow users with existing profiles to sign a petition using only their email address.'),
      '#default_value' => isset($node->quicksign_enabled) ? $node->quicksign_enabled : '',
    );
    // No validation or submit handlers, we'll handle this during hook_node_insert() and hook_node_update().
  }
}

/**
 *  Implements hook_form_alter().
 */
function springboard_petition_quicksign_form_alter(&$form, $form_state, $form_id) {
  // Webform
  if (strpos($form_id, 'webform_client') !== FALSE && arg(2) != 'submission' && arg(4) != 'edit') {
    // Petition content type
    if (isset($form['#node']) && springboard_petition_is_petition_type($form['#node']->type)) {
      $node = $form['#node'];
      // Quicksign enabled
      if (springboard_petition_quicksign_is_enabled($node)) {
        // Check for errors in quicksign form submission
        // If present attempt to set Webform fields with
        // profile values from prior submission.
        $profile = !empty($_SESSION['springboard_petition_quicksign']['profile']) ? $_SESSION['springboard_petition_quicksign']['profile'] : FALSE;
        if ($profile) {
          springboard_petition_quicksign_form_defaults($form, $node, $profile);
          unset($_SESSION['springboard_petition_quicksign']);
          //TODO: display message explaining what's going on.
          drupal_set_message('Your profile is missing some information. Please fill out the full form to sign our petition.');
        }
      }
    }
  }
}

/**
 * Populate a webform with defaults from the user profile.
 *
 * @param mixed $form
 *   Webform FAPI array.drupal_form_submit($form_id, $form_state, $node, $webform_submission);
 *
 * @param object $node
 *   Webform Node object.
 *
 * @param array $user_data
 *   User profile data to use during substitution
 */
function springboard_petition_quicksign_form_defaults(&$form, $node, $user_data) {
  $components = $node->webform['components'];
  $component_hierarchy = __webform_user_parse_components($node->nid, $components);
  $map = webform_user_user_map($node->nid);
  // Map each profile field if there's a matching component field.
  foreach ($map as $webform_field => $profile_field) {
    if (array_key_exists($webform_field, $component_hierarchy)) {
      $form_field = &_webform_user_find_field($form, $component_hierarchy[$webform_field]);
      if (isset($user_data[$webform_field])) {
        $profile_value = $user_data[$webform_field];
        // Set the value.
        switch ($form_field['#type']) {
          case 'date':
            $form_field['#default_value'] = $profile_value;
            break;
          case 'checkboxes':
            if ($profile_value) {
              $form_field['#default_value'] = array($profile_field);
            }
            break;
          default:
            $form_field['#default_value'] = check_plain($profile_value);
            break;
        }
      } // End if webform empty with a profile field value.
    } // End if field is in component heirarchy.
  }
}

/**
 * Implements hook_node_insert().
 */
function springboard_petition_quicksign_node_insert($node) {
  if (springboard_petition_is_petition_type($node->type) && isset($node->quicksign_enabled)) {
    springboard_petition_quicksign_save($node->nid, $node->quicksign_enabled);
  }
}

/**
 * Implements hook_node_update().
 */
function springboard_petition_quicksign_node_update($node) {
  if (springboard_petition_is_petition_type($node->type) && isset($node->quicksign_enabled)) {
    springboard_petition_quicksign_save($node->nid, $node->quicksign_enabled);
  }

}

/**
 * Implements hook_node_delete().
 */
function springboard_petition_quicksign_node_delete($node) {
  if (springboard_petition_is_petition_type($node->type)) {
    springboard_petition_quicksign_delete($node->nid);
  }
}

/**
 * Implements hook_node_view().
 */
function springboard_petition_quicksign_node_view($node, $view_mode, $langcode) {
  if (springboard_petition_is_petition_type($node->type)) {
    if (springboard_petition_quicksign_is_enabled($node)) {
      $node->content['springboard_petition_quicksign'] = drupal_get_form('springboard_petition_quicksign_form');
      $node->content['springboard_petition_quicksign']['#weight'] = 1000;
    }
  }
}

/**
 * Save quick sign settings per-node.
 */
function springboard_petition_quicksign_save($nid, $enabled) {
  springboard_petition_quicksign_delete($nid);
  $record = array(
    'nid' => $nid,
    'quicksign_enabled' => $enabled,
  );
  drupal_write_record('springboard_quicksign', $record);
}

/**
 * Remove a quicksign record for a given node id.
 *
 * @param int $nid
 *   Node ID.
 */
function springboard_petition_quicksign_delete($nid) {
  db_delete('springboard_quicksign')
            ->condition('nid', $nid, '=')
            ->execute();
}

/**
 * Indicates if a given node has quicksign enabled.
 *
 * @param object $node
 *   Node object
 *
 * @return
 *   returns TRUE if node is a petition node type and
 *   quicksign is enabled, otherwise FALSE.
 */
function springboard_petition_quicksign_is_enabled($node) {
  if (!springboard_petition_is_petition_type($node->type)) {
    return FALSE;
  }
  
  $result = db_query('SELECT quicksign_enabled FROM {springboard_quicksign} WHERE nid = :nid', array(':nid' => $node->nid));
  return (bool) $result->fetchColumn();
}

/**
 * 
 */
function springboard_petition_quicksign_get_required_fields($node) {
  $required_fields = array();
  // TODO: we may need to convert to rendering component form api arrays
  // and then processing those, will need to test all commonly available
  // component types to confirm this approach works.
  if (is_object($node) && isset($node->webform['components'])) {
    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['type'] != 'hidden' && $component['mandatory'] == 1) {
        $required_fields[] = $component['form_key'];
      }
    }
  }
  return $required_fields;
}

function _springboard_petition_quicksign_build_submission($form, &$original_form_state, $node, $submission) {
  $submit_text = $node->content['webform']['#form']['actions']['submit']['#value']; // sketchy.
  $form_id = 'webform_client_form_' . $node->nid;
  $form_state['webform_completed'] = 1;
  $form_state['values'] = array(
    'submit' => $submit_text,
    'op' => $submit_text,
    'details' => array(
      'nid' => $node->nid,
      'sid' => '',
      'uid' => 0,
      'page_num' => 1,
      'page_count' => 1,
      'finished' => 0,
    ),
    'values' => array(),
  );
  $form_state['clicked_button']['#parents'] = NULL;
  $form_state['values']['submitted'] = springboard_petition_quicksign_submission_tree_build($submission, $node->webform['components'], $tree, 0);
  $webform_submission = array(
    'nid' => $node->nid,
    'uid' => 0,
    'submitted' => time(),
    'remote_addr' => ip_address(),
    'data' => array(),
  );
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] != 'fieldset') {
      $fields[] = $component['form_key'];
      if (isset($submission[$component['form_key']]) && !is_array($submission[$component['form_key']])) {
        $webform_submission['data'][$cid]['value'][] = $submission[$component['form_key']];
      }
      elseif (isset($submission[$component['form_key']])) {
        $webform_submission['data'][$cid]['value'] = $submission[$component['form_key']];
      }
      else {
        // Backfill with null data to match what Webform does.
        $webform_submission['data'][$cid]['value'][] = '';
      }
    }
  }
  drupal_form_submit($form_id, $form_state, $node, $webform_submission);
  unset($_SESSION['springboard_petition_quicksign']);
  // Pass through webform's version of $form_state['redirect']
  // This ensures form submission redirects correctly even though we
  // are processing a different form.
  $original_form_state['redirect'] = $form_state['redirect'];
}

/**
 * Build the webform submission tree.
 *
 * @param array $submission
 *   Associative array of webform component form keys and their values.
 *
 * @param array $src
 *   webform components organized by component id.
 *
 * @param array $tree
 *   Output storage.
 *
 * @param mixed $parent
 *   Parent component (if any).
 *
 * @return mixed
 *   Returns the submitted values in a tree structure that Webform can parse.
 */
function springboard_petition_quicksign_submission_tree_build($submission, $src, &$tree, $parent) {

  foreach ($src as $cid => $component) {
    if ($component['pid']) {
      $parent_key = $src[$component['pid']]['form_key'];
      if (!isset($tree[$parent_key])) {
        $tree[$parent_key] = array();
      }
      $tree[$parent_key][$component['form_key']] = isset($submission[$component['form_key']]) ? $submission[$component['form_key']] : NULL;
    }
    else {
      $tree[$component['form_key']] = isset($submission[$component['form_key']]) ? $submission[$component['form_key']] : NULL;
    }

  }
  return $tree;
}

function springboard_petition_quicksign_webform_submission_insert($node, $submission) {
  $quicksign = $_SESSION['springboard_petition_quicksign'];
  if ($quicksign) {
    $record = array(
      'sid' => $submission->sid,
      'nid' => $submission->nid,
      'created' => time(),
    );
    drupal_write_record('springboard_quicksign_submissions', $record);
  }
}
