<?php

/**
 * @file
 * Provide options for form layouts in donation forms.
 */

/**
 * Implements hook_permission().
 */
function form_layout_permission() {
  return array(
    'administer form layouts' => array(
      'title' => t('Administer Form layouts'),
      'description' => t('Configure default form layouts for donation forms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function form_layout_menu() {
  $items = array();

  $base_path = form_layout_menu_base_path();
  $arg = form_layout_menu_base_path_arg_position();

  $items[$base_path] = array(
    'title' => 'Form layouts',
    'page callback' => 'form_layout_list',
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  $items[$base_path . '/add'] = array(
    'title' => 'Add form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_add'),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items[$base_path . '/%form_layout/edit'] = array(
    'title' => 'Edit form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_edit', $arg),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items[$base_path . '/%form_layout/delete'] = array(
    'title' => 'Delete form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_delete_confirm', $arg),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * A base path for which to provide menu items.
 *
 * @return string
 */
function form_layout_menu_base_path() {
  return 'admin/config/system/fundraiser/form_layout';
}

/**
 * The arg() posiiton where the forml layout machine name will be.
 *
 * This is for the edit and delete operations.
 * If we change the base path also change this.
 *
 * @return int
 */
function form_layout_menu_base_path_arg_position() {
  return 5;
}

/**
 * Load a single form layout or all form layouts.
 *
 * @param string|null $name  The machine name.  Leave NULL to get all layouts.
 *
 * @return array|bool  Single layout array, or all layouts, or FALSE
 */
function form_layout_load($name = NULL) {
  $layouts = variable_get('form_layout', array());
  if (is_null($name)) {
    return $layouts;
  }
  elseif (isset($layouts[$name])) {
    return $layouts[$name];
  }

  return FALSE;
}

/**
 * Save a form layout.
 *
 * If the machine name already exists it will be overwritten.
 *
 * @param string $machine_name
 * @param array $layout
 */
function form_layout_save($machine_name, $layout) {
  $layouts = variable_get('form_layout');
  $layouts[$machine_name] = $layout;

  variable_set('form_layout', $layouts);
}

/**
 * Delete a form layout
 *
 * @param string $machine_name
 */
function form_layout_delete($machine_name) {
  $layouts = variable_get('form_layout');
  unset($layouts[$machine_name]);

  variable_set('form_layout', $layouts);
}

/**
 * Implements hook_fundraiser_field_info()
 *
 * Provides the additional regions fields.
 *
 * @todo Is the weighting working?
 */
function form_layout_fundraiser_field_info() {
  $fields = array();

  $fields['top_region'] = array(
    '#title' => t('Top region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layout_field_create',
    '#display_callback' => 'form_layout_top_region_display',
    '#weight' => -50,
  );

  $fields['left_region'] = array(
    '#title' => t('Left region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layout_field_create',
    '#display_callback' => 'form_layout_left_region_display',
    '#weight' => -48,
  );

  $fields['right_region'] = array(
    '#title' => t('Right region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layout_field_create',
    '#display_callback' => 'form_layout_right_region_display',
    '#weight' => -48,
  );

  $fields['bottom_region'] = array(
    '#title' => t('Bottom region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layout_field_create',
    '#display_callback' => 'form_layout_bottom_region_display',
    '#weight' => -47,
  );

  return $fields;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 *
 * When the fields are being created, use the layout to rearrange the fieldsets.
 *
 * The layout selected is stored in a session here because I can't figure out
 * another way to get at it from the node_form when the node is being created.
 * @todo Is there a better way to get this value here?
 */
function form_layout_fundraiser_field_info_alter(&$info) {
  if (isset($_SESSION['form_layout']) && $_SESSION['form_layout'] != 'none') {

    $layout = form_layout_load($_SESSION['form_layout']);

    foreach ($layout['layout'] as $region => $content) {
      foreach ($content as $fieldset) {
        // place the fieldset into the correct region
        $info[$region][$fieldset] = $info[$fieldset];
        // remove the original fieldset
        unset($info[$fieldset]);
      }
    }
  }

  // remove the session var
  unset($_SESSION['form_layouts']);
}

/**
 * Field create callback for the regions.
 *
 * @param stdClass $fundraiser
 * @param array $field
 *
 * @return array|bool $field or FALSE to not create the field.
 */
function form_layout_field_create($fundraiser, $field) {
  return $field;
}

/**
 * Display callback for the top region.
 *
 * Does some bootstrap formatting and removes the title.
 *
 * @param array $form
 * @param array $form_state
 * @param array $field
 *
 * @return array
 */
function form_layout_top_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span12');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -50;
  return $field;
}

/**
 * Display callback for the left region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @param array $form
 * @param array $form_state
 * @param array $field
 *
 * @return array
 */
function form_layout_left_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span6');
  $field['#title'] = '';

  // this div gets closed after the right region.
  $field['#prefix'] = '<div class="row">';

  $field['#weight'] = -49;
  return $field;
}

/**
 * Display callback for the right region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @param array $form
 * @param array $form_state
 * @param array $field
 *
 * @return array
 */
function form_layout_right_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span6');
  $field['#title'] = '';

  // this div was opened before the left region.
  $field['#suffix'] = '</div>';

  $field['#weight'] = -48;
  return $field;
}

/**
 * Display callback for the bottom region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @param array $form
 * @param array $form_state
 * @param array $field
 *
 * @return array
 */
function form_layout_bottom_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span12');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -47;
  return $field;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 *
 * Adds a fieldset and select list to choose layout options
 * on donation forms.
 */
function form_layout_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $form['form_layout'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form Layout'),
      '#description' => t('Select the form layout for this form. Defaults to one-column layout.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['form_layout']['form_layout'] = array(
      '#type' => 'select',
      '#title' => t('Layout'),
      '#options' => form_layout_get_layout_options(),
      '#default_value' => 0,
      '#description' => 'Choose an initial layout for the form.  Choose None to leave the layout as-is.',
    );
  }
  $form['#submit'][] = 'form_layout_node_form_submit';
}

/**
 * Provides an array with machine_name => layout name
 *
 * @return array
 */
function form_layout_get_layout_options() {
  $options = array();
  $options['none'] = t('None/No Change');
  $layouts = form_layout_load();

  foreach ($layouts as $id => $layout) {
    $options[$id] = $layout['name'];
  }

  return $options;
}

/**
 * Provides an array with region name and pretty values.
 *
 * @return array
 */
function form_layout_get_region_options() {
  return array(
    'top_region' => 'Top',
    'left_region' => 'Left',
    'right_region' => 'Right',
    'bottom_region' => 'Bottom',
  );
}

function form_layout_node_form_submit($form, &$form_state) {
  $layout_name = $form_state['values']['form_layout'];
  if ($layout_name == 'none') {
    // don't make a change
    return;
  }

  if (is_null($form_state['values']['nid'])) {
    // if this is a new node, set a session var to change the layout
    // in form_layouts_fundraiser_field_info_alter()
    // We do this because we don't have fields attached
    // until the node has been saved.
    $_SESSION['form_layout'] = $layout_name;
  }
  else {
    // existing node
    // Unfortunately we can't use the same hook as above.
    // So we'll just change things now.
    form_layout_update_layout($form_state['values']['webform']['components'], $layout_name);
  }

}

function form_layout_update_layout(&$components, $layout_name) {
  $cids = form_layout_key_cids_by_form_key($components);

  $layout = form_layout_load($layout_name);

  foreach ($layout['layout'] as $region => $content) {
    foreach ($content as $fieldset) {
      $cid = $cids[$fieldset];
      $components[$cid]['pid'] = $cids[$region];
    }
  }
}

/**
 * Takes webform components keyed by cid and keys them by form_key.
 *
 * @param array $components  As given in $node->webform['components']
 *
 * @return array  form_key => cid
 */
function form_layout_key_cids_by_form_key($components) {
  $return = array();
  foreach ($components as $cid => $component) {
    $return[$component['form_key']] = $cid;
  }
  return $return;
}
