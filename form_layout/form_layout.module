<?php

/**
 * @file
 * Provide options for form layouts in donation forms.
 */

/**
 * Implements hook_permission().
 */
function form_layout_permission() {
  return array(
    'administer form layouts' => array(
      'title' => t('Administer Form layouts'),
      'description' => t('Configure default form layouts for donation forms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function form_layout_menu() {
  $items = array();

  $base_path = form_layout_menu_base_path();
  $arg = form_layout_menu_base_path_arg_position();

  $items[$base_path] = array(
    'title' => 'Form layouts',
    'page callback' => 'form_layout_list',
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  $items[$base_path . '/add'] = array(
    'title' => 'Add form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_add'),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items[$base_path . '/%form_layout/edit'] = array(
    'title' => 'Edit form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_edit', $arg),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items[$base_path . '/%form_layout/delete'] = array(
    'title' => 'Delete form layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_layout_delete_confirm', $arg),
    'access arguments' => array('administer form layouts'),
    'file' => 'form_layout.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * A base path for which to provide menu items.
 *
 * @return string
 *   The path to form_layout including the module name excluding the last slash.
 */
function form_layout_menu_base_path() {
  return 'admin/config/system/fundraiser/form_layout';
}

/**
 * The arg() position where the form layout machine name will be.
 *
 * This is for the edit and delete operations.
 * If we change the base path also change this.
 *
 * @return int
 *   The posiiton of the form layout wildcard.
 */
function form_layout_menu_base_path_arg_position() {
  return 5;
}

/**
 * Load a single form layout or all form layouts.
 *
 * @param string|null $name
 *   The machine name.  Leave NULL to get all layouts.
 *
 * @return array|boolean
 *   Single layout array, or all layouts, or FALSE
 */
function form_layout_load($name = NULL) {
  $layouts = variable_get('form_layout', array());
  if (is_null($name)) {
    return $layouts;
  }
  elseif (isset($layouts[$name])) {
    return $layouts[$name];
  }

  return FALSE;
}

/**
 * Save a form layout.
 *
 * If the machine name already exists it will be overwritten.
 *
 * @param string $machine_name
 *   The identifier string for the form layout.
 *
 * @param array $layout
 *   The layout array with name and layout definition.
 */
function form_layout_save($machine_name, $layout) {
  $layouts = form_layout_load();
  $layouts[$machine_name] = $layout;

  variable_set('form_layout', $layouts);
}

/**
 * Delete a form layout.
 *
 * @param string $machine_name
 *   Identifier string for the form layout.
 */
function form_layout_delete($machine_name) {
  $layouts = form_layout_load();
  unset($layouts[$machine_name]);

  variable_set('form_layout', $layouts);
}

/**
 * Implements hook_fundraiser_field_info().
 *
 * Provides the additional regions fields.
 */
function form_layout_fundraiser_field_info() {
  $fields = array();

  // $fields['left_sidebar'] = array(
  //   '#title' => t('Left sidebar'),
  //   '#type' => 'fieldset',
  //   '#required' => 0,
  //   '#display_callback' => 'form_layout_left_sidebar_display',
  // );

  $fields['top_region'] = array(
    '#title' => t('Top region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#display_callback' => 'form_layout_top_region_display',
  );

  $fields['left_region'] = array(
    '#title' => t('Left region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#display_callback' => 'form_layout_left_region_display',
  );

  $fields['right_region'] = array(
    '#title' => t('Right region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#display_callback' => 'form_layout_right_region_display',
  );

  $fields['bottom_region'] = array(
    '#title' => t('Bottom region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#display_callback' => 'form_layout_bottom_region_display',
  );

  // $fields['right_sidebar'] = array(
  //   '#title' => t('Right sidebar'),
  //   '#type' => 'fieldset',
  //   '#required' => 0,
  //   '#display_callback' => 'form_layout_right_sidebar_display',
  // );

  return $fields;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 *
 * When the fields are being created, use the layout to rearrange the fieldsets.
 *
 * The layout selected is stored in a session here because I can't figure out
 * another way to get at it from the node_form when the node is being created.
 * @todo Is there a better way to get this value here?
 */
function form_layout_fundraiser_field_info_alter(&$info) {
  if (isset($_SESSION['form_layout']) && $_SESSION['form_layout'] != 'none') {

    $layout = form_layout_load($_SESSION['form_layout']);

    foreach ($layout['layout'] as $region => $content) {
      foreach ($content as $fieldset) {
        // Place the fieldset into the correct region.
        $info[$region][$fieldset] = $info[$fieldset];
        // Remove the original fieldset.
        unset($info[$fieldset]);
      }
    }
  }

  // Remove the session var.
  unset($_SESSION['form_layouts']);
}

/**
 * Implements hook_theme().
 */
function form_layout_theme() {
  return array(
    'form_layout_region' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme wrapper for regions.
 *
 * Replaces region fieldset tags with divs.
 */
function theme_form_layout_region($variables) {
  $element = $variables['element'];

  element_set_attributes($element, array('id'));

  $output = '<div' . drupal_attributes($element['#attributes']) . '><div class="inner">';
  if (!empty($element['#title'])) {
    $output .= '<div class="div-title">' . $element['#title'] . '</div>';
  }
  if (!empty($element['#description'])) {
    $output .= '<div class="div-description">' . $element['#description'] . '</div>';
  }
  $output .= $element['#children'];
  if (isset($element['#value'])) {
    $output .= $element['#value'];
  }
  $output .= "</div></div>\n";
  return $output;
}

/**
 * Display callback for the left sidebar.
 *
 * Does some bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
// function form_layout_left_sidebar_display($form, $form_state, $field) {
//   $sidebar_class = form_layout_get_sidebar_class_name($form['#node']);
//   // Note that we're intentionally removing other classes here.
//   $field['#attributes']['class'] = array('fieldset', 'left-sidebar', 'span3');
//   $field['#title'] = '';
//   $field['#weight'] = -60;
//   $field['#theme_wrappers'][] = 'form_layout_region';
//   // These are closed in the bottom region suffix.
//   $field['#prefix'] = '<div class="' . $sidebar_class . '">';
//   $field['#prefix'] .= '<div class="container"><div class="layout-row"><div class="span12">';

//   return $field;
// }

/**
 * Display callback for the right sidebar.
 *
 * Does some bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
// function form_layout_right_sidebar_display($form, $form_state, $field) {
//   // Note that we're intentionally removing other classes here.
//   $field['#attributes']['class'] = array('fieldset', 'right-sidebar', 'span3');
//   $field['#title'] = '';
//   $field['#weight'] = -55;
//   $field['#theme_wrappers'][] = 'form_layout_region';

//   // Closed in bottom region.
//   $field['#prefix'] = '<div class="middle-right-sidebar">';

//   return $field;
// }

/**
 * Display callback for the top region.
 *
 * Does some bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
function form_layout_top_region_display($form, $form_state, $field) {
  // Note that we're intentionally removing other classes here.
  $field['#attributes']['class'] = array('span12', 'fieldset', 'form-layouts');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="center-area"><div class="layout-row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -50;
  $field['#theme_wrappers'][] = 'form_layout_region';
  return $field;
}

/**
 * Display callback for the left region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
function form_layout_left_region_display($form, $form_state, $field) {
  // Note that we're intentionally removing other classes here.
  $field['#attributes']['class'] = array('span6', 'fieldset', 'form-layouts');
  $field['#title'] = '';

  // This div gets closed after the right region.
  $field['#prefix'] = '<div class="layout-row">';

  $field['#weight'] = -49;

  $field['#theme_wrappers'][] = 'form_layout_region';
  return $field;
}

/**
 * Display callback for the right region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
function form_layout_right_region_display($form, $form_state, $field) {
  // Note that we're intentionally removing other classes here.
  $field['#attributes']['class'] = array('span6', 'fieldset', 'form-layouts');
  $field['#title'] = '';

  // This div was opened before the left region.
  // row
  $field['#suffix'] = '</div>';

  $field['#weight'] = -48;

  $field['#theme_wrappers'][] = 'form_layout_region';
  return $field;
}

/**
 * Display callback for the bottom region.
 *
 * Does bootstrap formatting and removes the title.
 *
 * @return array
 *   The modified field array.
 */
function form_layout_bottom_region_display($form, $form_state, $field) {
  // Note that we're intentionally removing other classes here.
  $field['#attributes']['class'] = array('span12', 'fieldset', 'form-layouts');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="layout-row">';

  // Closes row
  $field['#suffix'] = '</div>';

  // Closes center-area
  $field['#suffix'] .= '</div>';

  // Closes middle-right-sidebar.
  // $field['#suffix'] .= '</div>';

  // These divs are opened in left sidebar prefix.
  // span12, row, container
  // $field['#suffix'] .= '</div></div></div>';

  // Closes both-sidebars
  // $field['#suffix'] .= '</div>';

  $field['#weight'] = -47;

  $field['#theme_wrappers'][] = 'form_layout_region';
  return $field;
}

/**
 * Implements hook_preprocess_HOOK() for webform_form().
 *
 * @todo Try these other hooks earlier in the process.
 *   form_layout_fundraiser_donation_form($form, $form_state)
 *   form_layout_form_webform_client_form_alter(&$form, &$form_state, $form_id)
 */
function form_layout_preprocess_webform_form(&$variables) {
  $submit_position = $variables['form']['#node']->submit_position;

  if (empty($submit_position)) {
    return;
  }

  $variables['form']['submitted'][$submit_position]['submit'] = $variables['form']['submit'];
  $variables['form']['submitted'][$submit_position]['actions'] = $variables['form']['actions'];

  $variables['form']['submitted'][$submit_position]['submit']['#weight'] = 999;
  $variables['form']['submitted'][$submit_position]['actions']['#weight'] = 1000;

  unset($variables['form']['submit']);
  unset($variables['form']['actions']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds a fieldset and select list to choose layout options
 * on donation forms.
 */
function form_layout_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $form['form_layout'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form Layout'),
      '#description' => t('Select the form layout for this form.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $options = form_layout_get_layout_options();
    $default_value = 'none';

    if (!empty($form['#node']->form_layout) && in_array($form['#node']->form_layout, array_keys($options))) {
      $default_value = $form['#node']->form_layout;
    }

    $form['form_layout']['form_layout'] = array(
      '#type' => 'select',
      '#title' => t('Layout'),
      '#options' => $options,
      '#default_value' => $default_value,
      '#description' => 'Choose a layout for the form.',
    );

    $options = form_layout_get_region_options();
    $default_value = 'bottom_region';
    if (!empty($form['#node']->submit_position) && in_array($form['#node']->submit_position, array_keys($options))) {
      $default_value = $form['#node']->submit_position;
    }

    $form['form_layout']['submit_position'] = array(
      '#type' => 'select',
      '#title' => t('Submit button position'),
      '#options' => $options,
      '#default_value' => $default_value,
      '#description' => 'Choose where the submit should be placed.',
    );
  }
  $form['#submit'][] = 'form_layout_node_form_submit';
}

/**
 * Provides machine name and layout name for select form elements.
 *
 * @return array
 *   array(machine_name => layout name, ...)
 */
function form_layout_get_layout_options() {
  $options = array();
  $options['none'] = t('None/No Change');
  $layouts = form_layout_load();

  foreach ($layouts as $id => $layout) {
    $options[$id] = $layout['name'];
  }

  return $options;
}

/**
 * Provides an array with region name and pretty values.
 *
 * @return array
 *   array(region form key => region name, ...)
 */
function form_layout_get_region_options() {
  return array(
    'top_region' => 'Top',
    'left_region' => 'Left',
    'right_region' => 'Right',
    'bottom_region' => 'Bottom',
  );
}

/**
 * Submit handler for the node form.
 *
 * If this is a new node, set a session var to change the layout
 * in form_layouts_fundraiser_field_info_alter().
 * We do this because we don't have fields attached
 * until the node has been saved.
 *
 * Unfortunately we can't do the same thing for editing an existing node.
 * So we'll just change things now by directly modifying the webform components
 * in $form_state['values'],
 * It will all get saved later on as part of being an entity.
 */
function form_layout_node_form_submit($form, &$form_state) {
  $layout_name = $form_state['values']['form_layout'];
  if ($layout_name == 'none') {
    // Don't make a change.
    return;
  }

  if (is_null($form_state['values']['nid'])) {
    // New node, so rearrange fieldsets later.
    $_SESSION['form_layout'] = $layout_name;
  }
  else {
    // Existing node, so rearrange fieldsets now.
    form_layout_update_layout($form_state['values']['webform']['components'], $layout_name);
  }
}

/**
 * Rearrange webform components to match the layout selected.
 *
 * @param array &$components
 *   Webform components, as in $node->webform['components']
 *
 * @param string $layout_name
 *   Machine name of the form layout.
 */
function form_layout_update_layout(&$components, $layout_name) {
  $cids = form_layout_key_cids_by_form_key($components);

  $layout = form_layout_load($layout_name);

  foreach ($layout['layout'] as $region => $content) {
    foreach ($content as $fieldset) {
      $cid = $cids[$fieldset];
      $components[$cid]['pid'] = $cids[$region];
    }
  }
}

/**
 * Takes webform components keyed by cid and keys them by form_key.
 *
 * @param array $components
 *   As given in $node->webform['components']
 *
 * @return array
 *   array(form_key => cid, ...)
 */
function form_layout_key_cids_by_form_key($components) {
  $return = array();
  foreach ($components as $cid => $component) {
    $return[$component['form_key']] = $cid;
  }
  return $return;
}

/**
 * Implements hook_node_insert().
 *
 * Save the form layout.
 */
function form_layout_node_insert($node) {
  form_layout_node_update($node);
}

/**
 * Implements hook_node_load().
 */
function form_layout_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (fundraiser_is_donation_type($node->type)) {
      $layout = form_layout_get_node_layout($node->nid);
      if (!empty($layout)) {
        $nodes[$node->nid]->form_layout = isset($layout['layout_name']) ? $layout['layout_name'] : 'none';
        $nodes[$node->nid]->submit_position = isset($layout['submit_position']) ? $layout['submit_position'] : 'bottom_region';
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function form_layout_node_update($node) {
  if (fundraiser_is_donation_type($node->type) && !empty($node->form_layout)) {
    form_layout_save_node_layout($node->nid, $node->form_layout, $node->submit_position);
  }
}

/**
 * Implements hook_node_delete().
 */
function form_layout_node_delete($node) {
  if (fundraiser_is_donation_type($node->type)) {
    form_layout_delete_node_layout($node->nid);
  }
}

/**
 * Saves the layout machine name to the DB.
 *
 * @param int $nid
 *   Node ID.
 * @param string $layout
 *   Layout machine name.
 * @param string $submit_position
 *   The region name in which to place the submit button.
 *
 * @return bool|int
 *   FALSE on failure, SAVED_NEW or SAVED_UPDATED on success.
 */
function form_layout_save_node_layout($nid, $layout, $submit_position) {
  $record = array(
    'nid' => $nid,
    'layout_name' => $layout,
    'submit_position' => $submit_position,
  );

  $layout = form_layout_get_node_layout($nid);

  if (empty($layout)) {
    // New record.
    return drupal_write_record('form_layout_node', $record);
  }
  else {
    // Update record.
    return drupal_write_record('form_layout_node', $record, 'nid');
  }
}

/**
 * Deletes a form layout record for the given node.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return DatabaseStatementInterface
 *   Result of the delete query.
 */
function form_layout_delete_node_layout($nid) {
  return db_delete('form_layout_node')
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Gets the layout machine name for a node.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return string
 *   Layout machine name.
 */
function form_layout_get_node_layout($nid) {
  $result = db_query("SELECT layout_name, submit_position FROM {form_layout_node} WHERE nid = :nid",
    array(':nid' => $nid)
  );

  if ($result->rowCount() > 0) {
    return $result->fetchAssoc();
  }

  return array();
}

/**
 * Determines which sidebar class name to use.
 *
 * @param object $node
 *   The webform node object.
 *
 * @return string
 *   The CSS class name.
 */
// function form_layout_get_sidebar_class_name($node) {
//   $sidebar_cids = form_layout_get_sidebar_cids($node);
//   $has_content = array(
//     'left_sidebar' => FAlSE,
//     'right_sidebar' => FALSE,
//   );
//   foreach ($node->webform['components'] as $component) {
//     foreach ($sidebar_cids as $form_key => $cid) {
//       if ($component['pid'] == $cid) {
//         $has_content[$form_key] = TRUE;
//       }
//     }
//   }

//   if ($has_content['left_sidebar'] && $has_content['right_sidebar']) {
//     return 'both-sidebars';
//   }
//   elseif ($has_content['left_sidebar'] || $has_content['right_sidebar']) {
//     return 'single-sidebar';
//   }

//   return '';
// }

// /**
//  * Gets the component IDs of the left and right sidebar fieldsets.
//  *
//  * @param object $node
//  *   Webform node.
//  *
//  * @return array
//  *   An array of webform component IDs, keyed by form_key
//  */
// function form_layout_get_sidebar_cids($node) {
//   $cids = array();
//   foreach ($node->webform['components'] as $component) {
//     if (in_array($component['form_key'], array('left_sidebar', 'right_sidebar'))) {
//       $cids[$component['form_key']] = $component['cid'];

//       if (count($cids) == 2) {
//         return $cids;
//       }
//     }
//   }

//   return $cids;
// }
