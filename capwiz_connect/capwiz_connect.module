<?php
/**
 * @file
 * Capwiz Connect
 *
 * Sync users and actions to Salesforce by querying the Capwiz Connect API
 */

/**
 * Todos
 * -----
 * - Method to clear out old user and action data from local storage, to save space. Haven't discussed the details around this yet
 * 
 * - ISSUE: Only add actions to the sf_queue once the user has been retrieved?
 */

/**
 * Implements hook_menu().
 */
function capwiz_connect_menu() {
  $items = array();

  $items['admin/settings/capwiz_connect'] = array(
    'title' => 'Capwiz Connect Accounts',
    'description' => 'List of Capwiz Connect accounts',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_list',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_NORMAL,
  );
  $items['admin/settings/capwiz_connect/accounts'] = array(
    'title' => 'Accounts',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_list',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['admin/settings/capwiz_connect/add'] = array(
    'title' => 'Add Account',
    'description' => 'Add a new Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/settings/capwiz_connect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Capwiz Connect general settings',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_settings'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );


  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account'] = array(
    'title callback' => '_capwiz_connect_overview_title',
    'title arguments' => array(4),
    'description' => 'Capwiz Connect account overview',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_overview',
    'page arguments' => array(4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  

  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  if (module_exists('salesforce_management_api')) {
    $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/user_mapping'] = array(
      'title' => 'User Mapping',
      'description' => 'Edit User Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_user_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
    $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/action_mapping'] = array(
      'title' => 'Action Mapping',
      'description' => 'Edit Action Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_action_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
    );
  }
  
  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_delete', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  
  
  // Expose a callback for the cron run if it's standalone
  if (variable_get('capwiz_connect_standalone_cron_enabled', FALSE)) {
    $items['capwiz_connect_cron'] = array(
      'page callback' => 'capwiz_connect_cron_process',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  
  
  // AJAX callback to change the SF object type on user or account mapping
  $items['js/capwiz_connect/salesforce-object-fields'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_render_salesforce_object_fields',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );
  
  // Ajax callback to add and remove dedupe keys for Capwiz Account mappings
  $items['js/capwiz_connect/%capwiz_connect_account/set-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_add_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );
  $items['js/capwiz_connect/%capwiz_connect_account/remove-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_remove_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );
  
  return $items;
}


/**
 * Implements hook_perm().
 */
function capwiz_connect_perm() {
  return array('administer capwiz_connect');
}


/**
 * Implements hook_theme().
 */
function capwiz_connect_theme($existing, $type, $theme, $path) {
  return array(
		'capwiz_connect_account_mapping_form' => array(
		  'arguments' => array(),
	  ),
  );
}



/**
 * Load a Capwiz Connect account. Used for placeholders in menu item URLs
 */
function capwiz_connect_account_load($id, $refresh_cache = FALSE) {
  static $account_details = array();
  
  if ($id > 0 && (!$account_details[$id] || $refresh_cache)) {
    $account_details[$id] = db_fetch_object(db_query('SELECT * FROM {capwiz_connect_accounts} WHERE id=%d', $id));
    
    // Load existing mapping for users and actions for this Capwiz account
    foreach (array('user', 'action') as $mapping_type) {
      $drupal = 'capwiz_connect:' . $id . ':' . $mapping_type;
      $mapping_detail = db_fetch_object(db_query("select salesforce, fields, dedupe_key, recordtype_id from {salesforce_management_field_map} where drupal = '%s'", $drupal));
      if ($mapping_detail) {
        // Save details in $account_detail->mapping_user or $account_detail->mapping_action
        $field = 'mapping_' . $mapping_type;
        $account_details[$id]->$field = array(
          'sf_object' => $mapping_detail->salesforce,
          'map' => unserialize($mapping_detail->fields),
          'dedupe_key' => $mapping_detail->dedupe_key,
          'recordtype_id' => $mapping_detail->recordtype_id,
        );
      }
    }
  }
  
  if ($account_details[$id]) {
    return $account_details[$id];
  }
  
  // Could not load the account, so it must not exist. Return FALSE instead
  // of null so that admin pages trying to edit a non-existent account will 404
  return FALSE;
}

/**
 * Get the full list of accounts
 */
function capwiz_connect_all_accounts($refresh_cache = FALSE) {
  static $all_accounts;
  
  if (!$all_accounts || $refresh_cache) {
    $all_accounts = array();
    $result = db_query('SELECT id FROM {capwiz_connect_accounts}');
    while ($row = db_fetch_object($result)) {
      $all_accounts[$row->id] = capwiz_connect_account_load($row->id, $refresh_cache);
    }
  }
  return $all_accounts;
}


/**
 * Title for overview tab when viewing an account
 */
function _capwiz_connect_overview_title($account) {
  return $account->display_name;
}


/**
 * Get an instance of CapizConnect
 */
function capwiz_connect($account_id) {
  static $included;
  if (!$included) {
    module_load_include('inc', 'capwiz_connect', 'CapwizConnect');
    $included = TRUE;
  }
  
  $account_details = capwiz_connect_account_load($account_id);
  if ($account_details) {
    return CapizConnect::instance($account_details);
  }
  return null;
}




/**
 * Implementation of hook_cron().
 */
function capwiz_connect_cron() {
  // Bail on normal cron run if standalone cron is enabled.
  if (variable_get('capwiz_connect_standalone_cron_enabled', FALSE)) {
    // If standalone cron is enabled and cron.php is being run, do nothing.
    if (preg_match('/cron.php$/', $_SERVER['REQUEST_URI'])) {
      return 0;
    }
    else {
      watchdog('capwiz_connect', t('Standalone cron run.'));
    }
  }
  else {
    watchdog('capwiz_connect', t('Standard cron run.'));
  }
  capwiz_connect_cron_process();
}


/**
 * Do the actual cron run
 */
function capwiz_connect_cron_process() {
  $all_accounts = capwiz_connect_all_accounts(TRUE);
  foreach ($all_accounts as $account_id => $account_details) {
    // Connect to the API for this account
    $connection = capwiz_connect($account_id);
    
    // Sync down a batch of users
    $connection->syncUsersBatch();
    
    // Sync down a batch of actions
    $connection->syncActionsBatch();
  }
  return '';
}




/**
 * Implementation of hook_queue_preprocess_batch_alter().
 * Prep an object to be sent to SF. Mostly copied from sf_webform_queue_preprocess_batch_alter()
 */
function capwiz_connect_queue_preprocess_batch_alter(&$batch) {
  if ($batch['type'] == 'capwiz_connect_user' || $batch['type'] == 'capwiz_connect_action') {
    // Get 'user' or 'action' by removing 'capwiz_connect_' from $batch['type']
    $type = substr($batch['type'], 15);
    
    switch ($batch['action']) {
			case 'update':
			case 'upsert':
			case 'create':
				foreach($batch['records'] as $record) {
				  
					$map = _capwiz_connect_sf_load_object_details($record->oid, $type);
					if (is_array($record->object)) {
						$record->object = array_merge($record->object, $map['fields']);	
					}
					else {
						$record->object = $map['fields'];
					}
					// add the salesforce id to the object on updates
				  if ($batch['action'] == 'update') {
				    $record->object['Id'] = $record->sfid;
				  }
				}
				break;
				
			case 'delete':
			
				break;
		}
  }
}

/**
 * Load field mapping for an object to be passed to Salesforce queue processor. This
 * function is used for both users and actions.
 */
function _capwiz_connect_sf_load_object_details($oid, $type) {
  static $sf_field_map;
  
  // If there is an error building the mapping, or the data is incomplete, a generic
  // version of the mapping array should be returned to prevent errors higher up in
  // the stack.
  $blank_return_array = array(
		'object' => '',
		'fields' => array(),
    'RecordTypeId' => '',
	);

  // Load the user or action data, depending on the type
  if ($type == 'user') {
    $object = _capwiz_connect_load_user_from_local_id($oid);
    if ($object) {
      $account_id = $object->capwiz_account_id;
    }
  }
  else {
    $object = _capwiz_connect_load_action($oid);
    if ($object) {
      $account_id = $object->capwiz_account_id;
    }
  }
  
  if (!($account_id > 0)) {
    return $blank_return_array;
  }
  
  // Load the Salesforce field map for this Capwiz account, if we have not already
  if (!$sf_field_map[$account_id][$type]) {
    $drupal = 'capwiz_connect:' . $account_id . ':' . $type;
  	$sql = "SELECT salesforce, recordtype_id, fields FROM {salesforce_management_field_map} WHERE drupal = '%s'";
  	$data = db_fetch_object(db_query($sql, $drupal));

		$sf_field_map[$account_id][$type]['map'] = unserialize($data->fields);
		$sf_field_map[$account_id][$type]['object'] = $data->salesforce;
		$sf_field_map[$account_id][$type]['recordtype_id'] = $data->recordtype_id;
  }
  
  $map_details = $sf_field_map[$account_id][$type];
  
  // If no map is found for this account and type, bail out
  if (!$map_details['map']) {
    return $blank_return_array;
  }
  
  // Prep map array
	$salesforce_map = array(
		'object' => $map_details['object'],
		'fields' => array(),
    'RecordTypeId' => $map_details['recordtype_id'],
	);
  
  
  // Loop over the mapped fields, and for each that has value on this object, set
  // it in the mapped fields. For any fields that have multiple values, they
  // should be separated with semi-colons (though this is not in use here yet).
  // 
  // Note that some of the fields handled here are specific to users or to actions.
  // Such fields will not be available for mapping to the other object type.
  foreach ($map_details['map'] as $capwiz_field_name => $sf_field_name) {
    // Different fields have different formats
    switch ($capwiz_field_name) {
      // Email address. On Actions and Users.
      case 'emailAddress':
        // Email address is stored on Users and Actions differently
        if ($type == 'user') {
          if ($object->data->emails[0]) {
            $salesforce_map['fields'][$sf_field_name] = $object->data->emails[0]->address;
          }
        }
        else { // action, not user
          if ($object->data->emailAddress) {
            $salesforce_map['fields'][$sf_field_name] = $object->data->emailAddress;
          }
        }
        break;
      
      // Salutation. Only on users.
      case 'honorificId':
        if ($object->data->honorific) {
          $salesforce_map['fields'][$sf_field_name] = $object->data->honorific->name;
        }
        break;
          
      // Street address. Only on users.
      case 'street1':
        if ($object->data->addresses[0]) {
          $salesforce_map['fields'][$sf_field_name] = $object->data->addresses[0]->street1;
        }
        break;
          
      // Type of address. Only on users.
      case 'addressType':
        $connection = capwiz_connect($account_id);
        $address_field = $connection->getSpecificCustomUserField('addressType');
        if ($object->data->addresses[0] && $address_field) {
          $address_type_id = $object->data->addresses[0]->addressTypeId;
          $salesforce_map['fields'][$sf_field_name] = $address_field->options[$address_type_id]->label;
        }
        break;
        
      // Affiliation of form. On Actions and Users.
      case 'form_affiliation':
        $account = capwiz_connect_account_load($account_id);
        $salesforce_map['fields'][$sf_field_name] = $account->form_affiliation;
        break;
      
      // Action timestamp. Only on Actions.
      case 'action_timestamp':
        if ($object->data->dtAction) {
          // Not sure if SF expects Unix timestamps for date time fields
          $salesforce_map['fields'][$sf_field_name] = strtotime($object->data->dtAction);
        }
        break;
        
      // Capwiz User in Salesforce. Only on Actions. 
      case 'sf_userid':
        if ($object->data->userId) {
          // Load the Salesforce ID for the user
          $sfid = db_result(db_query("SELECT sfid FROM {salesforce_management_object_map} WHERE drupal_type='capwiz_connect_user' AND oid=%d", $object->data->userId));
          if ($sfid) {
            $salesforce_map['fields'][$sf_field_name] = $sfid;
          }
        }
        break;
      
      // Legislation district fields. Only on users. These fields are listed on
      // every official in the user data, with the same value on each
      case 'nationalDistrict':
      case 'stateDistrictUpper':
      case 'stateDistrictLower':
        // Make sure the officials array has at least one item in it
        if (is_array($object->data->officials) && is_object($object->data->officials[0])) {
          // Get the requested field from the first legislator object in the array
          if ($object->data->officials[0]->{$capwiz_field_name}) {
            $salesforce_map['fields'][$sf_field_name] = $object->data->officials[0]->{$capwiz_field_name};
          }
        }
        break;
        
      // Federal senators. Users only.
      case 'fed_senator_1':
      case 'fed_senator_2':
        // @todo
        break;
      
      // Federal senator phone numbers. Users only.
      case 'fed_senator_1_phone':
      case 'fed_senator_2_phone':
        // @todo
        break;
        
      // Federal rep. Users only.
      case 'fed_rep':
        // @todo
        break;
        
      // Federal rep phone number. Users only.
      case 'fed_rep_phone':
        // @todo
        break;
        
      
      
      // Every other field. Just load the field from the object
      default:
        $salesforce_map['fields'][$sf_field_name] = $object->data->{$capwiz_field_name};
    }
  }
  
  return $salesforce_map;
}



/**
 * Implementation of hook_queue_fieldmap_assignment_alter().
 */
function capwiz_connect_queue_fieldmap_assignment_alter(&$data) {
	if ($data->type == 'capwiz_connect_user' || $data->type == 'capwiz_connect_action') {
    $type = substr($data->type, 15);
    
    if ($type == 'user') {
      $object = _capwiz_connect_load_user_from_local_id($data->oid);
      if ($object) {
        $account_id = $object->capwiz_account_id;
      }
    }
    else {
      $object = _capwiz_connect_load_action($data->oid);
      if ($object) {
        $account_id = $object->capwiz_account_id;
      }
    }
    
    if (!($account_id > 0)) {
      return;
    }
    
    // Load the field map for the Account the user came in from
    $drupal = 'capwiz_connect:' . $account_id . ':' . $type;
		$result = db_query("SELECT fieldmap, dedupe_key FROM {salesforce_management_field_map} WHERE drupal = '%s'", $drupal);    
    
		$fieldmap = db_fetch_array($result);
		$data->fieldmap = $fieldmap['fieldmap'];
		
		$result = db_fetch_array(db_query("SELECT sfid FROM {salesforce_management_object_map} WHERE oid = '%s' AND drupal_type = '%s'", $data->oid, $data->type));
		// check the action. by default users go into the queue as upsert, but if the
		// mapping has no dedupe key defined, revert to create
		if (empty($fieldmap['dedupe_key']) && empty($result['sfid'])) {
			$data->action = 'create';
		}
	}
}



/**
 * Load a single Capwiz user from the local data. Argument should be the Capwiz ID
 * for the user
 */
function _capwiz_connect_load_user($capwiz_user_id) {
  $capwiz_user = db_fetch_object(db_query("SELECT * FROM {capwiz_connect_users} WHERE capwiz_user_id='%s'", $capwiz_user_id));
  if ($capwiz_user) {
    $capwiz_user->data = unserialize($capwiz_user->data);
    return $capwiz_user;
  }
  return NULL;
}
/**
 * Load a single Capwiz user from the local data, using the local auto-
 * increment ID that's used for the Salesforce processing queue
 */
function _capwiz_connect_load_user_from_local_id($id) {
  $capwiz_user = db_fetch_object(db_query("SELECT * FROM {capwiz_connect_users} WHERE id=%d", $id));
  if ($capwiz_user) {
    $capwiz_user->data = unserialize($capwiz_user->data);
    return $capwiz_user;
  }
  return NULL;
}

/**
 * Load a single Capwiz action from the locally stored data
 * Note that the argument must be the LOCAL id for the action, matching
 * capwiz_connect_actions.id. This field is used as the oid in the Salesforce queue
 * processor because the alertId field from Capwiz is an int, but too large for a
 * regular MySQL int field, so it couldn't be stored in tables like sf_queue without
 * altering the structure of tables owned by other modules.
 */
function _capwiz_connect_load_action($local_action_id) {
  $capwiz_action = db_fetch_object(db_query('SELECT * FROM {capwiz_connect_actions} WHERE id=%d', $local_action_id));
  if ($capwiz_action) {
    $capwiz_action->data = unserialize($capwiz_action->data);
    return $capwiz_action;
  }
  return NULL;
}