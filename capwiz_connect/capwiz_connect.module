<?php
/**
 * @file
 * Capwiz Connect
 *
 * Sync users and actions to Salesforce by querying the Capwiz Connect API
 */

/**
 * Todos
 * -----
 * - Action mapping form needs the correct Capwiz fields
 * - Handle 'more' flag from API, and make subsequent calls if necessary
 * 
 * Minor
 * -----
 * - Breadcrumbs not showing when viewing/editing/etc forms
 */

/**
 * Implements hook_menu().
 */
function capwiz_connect_menu() {
  $items = array();

  $items['admin/settings/capwiz_connect'] = array(
    'title' => 'Capwiz Connect Accounts',
    'description' => 'List of Capwiz Connect accounts',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_list',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_NORMAL,
  );
  $items['admin/settings/capwiz_connect/accounts'] = array(
    'title' => 'Accounts',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_list',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['admin/settings/capwiz_connect/add'] = array(
    'title' => 'Add Account',
    'description' => 'Add a new Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/settings/capwiz_connect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Capwiz Connect general settings',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_settings'),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );


  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account'] = array(
    'title callback' => '_capwiz_connect_overview_title',
    'title arguments' => array(4),
    'description' => 'Capwiz Connect account overview',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_account_overview',
    'page arguments' => array(4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  

  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_addoredit', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  if (module_exists('salesforce_management_api')) {
    $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/user_mapping'] = array(
      'title' => 'User Mapping',
      'description' => 'Edit User Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_user_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
    $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/action_mapping'] = array(
      'title' => 'Action Mapping',
      'description' => 'Edit Action Mapping for Capwiz Connect Account',
      'file' => 'capwiz_connect.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capwiz_connect_account_action_mapping', 4),
      'access arguments' => array('administer capwiz_connect'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
    );
  }
  
  $items['admin/settings/capwiz_connect/accounts/%capwiz_connect_account/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a Capwiz Connect account',
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capwiz_connect_account_delete', 4),
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  
  
  // Expose a callback for the cron run if it's standalone
  if (variable_get('capwiz_connect_standalone_cron_enabled', FALSE)) {
    $items['capwiz_connect_cron'] = array(
      'page callback' => 'capwiz_connect_cron_process',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  
  
  // AJAX callback to change the SF object type on user or account mapping
  $items['js/capwiz_connect/salesforce-object-fields'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'page callback' => 'capwiz_connect_render_salesforce_object_fields',
    'access arguments' => array('administer capwiz_connect'),
    'type' => MENU_CALLBACK,
  );
  
  // Ajax callback to add and remove dedupe keys for Capwiz Account mappings
  $items['js/capwiz_connect/%capwiz_connect_account/set-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_add_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );
  $items['js/capwiz_connect/%capwiz_connect_account/remove-dedupe-field'] = array(
    'file' => 'capwiz_connect.admin.inc',
    'description' => 'Callback to add a dedupe key',
    'page callback' => 'capwiz_connect_remove_dedupe_field',
    'page arguments' => array(2),
    'access arguments' => array('administer capwiz_connect'),
  );
  
  return $items;
}

/**
 * Implements hook_perm().
 */
function capwiz_connect_perm() {
  return array('administer capwiz_connect');
}


/**
 * Implements hook_theme().
 */
function capwiz_connect_theme($existing, $type, $theme, $path) {
  return array(
		'capwiz_connect_account_mapping_form' => array(
		  'arguments' => array(),
	  ),
  );
}



/**
 * Load a Capwiz Connect account. Used for placeholders in menu item URLs
 */
function capwiz_connect_account_load($id) {
  static $account_details = array();
  
  if ($id > 0 && !$account_details[$id]) {
    $account_details[$id] = db_fetch_object(db_query('SELECT * FROM {capwiz_connect_accounts} WHERE id=%d', $id));
    
    // Load existing mapping for users and actions for this Capwiz account
    foreach (array('user', 'action') as $mapping_type) {
      $drupal = 'capwiz_connect:' . $id . ':' . $mapping_type;
      $mapping_detail = db_fetch_object(db_query("select salesforce, fields, dedupe_key, recordtype_id from {salesforce_management_field_map} where drupal = '%s'", $drupal));
      if ($mapping_detail) {
        // Save details in $account_detail->mapping_user or $account_detail->mapping_action
        $field = 'mapping_' . $mapping_type;
        $account_details[$id]->$field = array(
          'sf_object' => $mapping_detail->salesforce,
          'map' => unserialize($mapping_detail->fields),
          'dedupe_key' => $mapping_detail->dedupe_key,
          'recordtype_id' => $mapping_detail->recordtype_id,
        );
      }
    }
  }
  
  if ($account_details[$id]) {
    return $account_details[$id];
  }
  
  // Could not load the account, so it must not exist. Return FALSE instead
  // of null so that admin pages trying to edit a non-existent account will 404
  return FALSE;
}

/**
 * Get the full list of accounts
 */
function capwiz_connect_all_accounts() {
  static $all_accounts;
  
  if (!$all_accounts) {
    $all_accounts = array();
    $result = db_query('SELECT * FROM {capwiz_connect_accounts}');
    while ($row = db_fetch_object($result)) {
      $all_accounts[$row->id] = $row;
    }
  }
  return $all_accounts;
}


/**
 * Title for overview tab when viewing an account
 */
function _capwiz_connect_overview_title($account) {
  return $account->display_name;
}


/**
 * Get an instance of CapizConnect
 */
function capwiz_connect($account_id) {
  static $included;
  if (!$included) {
    module_load_include('inc', 'capwiz_connect', 'CapwizConnect');
    $included = TRUE;
  }
  
  $account_details = capwiz_connect_account_load($account_id);
  if ($account_details) {
    return CapizConnect::instance($account_details);
  }
  return null;
}




/**
 * Implementation of hook_cron().
 */
function capwiz_connect_cron() {
  // Bail on normal cron run if standalone cron is enabled.
  if (variable_get('capwiz_connect_standalone_cron_enabled', FALSE)) {
    // If standalone cron is enabled and cron.php is being run, do nothing.
    if (preg_match('/cron.php$/', $_SERVER['REQUEST_URI'])) {
      return 0;
    }
    else {
      watchdog('capwiz_connect_cron', t('Standalone cron run.'));
    }
  }
  else {
    watchdog('capwiz_connect_cron', t('Standard cron run.'));
  }
  capwiz_connect_cron_process();
}


/**
 * Do the actual cron run
 */
function capwiz_connect_cron_process() {
  $all_accounts = capwiz_connect_all_accounts();
  foreach ($all_accounts as $account_id => $account_details) {
    _capwiz_connect_sync_users_for_account($account_details);
    _capwiz_connect_sync_actions_for_account($account_details);
  }
  return '';
}



/**
 * Query the users from a given Capwiz Connect account, save them locally, and
 * add them to the SF queue
 */
function _capwiz_connect_sync_users_for_account($account_details) {
  $updated = $created = $update_fail = $create_fail = 0;
    
  // Connect to the API for this account
  $account_id = $account_details->id;
  $connection = capwiz_connect($account_id);
    
  // Query for users that have been updated since the last time
  $last_sync = $account_details->last_user_sync;
  if ($last_sync > 0) {
    // Reduce the last time stamp to act as a buffer, to make sure no users
    // fall between the cracks
    $last_sync -= 3600;
  }
  $users = $connection->queryUsers($last_sync);

  // If $users is FALSE, there was an error connecting or querying users, and a
  // message will be logged to the watchdog
  if ($users === FALSE) {
    return;
  }
    
  if (is_array($users) && !empty($users)) {
    // Loop over the returned users and save them to the DB
    foreach ($users as $user) {
      $capwiz_user_id = $user->id;
      $record = array(
        'capwiz_account_id' => $account_id,
        'capwiz_user_id' => $capwiz_user_id,
        'local_uid' => 0,
        'data' => serialize($user),
      );
        
      // Check if this user (identified by Capwiz ID) is already in our DB
      $existing_record = db_result(db_query("SELECT 1 FROM {capwiz_connect_users} WHERE capwiz_user_id='%s'", $capwiz_user_id));
        
      if ($existing_record) {
        // User is already in our DB: update the record
        if (drupal_write_record('capwiz_connect_users', $record, 'capwiz_user_id')) {
          $updated++;
        }
        else {
          $update_fail++;
        }
      }
      else {
        // New-to-us user
        if(drupal_write_record('capwiz_connect_users', $record)) {
          $created++;
        }
        else {
          $create_fail++;
        }
      }
      // Insert the user into the Salesforce processing queue
      if ($record['capwiz_user_id']) {
        sf_queue_insert($record['capwiz_user_id'], 'capwiz_connect_user', 'upsert');
      }
    }
      
    // Log stats for users collected for this account
    $severity = WATCHDOG_INFO;
    $message = "Updated users for %account_name. Created: %created. Updated: %updated.";
    if ($create_fail > 0) {
      $message .= " Failed to create: %create_fail.";
      $severity = WATCHDOG_ERROR;
    }
    if ($update_fail > 0) {
      $message .= " Failed to update: %update_fail.";
      $severity = WATCHDOG_ERROR;
    }
    $message_vars = array(
      '%account_name' => $account_details->display_name,
      '%created' => $created,
      '%updated' => $updated,
      '%create_fail' => $create_fail,
      '%update_fail' => $update_fail,
    );
    watchdog('capwiz_connect', $message, $message_vars, $severity);
  }
  else {
    // $users was an empty array, so there were no new users
    $message = "No users to add or update for %account_name.";
    $message_vars = array(
      '%account_name' => $account_details->display_name,
      '%created' => $created,
      '%updated' => $updated,
      '%create_fail' => $create_fail,
      '%update_fail' => $update_fail,
    );
    watchdog('capwiz_connect', $message, $message_vars);
  }
    
  // Update the last_user_sync timestamp on this account
  db_query('UPDATE {capwiz_connect_accounts} SET last_user_sync=%d WHERE id=%d', time(), $account_id);
}



/**
 * Query the actions from a given Capwiz Connect account, save them locally, and
 * add them to the SF queue
 */
function _capwiz_connect_sync_actions_for_account($account_details) {
  $updated = $created = $update_fail = $create_fail = 0;
    
  // Connect to the API for this account
  $account_id = $account_details->id;
  $connection = capwiz_connect($account_id);
    
  // Query for users that have been updated since the last time 
  $last_sync = $account_details->last_action_sync;
  if ($last_sync > 0) {
    // Reduce the last time stamp to act as a buffer, to make sure no users
    // fall between the cracks
    $last_sync -= 3600;
  }
  $actions = $connection->queryActions($last_sync);

  // If $actions is FALSE, there was an error connecting or querying actions, and
  // a message will be logged to the watchdog
  if ($actions === FALSE) {
    return;
  }
    
  if (is_array($actions) && !empty($actions)) {
    // Loop over the returned actions and save them to the DB
    foreach ($actions as $action) {
      $message_id = $action->messageId;
      $record = array(
        'message_id' => $message_id,
        'capwiz_account_id' => $account_id,
        'capwiz_alert_id' => $action->alertId,
        'capwiz_user_id' => $action->userId,
        'data' => serialize($action),
        'action_timestamp' => strtotime($action->dtAction),
      );
        
      // Check if this action (identified by Capwiz ID) sis already in our DB
      $existing_record_id = db_result(db_query("SELECT id FROM {capwiz_connect_actions} WHERE message_id='%s'", $message_id));
        
      if ($existing_record_id > 0) {
        // Action is already in our DB: update the record
        $record['id'] = $existing_record_id;
        if (drupal_write_record('capwiz_connect_actions', $record, 'id')) {
          $updated++;
        }
        else {
          $update_fail++;
        }
      }
      else {
        // New-to-us user
        if(drupal_write_record('capwiz_connect_actions', $record)) {
          $created++;
        }
        else {
          $create_fail++;
        }
      }
      // Insert the user into the Salesforce processing queue
      if ($record['id']) {
        sf_queue_insert($record['id'], 'capwiz_connect_action', 'upsert');
      }
    }
      
    // Log stats for users collected for this account
    $severity = WATCHDOG_INFO;
    $message = "Updated actions for %account_name. Created: %created. Updated: %updated.";
    if ($create_fail > 0) {
      $message .= " Failed to create: %create_fail.";
      $severity = WATCHDOG_ERROR;
    }
    if ($update_fail > 0) {
      $message .= " Failed to update: %update_fail.";
      $severity = WATCHDOG_ERROR;
    }
    $message_vars = array(
      '%account_name' => $account_details->display_name,
      '%created' => $created,
      '%updated' => $updated,
      '%create_fail' => $create_fail,
      '%update_fail' => $update_fail,
    );
    watchdog('capwiz_connect', $message, $message_vars, $severity);
  }
  else {
    // $users was an empty array, so there were no new users
    $message = "No actions to add or update for %account_name.";
    $message_vars = array(
      '%account_name' => $account_details->display_name,
      '%created' => $created,
      '%updated' => $updated,
      '%create_fail' => $create_fail,
      '%update_fail' => $update_fail,
    );
    watchdog('capwiz_connect', $message, $message_vars);
  }
    
  // Update the last_user_sync timestamp on this account
  db_query('UPDATE {capwiz_connect_accounts} SET last_action_sync=%d WHERE id=%d', time(), $account_id);
}






/**
 * Implementation of hook_queue_preprocess_batch_alter().
 * Prep an object to be sent to SF. Mostly copied from sf_webform_queue_preprocess_batch_alter()
 */
function capwiz_connect_queue_preprocess_batch_alter(&$batch) {
  if ($batch['type'] == 'capwiz_connect_user') {
    switch ($batch['action']) {
			
			case 'update':
			case 'upsert':
			case 'create':
				foreach($batch['records'] as $record) {
				  
				  // Need to copy over _sf_webform_load_salesforce_map()
					$map = _capwiz_connect_sf_load_user_details($record->oid, $record->sfid);
					if (is_array($record->object)) {
						$record->object = array_merge($record->object, $map['fields']);	
					}
					else {
						$record->object = $map['fields'];
					}
					// add the salesforce id to the object on updates
				  if ($batch['action'] == 'update') {
				    $record->object['Id'] = $record->sfid;
				  }
				}
				break;
				
			case 'delete':
			
				break;
		}
  }
}

/**
 * Load the details for a single user and map the SF fields
 */
function _capwiz_connect_sf_load_user_details($capwiz_user_id) {
  static $sf_field_map;
  
  $capwiz_user = _capwiz_connect_load_user($capwiz_user_id);
  if ($capwiz_user->capwiz_account_id > 0) {
    $account_id = $capwiz_user->capwiz_account_id;
    
    // Load the Salesforce field map for this Capwiz account, if we have not already
    if (!$sf_field_map[$account_id]) {
      $drupal = 'capwiz_connect:' . $account_id . ':user';
    	$sql = "SELECT salesforce, recordtype_id, fields FROM {salesforce_management_field_map} WHERE drupal = '%s'";
    	$data = db_fetch_object(db_query($sql, $drupal));

  		$sf_field_map[$account_id]['map'] = unserialize($data->fields);
  		$sf_field_map[$account_id]['object'] = $data->salesforce;
  		$sf_field_map[$account_id]['recordtype_id'] = $data->recordtype_id;
    }
    
    // If no map was found for this account, return a blank version of the
    // expected array
    if (!$sf_field_map[$account_id]['map']) {
      return array(
    		'object' => '',
    		'fields' => array(),
        'RecordTypeId' => '',
    	);
    }
    
    // Prep map array
  	$salesforce_map = array(
  		'object' => $sf_field_map[$account_id]['object'],
  		'fields' => array(),
      'RecordTypeId' => $sf_field_map[$account_id]['recordtype_id'],
  	);
    
    // Loop over the mapped fields, and for each that has value on this user, set
    // it in the mapped fields. For any fields that have multiple values, they
    // should be separated with semi-colons (though this is not in use here yet)
    foreach ($sf_field_map[$account_id]['map'] as $capwiz_field_name => $sf_field_name) {
      // Different fields have different formats
      switch ($capwiz_field_name) {
        case 'emailAddress':
          if ($capwiz_user->data->emails[0]) {
            $salesforce_map['fields'][$sf_field_name] = $capwiz_user->data->emails[0]->address;
          }
          break;
        
        case 'honorificId':
          if ($capwiz_user->data->honorific) {
            $salesforce_map['fields'][$sf_field_name] = $capwiz_user->data->honorific->name;
          }
          break;
          
        case 'street1':
          if ($capwiz_user->data->addresses[0]) {
            $salesforce_map['fields'][$sf_field_name] = $capwiz_user->data->addresses[0]->street1;
          }
          break;
          
        case 'addressType':
          $connection = capwiz_connect($account_id);
          $address_field = $connection->getSpecificCustomUserField('addressType');
          if ($capwiz_user->data->addresses[0] && $address_field) {
            $address_type_id = $capwiz_user->data->addresses[0]->addressTypeId;
            $salesforce_map['fields'][$sf_field_name] = $address_field->options[$address_type_id]->label;
          }
          break;
        
        case 'form_affiliation':
          $account = capwiz_connect_account_load($account_id);
          $salesforce_map['fields'][$sf_field_name] = $account->form_affiliation;
          break;
                
        default:
          $salesforce_map['fields'][$sf_field_name] = $capwiz_user->data->{$capwiz_field_name};
      }
    }
    
    return $salesforce_map;
  }
  
  return NULL;
}


/**
 * Implementation of hook_queue_fieldmap_assignment_alter().
 */
function capwiz_connect_queue_fieldmap_assignment_alter(&$data) {
	if ($data->type == 'capwiz_connect_user') {
    // Find this particular user to determine which Capwiz account it came from
    $user = _capwiz_connect_load_user($data->oid);
    
    // Load the field map for the Account the user came in from
    $drupal = 'capwiz_connect:' . $user->capwiz_account_id . ':user';
		$result = db_query("SELECT fieldmap, dedupe_key FROM {salesforce_management_field_map} WHERE drupal = '%s'", $drupal);    
    
		$fieldmap = db_fetch_array($result);
		$data->fieldmap = $fieldmap['fieldmap'];
		
		$result = db_fetch_array(db_query("SELECT sfid FROM {salesforce_management_object_map} WHERE oid = '%s' AND drupal_type = '%s'", $data->oid, $data->type));
		// check the action. by default users go into the queue as upsert, but if the mapping has no dedupe key defined, revert to create
		if (empty($fieldmap['dedupe_key']) && empty($result['sfid'])) {
			$data->action = 'create';
		}
	}
}



/**
 * Load a single Capwiz user from the local data
 */
function _capwiz_connect_load_user($capwiz_user_id) {
  $capwiz_user = db_fetch_object(db_query('SELECT * FROM {capwiz_connect_users} WHERE capwiz_user_id=%d', $capwiz_user_id));
  if ($capwiz_user) {
    $capwiz_user->data = unserialize($capwiz_user->data);
    return $capwiz_user;
  }
  return NULL;
}