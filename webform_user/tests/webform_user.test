<?php
/**
 * @file
 * Test interaction between user accounts and webform fields.
 */
class WebformUserIntegratedTestSetup extends DrupalWebTestCase {

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('webform_user');

    $this->createProfileFields();


    // Configure webform_user
    variable_set('webform_user_node_types', array('webform'));
    variable_set('webform_user_webform', array(1, 'webform_user_all_profile_fields'));

    // Do some user accounts

    // Create a webform editor to test creating and editing own content.
    $permissions['editor'] = array(
      'access content',
      'create webform content',
      'edit own webform content',
      'access all webform results',
    );
    // Create a webform admin that will do all node creation.
    $permissions['admin'] = array(
      'access content',
      'administer nodes',
      'create webform content',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'administer users',
    );
    foreach ($permissions as $user_key => $role_permissions) {
      $this->users[$user_key] = $this->drupalCreateUser($role_permissions);
    }

  }

  function configureWebformUser() {


  }

  function createProfileFields() {
    // Create some text profile fields
    $field_name = 'first_name';
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);
    $instance = array(
      'field_name' => $field_name,
      'label' => 'First name',
      'entity_type' => 'user',
      'bundle' => 'user',
    );
    field_create_instance($instance);

    $field_name = 'last_name';
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);
    $instance = array(
      'field_name' => $field_name,
      'label' => 'Last name',
      'entity_type' => 'user',
      'bundle' => 'user',
    );
    field_create_instance($instance);

    $field_name = 'state';
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'settings' => array('allowed_values' => drupal_map_assoc(array('NY','DC','MD'))),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'label' => 'State',
      'entity_type' => 'user',
      'bundle' => 'user',
    );
    field_create_instance($instance);

  }
}

/**
 * Webform user testing class.
 */
class WebformUserIntegratedTestCase extends WebformUserIntegratedTestSetup {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Webform User'),
      'description' => t('Checks new account creation & profile field settings.'),
      'group' => t('Webform User'),
    );
  }

  // Confirm UI elements on webform node create form.
  function testWebformUserUI() {
    // Log in our editor.
    $this->drupalLogin($this->users['editor']);
    $edit = array(
      'title' => t('Test Webform User'),
      'body[und][0][value]' => 'test',
      'is_webform_user' => 1,
    );
    $this->drupalPost('node/add/webform', $edit, t('Save'));

    // Confirm webform components are created.
    $this->assertTrue($this->webformUserComponentExists(1, 'mail'), t('Webform User mail component found.'));
    $this->assertTrue($this->webformUserComponentExists(1, 'first_name'), t('First name webform component created as textfield.'));
    $this->assertTrue($this->webformUserComponentExists(1, 'last_name'), t('Last name webform component created as textfield.'));
    $this->assertTrue($this->webformUserComponentExists(1, 'state'), t('State webform component created as select list.'));

    // Submit form anonymously.
    $this->drupalLogout();
    $edit = array(
      'submitted[mail]' => 'test@example.com',
      'submitted[first_name]' => 'John',
      'submitted[last_name]' => 'Doe',
      'submitted[state]' => 'DC',
    );
    $this->drupalPost('node/1', $edit, t('Submit'));

    // Confirm new user account created.
    $uid = db_query('SELECT uid FROM {users} WHERE mail = :mail AND name = :name',
      array(':mail' => 'test@example.com', ':name' => 'test@example.com'))->fetchField();
    $this->assertTrue($uid, t('user id found: @uid', array('@uid' => $uid)));

    // Confirm profile values set.
    $this->drupalLogin($this->users['admin']);
    $this->drupalGet('user/' . $uid . '/edit');

    // TODO: provide a method for generic field checking so we can expand this test to deal with multiple profile field types.
    $this->assertFieldById('edit-first-name-und-0-value', 'John', t('Profile value set for first name field.'));
    $this->assertFieldById('edit-last-name-und-0-value', 'Doe', t('Profile value set for last name field.'));
    $this->assertFieldById('edit-state-und', 'DC', t('Profile value set for state field.'));

    // Submit the form again as a logged in user
    $this->drupalGet('node/1');
    $edit = array(
      'submitted[first_name]' => 'First',
      'submitted[last_name]' => 'Last',
      'submitted[state]' => 'MD',
    );
    $this->drupalPost('node/1', $edit, t('Submit'));

    $this->drupalGet('node/1');
    $this->assertFieldByName('submitted[mail]', $this->users['admin']->mail, t('E-mail field pre-populated correctly.'));
    $this->assertFieldByName('submitted[first_name]', 'First', t('First name field pre-populated correctly.'));
    $this->assertFieldByName('submitted[last_name]', 'Last', t('Last name field pre-populated correctly.'));
    $this->assertFieldByName('submitted[state]', 'MD', t('State field pre-populated correctly.'));


    /*
    // Submit form authenticated.
    $edit = array(
      'submitted[mail]' => 'admintest@example.com',
      'submitted[firstname]' => 'admintest',
      'submitted[lastname]' => 'adminlast',
    );
    $this->drupalPost('node/1', $edit, t('Submit'));

    // Confirm user profile values are updated.
    $this->drupalGet('user/3/edit');
    $this->assertFieldById('edit-firstname-und-0-value', 'admintest', t('Profile value updated for firstname field.'));
    // View form, confirm defaults set from user profile.
    $this->drupalGet('node/1');
    $this->assertFieldById('edit-submitted-firstname', 'admintest', t('Default component value set from core field value.'));
    */
  }

  /**
   * Utility function, checks to see if a component exists for a given webform.
   */
  function webformUserComponentExists($nid, $form_key) {
    return (bool) db_query('SELECT cid FROM {webform_component} WHERE form_key = :form_key AND nid=:nid',
      array(':form_key' => $form_key, ':nid' => $nid))->fetchField();
  }

}

/**
 * Webform user testing class.
 */
class WebformUserUnitTestCase extends WebformUserIntegratedTestSetup {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Webform User Unit Cases'),
      'description' => t('Individually tests specific functions.'),
      'group' => t('Webform User'),
    );
  }

  /**
   * Unit test helper functions.
   */
  function testWebformUserHelperFunctions() {

    // Test email detection.
    $emails[] = array('', 0); // Empty string.
    $emails[] = array('@', 0); // Only the designator.
    $emails[] = array('email', 0); // Only the name.
    $emails[] = array('email@', 0); // Only the name and and designator.
    $emails[] = array('@com', 0); // Only the domain ending and designator.
    $emails[] = array('@example.com', 0); // Only the domain.
    $emails[] = array('email@example', 0); // No domain ending.
    $emails[] = array('email@.com', 0); // No domain.
    $emails[] = array('1Email!add@example.com', 0); // Invalid character in name.
    $emails[] = array('1Email+add@!example.com', 0); // Invalid character in domain.
    $emails[] = array('1Email+add@example.!com', 0); // Invalid character in domain ending.
    $emails[] = array('1Email+add@example.c', 0); // Too short domain ending.
    $emails[] = array('1Email+add@example.coooooom', 0); // Too long domain ending.
    $emails[] = array('1Email+add@example.c0m', 0); // Invalid character in domain ending.

    $emails[] = array('email@example.com', 1); // Standard good email.
    $emails[] = array('Email@example.com', 1); // Good email with capital.
    $emails[] = array('1Email.add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email_add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email%add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email-add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@sub.example.com', 1); // Wih a sub-domain.
    $emails[] = array('1Email+add@sub-example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@sub-example.cm', 1); // Minimum length domain ending.
    $emails[] = array('1Email+add@sub-example.coooom', 1); // Maximum length domain ending.

    foreach ($emails as $email) {
      $result = _webform_user_validate_email($email[0]);
      $this->assertEqual($email[1], $result, '_webform_user_validate_email() returned ' . $email[1] .
        ' for ' . $email[0] . '.', 'testWebformUserHelperFunctions');
    }
  }

  // TODO add testing for webform generated forms, form crawling, etc.
  // This will help detect errors if webform changes underfoot.
}
