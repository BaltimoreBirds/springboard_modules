<?php
// $Id$

/**
 * @file
 * Allows administrators to create petition webforms.
 */

/**
 * Implementation of hook_menu().
 */
function webform_user_menu() {
	$items['node/%webform_menu/webform/webform_user'] = array(
	  'title' => 'Related object field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_user_field_selection_form', 1),
		'access callback' => 'user_access',
    'access arguments' => array('Map webform submissions to Salesforce objects'),
    'weight' => 37,
    'type' => MENU_LOCAL_TASK,
    'file' => 'webform_user.admin.inc',
	);
	
	$items['node/%webform_menu/webform/user_mapping'] = array(
      'title' => 'User map',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('webform_user_mapping_form', 1),
      'access callback' => '_webform_user_mapping_form_access',
      'access arguments' => array(1),
      'weight' => 30,
      'type' => MENU_LOCAL_TASK,
  );
	
	$items['admin/content/webform-user'] = array(
		'title' => 'User webforms',
		'title callback' => 'webform_user_title',
		'page callback' => 'webform_user_list',
		'access callback' => 'user_access',
		'access arguments' => array('Map webform submissions to Salesforce objects'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'webform_user.admin.inc',
		'weight' => 100,
	);
	
	$items['admin/content/clone-webform-user/%'] = array(
		'title' => 'Clone user weboform',
		'page callback' => 'webform_user_clone',
		'page arguments' => array(3),
		'access arguments' => array('Map webform submissions to Salesforce objects'),
		'type' => MENU_CALLBACK,
		'file' => 'webform_user.admin.inc',
	);
	
	$items['admin/settings/salesforce-management/webform-user'] = array(
		'title' => t('Webform user settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('webform_user_settings_form'),
		'access arguments' => array('Map webform submissions to Salesforce objects'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'webform_user.admin.inc',
	);
	
	return $items;
}

/**
* Implementation of hook_theme().
*/
function webform_user_theme() {
  return array(
    'webform_user_mapping_form' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Defines a custom title for the list of webform_user forms
 */
function webform_user_title() {
	return variable_get('webform_user_menu_name', 'User webforms');
}

/**
 * Implementation of hook_perm().
 */
function webform_user_menu_alter(&$items) {
	// only show related object tab if the webform is webform_user and a salesforce object has been mapped
	$items['node/%webform_menu/webform/webform_user']['access callback'] = '_webform_user_check_settings';
}

/** 
 * Only show the related object field tab if the form is webform_user and it has been mapped to a salesforce object
 */
function _webform_user_check_settings($op) {
	if ($op == 'Map webform submissions to Salesforce objects') {
		$node = node_load(arg(1));
		if ($node->is_webform_user && !empty($node->sf_webform_object)) {
			return true;
		}
	}
	return false;
}

/**
 * Implementation of hook_nodeapi().
 */
function webform_user_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  if ($node->type == 'webform') {
    switch ($op) {
      case 'validate':
        // Don't allow a node to be a Petition and Fundraiser form at the same time.
        if (isset($a3['webform_user']['is_webform_user']['#value']) && $a3['webform_user']['is_webform_user']['#value'] && module_exists('fundraiser') && $a3['fundraiser']['is_donation_form']['#value']) {
          form_set_error('is_webform_user', t('The webform_user webform cannot be used in conjunction with the fundraising webform.'));
        }

        if (isset($a3['webform_user']['is_webform_user']['#value']) && !_webform_user_validate_checkbox($a3['webform_user']['is_webform_user']['#value'])) {
          form_set_error('is_webform_user', t('Invalid choice for enabling webform user.'));
        }

        if (isset($a3['webform_user']['authenticate_submitters']['#value']) && !_webform_user_validate_checkbox($a3['webform_user']['authenticate_submitters']['#value'])) {
          form_set_error('authenticate_submitters', t('Invalid choice for webform user authentication.'));
        }
        break;

      case 'insert':
        if ($node->is_webform_user || $node->authenticate_submitters) {
          _webform_user_set_values($node);
          if (!$node->is_being_cloned) {
          	_webform_user_create_webform_components($node);
          }
          
        }
        break;

      case 'update':
        // If the node hasn't been a webform_user form and it's set to be a webform_user form, make it one.
        $current_node = node_load(array('nid' => $node->nid));
        if (!_webform_user_is_webform_user($current_node->nid) && $node->is_webform_user && $current_node->webform['components'][1]['form_key'] != 'mail') {
          _webform_user_create_webform_components($node);
        }
				
				// save the values
        _webform_user_set_values($node);
        break;

      case 'delete revision':
        _webform_user_delete_revision_values($node);
        break;

      case 'delete':
        _webform_user_delete_node_values($node);
        break;

      case 'load':
      	$webform_user = _webform_user_load_webform_user($node->nid);
      	if ($webform_user) {
      		$node->is_webform_user = $webform_user['is_webform_user'];
      		$node->authenticate_submitters = $webform_user['authenticate_submitters'];
      		$node->related_object = $webform_user['related_object'];
      		$node->foreign_key_field = $webform_user['foreign_key_field'];
      		$node->send_new_user_email = $webform_user['send_new_user_email'];
      		
	      	$result = db_query("SELECT cid, map_id FROM {webform_user_component_map} WHERE nid = %d", $node->nid);
				  while($row = db_fetch_array($result)){
				    $map[$row['cid']] = $row['map_id'];
				  }
				  $node->map = $map;
      	}
        break;
    }
  }
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_user_form_webform_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->nid && (arg(2) != 'submission')) {
    $is_webform_user = $form['#node']->is_webform_user;
    $authenticate_submitters = $form['#node']->authenticate_submitters;
    $send_new_user_email = $form['#node']->send_new_user_email;
    $related_object = $form['#node']->related_object ? $form['#node']->related_object : 'none';
  }
  else {
    $is_webform_user = 0;
    $authenticate_submitters = 0;
    $send_new_user_email = 0;
    $related_object = 'none';
  }

  $form['webform_user'] = array(
    '#title' => t('Webform user settings'),
    '#type' => 'fieldset',
    '#collapsible' => 1,
    '#collapsed' => 1,
    '#weight' => 1,
    '#access' => 1,
  );
  
  $form['webform_user']['is_webform_user'] = array(
    '#title' => t('Create or update users when this webform is submitted.'),
    '#type' => 'checkbox',
    '#default_value' => $is_webform_user,
    '#description' => t('When checked, user profile fields will automatically be added to the webform. When the form is submitted, new users will be created using those form values.'),
  );
  
  if (module_exists('sf_webform')) {
	  $form['webform_user']['related_object'] = array(
	  	'#title' => t('Relate the user that submitted this webform to'),
	  	'#type' => 'radios',
	  	'#options' => array(
	  		'none' => t('None'),
	  		'account' => t('Account'),
	  		'contact' => t('Contact'),
	  	),
	  	'#default_value' => $related_object,
	  	'#description' => t('If the Salesforce webform integration module is enabled, the submission will be related back to the contact or account in Salesforce depending on what you select here.'),
	  );
  }
  
  $form['webform_user']['authenticate_submitters'] = array(
    '#title' => t('Authenticate form submitters based on e-mail address matches.'),
    '#description' => t('When the user submits the form, log them into an account corresponding to the e-mail address they entered. If the user doesn\'t have an account, one will be created for them.'),
    '#type' => 'checkbox',
    '#default_value' => $authenticate_submitters,
  );
  
  $form['webform_user']['send_new_user_email'] = array(
  	'#title' => t('Send new users a e-mail with their account details.'),
  	'#description' => t('If a new user is created during the submission, an email containing their account details will be sent to them.'),
  	'#type' => 'checkbox',
  	'#default_value' => $send_new_user_email,
  );
}

/**
 * Implementation of hook_form_alter().
 */
function webform_user_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, "webform_client") !== FALSE) {
  
    $nid = $form['#parameters'][2]->nid;
    $components = $form['#parameters'][2]->webform['components'];
  
    global $user;
    if (user_is_logged_in() && $form['#parameters'][2]->is_webform_user) {
      $user = user_load(array('uid' => $user->uid));

      $component_hierarchy = webform_user_parse_components($nid, $components); 
      $fields = _webform_user_get_profile_fields();
      
      foreach($fields as $fkey => $field) {
        if (array_key_exists($field['name'], $component_hierarchy)) {
          $form_field =& webform_user_find_field($form, $component_hierarchy[$field['name']]);
          if (empty($form_field['#default_value']) && isset($user->$field['name'])) {
            switch ($form_field['#type']) {
              case 'date':
                $form_field['#default_value'] = $user->$field['name'];
                break;
              case 'checkboxes':
                if ($user->$field['name']) { // will be a 0 if unchecked
                  $form_field['#default_value'] = array($field['name']);
                }
                break; 
              default:
                $form_field['#default_value'] = check_plain($user->$field['name']);  
                break;
            } 
          }
        }
      }
      // special case for email because it is not a profile field
      if (array_key_exists('mail', $component_hierarchy)) {
        $form_field =& webform_user_find_field($form, $component_hierarchy['mail']);
        $form_field['#default_value'] = check_plain($user->mail);
      }
    }
  
  	// Add a new validation handler.
  	$form['#validate'][] = 'webform_user_webform_validate';
    // Add new submit handler.
    $form['#submit'][] = 'webform_user_webform_submit';
  }
}

/**
 * Creates an array to map webform component fields to user profile fields.
 */
function webform_user_user_map($nid) {
  $map = array();
  $result = db_query(
    "
      SELECT w.form_key, f.cid, f.map_id, w.type
      FROM {webform_component} w
      INNER JOIN {webform_user_component_map} f ON f.cid = w.cid AND f.nid = w.nid
      WHERE f.nid = %d 
      ORDER BY f.cid
    ",
    $nid
  );
  
  while ($row = db_fetch_array($result)) {
    $map[$row['form_key']] = $row['map_id'];
  }
  
  return $map;
}

function _webform_user_get_map($nid, $fields) {
  $map = webform_user_user_map($nid);

  if ($map) {
    foreach($map as $key=>$value){
      $map2[$value] = $fields[$key];
    }
    
    return $map2;
  }
  return array();
}

/**
 * Automatically maps predefined webform components to user profile fields.
 */
function webform_user_user_map_create($nid, $components) {
  foreach($components as $cid => $component) {
    if (array_key_exists('maps_to', $component)) {
      db_query("INSERT INTO {webform_user_component_map} (nid, cid, map_id) VALUES (%d, %d, '%s')", $nid, $cid, $component['maps_to']);
    }
  }
  drupal_set_message(t('User profile fields have been mapped. Use the User Map tab to edit the map.'));
}

/**
 * Provides access to the mapping tabs if node has webform_user enabled form.
 */
function _webform_user_mapping_form_access($node) {
	return $node->is_webform_user;
}

/**
 * Theme function for mapping form
 */
function theme_webform_user_mapping_form($form) {
  if ($form['mapping']['cid']) {
    foreach ($form['mapping']['cid'] as $key=>$cid) {
      if (is_numeric($key)) {
        $row = array();
        $row[] = drupal_render($form['mapping']['cid'][$key]);
        $row[] = drupal_render($form['mapping']['type'][$key]);
        $rows[] = $row;
      }
    }
    $row = array();
    $row[] = drupal_render($form['submit']);
    $row[] = '&nbsp;';
    $rows[] = $row;
  
    $header = array("Webform Component","Profile Field");
    $output = drupal_render($form['info']);
    $output .= theme('table', $header, $rows, array('id' => 'fundraiser_mapping_form'));
    $output .= drupal_render($form);
  }
  else {
    $output = "<p>You must add some fields to the webform before you can map them.</p>";
  }
  return $output;
}


/**
 * User mapping form.
 */
function webform_user_mapping_form($form_state, $node) {
  $form = array(
    '#tree' => TRUE,
    '#node' => $node,
    'mapping' => array(),
  );
  
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  
  $form['info'] = array(
    '#value' => 'This form allows you to map the submitted form values to Drupal user and profile fields. When the webform form is submitted, the user\'s profile will be updated with the values from the form.',
    '#weight' => 0, 
  );

  foreach ($node->webform['components']  as $cid =>$component){
    if($component['type'] != 'fieldset'){
    
      $form['mapping']['cid'][$cid] = array(
      '#type' => 'item',
      '#description' => t($component['name']." - (".$component['type'].")"),
      );
      
      $options = array(''=>'--Select One--');
      
      if(module_exists('profile')){
        $cat_array = profile_categories();
        foreach ($cat_array as $cat){
          $result = _profile_get_fields($cat['name']);
          for($i=0;$row = db_fetch_array($result); $i++){
            $options['Drupal Profile Fields'][$row['name']] = $row['title'];
          }
        }       
      }
      
      $options['User Fields'] = array(
        'mail' => t("Email Address"),
      );
      
      $form['mapping']['type'][$cid] = array(
	      '#type' => 'select',
	      '#options' => $options,
	      '#default_value' => $node->map[$cid],
      );
      
      $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
          
    }
     
  }

  return $form;
}

function webform_user_mapping_form_submit($form, &$form_state){
  $sql = "delete from {webform_user_component_map} where nid=".$form['#node']->nid;
  db_query($sql);

  foreach($form_state['values']['mapping']['type'] as $key => $value) {
    if(!empty($value)){
      
      $sql = "insert into {webform_user_component_map} set nid=".$form['#node']->nid.", cid=$key,map_id='$value'";
      db_query($sql);
    }
  }
  
   drupal_set_message(t('Profile mapping has been saved'));
}

/** 
 * Version of _profile_get_fields that includes hidden profile fields by default
 */
function _webform_user_profile_get_fields($category) {
  $sql = "SELECT * FROM {profile_fields} WHERE LOWER(category) = LOWER('%s') ORDER BY category, weight";
  return db_query($sql, $category);
}

/** 
 * Version of profile_save_profile that includes hidden profile fields 
 */
function _webform_user_profile_save_profile(&$edit, &$user, $category) {
  $result = _webform_user_profile_get_fields($category);
  while ($field = db_fetch_object($result)) {
    if (_profile_field_serialize($field->type)) {
      $edit[$field->name] = serialize($edit[$field->name]);
    }
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit[$field->name]);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}

/**
 * Returns a reference to an element of a FAPI array based on a known path.
 */
function &webform_user_find_field(&$form, $path) {
  foreach(array_keys($path) as $v) {
    if (is_array($path[$v]) && count($path[$v])) { // if there are more keys
      return webform_user_find_field($form[$v], $path[$v]);
    }
    else {
      return $form[$v];
    }
  }
}

/**
 * Creates a nested array of where components exist in the FAPI array for all components in a weblform. 
 * This is needed because the fundraiser module allows the user to move components around. Therefore
 * we must be able to find them if they are not in their usual spot.
 */
function webform_user_parse_components($nid, $components) {
  $component_hierarchy = array();
  foreach($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', webform_user_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // convert string to a nested array
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Creates a nested array of where a component exists in the FAPI array.
 */
function webform_user_parse_component($nid, $form_key) {
  $cid = db_result(db_query("SELECT cid FROM {webform_component} WHERE nid = %d and form_key = '%s'", $nid, $form_key));
  $component_path = 'submitted[' . implode('][', webform_user_walk_component_hierarchy($nid, $cid)) . ']';
  parse_str($component_path, $output); // convert string to a nested array
  return $output;
}

/**
 * Builds a path from the webform component to it's topmost parent.
 */
function webform_user_walk_component_hierarchy($nid, $cid, &$path = array()) {
  $result = db_query("SELECT cid, pid, form_key FROM {webform_component} WHERE nid = %d and cid = %d", $nid, $cid);
  while ($data = db_fetch_object($result)) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      webform_user_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

function _webform_user_add_webform_defaults(&$node, &$user) {
  // Reload user object to ensure profile field values are present.
  $user = user_load(array('uid' => $user->uid));
  
  $fields = _webform_user_get_profile_fields();
  foreach ($node->webform['components'] as $ckey => $component) {
    foreach ($fields as $fkey => $field) {
      // Handle e-mail.
      if ($component['form_key'] == 'mail') {
        $node->webform['components'][$ckey]['value'] = check_plain($user->mail);
      }
      // Handle custom profile fields.
      elseif ($component['form_key'] == $field['name'] && isset($user->$component['form_key'])) {
        if ($field['type'] == 'checkbox') {
          $node->webform['components'][$ckey]['value'] = $component['form_key'];
        }
        elseif ($field['type'] == 'date') {
          $node->webform['components'][$ckey]['value'] = check_plain($user->profile_birthdate['month'] . '/' . $user->profile_birthdate['day'] . '/' . $user->profile_birthdate['year']);
        }
        else {
          $node->webform['components'][$ckey]['value'] = check_plain($user->$component['form_key']);
        }

        unset($fields[$fkey]);
      }
    }
  }
}

/** 
 * Validates the user webform submission.
 */
function webform_user_webform_validate($form, &$form_state) {
	$node = node_load(array('nid' => $form_state['values']['details']['nid']));
	$fields = _webform_user_flatten_tree($form_state['values']['submitted'], $node->nid);
	if ($node->is_webform_user && !_webform_user_validate_email($fields['mail'])) {
		form_set_error('mail', t('Please enter a valid email address.'));
	}
}

/**
 * Process webform submissions.
 */
function webform_user_webform_submit($form, &$form_state) {
  global $user;

  $node = node_load(array('nid' => $form_state['values']['details']['nid']));

  // Only process if the form is completed and it's a webform_user form.
  $submit_op = empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'];

  if ($form_state['values']['op'] == $submit_op && $node->is_webform_user) {
    $fields = _webform_user_flatten_tree($form_state['values']['submitted_tree'], $node->nid);
    $map = _webform_user_get_map($form_state['values']['details']['nid'], $fields);
    
    // Authenticated user.
    if ($user->uid) {
      // Update the existing user account.
      _webform_user_save_profile_map($user->uid, $map);
    }
    
    // Anonymous user.
    if ($account = user_load(array('mail' => $fields['mail']))) {
      // Update the existing user account.
      _webform_user_save_profile_map($account->uid, $map);
			$sid = $form_state['values']['details']['sid'];
      db_query("UPDATE {webform_submissions} SET uid = %d WHERE sid = %d", $account->uid, $sid);
      if ($node->authenticate_submitters) {
        // Log the user in.
        user_external_login($account);
      }
    }
    else {
      // Register the user.
      $user_fields = array(
        'name' => $fields['mail'],
        'mail' => $fields['mail'],
        'init' => $fields['mail'],
        'pass' => user_password(8),
        'status' => 1,
      );
      $account = user_save('', $user_fields);
      
      if ($fields['ms'] || $fields['cid']) {
        $fields['profile_ms'] = $fields['ms'];
        $fields['profile_cid'] = $fields['cid'];
      }
      
      // Update the new user account.
      _webform_user_save_profile_map($account->uid, $map);
      // Update the submission record with the id of the new user
      $sid = $form_state['values']['details']['sid'];
      db_query("UPDATE {webform_submissions} SET uid = %d WHERE sid = %d", $account->uid, $sid);

			// Finally, if authenticate_submitters is true, log the user in
      if ($node->authenticate_submitters) {
        // Log the user in.
        user_external_login($account);
      }
      
      // Send the e-mail through the user module.
      if ($node->send_new_user_email) {
      	// Manually set the password so it appears in the e-mail.
      	$account->password = $user_fields['pass'];
      	drupal_mail('user', 'register_no_approval_required', $user_fields['mail'], NULL, array('account' => $account), NULL);
      }
    }
  }
}

/**
 * Validates an e-mail address.
 * 
 * @param $mail
 *   The e-mail address to validate.
 * @return
 *   Returns TRUE if the e-mail address is valid; FALSE otherwise.
 */
function _webform_user_validate_email($mail) {
  return eregi("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$", $mail);
}

/**
 * Flatten a tree into a flat list. Note: date values are not flattened.
 */
function _webform_user_flatten_tree($tree, $nid = NULL) {
  $items = array();

  foreach ($tree as $key => $val) {
		// look up the type of component
		$type = db_result(db_query("SELECT type FROM {webform_component} WHERE nid = %d AND form_key = '%s'", $nid, $key));
		
    if (is_array($val)) {
      // If it's a date, don't flatten the value.
      if ($type == 'date') {
        if ($val[0] && $val[1] && $val[2]) {
          $val['month'] = $val[0];
          $val['day'] = $val[1];
          $val['year'] = $val[2];
          unset($val[0], $val[1], $val[2]);
          $items[$key] = $val;
        }
        else {
          continue;
        }
      }
			elseif ($type == 'select') {
				$values = array();
				foreach($val as $k => $v) {
					$values[] = $v;
				}
				if (count($values) == 1) { // single item select (aka checkbox)
					$items[$key] = array_shift($values);
				}
				elseif (count($values) == 0) { // no value, reset
					$items[$key] = NULL;
				}
				else {
					$items[$key] = $values;
				}
			}
      else {
        $items = array_merge($items, _webform_user_flatten_tree($val, $nid));
      }
    }
    elseif (!empty($val)) {
      $items[$key] = $val;
    }
  }

  return $items;
}

/*
 * Saves mapped profile data
 */ 
function _webform_user_save_profile_map($uid, &$map) {
  if ($map) {
    global $user;
    
    if ($user->uid == 0) {
      $user_to_update = user_load($uid);
    }
    else {
      $user_to_update = $user;
    }

    if(module_exists('profile')){
      $cat_array = profile_categories();
      
      foreach ($cat_array as $cat) {
        $updates = array(); // array for storing updates to each profile category
        $result = _webform_user_profile_get_fields($cat['name']);
        while ($row = db_fetch_array($result)) {
          if (array_key_exists($row['name'], $map)) {
            switch($row['type']) {
              case 'date':
                // massage webform date format into profile form
                $date_parts = explode('-', $map[$row['name']]);
                $updates[$row['name']] = array(
                  'month' => (int)$date_parts[1],
                  'day' => (int)$date_parts[2],
                  'year' => $date_parts[0],
                );
                break;
              default:
                $updates[$row['name']] = $map[$row['name']];
            }
          }
        }
        // save profile
        _webform_user_profile_save_profile($updates, $user_to_update, $cat['name']);
      }       
    }

    // update last_updated date so user will be re-synced on next cron run
    user_save($user_to_update, array('last_updated' => time()));

    // insert user back into queue
    $action = 'update';
    if (empty($user_to_update->salesforce_contact_id)) {
      $action = 'upsert';
    }
    
    // If the SF Queue API is enabled, insert this user into the queue
    if (module_exists('queue_api')) {
      sf_queue_insert($user_to_update->uid, 'user', $action);
    }   
  }
}

function _webform_user_log_user_in($fields) {
  $form_state = array('values' => $fields);
  drupal_execute('user_login', $form_state);
}

/**
 * Checks to see if a checkbox value is valid.
 *
 * @param $value
 *   The submitted value of a checkbox.
 * @return bool
 *   TRUE if valid; FALSE otherwise.
 */
function _webform_user_validate_checkbox($value) {
  if ($value !== 0 || $value !== 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _webform_user_load_webform_user($nid) {
	$result = db_fetch_array(db_query("SELECT * FROM {webform_user} WHERE nid = %d", $nid));
	return $result;
}

/**
 * Checks to see if the is_webform_user checkbox is enabled for the selected node.
 *
 * @param $nid
 *   The ID of the selected node.
 * @return bool
 *   Returns TRUE if is_webform_user is enabled, FALSE otherwise.
 */
function _webform_user_is_webform_user($nid) {
  $result = db_fetch_array(
    db_query(
      'SELECT is_webform_user
       FROM {webform_user}
       WHERE nid = %d',
      $nid
    )
  );

  return $result['is_webform_user'] == 1 ? TRUE : FALSE;
}

/**
 * Checks to see if the authenticate_submitters checkbox is enabled for the
 * selected node.
 *
 * @param $nid
 *   The ID of the selected node.
 * @return bool
 *   Returns TRUE if authenticate_submitters is enabled, FALSE otherwise.
 */
function _webform_user_authenticate_submitters($nid) {
  $result = db_fetch_array(
    db_query(
      'SELECT authenticate_submitters
       FROM {webform_user}
       WHERE nid = %d',
      $nid
    )
  );

  return $result['authenticate_submitters'] == 1 ? TRUE : FALSE;
}

/**
 * Saves the values of the is_webform_user and authenticate_submitters checkboxes
 * when the selected node is created.
 *
 * @param $node
 *   An object representation of the selected node.
 * @return unknown_type
 */
function _webform_user_set_values(&$node) {
  $is_webform_user = $node->is_webform_user ? 1 : 0;
  $authenticate_submitters = $node->authenticate_submitters ? 1 : 0;
  $related_object = $node->related_object ? $node->related_object : 'none';
	$send_new_user_email = $node->send_new_user_email ? 1 : 0;

	$exists = db_result(db_query("SELECT count(*) FROM {webform_user} WHERE nid = %d", $node->nid));

	if (!$exists && $is_webform_user) {
	  db_query(
	    "INSERT INTO {webform_user} (nid, is_webform_user, authenticate_submitters, related_object, send_new_user_email)
	     VALUES (%d, %d, %d, '%s', %d)",
	    $node->nid, $is_webform_user, $authenticate_submitters, $related_object, $send_new_user_email
	  );
	}
  else {
  	db_query(
	    "UPDATE {webform_user}
	     SET is_webform_user = %d, authenticate_submitters = %d, related_object = '%s', send_new_user_email = %d
	     WHERE nid = %d",
	    $is_webform_user, $authenticate_submitters, $related_object, $send_new_user_email, $node->nid
	  );
  }
}


/**
 * Deletes the values of the is_webform_user and authenticate_submitters checkboxes
 * when the selected node is being deleted.
 *
 * @param $node
 *   An object representation of the selected node.
 */
function _webform_user_delete_node_values($node) {
  db_query('DELETE FROM {webform_user} WHERE nid = %d', $node->nid);
}

/**
 * Creates a machine-readable version of a given name.
 *
 * @param $name
 *   The name for which you'd like to create a normalized name.
 * @return string
 *   The normalized name.
 */
function _webform_user_normalize_name($name) {
  // make lowercase, drop special chars, replace spaces with underscores
  return preg_replace(array('/[^a-z0-9_\s]/', '/\s+/'), array('', '_'), strtolower($name));
}

function _webform_user_get_profile_fieldsets($all = FALSE) {
  $fieldsets = array();

  if ($all) {
    $results = db_query(
      'SELECT DISTINCT category
       FROM {profile_fields}
       ORDER BY category'
    );
  }
  else {
    $results = db_query(
      'SELECT DISTINCT category
       FROM {profile_fields}
       WHERE visibility IN (%s)
       ORDER BY category',
      implode(', ', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS))
    );
  }

  while ($result = db_fetch_array($results)) {
    $result['category_normalized'] = _webform_user_normalize_name($result['category']);
    $fieldsets[] = $result;
  }

  return $fieldsets;
}

function _webform_user_get_profile_fields() {
  $fields = array();

  $results = db_query(
    'SELECT fid, title, name, explanation, category, type, weight, required, visibility, options
     FROM {profile_fields}
     WHERE visibility IN (%s)
     ORDER BY category, weight',
    implode(', ', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS))
  );

  while ($result = db_fetch_array($results)) {
    $result['category_normalized'] = _webform_user_normalize_name($result['category']);
    $fields[] = $result;
  }

  return $fields;
}

function _webform_user_get_user_profile_data($uid) {
  $items = array();

  $results = db_query(
    'SELECT pf.name, pv.value
     FROM {profile_fields} AS pf
     INNER JOIN {profile_values} AS pv ON (pf.fid = pv.fid)
     WHERE pv.uid = %d
     AND pv.value <> ""',
    $uid
  );

  while ($result = db_fetch_array($results)) {
    if ($result['type'] == 'date') {
      $result['value'] = unserialize($result['value']);
    }

    $items[$result['name']] = $result['value'];
  }

  return $items;
}

/**
 * Creates Webform components for the selected Webform node based on custom
 * profile fields.
 *
 * @param $node
 *   An object representation of the selected node.
 */
function _webform_user_create_webform_components(&$node) {
  $fieldsets = _webform_user_get_profile_fieldsets();
  $fields = _webform_user_get_profile_fields();

  $items = array();
  $fieldset_lookup = array();

  // Add the e-mail field.
  $mail_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'mail',
    'name' => 'E-mail address',
    'type' => 'textfield',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  $cid = webform_component_insert($mail_field);
    
    // Add the component mapping record
    $map = array(
      'nid' => $node->nid,
      'cid' => $cid,
      'map_id' => 'mail',
    );
    drupal_write_record('webform_user_component_map', $map);

  // Process fieldset results.
  foreach ($fieldsets as $fieldset) {
    // Create a Webform component array for the fieldset.
    $item = array(
      'nid' => $node->nid,
      'pid' => 0,
      'form_key' => $fieldset['category_normalized'],
      'name' => $fieldset['category'],
      'type' => 'fieldset',
      'weight' => 0,
      'extra' => array(
        'collapsible' => 1,
        'collapsed' => 0,
        'description' => '',
      ),
    );

    // Add the fieldset component and store its ID in a lookup table.
    $fieldset_lookup[$fieldset['category_normalized']] = webform_component_insert($item);
  }

  // Process non-fieldset results.
  foreach ($fields as $field) {
    $fieldset_id = 0;

    // Get the fieldset ID.
    foreach ($fieldset_lookup as $key => $val) {
      if ($key == $field['category_normalized']) {
        $fieldset_id = $val;
        break;
      }
    }

    // Create a Webform component array for the field.
    $item = array(
      'nid' => $node->nid,
      'pid' => $fieldset_id,
      'form_key' => str_replace('profile_', '', $field['name']),
      'name' => $field['title'],
      'type' => $field['type'],
      'mandatory' => $field['required'],
      'weight' => $field['weight'],
      'email' => 1,
      'extra' => array(
        'description' => $field['explanation'],
      ),
    );

    // Transform the component array for certain field types.
    switch ($item['type']) {
      case 'checkbox':
        $item['type'] = 'select';
        $item['extra']['items'] = $field['name'] . '|' . $field['title'];
        $item['extra']['aslist'] = 0;
        $item['extra']['multiple'] = 'Y';
        break;

      case 'list':
        $item['type'] = 'textarea';
        break;

      case 'selection':
        $item['type'] = 'select';
        $item['extra']['items'] = $field['options'];
        $item['extra']['aslist'] = 'Y';
        $item['extra']['multiple'] = 0;
        break;

      case 'url':
        $item['type'] = 'textfield';
        break;
    }

    // Add the component to the Webform.
    $cid = webform_component_insert($item);
    
    // Add the component mapping record
    $map = array(
      'nid' => $node->nid,
      'cid' => $cid,
      'map_id' => $field['name'],
    );
    drupal_write_record('webform_user_component_map', $map);
  }

  // Add the Market Source field.
  $ms_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'ms',
    'name' => 'Market Source',
    'type' => 'hidden',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  $cid = webform_component_insert($ms_field);
  // Add the component mapping record
  $map = array(
    'nid' => $node->nid,
    'cid' => $cid,
    'map_id' => 'profile_ms',
  );
  drupal_write_record('webform_user_component_map', $map);
  
  // Add the Campaign ID field.
  $cid_field = array(
    'nid' => $node->nid,
    'pid' => 0,
    'form_key' => 'cid',
    'name' => 'Campaign ID',
    'type' => 'hidden',
    'mandatory' => 1,
    'weight' => 0,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

  $cid = webform_component_insert($cid_field);
  // Add the component mapping record
  $map = array(
    'nid' => $node->nid,
    'cid' => $cid,
    'map_id' => 'profile_cid',
  );
  drupal_write_record('webform_user_component_map', $map);
  
  	// referrer
	$referrer = array(
    'nid' => $node->nid,
    'pid' => 0,
    'value' => '',
    'form_key' => 'referrer',
    'name' => 'Referrer',
    'type' => 'hidden',
    'mandatory' => 0,
    'weight' => 22,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );
	$cid = webform_component_insert($referrer);
	
	// Add the component mapping record
  $map = array(
    'nid' => $node->nid,
    'cid' => $cid,
    'map_id' => 'profile_referrer',
  );
  drupal_write_record('webform_user_component_map', $map);
	
	// initial referrer
	$initial_referrer = array(
    'nid' => $node->nid,
    'pid' => 0,
    'value' => '',
    'form_key' => 'initial_referrer',
    'name' => 'Initial Referrer',
    'type' => 'hidden',
    'mandatory' => 0,
    'weight' => 23,
    'email' => 1,
    'extra' => array(
      'description' => '',
    ),
  );

	$cid = webform_component_insert($initial_referrer);
	
	// Add the component mapping record
  $map = array(
    'nid' => $node->nid,
    'cid' => $cid,
    'map_id' => 'profile_initial_referrer',
  );
  drupal_write_record('webform_user_component_map', $map);
}

/**
 * Implementation of queue_batch_item_alter().
 */
function webform_user_queue_batch_item_alter(&$object, $type, $action, $oid) {
	if ($type == 'webform_user' && $action == 'create') {
		$relationship = _webform_user_get_relationship($oid);
		if (!empty($relationship)) {
			$user = _webform_user_load_user_salesforce_ids($oid);
			if ($relationship->related_object == 'account') {
				$id = $user->salesforce_account_id;
			}
			elseif ($relationship->related_object == 'contact') {
				$id = $user->salesforce_contact_id;
			}					
			
			// continue if we've got an id
			if ($id) {
				// add the extra relationship field
				$object[$relationship->foreign_key_field] = $id;
			}
		}
	}
}

/**
 * Returns user that made the webform submission
 */
function _webform_user_load_user_salesforce_ids($sid) {
	$result = db_query("SELECT
		CASE WHEN instr(u.data, 'salesforce_account_id') THEN substring(u.data, instr(u.data, 'salesforce_account_id')+29, 18) 
		ELSE NULL
		END AS salesforce_account_id,
		CASE WHEN instr(u.data, 'salesforce_contact_id') THEN substring(u.data, instr(u.data, 'salesforce_contact_id')+29, 18)
		ELSE NULL
		END	AS salesforce_contact_id
		FROM {users} u 
		INNER JOIN {webform_submissions} w ON w.uid = u.uid WHERE w.sid = %d", (int) $sid);
		
	return db_fetch_object($result);
}

/**
 * Helper function to return the salesforce object (account or contact) and the foreign key field
 */
function _webform_user_get_relationship($sid) {
	return db_fetch_object(db_query("SELECT b.related_object, b.foreign_key_field FROM {webform_submissions} w 
		INNER JOIN {webform_user} b ON b.nid = w.nid WHERE w.sid = %d", (int) $sid));
}

/**
 * Function to return an array of object fields
 */
function _get_object_relation_fields($object_name) {
	$sf = salesforce_management_api_connect();
	if ($sf) {
		$object = $sf->client->describeSObject($object_name);
		foreach($object->fields as $field) {
			if ($field->type == 'reference') {
				$object_fields[$field->name] = $field->label;
			}
		}
		$object_fields[] = '--Select One--';
		asort($object_fields);
		return $object_fields;
	}	
	return array();
}

/** 
 * Implemenation of queue_api_insert_alter()
 */
function webform_user_queue_api_insert_alter(&$record) {
	if ($record->type == 'webform') {
		// check to see if it is a webform user
		$is_webform_user = db_result(db_query("SELECT w.is_webform_user FROM {webform_user} w 
			INNER JOIN {webform_submissions} s ON s.nid = w.nid WHERE s.sid = %d", (int)$record->oid));
		
		if ($is_webform_user) {
		  $salesforce = salesforce_management_api_id_load('webform_user', $record->oid);
			$record->type = 'webform_user';
			$record->fieldmap = $salesforce['fieldmap'];
      $record->sfid = $salesforce['sfid'];
		}
	}
		
}