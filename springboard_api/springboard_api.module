<?php

/**
 * @file
 * Integrates Springboard with Services.
 */

function springboard_api_init() {
  dsm($_SERVER, 'server');
  $method = $_SERVER['REQUEST_METHOD'];
  if (isset($_SERVER['HTTP_ORIGIN'])) {
    drupal_add_http_header('Access-Control-Allow-Origin', $_SERVER['HTTP_ORIGIN']);
  }
 if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {
    drupal_add_http_header('Access-Control-Allow-Headers', $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']);
  }
  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {
    drupal_add_http_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  }
  if ($method == 'OPTIONS') {
    exit;
  }
}

/**
 * Implements hook_permission().
 */
function springboard_api_permission() {
  return array(
    'administer springboard api' => array(
      'title' => t('Administer Springboard API'),
      'description' => t('Perform administration tasks for Springboard API.'),
    ),
  );
}

function springboard_api_form_alter(&$form, $form_state, $form_id) {
  drupal_set_message('form id:' . $form_id);
  if ($form_id == 'page_wrapper_node_form') {
    $form['test-wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('test fieldset'),
    );
    $form['test-wrapper']['test-select'] = array(
      '#type' => 'select',
      '#title' => t('test select'),
      '#options' => array('1' => 'one', '2' => 'two', '3' => 'three'),
      '#default_value' => '2',
    );
  }
}
/**
 * Implements hook_menu().
 */
function springboard_api_menu() {
  $items = array();
  $items['admin/config/services/springboard_api'] = array(
    'title' => 'Springboard API',
    'description' => 'Configure Springboard API settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_api_admin_settings'),
    'access arguments' => array('administer springboard api'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/springboard_api.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_services_resources().
 */
function springboard_api_services_resources() {
  $resource = array(
    'springboard-donation' => array(
      'operations' => array(
        'create' => array(
          'help' => 'Create a donation',
          'file' => array('type' => 'inc', 'module' => 'springboard_api', 'name' => 'resources/springboard_api.donation_resourcess'),
          'callback' => 'springboard_api_donation_resource_create',
          'args' => array(
            array(
              'name' => 'donation',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => 'springboard_api_donation_resource_access',
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'springboard-forms' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieve detailed information about a specific form.',
          'file' => array('type' => 'inc', 'module' => 'springboard_api', 'name' => 'resources/springboard_api.form_resources'),
          'callback' => 'springboard_api_form_resource_retrieve',
          'access callback' => 'springboard_api_form_resource_access',
          'access arguments' => array('retrieve'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'form_id' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The node id of the form to get',
            ),
            array(
              'name' => 'op',
              'type' => 'array',
              'description' => '',
              'source' => array('param' => 'op'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
          'access callback' => 'springboard_api_form_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'index' => array(
          'help' => 'List avaialble forms',
          'file' => array('type' => 'inc', 'module' => 'springboard_api', 'name' => 'resources/springboard_api.form_resources'),
          'callback' => 'springboard_api_form_resource_index',
          'access callback' => 'springboard_api_form_resource_access',
          'access arguments' => array('index'),
          'access arguments append' => TRUE,
        ),
      ),
      'actions' => array(
        'submit' => array(
          'help' => 'Submit a webform via the API',
          'file' => array('type' => 'inc', 'module' => 'springboard_api', 'name' => 'resources/springboard_api.form_resources'),
          'callback' => 'springboard_api_form_action_submit',
          'access callback' => 'springboard_api_form_resource_access',
          'access arguments' => array('submit'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name'         => 'nid',
              'type'         => 'int',
              'description'  => t('node id of the form to submit.'),
              'source'       => array('param' => 'form_id'),
              'optional'     => FALSE,
            ),
            array(
              'name' => 'submission',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'Weform submission data.',
              'type' => 'array',
            ),
          ),
        ),
        'render' => array(
          'help' => 'request a rendered form',
          'file' => array('type' => 'inc', 'module' => 'springboard_api', 'name' => 'resources/springboard_api.form_resources'),
          'callback' => 'springboard_api_form_action_render',
          'access callback' => 'springboard_api_form_resource_access',
          'access arguments' => array('render'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The node id of the webform to submit.',
            ),
            array(
              'name' => 'wrapper',
              'optional' => TRUE,
              'source' => 'data',
              'description' => 'page wrapper id.',
              'type' => 'array',
            ),
          ),
        ),
      ),
    ),
  );
  return $resource;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function springboard_api_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner = 'springboard_api') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function springboard_api_ctools_plugin_type() {
  $plugins['api_management_services'] = array(
    'load themes' => TRUE,
  );

  return $plugins;
}

/**
 *
 */
function springboard_api_list_management_services() {
  $services = array();
  $plugins = springboard_api_get_available_plugins();
  foreach ($plugins as $plugin) {
    if (isset($plugin['name']) && isset($plugin['title'])) {
      $services[$plugin['name']] = $plugin['title'];
    }
  }
  return $services;

}

/**
 *
 */
function springboard_api_get_enabled_management_service() {
  if ($enabled_service = variable_get('springboard_api_management_service', 0)) {
    $plugins = springboard_api_get_available_plugins();
    foreach ($plugins as $plugin) {
      if ($plugin['name'] === $enabled_service) {
        return $plugin;
      }
    }
  }
  return FALSE;
}

/**
 * @return array
 */
function springboard_api_get_available_plugins() {
  $plugins = array();
  ctools_include('plugins');
  $plugins = ctools_get_plugins('springboard_api', 'api_management_services');
  return $plugins;
}

/**
 *
 *
 */
function springboard_api_form_resource_access($op, $data) {
  // TODO: we may want to add response code & details to log.
  springboard_api_log_service_usage($op, $data = NULL);
  $service = springboard_api_get_enabled_management_service();
  if (isset($service['throttling_callback']) && function_exists($service['throttling_callback'])) {
    $func = $service['throttling_callback'];
    $request_ok = $func();
    if (!$request_ok) {
      // bail out, throttle limit has been reached.
      return FALSE;
    }
  }
  if (isset($service['authentication_callback']) && function_exists($service['authentication_callback'])) {
     $func = $service['authentication_callback'];
     return $func($op, $data);
  }
  return TRUE;
}

/**
 * Get form node & field information for a requested form.
 */
function springboard_api_get_form_details($nid) {
  $node = node_load($nid);
  if (is_object($node)) {
    // fish for internal name.
    $lang = $node->language;
    $internal_name = isset($node->field_fundraiser_internal_name) ? $node->field_fundraiser_internal_name[$lang][0]['safe_value'] : '';
    // high level form node details
    $form_details = array(
      'nid' => $node->nid,
      'title' => $node->title,
      'internal_name' => $internal_name,
      'type' => $node->type,
      'body' => $node->body,
      'fields' => array(),
      'token' => drupal_get_token('services'), // go ahead and pre-load csrf token so it's available when the form is submitted.
    );
    // build form field list
    foreach ($node->webform['components'] as $cid => $component) {
      // skip fieldsets
      if ($component['type'] == 'fieldset') {
        continue;
      }
      // each webform component type has a render function that generates the form api array for that component type.
      // we're using this function to generate the form api code for each component in the webform. The fapi array is
      // then parsed for information like type, required, default value, etc. In this way we can
      // analyze standard and custom component types regardless of what modules created them.
      $func = '_webform_render_' . $component['type'];
      if (function_exists($func)) {
        $fapi = $func($component);
        $save = &$form_details['fields'][$component['form_key']];
        $save['form_key'] = $component['form_key'];
        _springboard_api_parse_component_fapi($save, $fapi);
      }
    }
    return $form_details;
  }
  else {
    return FALSE;
  }
}

function _springboard_api_parse_component_fapi(&$save, $fapi) {
  if ($fapi['#type'] == 'date') {
    $fapi = form_process_date($fapi);
  }
  $save = array(
    'label' => isset($fapi['#title']) ? $fapi["#title"] : '',
    'type' => isset($fapi['#type']) ? $fapi['#type'] : '',
    'default value' => isset($fapi['#default_value']) ? $fapi['#default_value'] : '',
    'accepted values' => isset($fapi['#options']) ? $fapi['#options'] : '',
    'required' => isset($fapi['#required']) ? $fapi['#required'] : FALSE,
  );

  // if component default hasn't been found check #value
  if (empty($save['default value'])) {
    $save['default value'] = isset($fapi['#value']) ? $fapi['#value'] : '';
  }
  // recurse on any nested elements.
  $children = element_children($fapi);
  foreach ($children as $key) {
    _springboard_api_parse_component_fapi($save[$key], $fapi[$key]);
  }
}

function _springboard_api_parse_extra_items($items) {
  $parts = explode("\n", $items);
  foreach ($parts as $part) {
    $sub = explode('|', $part);

    $values[$sub[0]] = $sub[1];
  }
  return $values;
}

/**
 * Lookup payment method field information.
 *
 * @param $component
 * Payment methods webform component.
 *
 * @return mixed
 * Returns payment field array or FALSE if no payment methods are found.
 */
function _springboard_api_get_payment_field_info($component) {
  $payment_methods = array_filter($component['extra']['payment_methods'], '_fundraiser_webform_payment_method_array_filter_enabled');
  if (is_array($payment_methods)) {
    foreach ($payment_methods as $type => $gateway_details) {
      $gateway = _fundraiser_gateway_info($gateway_details['id']);
      dsm($gateway, 'gateway');
      if (isset($gateway['field info callback']) && function_exists($gateway['field info callback'])) {
        $func = $gateway['field info callback'];
        $field_info = $func();
        $payment_fields[$type] = $field_info;
      }
    }
    return $payment_fields;
  }
  return FALSE;
}

/**
 * Log API request.
 *
 * @param $endpoint
 * @param null $data
 */
function springboard_api_log_service_usage($op, $data = NULL) {
  // TODO:$_SERVER['HTTP_X_FORWARDED_FOR'] to capture ip behind proxy
  $record = array(
    'time' => time(),
    'remote_ip' => isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : 'unknown',
    'referrer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : 'unknown',
    'endpoint' => $op,
    'data' => serialize($data),
  );
  drupal_write_record('springboard_api_tracker', $record);
}
