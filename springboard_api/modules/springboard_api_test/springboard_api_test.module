<?php

/**
 * @file
 * Provide cleanup services for Springboard salesforce objects, and
 * an API to allow other modules to provide cleanup routines.
 */

/**
 * Implements hook_perm().
 */
function springboard_api_test_perm() {
  return array(
    'administrate springboard api test'
  );
}

/**
 * Implements hook_menu().
 */
function springboard_api_test_menu() {
  $items = array();
  $items['admin/springboard/settings/api_test'] = array(
    'title' => 'Springboard API test',
    'description' => 'Access Springboard API test settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_api_test_admin'),
    'access arguments' => array('administrate springboard api test'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/settings/api_test/settings'] = array(
    'title' => 'Settings',
    'description' => 'Access Springboard API test settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_api_test'),
    'access arguments' => array('administrate springboard api test'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/springboard/settings/api_test/test'] = array(
    'title' => 'Test',
    'description' => 'Access Springboard API test settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_api_test'),
    'access arguments' => array('administrate springboard api test'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements admin settings form.
 */
function springboard_api_test_admin(&$form_state) {
  $form['springboard_api_test_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('The URL of the site to test remotely, usually of the format: http://example.com/springboard_api'),
    '#default_value' => variable_get('springboard_api_test_url', ''),
  );
  $form['springboard_api_test_public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Public key generated by the remote site.'),
    '#default_value' => variable_get('springboard_api_test_public', ''),
  );
  return system_settings_form($form);
}

function springboard_api_test(&$form_state) {
  $url = variable_get('springboard_api_test_url', '');
  $public_key = variable_get('springboard_api_test_public', '');
  $private_key = variable_get('springboard_api_test_private', '');
  if (empty($url) || empty($public_key) || empty($private_key)) {
    drupal_set_message(t('Please configure this site with the remote Springboard API information.'));
    drupal_goto('admin/springboard/settings/api_test/settings');
    return;
  }
  // Try the connection.
  module_load_include('inc', 'springboard_api_test', 'includes/SpringboardAPIObject.class');
  $test_client = new SpringboardAPIObject($url, $public_key, $private_key);
  if (!$test_client) {
    // Returned false, no connection.
    drupal_set_message(t('Springboard API test, failed to connect to remote site.'));
    return array();
  }
  $form = array();
  $form['resource'] = array(
    '#type' => 'select',
    '#title' => t('Service resource'),
    '#description' => t('The action you want to take on the remote server.'),
    '#options' => array(
      '-1' => t('-- Select action --'),
      'index' => t('Retrieve an index of forms'),
      'retrieve' => t('Retrieve a specific form'),
      'submit' => t('Post to a specific form'),
    )
  );

  $response = $test_client->sb_api_test_index();
  if ($response && !empty($response['content'])) {
    $options = array('-1' => t('-- Select form --'));
    $items = $response['object'];
    foreach ($items->children() as $item) {
      $nid = (string) $item->nid;
      $options[$nid] = $item->title . ' [' . $nid . ':' . $item->type . ']';
    }
    if (!empty($options)) {
      $form['nid'] = array(
        '#type' => 'select',
        '#title' => t('Select the node to retrieve or submit to'),
        '#description' => t('The node to act on. Only applies to retrieve and submit actions.'),
        '#options' => $options,
      );
      $form['data'] = array(
        '#type' => 'textarea',
        '#title' => t('Enter data to submit to the selected node'),
        '#description' => t('The data to submit. Only applies to submit actions. Example data may resemble: ' .
        '&amount=20.00&first_name=Test&last_name=User&email=test@example.com&address=12345 Test Rd' .
        '&address_line_2=&city=Testville&country=840&state=44&zip=12345&card_number=4111111111111111' .
        '&card_expiration_month=01&card_expiration_year=2013&card_cvv=111'),
      );
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run test'),
  );
  return $form;
}

function springboard_api_test_ahah_resource() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  unset($form_state['submit_handlers']);
  unset($form['#submit']);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $output = theme('status_messages') . drupal_render($form['nid']);
  if (!empty($form['data'])) {
    $output .= drupal_render($form['data']);
  }
  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
  drupal_json(array(
    'status' => TRUE,
    'data' => $output,
    'settings' => array('ahah' => $settings['ahah']),
  ));
}

function springboard_api_test_submit(&$form, &$form_state) {
  $url = variable_get('springboard_api_test_url', '');
  $public_key = variable_get('springboard_api_test_public', '');
  $private_key = variable_get('springboard_api_test_private', '');
  if (empty($url) || empty($public_key) || empty($private_key)) {
    drupal_set_message(t('Please configure this site with the remote Springboard API information.'));
    return;
  }
  // Make connection.
  module_load_include('inc', 'springboard_api_test', 'includes/SpringboardAPIObject.class');
  $test_client = new SpringboardAPIObject($url, $public_key, $private_key);
  if ($test_client) {
    $resource = $form_state['values']['resource'];
    $nid = $form_state['values']['nid'];
    $data = $form_state['values']['data'];
    // Convert data into query.
    switch ($resource) {
      case 'index':
        drupal_set_message(t('Test index:'));
        $response = $test_client->sb_api_test_index();
        drupal_set_message(print_r($response['object'], TRUE));
      break;
      case 'retrieve':
        if ($nid > 0) {
          drupal_set_message(t('Test retrieve:'));
          $response = $test_client->sb_api_test_retrieve($nid);
          drupal_set_message(print_r($response['object'], TRUE));
        }
        else {
          drupal_set_message(t('Invalid node selected.'));
        }
      break;
      case 'submit':
        if ($nid > 0 && !empty($data)) {
          $query = array();
          $keys = explode('&', trim($data));
          foreach ($keys as $key) {
            $values = explode('=', $key);
            if (!empty($values[0])) {
              $query[$values[0]] = $values[1];
            }
          }
          drupal_set_message(t('Test submit:'));
          $response = $test_client->sb_api_test_submit($nid, $query);
          drupal_set_message(t('Submitted, check remote server.'));
        }
        else {
          drupal_set_message(t('Bad data or invalid node selected.'));
        }
      break;
      default:
      break;
    }
  }
}
