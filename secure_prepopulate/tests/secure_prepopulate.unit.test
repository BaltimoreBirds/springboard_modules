<?php
/**
 * Administration tests for my module.
 */
class SecurePrepopulateUnitTestCase extends DrupalWebTestCase {

  /**
   * @var string
   */
  protected $encrypted;

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Secure pre-populate unit tests'),
      'description' => t('Tests secure prepopulate encryption and decryption.'),
      'group' => t('Secure Prepopulate'),
    );
  }

  public function setUp() {
    parent::setUp(array('secure_prepopulate'));

    // Set up some default variables
    variable_set('secure_prepopulate_key', '12345678901234561234567890123456');
    variable_set('secure_prepopulate_iv', '1234567890123456');
    variable_set('secure_prepopulate_precedence', 'url');

    // encrypted = first_name=Euro&last_name=Guy&uid=29
    $this->encrypted = 'zBYBEVb6oX39UMG3b7HFlWTHbQ/L6Gd20MM2JexIVQ6msawBjeTa/MMjQFc9jnNA';
  }

  /**
   * Tests encrypting a query string.
   */
  public function testEncrypt() {
    $settings = array(
      'first_name' => 'Allen',
      'last_name' => 'Freeman',
      'email' => 'allen.freeman@example.com',
      'address' => '12345 Test Dr',
      'address_line_2' => 'Apt 2',
      'city' => 'Springfield',
      'country' => 'US',
      'state' => 'IL',
      'zip' => '55555',
    );
    $query = array();
    foreach ($settings as $key => $value) {
      $query[] = "$key=$value";
    }
    $query_string = implode('&', $query);
    variable_set('secure_prepopulate_iv', 'cae023134cfcbf45');
    variable_set('secure_prepopulate_key', '7576586e4a5cb0611e3a1f080a30615a');
    $crypt = secure_prepopulate_encrypt($query_string);
    $expected = '7vGjVvf/xlO/nVEq8FtS+/VAjjZGbAYBHddPjrpNCN5twzqjTrOf4W/RV5MEdvbpGAZ1c5wjBeIjljD8a9A5O2iQuxjk/lVnUWBO8Vg+WRCqH0basvWtivCxQg060w4vaDEZvoBcgzkkODZ9om4pR5psjwL1Q2wtcZQxmBoOsED8UTtjo73ufEOmXR411N93bIEMiJMJnS3Wb97F2FKCRA==';

    $result = !strcmp($expected, $crypt);
    $message = 'secure_prepopulate_encrypt() returns expected values.';
    $this->assertTrue($result, $message);
  }

  /**
   * Test the decryption of a string.
   */
  public function testDecrypt() {
    $decrypted = secure_prepopulate_decrypt_qs($this->encrypted);
    $this->assertEqual($decrypted['first_name'], 'Euro', t('Decrypted first_name field = Euro'));
    $this->assertEqual($decrypted['last_name'], 'Guy', t('Decrypted last_name field = Guy'));
    $this->assertEqual($decrypted['uid'], '29', t('Decrypted uid field = 29'));
  }

  /**
   * Ensure cron jobs are working correctly.
   */
  public function testCron() {
    $expire_days = 30;
    variable_set('secure_prepopulate_expired_date_limit', $expire_days);

    // Create dummy entries.
    foreach (range(0, (2 * $expire_days)) as $num) {
      $row = array(
        'hash' => md5($num),
        'expire_date' => (REQUEST_TIME - ($num * 24 * 60 * 60)),
      );
      drupal_write_record('secure_prepopulate_expired', $row);
    }

    // Run cron. Everything older than 30 days should be deleted.
    $this->cronRun();

    // Verify entries were removed.
    $max_date = REQUEST_TIME - ($expire_days * 24 * 60 * 60);
    $expired_count = db_select('secure_prepopulate_expired', 's')
      ->fields('s', array('hash'))
      ->condition('expire_date', $max_date, '<')
      ->execute()
      ->rowCount();
    $this->assertEqual(0, $expired_count);

    // Verify the other entries weren't removed.
    $not_expired_count = db_select('secure_prepopulate_expired', 's')
      ->fields('s', array('hash'))
      ->condition('expire_date', $max_date, '>')
      ->execute()
      ->rowCount();
    $this->assertEqual(30, $not_expired_count);
  }
}
