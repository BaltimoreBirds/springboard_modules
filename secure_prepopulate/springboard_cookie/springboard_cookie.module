<?php

/**
 * @file
 * This module provides a client cookie to identify users returning to the site even if they are not logged into Drupal.
 */

define('SPRINGBOARD_COOKIE_NAME_DEFAULT', 'Springboard');
define('SPRINGBOARD_COOKIE_EXPIRATION_DAYS_DEFAULT', 365);

/**
 * Implementation of hook_menu().
 */
function springboard_cookie_menu() {
  $items['springboard_cookie/js/new'] = array(
    'title' => '',
    'page callback' => 'springboard_cookie_js_new_cookie',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_init().
 */
function springboard_cookie_init() {
  // Is autologin enabled?
  if (variable_get('springboard_cookie_autologin', FALSE)) {
    // Check for a Springboard cookie with a user email in the request.
    $cookie_data = springboard_cookie_get_cookie();
    if (!empty($cookie_data['email'])) {
      $account = user_load_by_mail($cookie_data['email']);
      if ($account) {
        // Log in the user
        secure_prepopulate_login_user($account->uid);
      }
    }
  }
  
  // Check the query string for an encrypted email address.
  global $user;
  if (isset($_GET['sbck']) && empty($user->uid)) {
    $email = secure_prepopulate_decrypt($_GET['sbck']);
    if (!empty($email)) {
      // Tag the email address to the client cookie.
      springboard_cookie_tag_client(array('email' => $email));
      // Don't cache the response.
      drupal_page_is_cacheable(FALSE);
    }
  }
  
  // Make sure this client has a cookie and a client_id.
  if (variable_get('cache', FALSE) && drupal_page_is_cacheable()) {
    // Page can be cached, so send Javascript to make the client check itself for the cookie.
    drupal_add_js(
      array(
        'springboard_cookie' => array(
          'name' => variable_get('springboard_cookie_name', SPRINGBOARD_COOKIE_NAME_DEFAULT),
        ),
      ),
      'setting'
    );
    drupal_add_js(drupal_get_path('module', 'springboard_cookie') . '/js/springboard_cookie.cacheable.js');
  }
  else {
    // Page caching is disabled, so we can set the cookie with any response we please.
    springboard_cookie_tag_client();
  }
}

/**
 * Implementation of hook_user_login().
 */
function springboard_cookie_user_login(&$edit, $account) {
  // User login gives us an email and uid, so tag the client.
  springboard_cookie_tag_client(array(
    'email' => $account->mail,
    'uid' => $account->uid,
    'last_login' => time(),
  ));
}

/**
 * Implementation of hook_fundraiser_donation_post_submit().
 */
function springboard_cookie_fundraiser_donation_post_submit($form, $form_state, $donation) {
  // Pull user data from the new donation and tag it to the client.
  $new_data = array();
  if ($donation->uid) {
    $new_data['uid'] = $donation->uid;
  }
  if (!empty($donation->donation['mail'])) {
    $new_data['email'] = $donation->donation['mail'];
  }
  springboard_cookie_tag_client($new_data);
}

/**
 * Implementation of hook_sb_social_share_event_save().
 */
function springboard_cookie_sb_social_share_event_save($share_data) {
  if (!empty($share_data['share_id'])) {
    // Tag the client with this share_id.
    springboard_cookie_tag_client(array(
      'share_ids' => array($share_data['share_id'])
    ));
  }
}

/**
 * Implmentation of hook_form_alter().
 */
function springboard_cookie_form_alter(&$form, &$form_state, $form_id) {
  // Add cookie settings to the Secure Prepopulate admin form.
  if ($form_id == 'secure_prepopulate_admin_settings') {
    $form['springboard_cookie'] = array(
      '#type' => 'fieldset',
      '#title' => t('Springboard cookie settings'),
      '#weight' => 2,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['springboard_cookie']['springboard_cookie_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Cookie name'),
      '#default_value' => variable_get('springboard_cookie_name', SPRINGBOARD_COOKIE_NAME_DEFAULT),
      '#description' => t('This will be the name of the Springboard cookie in the client browser cache.'),
    );
    $form['springboard_cookie']['springboard_cookie_expiration_days'] = array(
      '#type' => 'textfield',
      '#title' => t('Days to expiration'),
      '#default_value' => variable_get('springboard_cookie_expiration_days', SPRINGBOARD_COOKIE_EXPIRATION_DAYS_DEFAULT),
      '#description' => t('The Springboard cookie will be set to expire after this number of days.'),
    );
    $form['springboard_cookie']['springboard_cookie_autologin'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatic login'),
      '#description' => t("When a client hits the site with a Springboard cookie matching an existing user's email, automatically log that user in."),
      '#default_value' => variable_get('springboard_cookie_autologin', 0),
    );
    $form['#validate'][] = 'springboard_cookie_settings_validate';
  }
  
  // Add submission handler to Webform User-enabled webform.
  if (module_exists('webform_user')) {
    if (strpos($form_id, 'webform_client') !== FALSE && arg(2) != 'submission' && arg(4) != 'edit') {
      $node = node_load($form['#node']->nid);
      if (_webform_user_is_webform_user_node($node)) {
        $form['#after_build'][] = 'springboard_cookie_webform_user_webform_after_build';
      }
    }
  }
}

/**
 * Settings form validation.
 */
function springboard_cookie_settings_validate($form, &$form_state) {
  // Cookie name needs to be alphanumeric.
  if (!preg_match("|^[a-zA-Z0-9_\\.]+\$|", $form_state['values']['springboard_cookie_name'])) {
    form_set_error('springboard_cookie_name', t('Springboard cookie name must be alphanumeric.'));
  }
  $expiration_days = (float)$form_state['values']['springboard_cookie_expiration_days'];
  if (!is_numeric($form_state['values']['springboard_cookie_expiration_days']) || $expiration_days < 0 || (int)$expiration_days != $expiration_days) {
    form_set_error('springboard_cookie_expiration_days', t('Springboard cookie days to expiration must be an integer greater than zero.'));
  }
}

/**
 * Webform User-enabled webform after-build.
 */
function springboard_cookie_webform_user_webform_after_build($form, $form_state) {
  // Add our submit handler. This way it will go last.
  $form['#submit'][] = 'springboard_cookie_webform_user_webform_submit';
  return $form;
}

/**
 * Webform User-enabled webform submission.
 */
function springboard_cookie_webform_user_webform_submit($form, &$form_state) {
  $node = node_load($form_state['values']['details']['nid']);
  $submit_op = empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'];
  // Is the form completed?
  if ($form_state['values']['op'] == $submit_op) {
    // Tag the client cookie with the submitted email address and with the uid if there's a user account.
    $fields = _webform_user_flatten_tree($form_state['values']['submitted_tree'], $node->nid);
    $email = trim($fields['mail']);
    $new_data = array('email' => $email);
    if ($account = user_load_by_mail($email)) {
      $new_data['uid'] = $account->uid;
    }
    springboard_cookie_tag_client($new_data);
  }
}

/**
 * Javascript callback: Send a new cookie via AJAX.
 */
function springboard_cookie_js_new_cookie() {
  // Generate, serialize, and encrypt a new cookie.
  springboard_cookie_tag_client();
  $cookie = springboard_cookie_get_cookie();
  $serialized = serialize($cookie);
  $encrypted = secure_prepopulate_encrypt($serialized);
  
  // Send it back as JSON.
  drupal_json_output(array(
    'cookie' => $encrypted,
    'expires' => variable_get('springboard_cookie_expiration_days', SPRINGBOARD_COOKIE_EXPIRATION_DAYS_DEFAULT),
  ));
  exit;
}

/**
 * Tag the client with Springboard cookie data.
 * If the client doesn't have a Springboard cookie, one will be created, including a client ID.
 */
function springboard_cookie_tag_client($new_data = array()) {
  $extant_cookie = $new_cookie = springboard_cookie_get_cookie();
  foreach ($new_data as $name => $value) {
    if (isset($new_cookie[$name])) {
      if (is_array($new_cookie[$name]) && is_array($new_data[$name])) {
        // If the existing and new values are arrays, simply combine them.
        $new_cookie[$name] = array_unique(array_merge($new_cookie[$name], $new_data[$name]));
      }
      else if ($new_cookie[$name] != $new_data[$name]) {
        // New data doesn't match data already in the client's cookie, so throw out the old cookie data and start fresh.
        $new_cookie = $new_data;
        break;
      }
    }
    else {
      // Add new data to the cookie.
      $new_cookie[$name] = $new_data[$name];
    } 
  }
  // Make sure the cookie has a client ID.
  if (!isset($new_cookie['client_id'])) {
    $new_cookie['client_id'] = uniqid();
  }
  // Send the cookie to the client if it's different from what they already have.
  if ($extant_cookie != $new_cookie) {
    springboard_cookie_set_cookie($new_cookie);
  }
}

/**
 * Fetch the Springboard cookie, decrypt, and return.
 */
function springboard_cookie_get_cookie() {
  // Static-persist the cookie's data if/when it is set.
  $cookie_data = &drupal_static(__FUNCTION__);
  
  // First time? Look for the cookie.
  if ($cookie_data === NULL) {
    $cookie_data = array();
    $cookie_name = variable_get('springboard_cookie_name', SPRINGBOARD_COOKIE_NAME_DEFAULT);
    if (isset($_COOKIE[$cookie_name]) && !empty($_COOKIE[$cookie_name])) {
      // Attempt to decrypt and deserialize
      $decrypted = secure_prepopulate_decrypt($_COOKIE[$cookie_name]);
      if (!empty($decrypted)) {
        // Unserialize and make sure we got an array.
        $unserialized = unserialize($decrypted);
        if (is_array($unserialized)) {
          $cookie_data = $unserialized;
        } else {
          watchdog('Springboard cookie', t("Springboard cookie didn't unserialize to an array: %data", array('%data' => $decrypted)));
        }
      }
    }
  }
  
  // Return the cookie data.
  return $cookie_data;
}

/**
 * Set the Springboard cookie, encrypting the given data array and adding it to the HTTP response.
 */
function springboard_cookie_set_cookie($cookie_data) {
  // Update the getter's static cache.
  $static_cache = &drupal_static('springboard_cookie_get_cookie');
  $static_cache = $cookie_data;
  
  // Serialize, encrypt, and add to the response.
  $serialized = serialize($cookie_data);
  $encrypted = secure_prepopulate_encrypt($serialized);
  $cookie_name = variable_get('springboard_cookie_name', SPRINGBOARD_COOKIE_NAME_DEFAULT);
  $expiration_days = variable_get('springboard_cookie_expiration_days', SPRINGBOARD_COOKIE_EXPIRATION_DAYS_DEFAULT);
  setcookie($cookie_name, $encrypted, time() + 60 * 60 * 24 * $expiration_days, '/');
}
