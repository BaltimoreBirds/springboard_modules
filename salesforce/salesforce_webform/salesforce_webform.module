<?php

/**
 * @file
 * Manages webform to Salesforce mappings.
 */

/**
 * @defgroup core_drupal_hooks
 * @{
 */

/**
 * Implements hook_permission().
 */
function salesforce_webform_permission() {
  return array(
    'map salesforce to webform' => array(
      'title' => t('Map Salesforce objects to webforms'),
      'description' => t('Configure the mapping of Salesforce objects with
        webforms so submissions can sync with Salesforce.'),
    ),
  );
}

/**
 * @} core_drupal_hooks
 */

/**
 * Implements hook_salesforce_generic_info().
 */
function salesforce_webform_salesforce_generic_info() {
  $items['salesforce_webform'] = array(
    'type' => 'webform',
    'label' => 'Webform',
    'access callback' => 'salesforce_webform_map_page_access',
  );
  return $items;
}

/**
 * Access callback to reach the mapping page
 *
 * All by its little old self because menu doesn't load the include file until
 * after the access check.
 */
function salesforce_webform_map_page_access($node) {
  if ($node !== FALSE // %webform_menu returns FALSE if not valid
    && user_access('map salesforce to webform')
    ) {
    return TRUE;
   }
  return FALSE;
}

/**
 * Implementations of hook_webform_submission_ACTION().
 */
function salesforce_webform_webform_submission_insert($node, $submission) {
  salesforce_generic_send_object_to_queue('salesforce_webform', 'insert', $node, $submission->sid, $submission);
}
function salesforce_webform_webform_submission_update($node, $submission) {
  salesforce_generic_send_object_to_queue('salesforce_webform', 'update', $node, $submission->sid, $submission);
}
function salesforce_webform_webform_submission_delete($node, $submission) {
  salesforce_generic_send_object_to_queue('salesforce_webform', 'delete', $node, $submission->sid, $submission);
}

/**
 * Implements hook_salesforce_generic_map_fields().
 *
 * @param stdClass $submission
 *   A donation object
 * @param Entity $map
 *   A Salesforce map entity
 * @return $fields
 *   A set of fields mapped to value.
 */
function salesforce_webform_salesforce_generic_map_fields(stdClass $submission, Entity $map, $node) {
  $fields = array();
  // Salesforce webform map
  foreach ($submission->data as $cid => $values) {
    $wf_field = $node->webform['components'][$cid]['form_key'];
    if (isset($map->field_map['salesforce_webform_map'][$wf_field])) {
      $sf_field = $map->field_map['salesforce_webform_map'][$wf_field];
      $fields[$sf_field] = $values['value'][0];
    }
  }
  // Node properties map
  if (isset($map->field_map['salesforce_node_map'])) {
    if (isset($map->field_map['salesforce_node_map']['nid'])) {
      $sf_field = $map->field_map['salesforce_node_map']['nid'];
      $fields[$sf_field] = $node->nid;
    }
    if (isset($map->field_map['salesforce_node_map']['title'])) {
      $sf_field = $map->field_map['salesforce_node_map']['title'];
      $fields[$sf_field] = $node->title;
    }
  }
  // Submission properties map
  if (isset($map->field_map['salesforce_submission_map'])) {
    if (isset($map->field_map['salesforce_submission_map']['sid'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['sid'];
      $fields[$sf_field] = $submission->sid;
    }
    if (isset($map->field_map['salesforce_submission_map']['date'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['date'];
      $fields[$sf_field] = REQUEST_TIME;
    }
  }
  return $fields;
}

/**
 * Implements hook_salesforce_generic_map_field_info().
 *
 * @param stdClass $node
 *   Provide a node object
 * @return $fields
 *   A set of fields to be used in mapping form.
 */
function salesforce_donation_salesforce_generic_map_field_info($node) {
  // Build an array of fields to map against.
  // Nested by category. If the category allows for dedupes, note that.
  $fields = array();
  // Webform component fields.
  $fields['salesforce_webform_map'] = array(
    '#type' => 'webform',
    '#label' => t('Webform Componant'),
    '#dedupe' => TRUE,
    '#fields' => array()
  );
  $wf_components = $node->webform['components'];
  foreach ($wf_components as $cid => $component) {
    if ($component['type'] != 'fieldset') {
      $form_key = $component['form_key'];
      $fields['salesforce_webform_map']['#fields'][$form_key] = $component['name'] .
        ' (' . $component['type'] . ')';
    }
  }
  // Node fields.
  $fields['salesforce_node_map'] = array(
    '#type' => 'node',
    '#label' => t('Node Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'nid' => t('Node ID'),
      'title' => t('Node Title'),
    ),
  );
  // Submission fields.
  $fields['salesforce_user_map'] = array(
    '#type' => 'submission',
    '#label' => t('Submission Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'sid' => t('Submission ID'),
      'date' => t('Submission Date'),
    ),
  );
  // And return the fields for the map to generate the form.
  return $fields;
}
