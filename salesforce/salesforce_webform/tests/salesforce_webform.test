<?php

/**
 * @file
 * Simple tests for salesforce_webform
 */

/**
 * Tests basic set up for mapping salesforce objects to webforms
 */
class SalesforceWebformTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'General Salesforce Webform Tests',
      'description' => 'Ensure that the salesforce_webform module functions properly.',
      'group' => 'Salesforce Webform',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array()) {
    $modules = $modules + array(
      'entity',
      'libraries',
      'salesforce',
      'salesforce_genmap',
      'webform',
      'salesforce_webform',
    );
    parent::setUp($modules);

    // Create an admin user
    $permissions = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'administer users',
      'administer salesforce',
      'access all webform results',
      'access own webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'access own webform submissions',
      'edit own webform submissions',
      'delete own webform submissions',
      'map salesforce to webform',
    );
    $this->admin_user = $this->drupalCreateUser($permissions);
    // Don't forget, need to pass --uri in drush command in order for logging
    // in to work
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    user_cancel(array(), $this->admin_user->uid, 'user_cancel_delete');
    parent::tearDown();
  }

  /**
   * Helper that will test that sync options are obeyed for the controlling queue
   */
  public function testSyncOptions() {
    // Skip this test if there is no queue module enabled.  Child tests will
    // automatically run this, and if they enable a module with a queue it
    // will run this
    $queue = module_invoke('salesforce', 'load_push_queue');
    if (empty($queue)) {
      return;
    }

    // Set up a webform
    $this->swSalesforceConnect();
    $webform = $this->swCreateWebform();
    $path = 'node/' . $webform->nid;
    $this->drupalGet($path . '/salesforce/salesforce_webform');
    $this->drupalPostAjax(NULL, array('salesforce_object_info[salesforce_object_type]' => 'Contact'), 'salesforce_object_info[salesforce_object_type]');
    $this->drupalPost(NULL, array(), 'Save');

    // testQueueSystem() tests when all are selected.  Lets run through the
    // tests when different combinations are selected
    $edit = array(
      'submitted[first_name]' => 'ExampleFirstName',
      'submitted[last_name]' => 'ExampleLastName',
      'submitted[email]' => 'example@email.com',
    );
    $combinations = array(
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => TRUE),
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => TRUE),
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => TRUE),
    );
    foreach ($combinations as $sync_config) {
      $this->drupalGet($path . '/salesforce/salesforce_webform');
      $this->drupalPost(NULL, $sync_config, 'Save');

      // Create submission
      $this->drupalGet($path);
      $this->drupalPost(NULL, $edit, 'Submit');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][insert]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on insert was sent to queue.');
        // Simulate processed item
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on insert was not sent to the queue.');
      }

      // Get the SID of the new submission
      $matches = array();
      preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
      $sid = $matches[1];

      // Update submission
      $this->drupalGet($path . '/submission/' . $sid . '/edit');
      $this->drupalPost(NULL, array(), 'Submit');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][update]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on update was not sent to queue.');
        // Simulate processed item
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on update was sent to the queue.');
      }

      // Delete submission
      $this->drupalGet($path . '/submission/' . $sid . '/delete');
      $this->drupalPost(NULL, array(), 'Delete');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][delete]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on delete was not sent to queue.');
        // Simulate processed item
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on delete was sent to the queue.');
      }
    }
  }

  /**
   * Creates a simple webform of first name, last name and email address
   *
   * @return Object
   *   Node object of the webform
   */
  public function swCreateWebform($with_components = TRUE) {
    // Create a webform and add a few components
    $settings = array(
      'type' => 'webform',
      'title' => 'Webform Example',
    );
    $webform = $this->drupalCreateNode($settings);
    if (!$with_components) {
      return $webform;
    }
    $component_name_first = array(
      'type' => 'textfield',
      'nid' => $webform->nid,
      'cid' => NULL,
      'clone' => FALSE,
      'name' => 'First Name',
      'form_key' => 'first_name',
      'extra' => array(
        'title_display' => 'before',
        'private' => 0,
        'disabled' => 0,
        'unique' => 0,
        'conditional_operator' => '',
      ),
      'mandatory' => 0,
      'pid' => 0,
      'weight' => 0,
      'value' => '',
    );
    $component_name_last = $component_name_first;
    $component_name_last['name'] = 'Last Name';
    $component_name_last['form_key'] = 'last_name';
    $component_name_last['weight'] = 1;
    $component_email = $component_name_first;
    $component_email['type'] = 'email';
    $component_email['name'] = 'Email';
    $component_email['form_key'] = 'email';
    $component_email['weight'] = 2;
    webform_component_insert($component_name_first);
    webform_component_insert($component_name_last);
    webform_component_insert($component_email);
    return node_load($webform->nid, NULL, TRUE);
  }

  /**
   * Map a webform all at once
   *
   * Using swFormMapField() broke in setUp() when map stop being loaded on the
   * node. But thats OK in the setUp() context because we don't need to test the
   * mapping of the form.
   */
  public function swMapWebform($nid, $dedupe = FALSE) {
    $this->swSalesforceConnect();
    $this->drupalGet('node/' . $nid . '/salesforce/salesforce_webform');

    // AJAX select the object type so the mapping fields show up
    $edit = array(
      'salesforce_object_info[salesforce_object_type]' => 'Contact',
    );
    $this->drupalPostAjax(NULL, $edit, 'salesforce_object_info[salesforce_object_type]');

    // Map the fields and save
    $edit += array(
      'field_map[salesforce_webform_map][first_name][sf_field]' => 'FirstName',
      'field_map[salesforce_webform_map][last_name][sf_field]' => 'LastName',
      'field_map[salesforce_webform_map][email][sf_field]' => 'Email',
    );
    $this->drupalPost(NULL, $edit, 'Save');

    if ($dedupe) {
      // Dedupe field only shows up after the fields have been mapped and posted
      $edit += array(
        'salesforce_dedupe_field' => 'Email',
      );
      $this->drupalPost(NULL, $edit, 'Save');
    }
  }

  /**
   * Map a webform component to a Salesforce field
   *
   * You must first $this->drupalGet() the mapping form
   *
   * @param String $drupal_field
   * @param String $sf_field
   * @param String $group
   * @param Bool $dedupe
   */
  public function swFormMapField($drupal_field, $sf_field, $group, $dedupe = FALSE) {
    if (!isset($this->_swfEdit)) {
      $this->_swfEdit = array();
    }

    if ($group == 'salesforce_object_info') {
      $name = $group . '[' . $drupal_field . ']';
    }
    else {
      $name = 'field_map[' . $group . '][' . $drupal_field . '][sf_field]';
      $name_dedupe = 'field_map[' . $group . '][' . $drupal_field . '][dedupe]';
    }

    // Check the field is there, and set the value
    $this->assertFieldByName($name, NULL, 'Mapping field ' . $name . ' exists.');
    $this->_swfEdit[$name] = $sf_field;

    // Check that dedupe is hidden for unmapped fields
    if ($group == 'salesforce_webform_map' || $group == 'salesforce_object_info') {
      if ($group == 'salesforce_webform_map') {
        $empty_dedupe_field = '<input type="hidden" name="' . $name_dedupe . '">';
        $this->assertRaw($empty_dedupe_field, 'Dedupe field appropriately does not show up for an unmapped field.');
      }

      $this->drupalPostAjax(NULL, $this->_swfEdit, $name);

      // Check that the dedupe field was properly changed
      if ($dedupe) {
        $dedupe_field = '<input name="salesforce_dedupe_field" type="radio" id="salesforce-dedupe-' . $drupal_field . '" value="' . $sf_field . '" class="form-radio">';
        $this->assertNoRaw($empty_dedupe_field, 'Empty dedupe field did not show up for ' . $sf_field);
        $this->assertRaw($dedupe_field, 'Dedupe radio showed up for ' . $sf_field);
      }
      elseif ($group == 'salesforce_webform_map') {
        $this->assertRaw($empty_dedupe_field, 'Dedupe radio appropriately hidden for ' . $sf_field);
      }
    }
    else {
      // no need to do an drupalPostAjax
    }
  }

  /**
   * Grabs the Salesforce connection information from the live db and authenticates
   *
   * @return Object
   *   Salesforce Object
   */
  public function swSalesforceConnect() {
    // Steal the Salesforce configuration from the live database
    global $db_prefix;
    $table = empty($db_prefix) ? 'variable' : $db_prefix . '_variable';
    $sql = "SELECT * FROM $table v WHERE v.name LIKE 'salesforce_%'";
    $result = db_query($sql);
    foreach ($result as $record) {
      variable_set($record->name, unserialize($record->value));
    }

    // Test the connection
    $salesforce = salesforce_get_api();
    $this->assertTrue($salesforce->isAuthorized(), 'Connected to Salesforce');
    return $salesforce;
  }
}
