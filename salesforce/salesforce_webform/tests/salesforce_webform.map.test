<?php
include_once(dirname(__FILE__) . '/salesforce_webform.test');

/**
 * @file
 * Tests for includes/salesforce_webform.map.inc.
 */

/**
 * Tests mapping Salesforce objects onto webforms
 */
class SalesforceWebformMapTestCase extends SalesforceWebformTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapping',
      'description' => 'Ensure that the salesforce_webform.mapping componant functions properly.',
      'group' => 'Salesforce Webform',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp();
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Test the salesforce_webform_map entity
   */
  public function testEntity() {
    // Map entity type exists
    $entity_info = entity_get_info('salesforce_webform_map');
    $this->assertTrue(isset($entity_info['label']), 'Entity has a label');
    $this->assertEqual('Salesforce Webform Map', $entity_info['label'], 'Entity has expected label.');

    // Create a salesforce_webform_map entity object
    $test_map = array(
      'nid' => 3,
      'salesforce_object_type' => 'bar',
      'salesforce_record_type' => 'baz',
      'field_map' => array(
        'foo' => 'bar',
        'baz' => array(
          'bang' => 'boom',
          'fizz' => 'buzz',
        ),
        'hello' => 'world',
      ),
      'locked' => FALSE,
      'status' => TRUE,
    );
    $test_map = entity_create('salesforce_webform_map', $test_map);
    $this->assertEqual('salesforce_webform_map', $test_map->entityType(), 'Creating a new entity object works as expected.');

    // Save the entity to the database
    entity_save('salesforce_webform_map', $test_map);
    $test_map_db = entity_load('salesforce_webform_map', array(3));
    $this->assertEqual('bar', $test_map_db[3]->salesforce_object_type, 'Newly created entity has the correct object type.');

    // Delete the entity from the database
    entity_delete('salesforce_webform_map', 3);
    $all_entities = entity_load('salesforce_webform_map');
    $this->assertTrue(empty($all_entities));
  }

  /**
   * Tests for the mapping form
   */
  public function testMappingForm() {
    // Form throws message if the webform has no components
    $webform_no_components = $this->swCreateWebform(FALSE);
    $this->drupalGet('node/'. $webform_no_components->nid .'/webform/salesforce-map');
    $this->assertText('You must first add components to your webform', 'Message appears when webform has no components.');

    // Form throws message if it cannot connect to Salesforce
    $webform = $this->swCreateWebform();
    $this->drupalGet('node/'. $webform->nid .'/webform/salesforce-map');
    $this->assertText('Cannot connect to Salesforce', 'Message appears when Salesforce is not connected.');

    // Form displays only the object type select after connecting to Salesforce
    $this->swSalesforceConnect();
    $this->drupalGet('node/'. $webform->nid .'/webform/salesforce-map');
    $this->assertFieldById('salesforce-object-type', '', 'Salesforce object type field exists.');
    $this->assertNoFieldById('salesforce-record-type', '', 'Salesforce record type is hidden as expected.');
    $this->assertNoFieldById('salesforce-field-map-nid', '', 'Node id mapping is hidden as expected.');

    // Select a Salesforce object with a record type
    $edit = array(
      'salesforce_object_info[salesforce_object_type]' => 'Opportunity',
    );
    $this->drupalPostAjax(NULL, $edit, 'salesforce_object_info[salesforce_object_type]');
    $this->assertFieldById('salesforce-record-type', '', 'Salesforce record type is displayed because Opportunity object has a record type.');
    $this->assertFieldById('salesforce-field-map-nid', '', 'Node id mapping has shown up.');

    // Select a Salesforce object without a record type
    $edit = array(
      'salesforce_object_info[salesforce_object_type]' => 'Contact',
    );
    $this->drupalPostAjax(NULL, $edit, 'salesforce_object_info[salesforce_object_type]');
    $this->assertNoFieldById('salesforce-record-type', '', 'Salesforce record type is hidden because Contact object does not have a record type.');
    $this->assertFieldById('salesforce-field-map-nid', '', 'Node id mapping has shown up.');

    // Fill out the mapping for the first and last names
    $names = array(
      1 => 'FirstName',
      2 => 'LastName',
    );
    foreach ($names as $cid => $sf_field) {
      $empty_dedupe_field = '<input type="hidden" name="field_map[salesforce_webform_map]['. $cid .'][salesforce_dedupe_'. $cid .']">';
      $this->assertFieldById('salesforce-field-map-webform-cid-'. $cid, '', 'Mapping field for cid '. $cid .' has shown up.');
      $this->assertRaw($empty_dedupe_field, 'Dedupe field appropriately does not show up for an unmapped field.');
      $edit['field_map[salesforce_webform_map]['. $cid .'][cid_'. $cid .']'] = $sf_field;
      $this->drupalPostAjax(NULL, $edit, 'field_map[salesforce_webform_map]['. $cid .'][cid_'. $cid .']');
      $this->assertRaw($empty_dedupe_field, 'Dedupe field appropriately does not show up on a mapped field that is not unique.');
    }

    // Set the email address mapping
    $empty_dedupe_field = '<input type="hidden" name="field_map[salesforce_webform_map][3][salesforce_dedupe_3]">';
    $this->assertFieldById('salesforce-field-map-webform-cid-3', '', 'Mapping field for cid 3 has shown up.');
    $this->assertRaw($empty_dedupe_field, 'Dedupe field appropriately does not show up for an unmapped field.');
    $edit['field_map[salesforce_webform_map][3][cid_3]'] = 'Email';
    $this->drupalPostAjax(NULL, $edit, 'field_map[salesforce_webform_map][3][cid_3]');
    $this->assertNoRaw($empty_dedupe_field, 'Empty dedupe field did not show up for unique Salesforce field.');
    $dedupe_field = '<input name="salesforce_dedupe" type="radio" id="salesforce-field-dedupe-cid-3" value="Email" class="form-radio">';
    $this->assertRaw($dedupe_field, 'Dedupe field radio showed up for a unique Salesforce field.');

    // Save the form and verify the form reloaded correctly
    $edit['salesforce_dedupe'] = 'Email';
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText('The map was saved successfully.', 'Saving posted correctly.');
    $this->assertFieldById('salesforce-object-type', 'Contact', 'Object Type saved and refreshed on form.');
    foreach ($names as $cid => $sf_field) {
      $this->assertFieldById('salesforce-field-map-webform-cid-'. $cid, $sf_field, 'Mapping for cid '. $cid .' saved and refreshed on form.');
    }
    $this->assertFieldById('salesforce-field-map-webform-cid-3', 'Email', 'Mapping for cid 3 saved and refreshed on on form.');
    $this->assertFieldChecked('salesforce-field-dedupe-cid-3', 'Email dedupe field saved and selected.');

    // Change the object type to change the entire form
    $edit = array(
      'salesforce_object_info[salesforce_object_type]' => 'Opportunity',
    );
    $this->drupalPostAjax(NULL, $edit, 'salesforce_object_info[salesforce_object_type]');
    $this->assertRaw($empty_dedupe_field, 'Form changed with object type change, empty dedupe field appeared.');
    $this->assertNoRaw($dedupe_field, 'Form changed with object type change, dedupe option disappeared.');

    // Cancel the changes and verify
    $this->drupalPost(NULL, $edit, t('Cancel'));
    $this->assertText('The Salesforce webform map has been reset to the original values.', 'Cancelling form posted correctly.');
    $this->assertFieldById('salesforce-object-type', 'Contact', 'Object Type refreshed on form.');
    foreach ($names as $cid => $sf_field) {
      $this->assertFieldById('salesforce-field-map-webform-cid-'. $cid, $sf_field, 'Mapping for cid '. $cid .' refreshed on form.');
    }
    $this->assertFieldById('salesforce-field-map-webform-cid-3', 'Email', 'Mapping for cid 3 refreshed on on form.');
    $this->assertFieldChecked('salesforce-field-dedupe-cid-3', 'Email dedupe field is selected.');

    // Unmap the webform from Salesforce
    $this->drupalPost(NULL, array(), t('Unmap'));
    $this->assertText('The Salesforce to webform map has been removed.', 'Unmapping form posted correctly');
    $this->assertFieldById('salesforce-object-type', '', 'Object Type field appears on form.');
    $this->assertNoFieldById('salesforce-object-type', 'Contact', 'Object Type field does not have previously saved value.');
    $this->assertNoFieldById('salesforce-record-type', '', 'Salesforce record type is hidden as expected.');
    $this->assertNoFieldById('salesforce-field-map-nid', '', 'Node id mapping is hidden as expected.');
  }
}
