<?php
include_once(dirname(__FILE__) . '/salesforce_webform.test');

/**
 * @file
 * Tests for includes/salesforce_webform.queue.inc.
 */

/**
 * Tests mapping Salesforce objects onto webforms
 */
class SalesforceWebformQueueTestCase extends SalesforceWebformTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Queuing',
      'description' => 'Ensure that the salesforce_webform.queue componant functions properly.',
      'group' => 'Salesforce Webform',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp();

    // Create webforms
    $this->webform1 = $this->swCreateWebform(); // No dedupe field
    $this->webform2 = $this->swCreateWebform(); // Will have dedupe field

    // Map some Salesforce fields to the webforms
    $this->swMapWebform($this->webform1->nid);
    $this->swMapWebform($this->webform2->nid, TRUE);

    // Store the queue system
    $this->queue_system = variable_get('salesforce_webform_queue_system', NULL);
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    // Put the queue system config back to what it was
    if (is_null($this->queue_system)) {
      variable_del('salesforce_webform_queue_system');
    }
    else {
      variable_set('salesforce_webform_queue_system', $this->queue_system);
    }

    // Delete the webform node
    node_delete($this->webform2->nid);
    node_delete($this->webform1->nid);

    parent::tearDown();
  }

  /**
   * Tests that information was sent to the queues properly
   */
  public function testQueueSystem() {
    $path = 'node/'. $this->webform1->nid;
    $path2 = 'node/'. $this->webform2->nid;
    $edit = array(
      'submitted[first_name]' => 'ExampleFirstName',
      'submitted[last_name]' => 'ExampleLastName',
      'submitted[email]' => 'example@email.com',
    );

    // No queue system set submit error
    variable_del('salesforce_webform_queue_system');
    $this->drupalGet($path);
    $this->drupalPost(NULL, $edit, 'Submit');
    $this->assertText('The Queue System configuration is not set', 'Error is reported when no queue system is set.');

    // Instant queue system works as expected
    variable_set('salesforce_webform_queue_system', 'instant');
    $this->drupalGet($path);
    $this->drupalPost(NULL, $edit, 'Submit');
    $this->assertText('We have no ability to instantly send data to Salesforce', 'Error is reported when no queue system is set.');

    $queue_systems = array(
      'drupal_queue',
      'salesforce_queue',
    );
    $ops = array(
      'UPSERT',
      'CREATE',
      'UPDATE',
      'DELETE',
    );
    $button = 'Submit';
    foreach ($queue_systems as $queue_system) {
      variable_set('salesforce_webform_queue_system', $queue_system);
      foreach ($ops as $op) {
        switch ($op) {
          case 'UPSERT':
            $op_path = $path2;
            $assert_text = 'your submission has been received';
            $op_edit = $edit;
            $op_button = $button;
            break;
          case 'CREATE':
            $op_path = $path;
            $assert_text = 'your submission has been received';
            $op_edit = $edit;
            $op_button = $button;
            break;
          case 'UPDATE':
            // Referrs to previous loop's $queue_item
            $op_path = $path .'/submission/'. $queue_item['drupal_id'] .'/edit';
            $assert_text = 'Submission updated';
            $op_edit = $edit;
            $op_button = $button;
            break;
          case 'DELETE':
            // Referrs to previous loop's $queue_item
            $op_path = $path .'/submission/'. $queue_item['drupal_id'] .'/delete';
            $assert_text = 'Submission deleted';
            $op_edit = array();
            $op_button = 'Delete';
            break;
        }

        // Test the submissions for each queue for each state
        $this->drupalGet($op_path);
        $this->drupalPost($op_path, $op_edit, $op_button);
        $this->assertText($assert_text, 'There was not an obvious error submitting '. $op .' on the '. $queue_system .'.');
        $queue_item = $this->swFetchQueueItem($queue_system);
        $this->swCompareSubmissionQueueItem($edit, $queue_item, $op, $queue_system);
        $this->swDeleteQueueItem($queue_item, $queue_system); // Simulate processed item
      }
    }
  }

  /**
   * Tests that sync options are obeyed
   */
  public function testSyncOptions() {
    variable_set('salesforce_webform_queue_system', 'drupal_queue');
    $path = 'node/'. $this->webform1->nid;
    $edit = array(
      'submitted[first_name]' => 'ExampleFirstName',
      'submitted[last_name]' => 'ExampleLastName',
      'submitted[email]' => 'example@email.com',
    );

    // testQueueSystem() tests when all are selected.  Lets run through the
    // tests when different combinations are selected
    $combinations = array(
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => TRUE),
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => FALSE),
      array('map_config[sync_options][insert]' => FALSE, 'map_config[sync_options][update]' => TRUE, 'map_config[sync_options][delete]' => TRUE),
      array('map_config[sync_options][insert]' => TRUE, 'map_config[sync_options][update]' => FALSE, 'map_config[sync_options][delete]' => TRUE),
    );
    foreach ($combinations as $sync_config) {
      $this->drupalGet('node/'. $this->webform1->nid .'/webform/salesforce-map');
      $this->drupalPost(NULL, $sync_config, 'Save');

      // Create submission
      $this->drupalGet($path);
      $this->drupalPost(NULL, $edit, 'Submit');
      $queue = DrupalQueue::get('salesforce_webform');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][insert]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on insert was sent to queue.');
        $queue->deleteItem($queue_item); // Simulate processed item
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on insert was not sent to the queue.');
      }

      // Get the SID of the new submission
      $matches = array();
      preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
      $sid = $matches[1];

      // Update submission
      $this->drupalGet($path .'/submission/'. $sid .'/edit');
      $this->drupalPost(NULL, array(), 'Submit');
      $queue = DrupalQueue::get('salesforce_webform');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][update]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on update was not sent to queue.');
        $queue->deleteItem($queue_item); // Simulate processed item
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on update was sent to the queue.');
      }

      // Delete submission
      $this->drupalGet($path .'/submission/'. $sid .'/delete');
      $this->drupalPost(NULL, array(), 'Delete');
      $queue = DrupalQueue::get('salesforce_webform');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][delete]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on delete was not sent to queue.');
        $queue->deleteItem($queue_item); // Simulate processed item
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on delete was sent to the queue.');
      }
    }
  }

  /**
   * Test dequeuing submissions when the webform has been deleted for DrupalQueue
   *
   * Separated from Salesforce Queue to have setUp() and tearDown() between them
   */
  public function testNodeDeleteDequeueDrupalQueue() {
    variable_set('salesforce_webform_queue_system', 'drupal_queue');
    $this->swGenerateSubmissions($this->webform1->nid);
    $this->swGenerateSubmissions($this->webform2->nid);
    node_delete($this->webform1->nid);
    $query = db_select('queue', 'q')
     ->fields('q')
     ->condition('name', 'salesforce_webform');
    $result = $query->execute();
    $unexpected_records = array();
    foreach ($result as $record) {
      $data = unserialize($record->data);
      if ($data['delta'] == 'webform:'. $this->webform1->nid) {
        $unexpected_records[] = $record->item_id;
      }
    }
    $this->assertTrue(empty($unexpected_records), 'Dequeuing all items from a deleted node worked on DrupalQueue.');
  }

  /**
   * Test dequeuing submissions when the webform has been deleted for Salesforce Queue
   *
   * Separated from DrupalQueue to have setUp() and tearDown() between them
   */
  public function testNodeDeleteDequeueSalesforceQueue() {
    variable_set('salesforce_webform_queue_system', 'salesforce_queue');
    $this->swGenerateSubmissions($this->webform1->nid);
    $this->swGenerateSubmissions($this->webform2->nid);
    node_delete($this->webform1->nid);
    $query = db_select('salesforce_queue', 'sq')
      ->fields('sq')
      ->condition('module', 'webform')
      ->condition('delta', 'webform:'. $this->webform1->nid);
    $result = $query->execute();
    $unexpected_records = array();
    foreach ($result as $record) {
      $unexpected_records[] = $record->id;
    }
    $this->assertTrue(empty($unexpected_records), 'Dequeuing all items from a deleted node worked on Salesforce Queue.');
  }

  /**
   * Test the configuration form
   */
  public function testConfigForm() {
    // Check installed variable setting
    $queue_system = variable_get('salesforce_webform_queue_system', '');
    $queue_system = empty($queue_system) ? 'salesforce_queue' : $queue_system;

    // Load the configuration form and check default values
    $queue_systems = array(
      'instant' => 'instant',
      'drupal_queue' => 'drupal-queue',
      'salesforce_queue' => 'salesforce-queue',
    );
    $this->drupalGet('admin/config/content/salesforce-webform');
    $this->assertFieldByName('salesforce_webform_queue_system', NULL, 'salesforce_webform_queue_system form item exists.');
    foreach ($queue_systems as $queue_name => $queue_id) {
      if ($queue_name == $queue_system) {
        $this->assertFieldChecked('edit-salesforce-webform-queue-system-'. $queue_id, $queue_name .' is selected by default.');
      }
      else {
        $this->assertNoFieldChecked('edit-salesforce-webform-queue-system-'. $queue_id, $queue_name .' is not selected by default.');
      }
    }

    // Set new value and check new default values
    $edit = array(
      'salesforce_webform_queue_system' => 'drupal_queue',
    );
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Your settings have been saved.', 'Configuration page posted correctly.');
    $this->assertNoFieldChecked('edit-salesforce-webform-queue-system-instant', 'Instant is not selected');
    $this->assertFieldChecked('edit-salesforce-webform-queue-system-drupal-queue', 'Drupal Queue is selected');
    $this->assertNoFieldChecked('edit-salesforce-webform-queue-system-salesforce-queue', 'Salesforce Queue is not selected');

    // Verify saved value
    $this->assertEqual('drupal_queue', variable_get('salesforce_webform_queue_system', NULL), 'queue_system saved correctly.');
  }

  /**
   * Helper to return the last queued item
   */
  public function swFetchQueueItem($queue_system) {
    switch ($queue_system) {
      case 'drupal_queue':
        $queue = DrupalQueue::get('salesforce_webform');
        $queue_item = $queue->claimItem();
        if (!empty($queue_item)) {
          $queue->releaseItem($queue_item);
        }
        return $this->swFormatQueueItem($queue_item, $queue_system);

      case 'salesforce_queue':
        $query = db_select('salesforce_queue', 'sq')
          ->fields('sq');
        $result = $query->execute();
        foreach ($result as $record) {
          // do nothing but reset the var $record and get the last item
        }
        if (isset($record)) {
          return $this->swFormatQueueItem($record, $queue_system);
        }
        else {
          return array();
        }
    }
  }

  /**
   * Helper to delete a queue item
   */
  public function swDeleteQueueItem($queue_item, $queue_system) {
    if (empty($queue_item)) {
      return;
    }
    switch ($queue_system) {
      case 'drupal_queue':
        db_delete('queue')
        ->condition('item_id', $queue_item['item_id'])
        ->execute();
        return;

      case 'salesforce_queue':
        db_delete('salesforce_queue')
        ->condition('id', $queue_item['id'])
        ->execute();
        return;
    }
  }

  /**
   * Make different queue items have the same format
   */
  public function swFormatQueueItem($queue_item, $queue_system) {
    switch ($queue_system) {
      case 'drupal_queue':
        if (is_object($queue_item)) {
          $this->assertTrue(is_array($queue_item->data), 'Received an expected queue item for DrupalQueue.');
          $this->assertTrue(isset($queue_item->data['sobject']) && is_object($queue_item->data['sobject']), 'Expected value set in queue item for DrupalQueue.');
          $item = $queue_item->data;
          $item['item_id'] = $queue_item->item_id;
          return $item;
        }
        $this->assertTrue(FALSE, 'Expected queue item not received for DrupalQueue.');
        return array();

      case 'salesforce_queue':
        if (is_object($queue_item)) {
          $this->assertTrue(is_string($queue_item->sobject), 'Received an expected queue item for Salesforce Queue.');
          $item = (array)$queue_item;
          $item['sobject'] = json_decode($queue_item->sobject);
          $item['sobject']->fields = (array)$item['sobject']->fields;
          return $item;
        }
        $this->assertTrue(FALSE, 'Expected queue item not received for Salesforce Queue.');
        return array();
    }
  }

  /**
   * Helper to compare what was submitted to what was sent to the queue
   */
  public function swCompareSubmissionQueueItem($edit, $queue_item, $operation, $queue_system) {
    if (empty($queue_item)) {
      // Error already sent in swFormatQueueItem()
    }
    else {
      if (isset($queue_item['operation'])) {
        $this->assertEqual($queue_item['operation'], $operation, 'The correct '. $operation .' operation was sent to '. $queue_system);
      }
      else {
        $this->assertTrue(FALSE, 'Operation not set in '. $queue_system .' queue item.');
      }
      if (isset($queue_item['sobject']) && is_object($queue_item['sobject'])) {
        $fields = $queue_item['sobject']->fields;
        $this->assertEqual($fields['FirstName'], $edit['submitted[first_name]'], 'first_name '. $queue_system .' data matches submitted data.');
        $this->assertEqual($fields['LastName'], $edit['submitted[last_name]'], 'last_name '. $queue_system .' data matches submitted data.');
        $this->assertEqual($fields['Email'], $edit['submitted[email]'], 'email '. $queue_system .' data matches submitted data.');
      }
      else {
        $this->assertTrue(FALSE, 'sObject not built properly in '. $queue_system .' queue item.');
      }
    }
  }

  /**
   * Helper to generate random submissions for a given webform
   */
  public function swGenerateSubmissions($nid, $count = 25) {
    $i = 0;
    while ($i <= $count) {
      $i++;
      $edit = array(
        'submitted[first_name]' => $this->randomName(),
        'submitted[last_name]' => $this->randomName(),
        'submitted[email]' => $this->randomName() .'@'. $this->randomName() .'.com',
      );
      $this->drupalGet('node/'. $nid);
      $this->drupalPost(NULL, $edit, 'Submit');
    }
  }
}
