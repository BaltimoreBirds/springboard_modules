<?php

/**
 * @file
 * Tests for mapping webform integration with queuing.
 */

module_load_include('test', 'salesforce_genmap', 'tests/webform/webform');

/**
 * Tests integrating webform mapping into queuing.
 */
class SalesforceWebformSalesforceQueueTestCase extends SalesforceWebformTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Webform Map Queuing',
      'description' => 'Ensure that the webform queue componant functions properly.',
      'group' => 'Salesforce Generic Mapping',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array()) {
    $modules = array_merge($modules, array(
      'salesforce_sync',
      'salesforce_soap',
      'salesforce_queue',
    ));
    parent::setUp($modules);

    // Create webforms.
    $this->webform1 = $this->createWebform();
    $this->webform2 = $this->createWebform();

    // Map some Salesforce fields to the webforms.
    $this->mapWebform($this->webform1->nid);
    $this->mapWebform($this->webform2->nid, TRUE);
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    // Delete the webform node.
    node_delete($this->webform2->nid);
    node_delete($this->webform1->nid);

    parent::tearDown();
  }

  /**
   * Tests that information was sent to the queue properly.
   */
  public function testQueueSystem() {
    $path = 'node/' . $this->webform1->nid;
    $path2 = 'node/' . $this->webform2->nid;
    $edit = array(
      'submitted[first_name]' => 'ExampleFirstName',
      'submitted[last_name]' => 'ExampleLastName',
      'submitted[email]' => 'example@email.com',
    );

    // Test the submissions for each state.
    $ops = array('UPSERT', 'CREATE', 'UPDATE', 'DELETE');
    foreach ($ops as $op) {
      switch ($op) {
        case 'UPSERT':
          $op_path = $path2;
          $assert_text = 'your submission has been received';
          $op_edit = $edit;
          $op_button = 'Submit';
          break;

        case 'CREATE':
          $op_path = $path;
          $assert_text = 'your submission has been received';
          $op_edit = $edit;
          $op_button = 'Submit';
          break;

        case 'UPDATE':
          // Refers to previous loop's $item.
          $op_path = $path . '/submission/' . $item['drupal_id'] . '/edit';
          $assert_text = 'Submission updated';
          $op_edit = $edit;
          $op_button = 'Submit';
          break;

        case 'DELETE':
          // Refers to previous loop's $item.
          $op_path = $path . '/submission/' . $item['drupal_id'] . '/delete';
          $assert_text = 'Submission deleted';
          $op_edit = array();
          $op_button = 'Delete';
          break;
      }
      $this->drupalPost($op_path, $op_edit, $op_button);
      $this->assertText($assert_text, 'There was not an obvious error submitting ' . $op . '.');
      $item = $this->fetchQueueItem();
      $this->compareSubmissionQueueItem($edit, $item, $op);
      // Simulate processed item.
      $this->deleteQueueItem($item);
    }
  }

  /**
   * Test dequeuing when the webform has been deleted for Salesforce Queue.
   */
  public function testNodeDeleteDequeue() {
    $this->generateSubmissions($this->webform1->nid);
    $this->generateSubmissions($this->webform2->nid);
    node_delete($this->webform1->nid);
    $query = db_select('salesforce_queue', 'sq')
      ->fields('sq')
      ->condition('module', 'webform')
      ->condition('delta', 'webform:' . $this->webform1->nid);
    $result = $query->execute();
    $unexpected_records = array();
    foreach ($result as $record) {
      $unexpected_records[] = $record->item_id;
    }
    $this->assertTrue(empty($unexpected_records), 'Dequeuing all items from a deleted node worked on Salesforce Queue.');
  }

  /**
   * Helper tests sync options are obeyed for the controlling queue.
   */
  public function testSyncOptions() {
    // Set up a webform.
    $this->salesforceConnect();
    $webform = $this->createWebform();
    $path = 'node/' . $webform->nid;
    $this->drupalGet($path . '/salesforce/webform');
    $this->drupalPostAjax(NULL, array('salesforce_object_info[salesforce_object_type]' => 'Contact'), 'salesforce_object_info[salesforce_object_type]');
    $this->drupalPost(NULL, array(), 'Save');

    // testQueueSystem() tests when all are selected.  Lets run through the
    // tests when different combinations are selected.
    $edit = array(
      'submitted[first_name]' => 'ExampleFirstName',
      'submitted[last_name]' => 'ExampleLastName',
      'submitted[email]' => 'example@email.com',
    );
    $combinations = array(
      array(
        'map_config[sync_options][insert]' => TRUE,
        'map_config[sync_options][update]' => FALSE,
        'map_config[sync_options][delete]' => FALSE,
      ),
      array(
        'map_config[sync_options][insert]' => FALSE,
        'map_config[sync_options][update]' => TRUE,
        'map_config[sync_options][delete]' => FALSE,
      ),
      array(
        'map_config[sync_options][insert]' => FALSE,
        'map_config[sync_options][update]' => FALSE,
        'map_config[sync_options][delete]' => TRUE,
      ),
      array(
        'map_config[sync_options][insert]' => TRUE,
        'map_config[sync_options][update]' => TRUE,
        'map_config[sync_options][delete]' => FALSE,
      ),
      array(
        'map_config[sync_options][insert]' => FALSE,
        'map_config[sync_options][update]' => TRUE,
        'map_config[sync_options][delete]' => TRUE,
      ),
      array(
        'map_config[sync_options][insert]' => TRUE,
        'map_config[sync_options][update]' => FALSE,
        'map_config[sync_options][delete]' => TRUE,
      ),
    );
    $queue = salesforce_queue_load();
    foreach ($combinations as $sync_config) {
      $this->drupalGet($path . '/salesforce/webform');
      $this->drupalPost(NULL, $sync_config, 'Save');

      // Create submission.
      $this->drupalGet($path);
      $this->drupalPost(NULL, $edit, 'Submit');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][insert]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on insert was sent to queue.');
        // Simulate processed item.
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on insert was not sent to the queue.');
      }

      // Get the SID of the new submission.
      $matches = array();
      preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
      $sid = $matches[1];

      // Update submission.
      $this->drupalGet($path . '/submission/' . $sid . '/edit');
      $this->drupalPost(NULL, array(), 'Submit');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][update]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on update was not sent to queue.');
        // Simulate processed item.
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on update was sent to the queue.');
      }

      // Delete submission.
      $this->drupalGet($path . '/submission/' . $sid . '/delete');
      $this->drupalPost(NULL, array(), 'Delete');
      $queue_item = $queue->claimItem();
      if ($sync_config['map_config[sync_options][delete]']) {
        $this->assertTrue(is_object($queue_item), 'Submission configured to sync on delete was not sent to queue.');
        // Simulate processed item.
        $queue->releaseItem($queue_item);
        $queue->deleteItem($queue_item);
      }
      else {
        $this->assertFalse($queue_item, 'Submission not configured to sync on delete was sent to the queue.');
      }
    }
  }

  /**
   * Helper to return the last queued item.
   */
  public function fetchQueueItem() {
    $queue = SalesforceQueue::get();
    $item = $queue->claimItem();
    $this->assertFalse(empty($item), 'Data was received from the queue.');
    if (empty($item)) {
      return array();
    }
    $queue->releaseItem($item);
    return $this->formatQueueItem($item);
  }

  /**
   * Helper to delete a queue item.
   */
  public function deleteQueueItem($item) {
    if (empty($item)) {
      return;
    }
    db_delete('salesforce_queue')
    ->condition('item_id', $item['item_id'])
    ->execute();
    return;
  }

  /**
   * Make different queue items have the same format.
   */
  public function formatQueueItem($item) {
    $this->assertTrue(is_object($item->sobject), 'Received an expected queue item for Salesforce Queue.');
    if (is_object($item)) {
      $item = (array) $item;
      return $item;
    }
    return array();
  }

  /**
   * Helper to compare what was submitted to what was sent to the queue.
   */
  public function compareSubmissionQueueItem($edit, $item, $operation) {
    if (!empty($item)) {
      $this->assertTrue(isset($item['operation']), 'Operation not set in SalesforceQueue queue item.');
      if (isset($item['operation'])) {
        $this->assertEqual($item['operation'], $operation, 'The ' . $item['operation'] . ' operation was sent to SalesforceQueue when ' . $operation . ' was expected.');
      }
      $this->assertTrue((isset($item['sobject']) && is_object($item['sobject'])), 'sObject not built properly in SalesforceQueue queue item.');
      if (isset($item['sobject']) && is_object($item['sobject'])) {
        $fields = $item['sobject']->fields;
        $this->assertEqual($fields['FirstName'], $edit['submitted[first_name]'], 'first_name SalesforceQueue data matches submitted data.');
        $this->assertEqual($fields['LastName'], $edit['submitted[last_name]'], 'last_name SalesforceQueue data matches submitted data.');
        $this->assertEqual($fields['Email'], $edit['submitted[email]'], 'email SalesforceQueue data matches submitted data.');
      }
    }
  }

  /**
   * Helper to generate random submissions for a given webform.
   */
  public function generateSubmissions($nid, $count = 25) {
    $i = 0;
    while ($i <= $count) {
      $i++;
      $edit = array(
        'submitted[first_name]' => $this->randomName(),
        'submitted[last_name]' => $this->randomName(),
        'submitted[email]' => $this->randomName() . '@' . $this->randomName() . '.com',
      );
      $this->drupalGet('node/' . $nid);
      $this->drupalPost(NULL, $edit, 'Submit');
    }
  }
}
