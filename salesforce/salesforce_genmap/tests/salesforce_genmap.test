<?php

/**
 * @file
 * Simple tests for salesforce_genmap
 */

/**
 * Tests basic set up for mapping salesforce objects to webforms.
 */
class SalesforceGenmapTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Salesforce Generic Mapping API',
      'description' => 'Ensure that the salesforce_genmap module functions properly.',
      'group' => 'Salesforce Generic Mapping',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array(), $permissions = array()) {
    $modules = array_merge($modules, array(
      'entity',
      'salesforce',
      'salesforce_mapping',
      'salesforce_genmap',
    ));
    parent::setUp($modules);

    // Create an admin user.
    $permissions = $permissions + array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'administer users',
      'administer salesforce',
    );
    $this->admin_user = $this->drupalCreateUser($permissions);
    // Don't forget, need to pass --uri in drush command in order for logging
    // in to work.
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    user_cancel(array(), $this->admin_user->uid, 'user_cancel_delete');
    parent::tearDown();
  }

  /**
   * Grabs Salesforce connection information from the live db and authenticates.
   *
   * @return Object
   *   Salesforce Object
   */
  public function salesforceConnect() {
    // Steal the Salesforce configuration from the live database.
    global $db_prefix;
    $table = empty($db_prefix) ? 'variable' : $db_prefix . '_variable';
    $sql = "SELECT * FROM $table v WHERE v.name LIKE 'salesforce_%'";
    $result = db_query($sql);
    foreach ($result as $record) {
      if (!strstr($record->name, 'salesforce_queue')) {
        variable_set($record->name, unserialize($record->value));
      }
    }

    // Test the connection.
    $salesforce = salesforce_get_api();
    $this->assertTrue($salesforce->isAuthorized(), 'Connected to Salesforce');

    // Make a call to Salesforce that will do nothing just so we can get an
    // access token into our session.  This is dumb, but I can't think of any
    // other way to get an access token.
    $salesforce->apiCall('');

    return $salesforce;
  }
}
