<?php

/**
 * @file
 * Manages generic case Salesforce mappings.
 */

/**
 * @name core_drupal_hooks
 * @{
 */

/**
 * Implements hook_entity_info().
 */
function salesforce_genmap_entity_info() {
  return array(
    // Maps Salesforce objects and fields to components of Drupal.
    'salesforce_genmap_map' => array(
      'label' => t('Salesforce Map'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'salesforce_genmap_map',
      'entity keys' => array(
        'id' => 'mid',
      ),
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_genmap',
    ),
    // Maps Salesforce records to Drupal records.
    'salesforce_genmap_record_map' => array(
      'label' => t('Salesforce Record Map'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'salesforce_genmap_record_map',
      'entity keys' => array(
        'id' => 'rmid',
      ),
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'salesforce_genmap',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salesforce_genmap_menu() {
  // Gather modules that provide mapping support for generic objects.
  $modules = salesforce_genmap_info();
  // Returns an array, keyed by supporting module.
  $items['node/%node/salesforce'] = array(
    'title' => 'Salesforce maps',
    'page callback' => 'salesforce_genmap_map',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('map salesforce objects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/salesforce_genmap.map.inc',
  );
  $items['node/%node/salesforce/salesforce'] = array(
    'title' => 'Salesforce maps',
    'page callback' => 'salesforce_genmap_map',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('map salesforce objects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/salesforce_genmap.map.inc',
    'weight' => 100,
  );
  foreach ($modules as $module => $info) {
    $items['node/%node/salesforce/' . $module] = array(
      'title' => $info['label'] . ' map',
      'page callback' => 'salesforce_genmap_map_page',
      'page arguments' => array(1, 3),
      'access callback' => $info['access callback'],
      'access arguments' => array(1, 3),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/salesforce_genmap.map.inc',
    );
  }
  // Admin interface.
  $items['admin/config/salesforce'] = array(
    'title' => 'Salesforce',
    'description' => 'Salesforce settings.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
  );
  $items['admin/config/salesforce/salesforce-generic'] = array(
    'title' => 'Salesforce generic',
    'page callback' => 'salesforce_genmap_admin_page',
    'description' => 'Configure how the Salesforce integration will work with generic objects.',
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/salesforce_genmap.queue.inc',
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function salesforce_genmap_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'node/*/salesforce' => TRUE,
      'node/*/salesforce/*' => TRUE,
    );
  }
}

/**
 * Implements hook_permission().
 */
function salesforce_genmap_permission() {
  return array(
    'map salesforce objects' => array(
      'title' => t('Map Salesforce objects'),
      'description' => t('Configure the mapping of Salesforce objects.'),
    ),
  );
}

/**
 * Implements hook_node_delete().
 */
function salesforce_genmap_node_delete($node) {
  // Delete all salesforce_genmap_map entities.
  salesforce_genmap_delete_map($node->nid);
}

/**
 * @} core_drupal_hooks
 */

/**
 * Helper function to place object, given a node, oid, object with a map.
 *
 * @param string $module
 *   Module calling this function, so we can map fields correctly.
 * @param string $op
 *   Type of operation.
 * @param object $node
 *   Associated node for map.
 * @param int $oid
 *   Object id to be mapped.
 * @param object $drupal_object
 *   Object to be mapped.
 */
function salesforce_genmap_send_object_to_queue($module, $op, $node, $oid, $drupal_object) {
  $map = salesforce_genmap_load_map($node->nid, $module);
  if (!empty($map) && !empty($map->sync_options[$op])) {
    $sobject = salesforce_genmap_map_object($module, $drupal_object, $map, $node);
    $op = strtoupper($op);
    $operation = $op == 'INSERT' ? (empty($map->salesforce_dedupe_field) ? 'CREATE' : 'UPSERT') : $op;
    // Add to the queue.
    $item = array(
      'drupal_id' => $oid,
      'module' => $module,
      'delta' => $module . ':' . $node->nid,
      'salesforce_type' => $sobject->type,
      'operation' => $operation,
      'dedupe_field' => $map->salesforce_dedupe_field,
      'sobject' => $sobject,
    );
    $queue = salesforce_queue_load();
    $result = $queue->createItem($item);
    if (!$result) {
      // @TODO Send an error to admin that submission didn't go to queue
      drupal_set_message(t('The submission was not sent to Salesforce.'), 'error');
    }
  }
}

/**
 * Map the drupal object to a Salesforce object.
 *
 * @param string $module
 *   Calling module for this map, makes sure fields are mapped by correct
 *   handler
 * @param stdClass $object
 *   A drupal object
 * @param Entity $map
 *   A Salesforce map
 * @param object $node
 *   Associated map node
 *
 * @return object
 *   A Salesforce Object that has Salesforce fields with the object field values
 */
function salesforce_genmap_map_object($module, stdClass $object, Entity $map, $node) {
  // Gather the fields for this object from their handler modules.
  $fields = array();
  $fields = module_invoke($module, 'salesforce_genmap_map_fields', $object, $map, $node);

  $context = array(
    'module' => $module,
    'object' => $object,
    'map' => $map,
    'node' => $node,
  );
  // Give other modules a chance to alter the object's field values.
  drupal_alter('salesforce_genmap_map_fields', $fields, $context);

  // Create the Salesforce object.
  $sobject = new stdClass();
  $sobject->fields = $fields;
  $sobject->type = $map->salesforce_object_type;
  if (!empty($map->salesforce_record_type)) {
    $sobject->record = $map->salesforce_record_type;
  }

  // Let other modules modify it.
  drupal_alter('salesforce_genmap_map_object', $sobject);
  return $sobject;
}

/**
 * @defgroup salesforce_genmap_crud CRUD for mapping Drupal stuffs to Salesforce
 * @{
 */

/**
 * Creates and saves a Salesforce map.
 *
 * @param mixed $map
 *   Can be an array of values or a salesforce_genmap_map entity object
 * @param string $module
 *   Handler module for the mapping object
 *
 * @return bool
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed. Otherwise,
 *   FALSE is returned if the map could not be saved.
 */
function salesforce_genmap_save_map($map, $module = 'salesforce_genmap') {
  if (is_array($map)) {
    $map['map_handler'] = $module;
    // Allow sending an array and updating an existing entity with the values.
    $entity = salesforce_genmap_load_map($map['nid'], $module);
    if ($entity) {
      foreach ($map as $key => $value) {
        $entity->$key = $value;
      }
      $map = $entity;
    }
    else {
      // Create a new entity object, but does not yet add to the database.
      $map = entity_create('salesforce_genmap_map', $map);
    }
  }
  if ($map->entityType() == 'salesforce_genmap_map') {
    $map->map_handler = $module;
    $map->updated = time();
    // Adds the data to the database.
    return entity_save('salesforce_genmap_map', $map);
  }
  return FALSE;
}

/**
 * Retreives a Salesforce map.
 *
 * @param int $nid
 *   The nid of the object of whose map we want to load.
 * @param string $module
 *   Handler module for the mapping object
 *
 * @return bool
 *   The entity object you requested
 */
function salesforce_genmap_load_map($nid, $module = 'salesforce_genmap') {
  $mid = _salesforce_genmap_get_map_id_by_nid_module($nid, $module);
  if (!empty($mid)) {
    $entities = entity_load('salesforce_genmap_map', array($mid));
    if (isset($entities[$mid])) {
      return $entities[$mid];
    }
  }
  return FALSE;
}

/**
 * Deletes a Salesforce map.
 *
 * @param int $nid
 *   The nid of the object of whose map we're deleting.
 * @param string $module
 *   Handler module for the mapping object
 *
 * @return bool
 *   TRUE if the delete performed as expected, FALSE if the delete could not
 *   work as expected.
 */
function salesforce_genmap_delete_map($nid, $module = 'salesforce_genmap') {
  $mid = _salesforce_genmap_get_map_id_by_nid_module($nid, $module);
  if (!empty($mid)) {
    $result = entity_delete('salesforce_genmap_map', $mid);
    if ($result === FALSE) {
      // entity_delete() only returns FALSE. Otherwise it has no return value.
      return FALSE;
    }
    return TRUE;
  }
}

/**
 * Creates and saves a Salesforce record map.
 *
 * @param mixed $record
 *   Can be an array of values or a salesforce_genmap_record_map entity object
 *
 * @return bool
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed. Otherwise,
 *   FALSE is returned if the record could not be saved.
 */
function salesforce_genmap_save_record_map($record) {
  if (is_array($record)) {
    // Allow sending an array and updating an existing entity with the values.
    $entity = salesforce_genmap_load_record_map($record);
    if ($entity) {
      foreach ($record as $key => $value) {
        $entity->$key = $value;
      }
      $record = $entity;
    }
    else {
      // Create a new entity object, but does not yet add to the database.
      $record = entity_create('salesforce_genmap_record_map', $record);
    }
  }
  if ($record->entityType() == 'salesforce_genmap_record_map') {
    // Adds the data to the database.
    return entity_save('salesforce_genmap_record_map', $record);
  }
  return FALSE;
}

/**
 * Retreives a Salesforce record map.
 *
 * @param mixed $record
 *   Can be an array of values or a salesforce_genmap_record_map entity object
 *
 * @return bool
 *   The entity object you requested
 */
function salesforce_genmap_load_record_map($record) {
  $rmid = _salesforce_genmap_get_rmid($record);
  if (!empty($rmid)) {
    $entities = entity_load('salesforce_genmap_record_map', array($rmid));
    if (isset($entities[$rmid])) {
      return $entities[$rmid];
    }
  }
  return FALSE;
}

/**
 * Deletes a Salesforce record map.
 *
 * @param mixed $record
 *   Can be an array of values or a salesforce_genmap_record_map entity object
 *
 * @return bool
 *   TRUE if the delete performed as expected, FALSE if the delete could not
 *   work as expected.
 */
function salesforce_genmap_delete_record_map($record) {
  $rmid = _salesforce_genmap_get_rmid($record);
  if (!empty($rmid)) {
    $result = entity_delete('salesforce_genmap_record_map', $rmid);
    if ($result === FALSE) {
      // entity_delete() only returns FALSE. Otherwise it has no return value.
      return FALSE;
    }
    return TRUE;
  }
}

/**
 * @} salesforce_genmap_crud
 */


/**
 * @name salesforce_genmap_queue_hooks Queue hooks
 * @{
 */

/**
 * Implements hook_salesforce_queue_create_item_alter().
 */
function salesforce_genmap_salesforce_queue_create_item_alter(&$item) {
  // When adding queue items, ensure that the sfid is in the sobject.
  if (($item['operation'] == 'UPDATE' || $item['operation'] == 'DELETE') && !isset($item['sobject']->Id)) {
    $record = salesforce_genmap_load_record_map($item);
    if (!empty($record) && isset($record->sfid)) {
      $item['sobject']->Id = $record->sfid;
    }
  }
}

/**
 * Implements hook_salesforce_queue_process_pass_item().
 */
function salesforce_genmap_salesforce_queue_process_pass_item($item, $result, $queue) {
  $record = array(
    'sfid' => $result->id,
    'module' => $item->module,
    'delta' => $item->delta,
    'drupal_id' => $item->drupal_id,
    'salesforce_type' => $item->salesforce_type,
  );
  switch ($item->operation) {
    // Create record maps on new items.
    case 'CREATE':
    case 'UPSERT':
      salesforce_genmap_save_record_map($record);
      break;

    // Delete record maps on removed items.
    case 'DELETE':
      salesforce_genmap_delete_record_map($record);
      break;
  }
}

/**
 * @}
 */


/**
 * Helper to return a list of handler modules, or information on a specific one.
 */
function salesforce_genmap_info($module = NULL) {
  static $modules;
  if (empty($modules)) {
    // Gather modules that provide mapping support for generic objects.
    $modules = module_invoke_all('salesforce_genmap_info');
    drupal_alter('salesforce_genmap_info', $modules);
  }
  if ($module == NULL) {
    return $modules;
  }
  return isset($modules[$module]) ? $modules[$module] : array();
}

/**
 * DB function to return map id given node and module id.
 */
function _salesforce_genmap_get_map_id_by_nid_module($nid, $map_handler = 'salesforce_genmap') {
  // @TODO: Find out if entity will handle two value primary keys, if so, use
  // that instead.
  return db_select('salesforce_genmap_map', 'm')
    ->fields('m', array('mid'))
    ->condition('nid', $nid)
    ->condition('map_handler', $map_handler)
    ->execute()
    ->fetchField();
}

/**
 * Helper to grab the record id of a map.
 */
function _salesforce_genmap_get_rmid($item) {
  if (is_object($item)) {
    $record = (array) clone($item);
  }
  else {
    $record = $item;
  }
  if (isset($record->rmid) && !empty($record->rmid)) {
    return $record->rmid;
  }
  elseif (isset($record['sobject']->Id)) {
    return db_select('salesforce_genmap_record_map', 'm')
      ->fields('m', array('rmid'))
      ->condition('sfid', $record['sobject']->Id)
      ->execute()
      ->fetchField();
  }
  else {
    return db_select('salesforce_genmap_record_map', 'm')
      ->fields('m', array('rmid'))
      ->condition('module', $record['module'])
      ->condition('delta', $record['delta'])
      ->condition('drupal_id', $record['drupal_id'])
      ->condition('salesforce_type', $record['salesforce_type'])
      ->execute()
      ->fetchField();
  }
}
