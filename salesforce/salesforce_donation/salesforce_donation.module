<?php

/**
 * @file
 * Manages webform to Salesforce mappings.
 */

/**
 * Implements hook_permission().
 */
function salesforce_donation_permission() {
  return array(
    'map salesforce to donation' => array(
      'title' => t('Map Salesforce objects to donations'),
      'description' => t('Configure the mapping of Salesforce objects with fundraisers so donations can sync with Salesforce.'),
    ),
    'map salesforce to webform on donation' => array(
      'title' => t('Map Salesforce objects to webform on Donations'),
      'description' => t('Advanced user setting: map donations and webform on the same node for Salesforce sync.'),
    ),
  );
}

/**
 * Implements hook_salesforce_genmap_info().
 */
function salesforce_donation_salesforce_genmap_info() {
  $items['salesforce_donation'] = array(
    'type' => 'donation',
    'label' => 'Donation',
    'access callback' => 'salesforce_donation_map_page_access',
  );
  return $items;
}

/**
 * Implements hook_salesforce_genmap_info_alter().
 */
function salesforce_donation_salesforce_genmap_info_alter(&$items) {
  // IIF salesforce_donation exists.
  if (module_exists('salesforce_webform')) {
    $items['salesforce_webform']['access callback'] = 'salesforce_donation_webform_map_page_access';
  }
}

/**
 * Access callback to reach the mapping page
 */
function salesforce_donation_map_page_access($node) {
  if ($node !== FALSE
    && fundraiser_is_donation_type($node->type)
    && user_access('map salesforce to donation')
    ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback to reach the mapping page for salesforce webforms, to avoid complicated UI.
 * Only let trained users use these two systems together.
 */
function salesforce_donation_webform_map_page_access($node) {
  if ($node !== FALSE // %webform_menu returns FALSE if not valid
    && fundraiser_is_donation_type($node->type)
    && user_access('map salesforce to webform')
    && user_access('map salesforce to webform on donation')
    ) {
    return TRUE;
   }
  return FALSE;
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function salesforce_donation_fundraiser_donation_success($donation) {
  // Reload the donation to get everything we need from submission table then call.
  $donation = fundraiser_donation_get_donation($donation->did, TRUE);
  salesforce_genmap_send_object_to_queue('salesforce_donation', 'insert', $donation->node, $donation->did, $donation);
}

/**
 * Implements hook_fundraiser_donation_update().
 *
function salesforce_donation_fundraiser_donation_update($donation) {
  // Reload the donation to get everything we need.
  $donation = fundraiser_donation_get_donation($donation->did, TRUE);
  salesforce_genmap_send_object_to_queue('insert', $donation->node, $donation->did, $donation);
}
//*/

/**
 * Implements hook_fundraiser_donation_delete().
 *
function salesforce_donation_fundraiser_donation_delete($donation) {
  // Reload the donation to get everything we need.
  $donation = fundraiser_donation_get_donation($donation->did, TRUE);
  salesforce_genmap_send_object_to_queue('insert', $donation->node, $donation->did, $donation);
}
//*/

/**
 * Implements hook_salesforce_genmap_map_fields().
 *
 * @param stdClass $donation
 *   A donation object
 * @param Entity $map
 *   A Salesforce map entity
 * @return $fields
 *   A set of fields mapped to value.
 */
function salesforce_donation_salesforce_genmap_map_fields(stdClass $donation, Entity $map, $node) {
  $fields = array();
  // Donation properties map
  if (isset($map->field_map['salesforce_donation_map'])) {
    if (isset($map->field_map['salesforce_donation_map']['did'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['did'];
      $fields[$sf_field] = $donation->did;
    }
    if (isset($map->field_map['salesforce_donation_map']['gateway'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['gateway'];
      $fields[$sf_field] = $donation->gateway;
    }
    if (isset($map->field_map['salesforce_donation_map']['txn_id'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['txn_id'];
      $fields[$sf_field] = $donation->txn_id;
    }
    if (isset($map->field_map['salesforce_donation_map']['status'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['status'];
      $fields[$sf_field] = $donation->status;
    }
  }
  // Donation fields map
  $donation_fields = _fundraiser_get_field_fields(); // Grab the regular set of donation fields.
  foreach ($donation_fields as $form_key => $donation_field) {
    if (isset($map->field_map['salesforce_donation_map'][$form_key])) {
      if (isset($donation->donation[$form_key])) {
        $sf_field = $map->field_map['salesforce_donation_map'][$form_key];
        $fields[$sf_field] = $donation->donation[$form_key];
      }
    }
  }
  // Salesforce webform map
  if (isset($donation->submission_data)) {
    foreach ($donation->submission_data as $form_key => $submission_value) {
      if (isset($map->field_map['salesforce_webform_map'][$form_key])) {
        $sf_field = $map->field_map['salesforce_webform_map'][$form_key];
        $fields[$sf_field] = is_array($submission_value) ? serialize($submission_value) : $submission_value;
      }
    }
  }
  // Node properties map
  if (isset($map->field_map['salesforce_node_map'])) {
    if (isset($map->field_map['salesforce_node_map']['nid'])) {
      $sf_field = $map->field_map['salesforce_node_map']['nid'];
      $fields[$sf_field] = $donation->nid;
    }
    if (isset($map->field_map['salesforce_node_map']['title'])) {
      $sf_field = $map->field_map['salesforce_node_map']['title'];
      $fields[$sf_field] = $donation->node->title;
    }
  }
  // User properties map
  if (isset($map->field_map['salesforce_user_map'])) {
    if (isset($map->field_map['salesforce_user_map']['uid'])) {
      $sf_field = $map->field_map['salesforce_user_map']['uid'];
      $fields[$sf_field] = $donation->uid;
    }
    if (isset($map->field_map['salesforce_user_map']['name'])) {
      $sf_field = $map->field_map['salesforce_user_map']['name'];
      $fields[$sf_field] = $donation->user->name;
    }
    if (isset($map->field_map['salesforce_user_map']['email'])) {
      $sf_field = $map->field_map['salesforce_user_map']['email'];
      $fields[$sf_field] = $donation->user->email;
    }
  }
  // Submission properties map
  if (isset($map->field_map['salesforce_submission_map'])) {
    if (isset($map->field_map['salesforce_submission_map']['sid'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['sid'];
      $fields[$sf_field] = $donation->sid; // If sid = 0, then no submission id. (may be created by sustainer)
    }
    if (isset($map->field_map['salesforce_submission_map']['date'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['date'];
      $fields[$sf_field] = REQUEST_TIME;
    }
  }
  return $fields;
}

/**
 * Implements hook_salesforce_genmap_map_field_info().
 *
 * @param stdClass $node
 *   Provide a node object
 * @return $fields
 *   A set of fields to be used in mapping form.
 */
function salesforce_donation_salesforce_genmap_map_field_info($node) {
  // Build an array of fields to map against.
  // Nested by category. If the category allows for dedupes, note that.
  $fields = array();
  $fields['salesforce_donation_map'] = array(
    '#type' => 'donation',
    '#label' => t('Donation Field'),
    '#dedupe' => TRUE,
    '#fields' => array(
      'did' => t('Donation ID'),
      'gateway' => t('Gateway ID'),
      'txn_id' => t('Transaction ID'),
      'status' =>  t('Payment Status'),
    ),
  );
  // Additional donation fields.
  $donation_fields = _fundraiser_get_field_fields(); // Grab the regular set of donation fields.
  foreach ($donation_fields as $form_key => $donation_field) {
    // Skip if this is a fieldset type.
    if ($donation_field['#type'] != 'fieldset') {
      $fields['salesforce_donation_map']['#fields'][$form_key] = $donation_field['#title'] .
        ' (' . $donation_field['#type'] . ')';
    }
  }
  // Webform component fields.
  if (module_exists('fundraiser_webform')) {
    $fields['salesforce_webform_map'] = array(
      '#type' => 'webform',
      '#label' => t('Webform Componant'),
      '#dedupe' => FALSE,
      '#fields' => array()
    );
    $wf_components = $node->webform['components'];
    foreach ($wf_components as $cid => $component) {
      if ($component['type'] != 'fieldset') {
        $form_key = $component['form_key'];
        $fields['salesforce_webform_map']['#fields'][$form_key] = $component['name'] .
          ' (' . $component['type'] . ')';
      }
    }
  }
  // Node fields.
  $fields['salesforce_node_map'] = array(
    '#type' => 'node',
    '#label' => t('Node Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'nid' => t('Node ID'),
      'title' => t('Node Title'),
    ),
  );
  // User fields.
  $fields['salesforce_user_map'] = array(
    '#type' => 'user',
    '#label' => t('User Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'uid' => t('User ID'),
      'name' => t('User Name'),
      'email' => t('User Email'),
    ),
  );
  // Submission fields.
  $fields['salesforce_submission_map'] = array(
    '#type' => 'submission',
    '#label' => t('Submission Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'sid' => t('Submission ID'),
      'date' => t('Submission Date'),
    ),
  );
  // And return the fields for the map to generate the form.
  return $fields;
}
