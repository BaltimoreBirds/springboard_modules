<?php

/**
 * @file
 * Manages webform to Salesforce mappings.
 */

/**
 * @name core_drupal_hooks
 * @{
 */

/**
 * Implements hook_permission().
 */
function salesforce_donation_permission() {
  return array(
    'map salesforce to donation' => array(
      'title' => t('Map Salesforce objects to donations'),
      'description' => t('Configure the mapping of Salesforce objects with fundraisers so donations can sync with Salesforce.'),
    ),
    'map salesforce to webform on donation' => array(
      'title' => t('Map Salesforce objects to webform on Donations'),
      'description' => t('Advanced user setting: map donations and webform on the same node for Salesforce sync.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salesforce_donation_menu() {
  $items['admin/config/salesforce/salesforce-donation'] = array(
    'title' => 'Salesforce donation',
    'description' => 'Configure how the Salesforce integration will work with donation objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_settings'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback. Configure salesforce_donation module.
 */
function salesforce_donation_settings($form, &$form_state) {
  // Build a default fieldmap.
  // NID is dummy value, no real node here.
  $node->nid = -1;
  module_load_include('inc', 'salesforce_genmap', 'includes/salesforce_genmap.map');
  $form_state['build_info']['args'][0] = $node;
  $form = salesforce_genmap_map_form($form, $form_state, $node, 'salesforce_donation');
  if (isset($form['submit'])) {
    $form['#submit'] = array('salesforce_donation_settings_submit');
  }
  return $form;
}

/**
 * Submit callback for settings form.
 */
function salesforce_donation_settings_submit($form, &$form_state) {
  drupal_set_message('execute salesforce_donation_settings_submit');
  // @TODO: From here, we gather the set values and stash it in a variable_get /
  // set array. We can then reuse this for nodes as they are created, plugging
  // the default map in place.
}

/**
 * @} core_drupal_hooks
 */

/**
 * @name salesforce_genmap_hooks
 * @{
 * @TODO: review these, we may need to act on create instead of success
 */

/**
 * Implements hook_fundraiser_donation_success().
 */
function salesforce_donation_fundraiser_donation_success($donation) {
  // Reload donation to be sure to get everything we need from submission table
  // then send to queue.
  $donation = fundraiser_donation_get_donation($donation->did, TRUE);
  salesforce_genmap_send_object_to_queue('salesforce_donation', 'insert', $donation->node, $donation->did, $donation);
}

/**
 * Implements hook_salesforce_genmap_map_help().
 */
function salesforce_donation_salesforce_genmap_map_help() {
  return array(
    'salesforce_donation' => t('Salesforce donation provides a way to map donation values to Salesforce objects.'),
  );
}

/**
 * Implements hook_salesforce_genmap_info().
 */
function salesforce_donation_salesforce_genmap_info() {
  $items['salesforce_donation'] = array(
    'type' => 'donation',
    'label' => 'Donation',
    'access callback' => 'salesforce_donation_map_page_access',
  );
  return $items;
}

/**
 * Implements hook_salesforce_genmap_info_alter().
 */
function salesforce_donation_salesforce_genmap_info_alter(&$items) {
  // If salesforce_donation exists.
  if (module_exists('salesforce_webform')) {
    $items['salesforce_webform']['access callback'] = 'salesforce_donation_webform_map_page_access';
  }
}

/**
 * Implements hook_salesforce_genmap_map_fields().
 *
 * @param stdClass $donation
 *   A donation object
 * @param Entity $map
 *   A Salesforce map entity
 *
 * @return array
 *   A set of fields mapped to value.
 */
function salesforce_donation_salesforce_genmap_map_fields(stdClass $donation, Entity $map, $node) {
  $fields = array();
  // Donation properties map.
  if (isset($map->field_map['salesforce_donation_map'])) {
    if (isset($map->field_map['salesforce_donation_map']['did'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['did'];
      $fields[$sf_field] = $donation->did;
    }
    if (isset($map->field_map['salesforce_donation_map']['gateway'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['gateway'];
      $fields[$sf_field] = $donation->gateway;
    }
    if (isset($map->field_map['salesforce_donation_map']['txn_id'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['txn_id'];
      $fields[$sf_field] = $donation->txn_id;
    }
    if (isset($map->field_map['salesforce_donation_map']['status'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['status'];
      $fields[$sf_field] = $donation->status;
    }
  }
  // Donation fields map.
  // Grab the regular set of donation fields first.
  $donation_fields = _fundraiser_get_field_fields();
  foreach ($donation_fields as $form_key => $donation_field) {
    if (isset($map->field_map['salesforce_donation_map'][$form_key])) {
      if (isset($donation->donation[$form_key])) {
        $sf_field = $map->field_map['salesforce_donation_map'][$form_key];
        $fields[$sf_field] = $donation->donation[$form_key];
      }
    }
  }
  // Donation payment fields map.
  // Depending on the payment method any number of additional fields may exist.
  // So we need to add them here. Since which fields have values is completely
  // dependant on the individual user's choice at time of donation we can't
  // anticipate which one will have a value and which one won't.
  // So we need to check for all type that MAY be configured at any point based
  // on available methods. Methods are defined within the associated active
  // gateways.
  foreach ($donation->donation['payment_fields'] as $payment_method => $payment_fields) {
    foreach ($payment_fields as $key => $value) {
      if (isset($map->field_map['salesforce_donation_map'][$key])) {
        $sf_field = $map->field_map['salesforce_donation_map'][$key];
        $fields[$sf_field] = $value;
      }
    }
  }

  // And lastly, the reconstructed data fields. Information derived from the current fields.
  if (isset($map->field_map['salesforce_donation_map'])) {
    if (isset($map->field_map['salesforce_donation_map']['close_date'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['close_date'];
      // @TODO: fill this in.
      $fields[$sf_field] = '';
    }
    if (isset($map->field_map['salesforce_donation_map']['transaction_date'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['transaction_date'];
      // @TODO: fill this in.
      $fields[$sf_field] = '';
    }
    if (isset($map->field_map['salesforce_donation_map']['form_URL'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['form_URL'];
      // @TODO: fill this in.
      $fields[$sf_field] = '';
    }
    if (isset($map->field_map['salesforce_donation_map']['probability'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['probability'];
      $probability = 100;
      if ($donation->donation['recurs_monthly'] == TRUE) {
        // @TODO: if ($recurring and not charged) { fill this in.
        $probability = 50;
      }
      $fields[$sf_field] = $probability;
    }
    if (isset($map->field_map['salesforce_donation_map']['stage'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['stage'];
      $stage = 'Posted';
      if ($donation->donation['recurs_monthly'] == TRUE) {
        // @TODO: if ($recurring and not charged) { fill this in.
        $stage = 'Pledged';
      }
      // @TODO: add mapping to donation order status feature - implement order
      // stage gathering as hook in commerce and ubercart.s
      $fields[$sf_field] = $stage;
    }
    if (isset($map->field_map['salesforce_donation_map']['user_salesforce_account_id'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['user_salesforce_account_id'];
      $fields[$sf_field] = '[Account:User:User:uid]';
    }
    if (isset($map->field_map['salesforce_donation_map']['user_salesforce_contact_id'])) {
      $sf_field = $map->field_map['salesforce_donation_map']['user_salesforce_contact_id'];
      $fields[$sf_field] = '[Contact:User:User:uid]';
    }
  }

  // Salesforce webform map.
  if (isset($donation->submission_data)) {
    foreach ($donation->submission_data as $form_key => $submission_value) {
      if (isset($map->field_map['salesforce_webform_map'][$form_key])) {
        $sf_field = $map->field_map['salesforce_webform_map'][$form_key];
        $fields[$sf_field] = is_array($submission_value) ? serialize($submission_value) : $submission_value;
      }
    }
  }
  // Node properties map.
  if (isset($map->field_map['salesforce_node_map'])) {
    if (isset($map->field_map['salesforce_node_map']['nid'])) {
      $sf_field = $map->field_map['salesforce_node_map']['nid'];
      $fields[$sf_field] = $donation->nid;
    }
    if (isset($map->field_map['salesforce_node_map']['title'])) {
      $sf_field = $map->field_map['salesforce_node_map']['title'];
      $fields[$sf_field] = $donation->node->title;
    }
  }
  // User properties map.
  if (isset($map->field_map['salesforce_user_map'])) {
    if (isset($map->field_map['salesforce_user_map']['uid'])) {
      $sf_field = $map->field_map['salesforce_user_map']['uid'];
      $fields[$sf_field] = $donation->uid;
    }
    if (isset($map->field_map['salesforce_user_map']['name'])) {
      $sf_field = $map->field_map['salesforce_user_map']['name'];
      $fields[$sf_field] = $donation->user->name;
    }
    if (isset($map->field_map['salesforce_user_map']['email'])) {
      $sf_field = $map->field_map['salesforce_user_map']['email'];
      $fields[$sf_field] = $donation->user->email;
    }
  }
  // Submission properties map.
  if (isset($map->field_map['salesforce_submission_map'])) {
    if (isset($map->field_map['salesforce_submission_map']['sid'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['sid'];
      // If sid = 0, then no submission id (may be created by sustainer).
      $fields[$sf_field] = $donation->sid;
    }
    if (isset($map->field_map['salesforce_submission_map']['date'])) {
      $sf_field = $map->field_map['salesforce_submission_map']['date'];
      $fields[$sf_field] = REQUEST_TIME;
    }
  }
  return $fields;
}

/**
 * Implements hook_salesforce_genmap_map_field_info().
 *
 * @param stdClass $node
 *   Provide a node object
 *
 * @return array
 *   A set of fields to be used in mapping form.
 */
function salesforce_donation_salesforce_genmap_map_field_info($node) {
  // Build an array of fields to map against.
  // Nested by category. If the category allows for dedupes, note that.
  $fields = array();
  $fields['salesforce_donation_map'] = array(
    '#type' => 'donation',
    '#label' => t('Donation Field'),
    '#dedupe' => TRUE,
    '#fields' => array(
      'did' => t('Donation ID'),
      'gateway' => t('Gateway ID'),
      'txn_id' => t('Transaction ID'),
      'status' => t('Payment Status'),
    ),
  );
  // Additional donation fields.
  // Grab the regular set of donation fields.
  $donation_fields = _fundraiser_get_field_fields();
  foreach ($donation_fields as $form_key => $donation_field) {
    // Skip if this is a fieldset type.
    if ($donation_field['#type'] != 'fieldset') {
      $fields['salesforce_donation_map']['#fields'][$form_key] = $donation_field['#title'] .
        ' (' . $donation_field['#type'] . ')';
    }
  }
  // Depending on the payment method any number of additional fields may exist.
  // So we need to add them here. Since which fields have values is completely
  // dependant on the individual user's choice at time of donation we can't
  // anticipate which one will have a value and which one won't.
  // So we need to check for all type that MAY be configured at any point based
  // on available methods. Methods are defined within the associated active
  // gateways. So, we looks up each form and field per form.
  if (module_exists('fundraiser_webform') && $node->nid != -1) {
    // Find the payment methods component.
    $payment_method_component = _fundraiser_webform_get_component_by_nid_key($node->nid, array('payment_method'));
    $payment_method_field = $node->webform['components'][$payment_method_component->cid];
    // Use the enabled payment methods to create the payment fields.
    if (!empty($payment_method_field['extra']['payment_methods'])) {
      $payment_methods = array_filter($payment_method_field['extra']['payment_methods'],
        '_fundraiser_webform_payment_method_array_filter_enabled');
    }
    // Loop through the payment methods and add fields for each type.
    foreach ($payment_methods as $payment_method => $config) {
      // Find the given gateway idea for this, pull from
      // _fundraiser_gateway_info($gateway_id) for fields.
      $gateway_info = _fundraiser_gateway_info($config['id']);
      // Check against the gateway config for a specific form to go with this
      // payment gateway.
      if (isset($gateway_info['form callback'])) {
        $form_func = $gateway_info['form callback'];
        if (function_exists($form_func)) {
          $gateway_form = $form_func($payment_method);
        }
      }
      $field_set = _salesforce_donation_get_form_fields($gateway_form);
      foreach ($field_set as $field_key => $field_title) {
        $fields['salesforce_donation_map']['#fields'][$field_key] = $field_title . ' (' . t('Payment field') . ')';
      }
    }
  }

  // And lastly, the additional data fields. Information that comes from
  // donation circumstances.
  $fields['salesforce_donation_map']['#fields']['close_date'] = t('Close date');
  $fields['salesforce_donation_map']['#fields']['transaction_date'] = t('Transaction date');
  $fields['salesforce_donation_map']['#fields']['form_URL'] = t('Form URL');
  $fields['salesforce_donation_map']['#fields']['probability'] = t('Probability');
  $fields['salesforce_donation_map']['#fields']['stage'] = t('Stage');
  $fields['salesforce_donation_map']['#fields']['user_salesforce_account_id'] = t('User Salesforce Account ID');
  $fields['salesforce_donation_map']['#fields']['user_salesforce_contact_id'] = t('User Salesforce Contact ID');

  // Webform component fields.
  if (module_exists('fundraiser_webform') && $node->nid != -1) {
    $fields['salesforce_webform_map'] = array(
      '#type' => 'webform',
      '#label' => t('Webform Componant'),
      '#dedupe' => FALSE,
      '#fields' => array(),
    );
    $wf_components = $node->webform['components'];
    $donation_field_keys = array_keys($donation_fields);
    foreach ($wf_components as $cid => $component) {
      if ($component['type'] != 'fieldset' && !in_array($component['form_key'], $donation_field_keys)) {
        $form_key = $component['form_key'];
        $fields['salesforce_webform_map']['#fields'][$form_key] = $component['name'] . ' (' . $component['type'] . ')';
      }
    }
  }

  // Node fields.
  $fields['salesforce_node_map'] = array(
    '#type' => 'node',
    '#label' => t('Node Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'nid' => t('Node ID'),
      'title' => t('Node Title'),
    ),
  );
  // User fields.
  $fields['salesforce_user_map'] = array(
    '#type' => 'user',
    '#label' => t('User Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'uid' => t('User ID'),
      'name' => t('User Name'),
      'email' => t('User Email'),
    ),
  );
  // Submission fields.
  $fields['salesforce_submission_map'] = array(
    '#type' => 'submission',
    '#label' => t('Submission Property'),
    '#dedupe' => FALSE,
    '#fields' => array(
      'sid' => t('Submission ID'),
      'date' => t('Submission Date'),
    ),
  );
  // And return the fields for the map to generate the form.
  return $fields;
}

/**
 * Helper function, given a form, get all submission values NOT fieldset.
 *
 * WARNING: Recursion here.
 */
function _salesforce_donation_get_form_fields($form, $fields = array()) {
  foreach (element_children($form) as $field_name) {
    if ($form[$field_name]['#type'] != 'fieldset') {
      $fields[$field_name] = $form[$field_name]['#title'];
    }
    else {
      $fields = _salesforce_donation_get_form_fields($form[$field_name], $fields);
    }
  }
  return $fields;
}

/**
 * @} salesforce_genmap_hooks
 */

/**
 * Access callback to reach the mapping page.
 */
function salesforce_donation_map_page_access($node) {
  if ($node !== FALSE
    && fundraiser_is_donation_type($node->type)
    && user_access('map salesforce to donation')
    ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for mapping page for salesforce webforms.
 *
 * This avoids a complicated UI, so only let trained users use these two systems
 * together.
 */
function salesforce_donation_webform_map_page_access($node) {
  // %webform_menu returns FALSE if not valid.
  if ($node !== FALSE
    && fundraiser_is_donation_type($node->type)
    && user_access('map salesforce to webform')
    && user_access('map salesforce to webform on donation')
    ) {
    return TRUE;
  }
  return FALSE;
}
