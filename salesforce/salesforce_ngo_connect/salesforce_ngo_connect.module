<?php

/**
 * @file
 * Provides Springboard integration with the NGO Connect Salesforce platform.
 */

/**
 * Implements hook_entity_info().
 */
function salesforce_ngo_connect_entity_info() {
  return array(
    'salesforce_ngo_connect_batch_upload' => array(
      'label' => t('Salesforce NGO Connect Batch Upload'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'salesforce_ngo_connect_batch_upload',
      'entity keys' => array(
        'id' => 'batch_upload_id',
      ),
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_ngo_connect',
    ),
  );
}

/**
 * Implements hook_salesforce_queue_create_item_alter()
 */
function salesforce_ngo_connect_salesforce_queue_create_item_alter(&$item) {
  if ($item['delta'] == 'user') {
    // Default Address Type to Home.
    $item['sobject']->fields['rC_Connect__Address_Type__c'] = 'Home';
    // Default Email Type to Home.
    $item['sobject']->fields['rC_Connect__Contact_1_Email_Type__c'] = 'Home';
  }
}

/**
 * Implements hook_salesforce_sync_pass_item()
 */
function salesforce_ngo_connect_salesforce_sync_pass_item($item, $result) {
  if (!empty($result->success)) {
    // Create the NGO Connect Batch Upload entity.
    $batch_upload_data = array(
      'batch_upload_id' => $result->id,
      'drupal_id' => $item->drupal_id,
      'module' => $item->module,
      'delta' => $item->delta,
    );

    $batch_upload = entity_create('salesforce_ngo_connect_batch_upload', $batch_upload_data);
    $batch_upload->save();

    // Remove Drupal entity to Batch Upload Salesforce mapping.
    $sf_object = new stdClass();
    $sf_object->Id = $result->id;
    salesforce_sync_delete_map(array(
      'sobject' => $sf_object,
    ));
  }
  else {
    watchdog('salesforce_ngo_connect', t('Unable to create Batch Upload entity. Salesforce sync failed for item ID: @item_id', array(
      '@item_id' => $item->item_id,
        )), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_cron_queue_info()
 */
function salesforce_ngo_connect_cron_queue_info() {
  $queues['update_batch_upload_ids'] = array(
    'worker callback' => 'salesforce_ngo_connect_process_batch_upload_ids',
    'time' => 120,
  );

  return $queues;
}

/**
 * Implements hook_cron()
 */
function salesforce_ngo_connect_cron() {
  $queue = DrupalQueue::get('update_batch_upload_ids');

  // Get the IDs of all NGO Connect Batch Upload entities.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'salesforce_ngo_connect_batch_upload')
      ->propertyCondition('synced', 0, '=');
  $result = $query->execute();

  if (!empty($result['salesforce_ngo_connect_batch_upload'])) {
    // Get the Batch Upload objects from Salesforce for the entity IDs found.
    $sfids = array_keys($result['salesforce_ngo_connect_batch_upload']);

    // Define Batch Upload object fields to request.
    $field_names = array(
      'status' => 'rC_Connect__Batch_Upload_Status__c',
      'account_id' => 'rC_Connect__Batch_Upload_Account_Matched__c',
      'contact_id' => 'rC_Connect__Batch_Upload_Contact_1_Matched__c',
      'opportunity_id' => 'rC_Connect__Batch_Upload_Giving_Matched__c',
    );

    // Get Batch Upload object field data from Salesforce.
    $sync = new SalesforceSync();
    $response = $sync->fetchByIds('rC_Connect__Batch_Upload__c', array_values($field_names), $sfids);

    // Create a cron queue item for each Batch Upload object.
    foreach ($response as $record) {
      if (!empty($record->fields)) {
        // Only process Batch Upload objects with a Committed status.
        if ($record->fields->$field_names['status'] == 'Committed') {
          $batch_data = array(
            'id' => $record->fields->Id,
          );

          foreach ($field_names as $key => $name) {
            $batch_data[$key] = (isset($record->fields->$name)) ? $record->fields->$name : NULL;
          }

          $queue->createItem($batch_data);
        }
      }
    }
  }
}

/**
 * Updates NGO Connect Batch Upload entities with Account, Contact and
 * Opportunity IDs.
 */
function salesforce_ngo_connect_process_batch_upload_ids($data) {
  $batch_upload = entity_load_single('salesforce_ngo_connect_batch_upload', $data['id']);
  if (!empty($batch_upload)) {
    $batch_upload->account_id = $data['account_id'];
    $batch_upload->contact_id = $data['contact_id'];
    $batch_upload->opportunity_id = $data['opportunity_id'];
    $batch_upload->synced = time();
    $batch_upload->save();

    // Create User to Account Salesforce Sync map.
    if (!empty($batch_upload->account_id)) {
      salesforce_ngo_connect_create_sync_map($batch_upload->account_id, $batch_upload->drupal_id, $batch_upload->module, $batch_upload->delta, 'Account');
    }

    // Create User to Contact Salesforce Sync map.
    if (!empty($batch_upload->contact_id)) {
      salesforce_ngo_connect_create_sync_map($batch_upload->contact_id, $batch_upload->drupal_id, $batch_upload->module, $batch_upload->delta, 'Contact');
    }
  }
}

/**
 * Creates a Salesforce Sync Map record.
 *
 * @param string $sfid
 *   The Salesforce ID of the object to map.
 * @param int $drupal_id
 *   The Drupal ID of the object to map.
 * @param string $module
 *   The Drupal module representing the object.
 * @param string $delta
 *   The Drupal entity type of the object.
 * @param string $object_type
 *   The Salesforce object type.
 */
function salesforce_ngo_connect_create_sync_map($sfid, $drupal_id, $module, $delta, $object_type) {
  $record = array(
    'sfid' => $sfid,
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'object_type' => $object_type,
  );

  salesforce_sync_save_map($record);
}
