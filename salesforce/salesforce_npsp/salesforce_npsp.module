<?php

/**
 * @file
 * Provides Nonprofit Starter Pack specific functionality for Salesforce
 * integration.
 */

/**
 * Implements hook_user_load().
 */
function salesforce_npsp_user_load($users) {
  $result = db_query('SELECT drupal_id, sfid, object_type FROM {salesforce_sync_map} WHERE drupal_id IN (:uids)',
    array(':uids' => array_keys($users)));

  // Add the user's Salesforce ids for convenience. This will produce
  // $user->salesforce_account_id and $user->salesforce_contact_id by default.
  foreach ($result as $record) {
    $field = strtolower('Salesforce_' . $record->object_type . '_Id');
    $users[$record->drupal_id]->{$field} = $record->sfid;
  }
}

/**
 * Implements hook_user_view().
 */
function salesforce_npsp_user_view($account) {
  if (!empty($account->salesforce_contact_id) && !empty($account->salesforce_account_id)) {
    $account->content['summary']['salesforce_contact_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce Contact Id'),
      '#markup' => $account->salesforce_contact_id,
    );

    $account->content['summary']['salesforce_account_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce Account Id'),
      '#markup' => $account->salesforce_account_id,
    );
  }
  else {
    $account->content['summary']['salesforce_not_exported'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce'),
      '#markup' => t('User not exported to Salesforce'),
    );
  }
}

/**
 * Implements hook_salesforce_queue_postprocess_batch().
 */
function salesforce_npsp_salesforce_queue_postprocess_batch($batch, $results, $queue) {
  if (!isset($batch['sobjects']) || empty($batch['sobjects'])) {
    // Some batches do not have sobjects, such as delete.
    return;
  }

  // Prune some information off the first item in the batch since this info is
  // not available at the batch level.
  $module = $batch['items'][0]->module;
  $delta = $batch['items'][0]->delta;
  $object_type = $batch['items'][0]->object_type;
  $operation = $batch['operation'];

  // Array to hold the Salesforce ids of every exported contact. We'll
  // use this array to retreive all their account ids. The responses are
  // in the same exact order as the items in the batch so we can safely
  // assume that $batch['items'][10] corresponds directly to $results[10].
  $sfids = array();

  // Check that the batch contained users being exported to contacts.
  if ($object_type == 'Contact' && $delta == 'user') {
    // Loop over the results array because that will indicate successes
    // and failures.
    $count = count($results);
    for ($i = 0; $i < $count; $i++) {
      if ($results[$i]->success) {
        $sfids[$batch['items'][$i]->drupal_id] = $results[$i]->id;
      }
    }

    // Get the account ids for each contact in the batch.
    $account_ids = salesforce_npsp_get_contact_account_ids($sfids);

    // Save the account ids.
    salesforce_npsp_save_account_ids($account_ids);
  }
}

/**
 * Retreives the 1:1 acccount id for an array of contacts.
 *
 * @param array $sfids
 *   The array of Salesforce contact ids whose account ids
 *   are to be retreived.
 *
 * @return array
 *   An array in the format of uid => accountid.
 */
function salesforce_npsp_get_contact_account_ids($sfids) {
  $sync = new SalesforceSync();
  $drupal_ids = array_keys($sfids);
  $account_ids = array();

  // Retrieve the account id for each contact.
  $response = $sync->fetchByIds('Contact', array('AccountId'), $sfids);

  // Associate the account id with each Drupal user id.
  $count = count($sfids);
  for ($i = 0; $i < $count; $i++) {
    $account_ids[$drupal_ids[$i]] = $response[$i]->fields->AccountId;
  }

  return $account_ids;
}

/**
 * Saves a user's account id.
 *
 * @param array $account_ids
 *   The account ids to save.
 */
function salesforce_npsp_save_account_ids($account_ids) {

  foreach ($account_ids as $drupal_id => $account_id) {
    $record = array(
      'sfid' => $account_id,
      'drupal_id' => $drupal_id,
      'module' => 'user',
      'delta' => 'user',
      'object_type' => 'Account',
    );

    salesforce_sync_save_map($record);
  }
}
