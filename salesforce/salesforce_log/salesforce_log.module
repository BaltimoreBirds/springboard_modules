<?php

/**
 * @file
 * Provides logging of the batch processing of the Salesforce integration.
 */

/**
 * Implements hook_menu().
 */
function salesforce_log_menu() {
  // Reports landing page. The actual report pages are handled by views
  $items['admin/reports/salesforce'] = array(
    'title' => 'Salesforce',
    'description' => 'View salesforce reports, updates, and errors.',
    'page callback' => 'salesforce_log_admin_menu_block_page',
    'access arguments' => array('view salesforce batch logs'),
    'weight' => 5,
    'position' => 'left',
    'file' => 'includes/salesforce_log.admin.inc',
  );

  // Settings form
  $items['admin/config/services/salesforce/salesforce-sync/logs'] = array(
    'title' => 'Log',
    'description' => 'Configuration settings for the Salesforce batch log.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_log_settings'),
    'access arguments' => array('view salesforce batch logs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/salesforce_log.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function salesforce_log_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'salesforce_log') . '/includes',
  );
}

/**
 * Implement hook_permission().
 */
function salesforce_log_permission() {
  return array(
    'view salesforce batch logs' => array(
      'title' => t('View Salesforce logs'),
      'description' => t('View the Salesforce logs.'),
    ),
  );
}

/*
 * Implements hook_salesforce_queue_batch_alter
 *
 * Add our log related data to the batch object and items
 *
 * @param array $batch
 *   Array of instructions that are used to formulate the API call to Salesforce
 * @param SalesforceQueue $queue
 *   SalesforceQueue object
 * @param SalesforceQueueProcessor $processor
 *   SalesforceQueueProcessor object
 */
function salesforce_log_salesforce_queue_batch_alter(&$batch, $queue, $processor) {
  $batch['start'] = time();
  $batch['module'] = $batch['items'][0]->module;
  $batch['delta'] = $batch['items'][0]->delta;
  drupal_write_record('salesforce_log_batch', $batch);
  foreach ($batch['items'] as $item) {
    $item->bid = $batch['bid'];
    drupal_write_record('salesforce_log_item', $item);
  }
}

/**
 * Implements hook_salesforce_sync_fail_item
 *
 * @param object $item
 *   Queue item
 * @param string $message
 *   Message explaining why the item failed.
 * @param mixed $result
 *   Information about the failure, likely a Salesforce result object
 */
function salesforce_log_salesforce_sync_fail_item($item, $message, $result) {
  $item->status = 'failed';
  $item->message = $result->faultstring;
  drupal_write_record('salesforce_log_item', $item, array('lid'));
}

/**
 * Implements hook_salesforce_sync_pass_item
 *
 * @param object $item
 *   Queue item
 * @param varchar $result
 *   The Salesforce response after the call was made
 */
function salesforce_log_salesforce_sync_pass_item($item, $result) {
  $item->status = 'synced';
  $item->sfid = $result->id;
  drupal_write_record('salesforce_log_item', $item, array('lid'));
}

/*
 * Implements hook_salesforce_queue_postprocess_batch
 */
function salesforce_log_salesforce_queue_postprocess_batch($batch, $results, $queue) {
  $batch['end'] = time();
  $batch['successes'] = count(array_filter($batch['items'], '_salesforce_log_array_filter_batch_successes'));
  $batch['failures'] = $batch['count'] - $batch['successes'];
  drupal_write_record('salesforce_log_batch', $batch, array('bid'));
}

/*
 * Array filter callback to find the count of successfully synced batch items
 */
function _salesforce_log_array_filter_batch_successes($item) {
  if (!empty($item->sobject)) {
    return TRUE;
  }
}
