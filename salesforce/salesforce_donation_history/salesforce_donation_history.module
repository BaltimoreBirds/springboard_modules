<?php

/**
 * @file
 * Query and render donor tax records from Salesforce.
 */

/**
 * Implements hook_menu().
 */
function salesforce_donation_history_menu() {
  $items = array();

  $items['admin/config/salesforce/salesforce_donation_history'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_history_admin'),
    'access arguments' => array('administer salesforce_donation_history settings'),
    'title' => 'Salesforce Donation History',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_donation_history.admin.inc',
    'description' => 'Manage Salesforce Donation History settings.',
  );

  // TODO: Implement a custom permission handler
  // to ensure the user has a salesforce account id.
  $items['user/%user/tax-receipts'] = array(
    'title' => 'Donation tax receipts',
    'page callback' => 'salesforce_donation_history_summary',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/tax-receipts/%year'] = array(
    'title' => 'Donation tax receipts for year X',
    'page callback' => 'salesforce_donation_history_by_year',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  // @TODO menu item for individual tax receipts.

  return $items;
}

/**
 * Gets all opportunities for a user.
 *
 * @param $uid
 *   User ID.
 *
 * @return array
 *   An array of opportunity data that was specified in the SOQL query stored in
 *   the variable salesforce_donation_history_query.
 */
function salesforce_donation_history_get_opportunities($uid) {

  if ($account_id = salesforce_donation_history_user_account_id($uid)) {
    $sfapi = salesforce_get_api();
    $results = $sfapi->query($soql);
    if (!isset($results['errorCode'])) {
      dpm($$results);
    }
    else {
      watchdog('Salesforce Donation History', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
    }

  }
}

/**
 * Generates a list of tax receipt years for the current user.
 */
function salesforce_donation_history_summary() {
  global $user;

  if ($account_id = salesforce_donation_history_user_account_id($user->uid)) {
    // Get salesforce and build a query all fancy like. The alternative is
    // to pass raw SOQL like $results = $sfapi->query($soql), which might be
    // the right way to go for this.
    $sf = salesforce_donation_history_get_salesforce();
    $query = new SalesforceSelectQuery('Opportunity');
    $query->fields = array('Id', 'Name');
    $query->limit = 10;
    // Execute query
    $result = $sf->query($query);

    // In the real world we would produce a data table with this info.
    dsm($result);

    return t('Hello, World! ' . $account_id);
  }

  return 'So sad :-(';
}

function salesforce_donation_history_get_available_years() {

}

function salesforce_donation_history_get_by_year($year) {

}

/**
 * Get the SF account id for a given user.
 */
function salesforce_donation_history_user_account_id($uid) {
  // Sync map lookup requires this format.
  $record = array(
    'module' => 'user',
    'delta' => 'user',
    'drupal_id' => $uid,
    'object_type' => 'Account',
  );

  $map = salesforce_sync_load_map($record);

  // If the user has been exported, return it's account id.
  if (!empty($map)) {
    return $map->sfid;
  }

  return FALSE;
}

/**
 * Gets the active Salesforce connection object.
 * TODO: There is probably a standard wrapper function for this
 * somewhere.
 */
function salesforce_donation_history_get_salesforce() {
  $sfapi = salesforce_get_api();

  if (!is_object($sfapi) || !$sfapi->isAuthorized()) {
    // Throw error, log and exit gracefully.
    return FALSE;
  }

  return $sfapi;
}
