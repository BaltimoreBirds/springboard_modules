<?php

/**
 * @file
 * Query and render donor tax records from Salesforce.
 */

/**
 * Default select SOQL query
 */
define('DONATION_HISTORY_DEFAULT_SOQL', "SELECT AccountId, Amount, CloseDate, CC_Last_4__c, CC_Type__c FROM Opportunity WHERE AccountId = ':accountId'");

/**
 * Implements hook_flush_caches().
 */
function salesforce_donation_history_flush_caches() {
  return array('cache_salesforce_donation_history');
}

/**
 * Implements hook_menu().
 */
function salesforce_donation_history_menu() {
  $items = array();

  $items['admin/config/salesforce/donation_history'] = array(
    'title' => 'Salesforce Donation History',
    'description' => 'Manage Salesforce Donation History settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_history_query'),
    'access arguments' => array('administer salesforce_donation_history settings'),
    'file' => 'salesforce_donation_history.admin.inc',
  );

  $items['admin/config/salesforce/donation_history/query'] = array(
    'title' => 'Query',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'Manage Salesforce Donation History Query.',
  );

  $items['admin/config/salesforce/donation_history/fields'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_history_fields'),
    'access arguments' => array('administer salesforce_donation_history settings'),
    'title' => 'Fields',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Manage Salesforce Donation History Fields.',
    'file' => 'salesforce_donation_history.admin.inc',
  );

  // TODO: Implement a custom permission handler
  // to ensure the user has a salesforce account id.
  $items['user/%user/donation-history'] = array(
    'title' => 'My donation history',
    'page callback' => 'salesforce_donation_history',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/tax-receipts/%year'] = array(
    'title' => 'Donation tax receipts for year X',
    'page callback' => 'salesforce_donation_history_by_year',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  // @TODO menu item for individual tax receipts.

  return $items;
}

/**
 * Implements hook_theme().
 */
function salesforce_donation_history_theme() {
  return array(
    'salesforce_donation_history_admin_field_table' => array(
      'render element' => 'element'
    )
  );
}

function theme_salesforce_donation_history_admin_field_table($vars) {
  $element = $vars['element'];
  $rows = array();
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => $element[$key]['label']['#extra_data']['field_table']),
      array('data' => $element[$key]['label']['#extra_data']['field_name']),
      array('data' => render($element[$key]['label'])),
      array('data' => render($element[$key]['show_on_tab'])),
      array('data' => render($element[$key]['show_on_receipt'])),
      array('data' => render($element[$key]['show_on_summary'])),
    );
  }
  $header = array(t('SF Table'), t('Field'), t('Custom Label'), t('Show on User Tab'), t('Show on Donation Receipt'), t('Show on Annual Summary'));
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Gets all opportunities for a user.
 *
 * @param $sfid
 *   Salesforce Account ID.
 *
 * @return array
 *   An array of opportunity data that was specified in the SOQL query.
 */
function salesforce_donation_history_get_opportunities($sfid) {
  $opportunities = &drupal_static(__FUNCTION__);
  if (!isset($opportunities)) {
    if ($cache = cache_get($sfid, 'cache_salesforce_donation_history')) {
      $opportunities = $cache->data;
    }
    else {
      $soql = strtr(variable_get('salesforce_donation_history_query', DONATION_HISTORY_DEFAULT_SOQL), array(':accountId' => $sfid));
      $sfapi = salesforce_get_api();
      $soap = new SalesforceSoapPartner($sfapi);
      $response = $soap->query($soql);
      $result = new QueryResult($response);
      if ($result) {
        $opportunities = $result->records;
        // @TODO Encrypt cached oppontunity data?
        cache_set($sfid, $opportunities, 'cache_salesforce_donation_history');
      }
      else {
        watchdog('Salesforce Donation History', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }
  }
  return $opportunities;
}

/**
 * Get object description from Salesforce API.
 *
 * @param string $sfobject_name
 *   Name of the Salesforce object to describe. eg Account or Opportunity
 */
function salesforce_donation_history_describe_object($sfobject_name) {
  $sfapi = salesforce_get_api();
  if ($sfapi->isAuthorized()) {
    return $sfapi->objectDescribe($sfobject_name);
  }
}

/**
 * Generates a list of tax receipt years for the current user.
 */
function salesforce_donation_history($user) {
  $output = array();
  $sfid = salesforce_donation_history_user_account_id($user->uid);
  if (!$sfid) {
    drupal_set_message('No account ID could be found.', 'error');
  }
  else {
    $results = salesforce_donation_history_get_opportunities($sfid);
    if (count($results) < 1) {
      $output['no-results'] = array(
        '#type' => 'markup',
        '#markup' => t('No donations found.'),
      );
    }
    else {
      $current_year = date("Y");
      $output['year'] = array(
        '#title' => t('Select year'),
        '#type' => 'select',
        '#options' => array($current_year, $current_year-1, $current_year-2,$current_year-3 ),
      );
      $output['annual-tax-receipt'] = array(
        '#type' => 'markup',
        '#markup' => l('Print Annual Tax Reciept', '#'),
        );
      $output['table'] = salesforce_donation_history_create_table($results);
      $output['table'] = salesforce_donation_history_append_column($output['table'], '', l('Print Receipt', '#'));
    }
  }
  return $output;
}

function salesforce_donation_history_get_available_years() {

}

function salesforce_donation_history_get_by_year($year) {

}

/**
 * Get the SF account id for a given user.
 */
function salesforce_donation_history_user_account_id($uid) {
  // Sync map lookup requires this format.
  $record = array(
    'module' => 'user',
    'delta' => 'user',
    'drupal_id' => $uid,
    'object_type' => 'Account',
  );

  $map = salesforce_sync_load_map($record);

  // If the user has been exported, return it's account id.
  if (!empty($map)) {
    return $map->sfid;
  }

  return FALSE;
}

/**
 * Gets the active Salesforce connection object.
 * TODO: There is probably a standard wrapper function for this
 * somewhere.
 */
function salesforce_donation_history_get_salesforce() {
  $sfapi = salesforce_get_api();

  if (!is_object($sfapi) || !$sfapi->isAuthorized()) {
    // Throw error, log and exit gracefully.
    return FALSE;
  }

  return $sfapi;
}

function salesforce_donation_history_create_table($records, $displayHeaders = TRUE) {
  $table = array('#theme' => 'table');
  if ($displayHeaders) {
    // Call shared recusive function for header printing.
    if ($records[0] instanceof SObject) {
      $table['#header'] = salesforce_donation_history_create_table_headers($records[0]);
    }
    else {
      $table['#header'] = salesforce_donation_history_create_table_headers(new SObject($records[0]));
    }
  }
  // Print the remaining rows in the body.
  $table['#rows'] = array();
  foreach ($records as $record) {
    // Call shared recusive function for row printing.
    if ($record instanceof SObject) {
      $row = salesforce_donation_history_create_table_row($record);
    }
    else {
      $row = salesforce_donation_history_create_table_row(new SObject($record));
    }
    for ($i = 0; $i < count($row); $i++) {
      // I've actually never seen this if statement satisfied.
      if ($row[$i] instanceof QueryResult && !is_array($row[$i])) {
        $row[$i] = array($row[$i]);
      }
      // If the cell is an array and [0] is a QueryResult, we recurse and
      // create a table within a table.
      if (isset($row[$i][0]) && $row[$i][0] instanceof QueryResult) {
        foreach ($row[$i] as $qr) {
          $nested_table = salesforce_donation_history_create_table($qr->records, FALSE);
          // @TODO I don't think rendering the nested table and inserting the
          // markup into the parent cell should be necessary but I couldn't get
          // it to display as nested render arrays.
          $row[$i] = render($nested_table);
        }
      }
    }
    $table['#rows'][] = $row;
  }
  return $table;
}

function salesforce_donation_history_create_table_headers($sobject) {
  $field_settings = variable_get('salesforce_donation_history_field_settings', NULL);
  if (!isset($header_buffer_array)) {
    $header_buffer_array = array();
  }
  if (isset($sobject->fields)) {
    foreach ($sobject->fields as $fieldname => $fieldvalue) {
      if ($fieldvalue instanceof SObject) {
        $recurse = salesforce_donation_history_create_table_headers($fieldvalue);
        $header_buffer_array = array_merge($header_buffer_array, $recurse);
      }
      else {
        // Only add the header if it is configured to be displayed.
        if ($field_settings[$sobject->type . '-' . $fieldname]['show_on_tab']) {
          // Use the custom label as the field header if one has been specified.
          // Else, default to the salesforce field name.
          $fieldname = (!empty($field_settings[$sobject->type . '-' . $fieldname]['label'])) ? $field_settings[$sobject->type . '-' . $fieldname]['label'] : $fieldname;
          $header_buffer_array[] = htmlspecialchars($fieldname, ENT_QUOTES);
        }
      }
    }
  }
  if (isset($sobject->queryResult)) {
    if (!is_array($sobject->queryResult)) {
      $sobject->queryResult = array($sobject->queryResult);
    }
    foreach ($sobject->queryResult as $qr) {
      // Use the custom label as the field header if one has been specified.
      // Else, default to the salesforce table name.
      $fieldname = (!empty($field_settings[$qr->records[0]->type])) ? $field_settings[$qr->records[0]->type]['label'] : $qr->records[0]->type;
      $header_buffer_array[] = $fieldname;
    }
  }
  return $header_buffer_array;
}

function salesforce_donation_history_create_table_row($sobject, $escapeHtmlChars=true) {
  $field_settings = variable_get('salesforce_donation_history_field_settings', NULL);
  if (!isset($rowBuffer)) {
    $rowBuffer = array();
  }
  if (isset($sobject->Id) && !isset($sobject->fields->Id)) {
    $rowBuffer[] = $sobject->Id;
  }
  if (isset($sobject->fields)) {
    foreach ($sobject->fields as $key => $datum) {
      if ($datum instanceof SObject) {
        $rowBuffer = array_merge($rowBuffer, salesforce_donation_history_create_table_row($datum,$escapeHtmlChars));
      } else {
        // Add datum to row if it is not set (so we don't end up with too few
        // cells in a row OR the field settings say to include it.)
        if (!isset($datum) || $field_settings[$sobject->type . '-' . $key]['show_on_tab']) {
          $rowBuffer[] = ($escapeHtmlChars ? htmlspecialchars($datum,ENT_QUOTES) : $datum);
        }
      }
    }
  }
  if (isset($sobject->queryResult)) {
    $rowBuffer[] = $sobject->queryResult;
  }
  return $rowBuffer;
}

/**
 *
 */
function salesforce_donation_history_get_field_definitions($records) {
  // Create an SObject to work with.
  // We only care about the headers, so we should only need to deal with the
  // first ([0]) record.
  if (!is_array($records)) {
      $records = array($records);
  }
  if ($records[0] instanceof SObject) {
    $sobject = $records[0];
  }
  else {
    $sobject = new SObject($records[0]);
  }
  // Static array to store field definitions when this function is called
  // recursively.
  if (!isset($field_definitions)) {
    $field_definitions = array();
  }
  // Let's see if this ever gets run.
  if (isset($sobject->Id) && !isset($sobject->fields->Id)) {
    // $header_buffer_array[] = $tail . "Id";
    // dpm('Check this code');
  }
  // Does this sobject have fields?
  if (isset($sobject->fields)) {
    foreach ($sobject->fields as $fieldname => $fieldvalue) {
      if ($fieldvalue instanceof SObject) {
        $recurse = salesforce_donation_history_get_field_definitions($fieldvalue);
        $field_definitions = array_merge($field_definitions, $recurse);
      }
      else {
        $field_definitions[$sobject->type][$fieldname] = '';
      }
    }
  }
  if (isset($sobject->queryResult)) {
    if (!is_array($sobject->queryResult)) {
      $sobject->queryResult = array($sobject->queryResult);
    }
    foreach ($sobject->queryResult as $qr) {
      $recurse = salesforce_donation_history_get_field_definitions($qr->records);
      $field_definitions = array_merge($field_definitions, $recurse);
    }
  }
  return $field_definitions;
}

/**
 * Appends a column to a table render array.
 *
 * @param array $table
 *   A table render array.
 * @param string $header
 *   The header to display on the appended column.
 * @param string $column
 *   The string to display in each row of the appended column.
 *
 * @todo Would be nice to support a string and an array of values in $column.
 */
function salesforce_donation_history_append_column($table, $header, $column) {
  $table['#header'][] = $header;
  for ($i = 0; $i < count($table['#rows']); $i++) {
    $table['#rows'][$i][] = $column;
  }
  return $table;
}
