<?php

/**
 * @file
 * Query and render donor tax records from Salesforce.
 */

/**
 * Default select SOQL query
 */
define('DONATION_HISTORY_DEFAULT_SOQL', "SELECT AccountId, Amount, CreatedDate, CC_Last_4__c, CC_Type__c FROM Opportunity WHERE AccountId = ':accountId'");

/**
 * Implements hook_flush_caches().
 */
function salesforce_donation_history_flush_caches() {
  return array('cache_salesforce_donation_history');
}

/**
 * Implements hook_menu().
 */
function salesforce_donation_history_menu() {
  $items = array();

  $items['admin/config/salesforce/salesforce_donation_history'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_history_admin'),
    'access arguments' => array('administer salesforce_donation_history settings'),
    'title' => 'Salesforce Donation History',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_donation_history.admin.inc',
    'description' => 'Manage Salesforce Donation History settings.',
  );

  // TODO: Implement a custom permission handler
  // to ensure the user has a salesforce account id.
  $items['user/%user/donation-history'] = array(
    'title' => 'My donation history',
    'page callback' => 'salesforce_donation_history',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/tax-receipts/%year'] = array(
    'title' => 'Donation tax receipts for year X',
    'page callback' => 'salesforce_donation_history_by_year',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  // @TODO menu item for individual tax receipts.

  return $items;
}

/**
 * Gets all opportunities for a user.
 *
 * @param $sfid
 *   Salesforce Account ID.
 *
 * @return array
 *   An array of opportunity data that was specified in the SOQL query.
 */
function salesforce_donation_history_get_opportunities($sfid) {
  dpm('sfid');
  dpm($sfid);
  $opportunities = &drupal_static(__FUNCTION__);
  if (!isset($opportunities)) {
    if ($cache = cache_get($sfid, 'cache_salesforce_donation_history')) {
      $opportunities = $cache->data;
    }
    else {
      $soql = strtr(variable_get('salesforce_donation_history_query', DONATION_HISTORY_DEFAULT_SOQL), array(':accountId' => $sfid));
      $sfapi = salesforce_get_api();
      $soap = new SalesforceSoapPartner($sfapi);
      $response = $soap->query($soql);
      $result = new QueryResult($response);
      dpm($response);
      // Print createQueryResultTable($response->records, 0);.
      if ($result) {
        $opportunities = $result->records;
        // @TODO Encrypt cached oppontunity data?
        cache_set($sfid, $opportunities, 'cache_salesforce_donation_history');
      }
      else {
        watchdog('Salesforce Donation History', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }
  }
  return $opportunities;
}

/**
 * Get object description from Salesforce API.
 *
 * @param string $sfobject_name
 *   Name of the Salesforce object to describe. eg Account or Opportunity
 */
function salesforce_donation_history_describe_object($sfobject_name) {
  $sfapi = salesforce_get_api();
  if ($sfapi->isAuthorized()) {
    return $sfapi->objectDescribe($sfobject_name);
  }
}

/**
 * Generates a list of tax receipt years for the current user.
 */
function salesforce_donation_history($user) {
  $output = array();
  $sfid = salesforce_donation_history_user_account_id($user->uid);
  if (!$sfid) {
    drupal_set_message('No account ID could be found.', 'error');
  }
  else {
    $results = salesforce_donation_history_get_opportunities($sfid);
    $output = createQueryResultTable($results, 0);
  }

  // $output = array();
  // if (!$sfid) {
  //   drupal_set_message('No account ID could be found.', 'error');
  // }
  // else {
  //   $results = salesforce_donation_history_get_opportunities($sfid);
  //   if (count($results) < 1) {
  //     $output['no-results'] = array(
  //       '#type' => 'markup',
  //       '#markup' => t('No donations found.'),
  //     );
  //   }
  //   else {
  //     foreach ($results as $result) {
  //       $rows[] = array(
  //         $result['CreatedDate'],
  //         $result['Amount'],
  //         $result['CC_Type__c'],
  //         'Online/Recurring (Where does this data come from?)',
  //         l('Print receipt', '#'),
  //       );
  //     }
  //     $current_year = date("Y");
  //     $output['year'] = array(
  //       '#title' => t('Select year'),
  //       '#type' => 'select',
  //       '#options' => array($current_year, $current_year-1, $current_year-2,$current_year-3 ),
  //     );
  //     $output['annual-tax-receipt'] = array(
  //       '#type' => 'markup',
  //       '#markup' => l('Annual Tax Reciept', '#'),
  //     );
  //     $output['table'] = array(
  //       '#theme' => 'table',
  //       '#header' => array(t('Date'), t('Amount'), t('Payment Method'), t('type'), ''),
  //       '#rows' => $rows,
  //     );
  //   }
  // }
  return $output;
}

function salesforce_donation_history_get_available_years() {

}

function salesforce_donation_history_get_by_year($year) {

}

/**
 * Get the SF account id for a given user.
 */
function salesforce_donation_history_user_account_id($uid) {
  // Sync map lookup requires this format.
  $record = array(
    'module' => 'user',
    'delta' => 'user',
    'drupal_id' => $uid,
    'object_type' => 'Account',
  );

  $map = salesforce_sync_load_map($record);

  // If the user has been exported, return it's account id.
  if (!empty($map)) {
    return $map->sfid;
  }

  return FALSE;
}

/**
 * Gets the active Salesforce connection object.
 * TODO: There is probably a standard wrapper function for this
 * somewhere.
 */
function salesforce_donation_history_get_salesforce() {
  $sfapi = salesforce_get_api();

  if (!is_object($sfapi) || !$sfapi->isAuthorized()) {
    // Throw error, log and exit gracefully.
    return FALSE;
  }

  return $sfapi;
}

function createQueryResultTable($records, $rowNum) {
  dpm($records);
  $table = "<table id='query_results'>\n";
  // Call shared recusive function for header printing.
  $table .= "<tr><th>&nbsp;</th><th>";
  if ($records[0] instanceof SObject) {
    $table .= implode("</th><th>", getQueryResultHeaders($records[0]));
  } else {
    $table .= implode("</th><th>", getQueryResultHeaders(new SObject($records[0])));
  }
  $table .= "</th></tr>\n";
  // Print the remaining rows in the body.
  foreach ($records as $record) {
    // Call shared recusive function for row printing.
      $table .= "<tr><td>" . $rowNum++ . "</td><td>";
    if ($record instanceof SObject) {
      $row = getQueryResultRow($record);
    } else {
      $row = getQueryResultRow(new SObject($record));
    }
    for ($i = 0; $i < count($row); $i++) {
      if ($row[$i] instanceof QueryResult && !is_array($row[$i])) $row[$i] = array($row[$i]);
      if (isset($row[$i][0]) && $row[$i][0] instanceof QueryResult) {
        foreach ($row[$i] as $qr) {
          $table .= createQueryResultTable($qr->records, 1);
          if ($qr != end($row[$i])) $table .= "</td><td>";
        }
      }
      else {
        $table .= $row[$i];
      }
      if ($i + 1 != count($row)) {
        $table .= "</td><td>";
      }
    }
    $table .= "</td></tr>\n";
  }
  $table .= "</table>";
  return $table;
}

function getQueryResultHeaders($sobject, $tail="") {
  if (!isset($headerBufferArray)) {
    $headerBufferArray = array();
  }
  if (isset($sobject->Id) && !isset($sobject->fields->Id)) {
    $headerBufferArray[] = $tail . "Id";
  }
  if (isset($sobject->fields)) {
    foreach ($sobject->fields as $fieldname => $fieldvalue) {
      if ($fieldvalue instanceof SObject) {
        $recurse = getQueryResultHeaders($fieldvalue, $tail . htmlspecialchars($fieldvalue->type,ENT_QUOTES) . ".");
        $headerBufferArray = array_merge($headerBufferArray, $recurse);
      }
      else {
        $headerBufferArray[] = $tail . htmlspecialchars($fieldname,ENT_QUOTES);
      }
    }
  }
  if (isset($sobject->queryResult)) {
    if (!is_array($sobject->queryResult)) $sobject->queryResult = array($sobject->queryResult);
    foreach ($sobject->queryResult as $qr) {
      $headerBufferArray[] = $qr->records[0]->type;
    }
  }
  return $headerBufferArray;
}

function getQueryResultRow($sobject, $escapeHtmlChars=true) {
  if (!isset($rowBuffer)) {
    $rowBuffer = array();
  }
  if (isset($sobject->Id) && !isset($sobject->fields->Id)) {
    $rowBuffer[] = $sobject->Id;
  }
  if (isset($sobject->fields)) {
    foreach ($sobject->fields as $datum) {
      if ($datum instanceof SObject) {
        $rowBuffer = array_merge($rowBuffer, getQueryResultRow($datum,$escapeHtmlChars));
      } else {
        $rowBuffer[] = ($escapeHtmlChars ? htmlspecialchars($datum,ENT_QUOTES) : $datum);
      }
    }
  }
  if (isset($sobject->queryResult)) {
      $rowBuffer[] = $sobject->queryResult;
  }
  return $rowBuffer;
}

