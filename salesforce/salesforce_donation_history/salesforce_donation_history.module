<?php

/**
 * @file
 * Query and render donor tax records from Salesforce.
 */

/**
 * Default select SOQL query
 */
define('DONATION_HISTORY_DEFAULT_SOQL', "SELECT AccountId, Amount, CC_Last_4__c, CC_Type__c FROM Opportunity WHERE AccountId = ':accountId'");

/**
 * Implements hook_menu().
 */
function salesforce_donation_history_menu() {
  $items = array();

  $items['admin/config/salesforce/salesforce_donation_history'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_donation_history_admin'),
    'access arguments' => array('administer salesforce_donation_history settings'),
    'title' => 'Salesforce Donation History',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_donation_history.admin.inc',
    'description' => 'Manage Salesforce Donation History settings.',
  );

  // TODO: Implement a custom permission handler
  // to ensure the user has a salesforce account id.
  $items['user/%user/tax-receipts'] = array(
    'title' => 'Donation tax receipts',
    'page callback' => 'salesforce_donation_history_summary',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/tax-receipts/%year'] = array(
    'title' => 'Donation tax receipts for year X',
    'page callback' => 'salesforce_donation_history_by_year',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  // @TODO menu item for individual tax receipts.

  return $items;
}

/**
 * Gets all opportunities for a user.
 *
 * @param $sfid
 *   SF Account ID.
 *
 * @return array
 *   An array of opportunity data that was specified in the SOQL query.
 */
function salesforce_donation_history_get_opportunities($sfid) {
  $opportunities = &drupal_static(__FUNCTION__);
  if (!isset($opportunities)) {
    if ($cache = cache_get($sfid, 'cache_salesforce_donation_history')) {
      $opportunities = $cache->data;
    }
    else {
      $soql = strtr(variable_get('salesforce_donation_history_query', DONATION_HISTORY_DEFAULT_SOQL), array(':accountId'=> $sfid));
      $soql = rawurlencode($soql);
      $sfapi = salesforce_get_api();
      if ($sfapi->isAuthorized()) {
        // The query() method wants a SOQL object.
        // Since we already have the string, call the API directly.
        $results = $sfapi->apiCall('query?q=' . $soql);
      }
      if (!isset($results['errorCode'])) {
        $opportunities = $results['records'];
        cache_set($sfid, $opportunities, 'cache_salesforce_donation_history');
      }
      else {
        watchdog('Salesforce Donation History', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }
  }
  return $opportunities;
}

/**
 * Generates a list of tax receipt years for the current user.
 */
function salesforce_donation_history_summary($user) {
  $sfid = salesforce_donation_history_user_account_id($user->uid);
  if ($sfid) {
    $results = salesforce_donation_history_get_opportunities($sfid);
    // In the real world we would produce a data table with this info.
    // dsm($results);
    return t('Hello, World! ' . $sfid);
  }
  return 'So sad :-(';
}

function salesforce_donation_history_get_available_years() {

}

function salesforce_donation_history_get_by_year($year) {

}

/**
 * Get the SF account id for a given user.
 */
function salesforce_donation_history_user_account_id($uid) {
  // Sync map lookup requires this format.
  $record = array(
    'module' => 'user',
    'delta' => 'user',
    'drupal_id' => $uid,
    'object_type' => 'Account',
  );

  $map = salesforce_sync_load_map($record);

  // If the user has been exported, return it's account id.
  if (!empty($map)) {
    return $map->sfid;
  }

  return FALSE;
}

/**
 * Gets the active Salesforce connection object.
 * TODO: There is probably a standard wrapper function for this
 * somewhere.
 */
function salesforce_donation_history_get_salesforce() {
  $sfapi = salesforce_get_api();

  if (!is_object($sfapi) || !$sfapi->isAuthorized()) {
    // Throw error, log and exit gracefully.
    return FALSE;
  }

  return $sfapi;
}
