<?php

/**
 * @file
 * Provides batch processing functionality for Salesforce integration.
 */

/**
 * Implements hook_menu().
 */
function salesforce_queue_menu() {
  $items['admin/structure/salesforce/queue'] = array(
    'title' => 'Salesforce Queue Settings',
    'description' => 'Configuration settings for the Salesforce queue.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_queue_admin_settings'),
    'access arguments' => array('configure salesforce queue'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_queue.admin.inc',
  );

  $items['admin/structure/salesforce/object-verify'] = array(
    'title' => 'Salesforce Queue Object Verify',
    'description' => 'Utility for verifying the format of Salesforce objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_queue_object_verification_form'),
    'access arguments' => array('configure salesforce queue'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_queue.utility.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_queue_permission() {
  return array(
    'configure salesforce queue' => array(
      'description' => t('Configure settings for the Salesforce queue.'),
      'title' => t('Configure Salesforce queue'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * @name salesforce_queue_cron  Cron controls
 * @{
 */

/**
 * Implements hook_cron().
 */
function salesforce_queue_cron() {
  //salesforce_queue_prune_logs();
  // Bail on normal cron run if standalone cron is enabled.
  if (_salesforce_queue_standalone_cron_enabled()) {
    // If standalone cron is enabled, do nothing.
    return 0;
  }
  else {
    // Process the queue normally.
    watchdog('salesforce_queue', t('Standard cron run.'));
    if (lock_acquire('salesforce_queue_standalone_cron')) {
      salesforce_queue_process();
      lock_release('salesforce_queue_standalone_cron');
    }
    else {
      watchdog('salesforce_queue', 'Attempting to process salesforce queue while it is already running.', array(), WATCHDOG_WARNING);
    }
  }
}

/**
 * Menu callback for the standalone cron.
 */
function salesforce_queue_standalone_cron() {
  if (_salesforce_queue_standalone_cron_enabled()) {
    // Process the queue.
    watchdog('salesforce_queue_cron', t('Standalone cron run.'));

    // Acquire an excluse lock on the process.
    if (lock_acquire('salesforce_queue_standalone_cron')) {
      salesforce_queue_process();
      watchdog('salesforce_queue', 'Salesforce queue cron run completed.', array(), WATCHDOG_NOTICE);
      lock_release('salesforce_queue_standalone_cron');
    }
    else {
      watchdog('salesforce_queue', 'Attempting to process salesforce queue while it is already running.', array(), WATCHDOG_WARNING);
    }
  }
}

/**
 * Indicates whether or not queue standalone cron is enabled.
 */
function _salesforce_queue_standalone_cron_enabled() {
  return variable_get('salesforce_queue_standalone_cron_enabled', FALSE);
}

/**
 * @}
 */


/**
 * Processes the data in the Salesforce queue.
 */
function salesforce_queue_process() {
  watchdog('salesforce_queue', 'The queue is being processed.');
}


/**
 * @defgroup salesforce_queue_crud CRUD wrappers for SalesforceQueue class
 * @{
 */

/**
 * Wrapper to insert an item into the Salesforce queue
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce type that is being exported.
 * @param $operation
 *   The CRUD operation being run in Salesforce (UPSERT, CREATE, UPDATE, DELETE).
 * @param $sobject
 *   The Salesforce object that is being queued.
 * @param $dedupe_field
 *   The Salesforce field to dedupe on during UPSERT operations.
 *
 * @return bool
 *   TRUE if the item was created successfully, FALSE if the item could not be
 *   created
 */
function salesforce_queue_insert($drupal_id, $module, $delta, $salesforce_type, $operation, &$sobject, $dedupe_field = NULL) {
  $item = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
    'operation' => $operation,
    'dedupe_field' => $dedupe_field,
    'sobject' => $sobject,
  );
  $queue = SalesforceQueue::get();
  return $queue->createItem($item);
}

/**
 * Wrapper to fetch a specific item from the queue
 *
 * Do NOT use this to process an item. 'Get' does not lease queue items and
 * merely provides you the information about the queue item.  In order to
 * retreive an item for processing, you must 'claim' it.
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be
 *   entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article
 *   for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return object
 *   The queue item, otherwise FALSE if the item is not in the queue
 */
function salesforce_queue_get($drupal_id, $module, $delta, $salesforce_type) {
  $data = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  return $queue->getItem($drupal_id, $module, $delta, $salesforce_type);
}

/**
 * Wrapper to determine if an item is already in the queue
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return bool
 *   TRUE if the item is in the queue, FALSE if the item is not
 */
function salesforce_queue_in_queue($drupal_id, $module, $delta, $salesforce_type) {
  $data = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  return $queue->createItem($data);
}

/**
 * Wrapper to remove an item from the queue.
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return bool
 *   TRUE if the item was removed from the queue, FALSE if the item was not
 */
function salesforce_queue_dequeue($drupal_id, $module, $delta, $salesforce_type) {
  $item = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  $item = (object)$item;
  return $queue->deleteItem($item);
}

/**
 * @} salesforce_queue_crud
 */

/**
 * Invokes hook_salesforce_queue_info().
 *
 * This hook allows other modules to inform the queue system about
 * the data they need to integrate. For now the sole purpose of this
 * hook is to allow other modules to tell the proessor about the item
 * types they are integrating. The entity integration would return an
 * array of all types that have been mapped.
 *
 */
function salesforce_queue_info() {
  // Get information from other modules.
  return module_invoke_all('salesforce_queue_info');
}
