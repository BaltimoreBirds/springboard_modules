<?php

/**
 * @file
 * Provides batch processing functionality for Salesforce integration.
 */

/**
 * @defgroup salesforce_queue_processor_statuses Statuses of queue processor
 * @{
 * The processor will return one of the following statuses once it completes its
 * processing of a batch of queue items.
 */

// The process completed as expected
define('SALESFORCE_QUEUE_PROCESS_COMPLETE', 10);

// No items were retreived from the queue
define('SALESFORCE_QUEUE_PROCESS_NO_ITEMS', 1);

// The process has never been initiated
define('SALESFORCE_QUEUE_PROCESS_NOT_STARTED', 0);

// Items cannot be claimed because the queue is leased
define('SALESFORCE_QUEUE_PROCESS_FAIL_QUEUE_LEASED', -1);

// The lease expired before all batches could be completed
define('SALESFORCE_QUEUE_PROCESS_FAIL_LEASE_EXPIRED', -2);

// Although items were claimed from the queue, none of them passed validation
define('SALESFORCE_QUEUE_PROCESS_FAIL_NO_VALID_ITEMS', -3);

// Cannnot connect to Salesforce
define('SALESFORCE_QUEUE_PROCESS_FAIL_CONNECT', -9);

// Items cannot be claimed for an unknown reason
define('SALESFORCE_QUEUE_PROCESS_FAIL_CLAIM_ITEMS', -10);

/**
 * @}
 */


/**
 * @defgroup salesforce_queue_process_item_fail_responses Item fail responses
 * @{
 * When a queue item fails, it will give one of the following reasons for its
 * failure.
 */

// The item could not reach processing because the lease on the queue expired
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_LEASE_EXPIRED', 0);

// Item failed when it was attempted to be created in Salesforce
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_CREATE', -1);

// Item failed when it attempted an upsert in Salesforce
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_UPSERT', -2);

// Item failed when it attempted an update in Salesforce
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_UPDATE', -3);

// Item failed when it was attempted to be deleted in Salesforce
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_DELETE', -4);

// Item failed validation. It does not have the proper properties nessisary to
// be sent to Salesforce for the operation associated with it
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_NOT_VALID', -5);

// The entire batch failed to be processed due to some error with Salesforce
define('SALESFORCE_QUEUE_PROCESS_ITEM_FAIL_BATCH', -10);

/**
 * @}
 */


/**
 * Implements hook_form_FORM_ID_alter().
 */
function salesforce_queue_form_salesforce_mapping_form_alter(&$form, &$form_state) {
  // Remove overly restrictive validation routine. Ideally the current monolithic
  // validation handler be broken down into 3 separate validation routines:
  // - Check for existence of duplicate map
  // - Field type validation (this is still too strict IMHO)
  // - Dedupe field (SOAP API has different limitations)
  // Then we'd only need to alter the dedupe field validation.
  unset($form['#validate']);
}

/**
 * Implements hook_menu().
 */
function salesforce_queue_menu() {
  $items['admin/structure/salesforce/queue'] = array(
    'title' => 'Salesforce Queue Settings',
    'description' => 'Configuration settings for the Salesforce queue.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_queue_admin_settings'),
    'access arguments' => array('configure salesforce queue'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_queue.admin.inc',
  );

  $items['admin/structure/salesforce/object-verify'] = array(
    'title' => 'Salesforce Queue Object Verify',
    'description' => 'Utility for verifying the format of Salesforce objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_queue_object_verification_form'),
    'access arguments' => array('configure salesforce queue'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'salesforce_queue.utility.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_queue_permission() {
  return array(
    'configure salesforce queue' => array(
      'description' => t('Configure settings for the Salesforce queue.'),
      'title' => t('Configure Salesforce queue'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_salesforce_queue_process_fail_item().
 */
function salesforce_queue_salesforce_queue_process_fail_item($item, $reason, $result, $queue) {
  // Mark items for retry if they have not exceeded the maximum
  $max_retries = variable_get('salesforce_queue_max_retries', 5);
  if ($max_retries > $item->retries) {
    $item->retries++;
    $item->queue = 'retry';
  }
  // When the retry maximum is exceeded, put the item in the fail queue
  else {
    $item->queue = 'fail';
  }
  $item->sobject = json_encode($item->sobject);
  drupal_write_record('salesforce_queue', $item, array('item_id'));
}


/**
 * @name salesforce_queue_process  Group for behaviors processing the queue
 * @{
 */

/**
 * Processes the data in the Salesforce queue.
 */
function salesforce_queue_process_queue($queue_name = 'all') {
  $queue = SalesforceQueue::get($queue_name);
  $processor = SalesforceQueueProcessor::get($queue);
  return $processor->process();
}

/**
 * Implements hook_cron().
 */
function salesforce_queue_cron() {
  salesforce_queue_process_queue();
}

/**
 * @} salesforce_queue_process
 */


/**
 * @defgroup salesforce_queue_crud CRUD wrappers for SalesforceQueue class
 * @{
 */

/**
 * Wrapper to insert an item into the Salesforce queue
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce type that is being exported.
 * @param $operation
 *   The CRUD operation being run in Salesforce (UPSERT, CREATE, UPDATE, DELETE).
 * @param $sobject
 *   The Salesforce object that is being queued.
 * @param $dedupe_field
 *   The Salesforce field to dedupe on during UPSERT operations.
 *
 * @return bool
 *   TRUE if the item was created successfully, FALSE if the item could not be
 *   created
 */
function salesforce_queue_insert($drupal_id, $module, $delta, $salesforce_type, $operation, &$sobject, $dedupe_field = NULL) {
  $item = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
    'operation' => $operation,
    'dedupe_field' => $dedupe_field,
    'sobject' => $sobject,
  );
  $queue = SalesforceQueue::get();
  return $queue->createItem($item);
}

/**
 * Wrapper to fetch a specific item from the queue
 *
 * Do NOT use this to process an item. 'Get' does not lease queue items and
 * merely provides you the information about the queue item.  In order to
 * retreive an item for processing, you must 'claim' it.
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be
 *   entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article
 *   for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return object
 *   The queue item, otherwise FALSE if the item is not in the queue
 */
function salesforce_queue_get($drupal_id, $module, $delta, $salesforce_type) {
  $data = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  return $queue->getItem($drupal_id, $module, $delta, $salesforce_type);
}

/**
 * Wrapper to determine if an item is already in the queue
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return bool
 *   TRUE if the item is in the queue, FALSE if the item is not
 */
function salesforce_queue_in_queue($drupal_id, $module, $delta, $salesforce_type) {
  $data = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  return $queue->itemInQueue($data);
}

/**
 * Wrapper to remove an item from the queue.
 *
 * @param $drupal_id
 *   The id of the Drupal object. This could be a nid, uid, sid, etc.
 * @param $module
 *   The module name that implements the delta. For node types this would be entity.
 * @param $delta
 *   The module sub-type. For node types this would be node type name, article for instance.
 * @param $salesforce_type
 *   The name of the Salesforce object type.
 *
 * @return bool
 *   TRUE if the item was removed from the queue, FALSE if the item was not
 */
function salesforce_queue_dequeue($drupal_id, $module, $delta, $salesforce_type) {
  $item = array(
    'drupal_id' => $drupal_id,
    'module' => $module,
    'delta' => $delta,
    'salesforce_type' => $salesforce_type,
  );
  $queue = SalesforceQueue::get();
  $item = (object)$item;
  return $queue->deleteItem($item);
}

/**
 * @} salesforce_queue_crud
 */

/**
 * Invokes hook_salesforce_queue_info().
 *
 * This hook allows other modules to inform the queue system about
 * the data they need to integrate. For now the sole purpose of this
 * hook is to allow other modules to tell the proessor about the item
 * types they are integrating. The entity integration would return an
 * array of all types that have been mapped.
 *
 */
function salesforce_queue_info() {
  // Get information from other modules.
  return module_invoke_all('salesforce_queue_info');
}
