<?php
include_once(dirname(__FILE__) . '/salesforce_queue.test');

/**
 * @file
 * Unit tests
 */

/**
 * @file
 * Salesforce queue module unit tests.
 */
class SalesforceQueueUnitTestCase extends SalesforceQueueTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Salesforce queue unit tests'),
      'description' => t('Unit tests for the Salesforce queue module.'),
      'group' => t('Salesforce Queue'),
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp();

    // Set up example contact information
    $this->example_contact = array(
      'FirstName' => 'John',
      'LastName' => 'Doe',
      'Email' => 'john.doe@example.com',
    );
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Test for salesforce_queue_insert()
   */
  public function testInsert() {
    $result = salesforce_queue_insert('1', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $this->assertEqual(SAVED_NEW, $result, 'New queue item created new record.');

    // Do the same, but ensure it was an update
    $result2 = salesforce_queue_insert('1', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $this->assertEqual(SAVED_UPDATED, $result2, 'Duplicate queue item updated previous record.');
  }

  /**
   * Test for salesforce_queue_get()
   */
  public function testGet() {
    salesforce_queue_insert('1', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $item = salesforce_queue_get('1', 'user', 'user', 'Contact');
    $this->assertEqual('John', $item->sobject->FirstName, 'Fetched item from queue matches inserted item.');
  }

  /**
   * Test for salesforce_queue_dequeue()
   */
  public function testDequeue() {
    // Add an item in the queue and ensure it is there
    salesforce_queue_insert('1', 'user', 'user', 'Contact', 'create', $this->example_contact);
    $this->assertTrue(salesforce_queue_enqueue('1', 'user', 'user', 'Contact'), 'New queue item created.');

    // Delete the item and ensure it is not there
    salesforce_queue_dequeue('1', 'user', 'user', 'Contact');
    $this->assertTrue(salesforce_queue_enqueue('1', 'user', 'user', 'Contact'), 'Deleted queue item is gone.');
  }
}
