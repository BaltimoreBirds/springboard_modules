<?php
include_once(dirname(__FILE__) . '/salesforce_queue.test');

/**
 * @file
 * Unit tests
 */

/**
 * @file
 * Salesforce queue module unit tests.
 */
class SalesforceQueueUnitTestCase extends SalesforceQueueTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Salesforce queue unit tests'),
      'description' => t('Unit tests for the Salesforce queue module.'),
      'group' => t('Salesforce Queue'),
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array()) {
    parent::setUp($modules);

    // Set up example contact information
    $this->example_contact = array(
      'FirstName' => 'John',
      'LastName' => 'Doe',
      'Email' => 'john.doe@example.com',
    );

    // Set up the Salesforce connection
    $this->salesforceConnect();
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Test for hook_salesforce_queue_process_fail_item()
   */
  public function testProcessFailItem() {
    // Queue up an Opportunity which will automatically fail
    $queue = SalesforceQueue::get();
    $this->createQueueItems($queue, 1, array('CREATE'), array('Account', 'Contact'));
    $item = $queue->claimItem();
    $queue->releaseItem($item);
    salesforce_queue_process_queue();

    // Verify the item has been marked to retry
    $record = $queue->getItem($item->drupal_id, $item->module, $item->delta, $item->salesforce_type);
    $this->assertEqual('retry', $record->queue, 'Failed item placed into the retry queue.');
    $this->assertEqual(1, $record->retries, 'Failed item marked as having one retry.');

    // Do this until we hit maximum retries and make sure it is placed in the
    // fail queue
    $max_retries = variable_get('salesforce_queue_max_retries', 5);
    while ($max_retries > $record->retries) {
      salesforce_queue_process_queue();
      $record = $queue->getItem($item->drupal_id, $item->module, $item->delta, $item->salesforce_type);
    }
    salesforce_queue_process_queue();
    $record = $queue->getItem($item->drupal_id, $item->module, $item->delta, $item->salesforce_type);
    $this->assertEqual('fail', $record->queue, 'After maximum retries, item placed into fail queue');
  }

  /**
   * Test for salesforce_queue_cron()
   */
  public function testCron() {
    // Add item to queue and ensure it is there
    $queue = SalesforceQueue::get();
    $this->createQueueItems($queue, 1, array('CREATE'), array('Opportunity'));
    $items = $queue->claimBatch();
    $queue->releaseBatch($items[0]->lease_key);
    $this->assertFalse(empty($items), 'Queued up an item to test with.');

    // Kick off cron, then verify the item is not there
    $this->cronRun();
    $items = $queue->claimBatch();
    $this->assertTrue(empty($items), 'Cron processed queued item.');
  }

  /**
   * Test for salesforce_queue_insert()
   */
  public function testInsert() {
    $result = salesforce_queue_insert('1', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $this->assertEqual(SAVED_NEW, $result, 'New queue item created new record.');

    // Do the same, but ensure it was an update
    $result2 = salesforce_queue_insert('1', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $this->assertEqual(SAVED_UPDATED, $result2, 'Duplicate queue item updated previous record.');
  }

  /**
   * Test for salesforce_queue_get()
   */
  public function testGet() {
    salesforce_queue_insert('2', 'user', 'user', 'Contact', 'upsert', $this->example_contact, 'Email');
    $item = salesforce_queue_get('2', 'user', 'user', 'Contact');
    $this->assertEqual('John', $item->sobject->FirstName, 'Fetched item from queue matches inserted item.');
  }

  /**
   * Test for salesforce_queue_dequeue()
   */
  public function testDequeue() {
    // Add an item in the queue and ensure it is there
    salesforce_queue_insert('3', 'user', 'user', 'Contact', 'create', $this->example_contact);
    $this->assertTrue(salesforce_queue_in_queue('3', 'user', 'user', 'Contact'), 'New queue item created.');

    // Delete the item and ensure it is not there
    salesforce_queue_dequeue('3', 'user', 'user', 'Contact');
    $this->assertFalse(salesforce_queue_in_queue('3', 'user', 'user', 'Contact'), 'Deleted queue item is gone.');
  }
}
