<?php

/**
 * @file
 * Simpletests for salesforce_queue
 */

/**
 * Tests basic set up for queueing data for Salesforce and sending it
 */
class SalesforceQueueTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'General API for Salesforce Queue Tests',
      'description' => 'Ensure that the salesforce_queue module functions properly.',
      'group' => 'Salesforce Queue',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp(
      'salesforce_queue'
    );

    // Create an admin user
    $permissions = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'administer users',
    );
    $this->admin_user = $this->drupalCreateUser($permissions);
    // Don't forget, need to pass --uri in drush command in order for logging
    // in to work
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    user_cancel(array(), $this->admin_user->uid, 'user_cancel_delete');
    parent::tearDown();
  }

  /**
   * Grabs the Salesforce connection information from the live db and authenticates
   *
   * @return Object
   *   Salesforce Object
   */
  public function salesforceConnect() {
    // Steal the Salesforce configuration from the live database
    global $db_prefix;
    $table = empty($db_prefix) ? 'variable' : $db_prefix .'_variable';
    $sql = "SELECT * FROM $table v WHERE v.name LIKE 'salesforce_%'";
    $result = db_query($sql);
    foreach ($result as $record) {
      variable_set($record->name, unserialize($record->value));
    }

    // Test the connection
    $salesforce = salesforce_get_api();
    $this->assertTrue($salesforce->isAuthorized(), 'Connected to Salesforce');
    return $salesforce;
  }

  /**
   * Creates a random bunch of items to send to the given queue
   *
   * @param SalesforceQueue $queue
   *   Queue to send items to
   * @param int $num
   *   Number of items to create
   */
  public function createQueueItems(SalesforceQueue $queue, $num = 5) {
    $i = 0;
    while ($i < $num) {
      $i++;
      $sObject = new stdClass;
      $sObject->type = $this->randomName();
      $sObject->record = $this->randomName();
      $sObject->fields = array(
        $this->randomName() => $this->randomName(),
        $this->randomName() => $this->randomName(),
        $this->randomName() => $this->randomName(),
      );
      $fields = array_keys($sObject->fields);
      $fields_rand = array_rand($fields);
      $ops = array('UPSERT', 'CREATE', 'UPDATE', 'DELETE');
      $ops_rand = array_rand($ops);
      $data = array(
        'drupal_id' => rand(1, $num*100),
        'module' => $this->randomName(),
        'delta' => $this->randomName() .':'. rand(1, $num*100),
        'salesforce_type' => $sObject->type,
        'operation' => $ops[$ops_rand],
        'dedupe_field' => $fields[$fields_rand],
        'sobject' => $sObject,
      );
      $result = $queue->createItem($data);
      $this->assertTrue($result, 'Created a queue item.');
    }
  }
}
