<?php

/**
 * @file
 * Simpletests for salesforce_queue
 */

module_load_include('test', 'salesforce', 'tests/salesforce');

/**
 * Tests basic set up for queueing data for Salesforce and sending it.
 */
class SalesforceQueueTestCase extends SalesforceTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'General API for Salesforce Queue Tests',
      'description' => 'Ensure that the salesforce_queue module functions properly.',
      'group' => 'Salesforce Queue',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array(), $permissions = array()) {
    $modules = $modules + array(
      'entity',
      'libraries',
      'salesforce_soap',
      'salesforce_sync',
      'salesforce_queue',
    );
    $permissions = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'administer users',
      'administer salesforce sync',
      'administer salesforce queue',
    );
    parent::setUp($modules, $permissions);

    // Provide a list of sync rules.
    $this->sync_rules = array(
      SALESFORCE_SYNC_RULE_ALWAYS,
      SALESFORCE_SYNC_RULE_BLANK,
      SALESFORCE_SYNC_RULE_APPEND,
      SALESFORCE_SYNC_RULE_NEVER,
    );
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Creates a random bunch of items to send to the given queue.
   *
   * @param SalesforceQueue $queue
   *   Queue to send items to
   * @param int $num
   *   Number of items to create
   */
  public function createQueueItems(SalesforceQueue $queue, $num = 5, $ops = array(), $exempt_objects = array()) {
    // Define objects.
    $objects = array(
      'Account' => array(
        'type' => 'Account',
        'records' => array(),
        'fields' => array(
          'Name' => FALSE,
          'Type' => FALSE,
          'AccountNumber' => FALSE,
        ),
      ),
      'Contact' => array(
        'type' => 'Contact',
        'records' => array(),
        'fields' => array(
          'FirstName' => FALSE,
          'LastName' => FALSE,
          'Email' => TRUE,
        ),
      ),
      'Opportunity' => array(
        'type' => 'Opportunity',
        'records' => array(
          'Donation',
          'Grant',
          'Membership',
        ),
        'fields' => array(
          'Name' => TRUE,
          'Amount' => FALSE,
          'AccountId' => FALSE,
          'StageName' => FALSE,
          'CloseDate' => FALSE,
        ),
      ),
    );
    foreach ($exempt_objects as $exempt_object) {
      unset($objects[$exempt_object]);
    }

    // Define types of operations.
    if (empty($ops)) {
      $ops = array(
        'UPSERT',
        'CREATE',
        'UPDATE',
        'DELETE',
      );
    }

    // If UPSERT is the only operation, then remove all objects that do not have
    // a dedupe field.
    if (count($ops) == 1 && in_array('UPSERT', $ops) && isset($objects['Account'])) {
      foreach ($objects as $object => $info) {
        $remove = TRUE;
        foreach ($info['fields'] as $dedupe_status) {
          $remove = $dedupe_status ? FALSE : $remove;
        }
        if ($remove) {
          unset($objects[$object]);
        }
      }
    }

    $i = 0;
    $items = array();
    while ($i < $num) {
      $i++;

      // Set up the data array.
      $ops_rand = array_rand($ops);
      $data = array(
        'drupal_id' => rand(1, $num * 100),
        'module' => $this->randomName(),
        'delta' => $this->randomName() . ':' . rand(1, $num * 100),
        'operation' => $ops[$ops_rand],
        'dedupe_field' => NULL,
      );

      // Create the Salesforce object.
      $object_rand = array_rand($objects);
      $record_rand = empty($objects[$object_rand]['records']) ? NULL : array_rand($objects[$object_rand]['records']);
      $sobject = new stdClass();
      $sobject->type = $objects[$object_rand]['type'];
      $sobject->record = is_null($record_rand) ? NULL : $objects[$object_rand]['records'][$record_rand];
      $sobject->fields = array();
      foreach ($objects[$object_rand]['fields'] as $field => $dedupe) {
        if ($field == 'Email') {
          $sobject->fields[$field] = strtolower($this->randomName()) . '@' . strtolower($this->randomName()) . '.com';
        }
        elseif ($field == 'Amount') {
          $sobject->fields[$field] = rand(1, 10000);
        }
        elseif ($field == 'CloseDate') {
          $sobject->fields[$field] = date('c', REQUEST_TIME);
        }
        else {
          $sobject->fields[$field] = $this->randomName();
        }

        // If this field can be used for dedupe, give it a 50% chance of it
        // being set.  Unless, of course, the operation is UPSERT, then it needs
        // to be set.
        if ($dedupe && (rand(0, 1) || $data['operation'] == 'UPSERT')) {
          $data['dedupe_field'] = $field;
        }
      }

      // If the operation is UPSERT, and there is no dedupe field, change the
      // operation to CREATE.
      if ($data['operation'] == 'UPSERT' && empty($data['dedupe_field'])) {
        $data['operation'] = 'CREATE';
      }

      // If the operation is UPDATE or DELETE add in a fake Id field.
      if ($data['operation'] == 'UPDATE' || $data['operation'] == 'DELETE') {
        $sobject->Id = $this->randomName();
      }

      // If the operation is UPDATE or UPSERT add in fake sync rules for a
      // random quantity of the number of fields.
      if ($data['operation'] == 'UPDATE' || $data['operation'] == 'UPSERT') {
        $data['sync_rules'] = array();
        $fields = array_keys($sobject->fields);
        shuffle($fields);
        $field_count = count($sobject->fields);
        $rand_count = rand(0, $field_count);
        while ($rand_count > 0) {
          $field = array_shift($fields);
          $sync_rule_rand = array_rand($this->sync_rules);
          $sync_rule = $this->sync_rules[$sync_rule_rand];
          // Append can cause problems for certain fields, so fall back to
          // always.
          $special_fields = array('Email', 'Amount', 'CloseDate');
          if ($sync_rule == SALESFORCE_SYNC_RULE_APPEND && in_array($field, $special_fields)) {
            $sync_rule = SALESFORCE_SYNC_RULE_ALWAYS;
          }
          $data['sync_rules'][$field] = $this->sync_rules[$sync_rule_rand];
          $rand_count--;
        }
      }

      $data['object_type'] = $sobject->type;
      $data['sobject'] = $sobject;

      // Create the queue item.
      $items[] = $data;
      $result = $queue->createItem($data);
      $this->assertTrue($result, 'Created a queue item.');
    }
    return $items;
  }

  /**
   * Helper to remove the sent set of items from Salesforce.
   *
   * Useful if you do not have direct access to the SalesforceSync object.
   *
   * @param array $queue_items
   *   Array of items that would be used to be send to the queue.  It is the
   *   output of createQueueItems().
   */
  public function deleteItemsFromSalesforce($queue_items) {
    $conditions = array();
    foreach ($queue_items as $queue_item) {
      $object_type = $queue_item['object_type'];
      $field = ($object_type == 'Contact') ? 'LastName' : 'Name';
      $conditions[$object_type]['field'] = $field;
      $conditions[$object_type]['op'] = 'IN';
      $field_value = $queue_item['sobject']->fields[$field];
      $conditions[$object_type]['value'][$field_value] = $field_value;
    }
    $batch = array(
      'operation' => 'DELETE',
      'items' => array(),
      'ids' => array(),
    );
    $sync = new SalesforceSync();
    foreach ($conditions as $object_type => $condition) {
      $records = $sync->fetchRecords($object_type, array('Id'), array($condition));
      foreach ($records as $record) {
        $record->fields = array();
        $item = new stdClass();
        $item->object_type = $record->type;
        $item->operation = 'DELETE';
        $item->sobject = $record;
        $batch['items'][] = $item;
        $batch['ids'][] = $record->Id;
      }
    }
    $results = $sync->sendBatch($batch);
    if (is_array($results)) {
      foreach ($results as $result) {
        $this->assertTrue($result->success, 'Deleting test item from Salesforce successful.');
      }
    }
    else {
      $this->fail('Could not send batch to delete test items from Salesforce.');
    }
  }
}
