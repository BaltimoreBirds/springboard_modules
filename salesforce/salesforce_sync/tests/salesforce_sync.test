<?php

/**
 * @file
 * Simpletests for salesforce_sync
 */

/**
 * Tests basic set up for syncing data between Salesforce and Drupal.
 */
class SalesforceSyncTestCase extends DrupalWebTestCase {

  /**
   * List of all operations.
   *
   * @var array
   */
  public $operations = array(
    'CREATE',
    'UPSERT',
    'UPDATE',
    'DELETE',
  );

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Salesforce Sync',
      'description' => 'Ensure that the salesforce_sync module functions properly.',
      'group' => 'Salesforce Sync',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp($modules = array()) {
    $modules = $modules + array(
      'libraries',
      'salesforce',
      'salesforce_soap',
      'salesforce_sync',
    );
    parent::setUp($modules);

    // Create an admin user.
    $permissions = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'administer users',
      'administer salesforce',
      'administer salesforce sync',
    );
    $this->admin_user = $this->drupalCreateUser($permissions);
    // Don't forget, need to pass --uri in drush command in order for logging
    // in to work.
    $this->drupalLogin($this->admin_user);

    // Provide a list of sync rules.
    $this->sync_rules = array(
      SALESFORCE_SYNC_RULE_ALWAYS,
      SALESFORCE_SYNC_RULE_BLANK,
      SALESFORCE_SYNC_RULE_APPEND,
      SALESFORCE_SYNC_RULE_NEVER,
    );
  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    user_cancel(array(), $this->admin_user->uid, 'user_cancel_delete');
    parent::tearDown();
  }

  /**
   * Grabs the Salesforce connection info from the live db and authenticates.
   *
   * @return Object
   *   Salesforce Object
   */
  public function salesforceConnect() {
    // Steal the Salesforce configuration from the live database.
    global $db_prefix;
    $table = empty($db_prefix) ? 'variable' : $db_prefix . '_variable';
    $sql = "SELECT * FROM $table v WHERE v.name LIKE 'salesforce_%'";
    $result = db_query($sql);
    foreach ($result as $record) {
      if (!strstr($record->name, 'salesforce_queue')) {
        variable_set($record->name, unserialize($record->value));
      }
    }

    // Test the connection.
    $salesforce = salesforce_get_api();
    $this->assertTrue($salesforce->isAuthorized(), 'Connected to Salesforce');

    // Make a call to Salesforce that will do nothing just so we can get an
    // access token into our session.  This is dumb, but I can't think of any
    // other way to get an access token.
    $salesforce->apiCall('');

    return $salesforce;
  }

  /**
   * Creates a random bunch of items.
   *
   * @param int $num
   *   Number of items to create
   * @param array $ops
   *   Operations to restrict to.  If empty, all operations will be used.
   * @param array $exempt_objects
   *   Object types to not include.  If empty, all object types will be used.
   */
  public function createItems($num = 5, $ops = array(), $exempt_objects = array()) {
    // Define objects.
    $objects = array(
      'Account' => array(
        'type' => 'Account',
        'records' => array(),
        'fields' => array(
          'Name' => FALSE,
          'Type' => FALSE,
          'AccountNumber' => FALSE,
        ),
      ),
      'Contact' => array(
        'type' => 'Contact',
        'records' => array(),
        'fields' => array(
          'FirstName' => FALSE,
          'LastName' => FALSE,
          'Email' => TRUE,
        ),
      ),
      'Opportunity' => array(
        'type' => 'Opportunity',
        'records' => array(
          'Donation',
          'Grant',
          'Membership',
        ),
        'fields' => array(
          'Name' => TRUE,
          'Amount' => FALSE,
          'AccountId' => FALSE,
          'StageName' => FALSE,
          'CloseDate' => FALSE,
        ),
      ),
    );
    foreach ($exempt_objects as $exempt_object) {
      unset($objects[$exempt_object]);
    }

    // Define types of operations.
    if (empty($ops)) {
      $ops = array(
        'UPSERT',
        'CREATE',
        'UPDATE',
        'DELETE',
      );
    }

    // If UPSERT is the only operation, then remove all objects that do not have
    // a dedupe field.
    if (count($ops) == 1 && in_array('UPSERT', $ops) && isset($objects['Account'])) {
      foreach ($objects as $object => $info) {
        $remove = TRUE;
        foreach ($info['fields'] as $dedupe_status) {
          $remove = $dedupe_status ? FALSE : $remove;
        }
        if ($remove) {
          unset($objects[$object]);
        }
      }
    }

    $i = 0;
    $items = array();
    while ($i < $num) {
      $i++;

      // Create base item.
      $ops_rand = array_rand($ops);
      $operation = $ops[$ops_rand];
      $object_rand = array_rand($objects);
      $object_type = $objects[$object_rand]['type'];
      $record_rand = empty($objects[$object_rand]['records']) ? NULL : array_rand($objects[$object_rand]['records']);
      $record_type = is_null($record_rand) ? NULL : $objects[$object_rand]['records'][$record_rand];
      $item = new SalesforceSyncItem($object_type, $operation);

      // Create the Salesforce object.
      $fields = array();
      foreach ($objects[$object_rand]['fields'] as $field => $can_dedupe) {
        if ($field == 'Email') {
          $fields[$field] = strtolower($this->randomName()) . '@' . strtolower($this->randomName()) . '.com';
        }
        elseif ($field == 'Amount') {
          $fields[$field] = rand(1, 10000);
        }
        elseif ($field == 'CloseDate') {
          $fields[$field] = date('c', REQUEST_TIME);
        }
        else {
          $fields[$field] = $this->randomName();
        }

        // If this field can be used for dedupe, give it a 50% chance of it
        // being set.  Unless, of course, the operation is UPSERT, then it needs
        // to be set.
        if ($can_dedupe && (rand(0, 1) || $operation == 'UPSERT')) {
          $item->dedupe_field = $field;
        }
      }
      $sobject = new SalesforceObject($fields, $object_type, $record_type);

      // If the operation is UPSERT, and there is no dedupe field, change the
      // operation to CREATE.
      if ($operation == 'UPSERT' && empty($item->dedupe_field)) {
        $item->operation = 'CREATE';
      }

      // If the operation is UPDATE or DELETE add in a fake Id field.
      if ($operation == 'UPDATE' || $operation == 'DELETE') {
        $sobject->Id = $this->randomName();
      }

      // If the operation is UPDATE or UPSERT add in fake sync rules for a
      // random quantity of the number of fields.
      if ($operation == 'UPDATE' || $operation == 'UPSERT') {
        $item->sync_rules = array();
        $fields = array_keys($sobject->fields);
        shuffle($fields);
        $field_count = count($sobject->fields);
        $rand_count = rand(0, $field_count);
        while ($rand_count > 0) {
          $field = array_shift($fields);
          $sync_rule_rand = array_rand($this->sync_rules);
          $sync_rule = $this->sync_rules[$sync_rule_rand];
          // Append can cause problems for certain fields, so fall back to
          // always.
          $special_fields = array('Email', 'Amount', 'CloseDate');
          if ($sync_rule == SALESFORCE_SYNC_RULE_APPEND && in_array($field, $special_fields)) {
            $sync_rule = SALESFORCE_SYNC_RULE_ALWAYS;
          }
          $item->sync_rules[$field] = $this->sync_rules[$sync_rule_rand];
          $rand_count--;
        }
      }

      $item->sobject = $sobject;
      $items[] = $item;
    }
    return $items;
  }

  /**
   * Helper to create batches from a list of items.
   */
  public function createBatches($items, $batch_prepared = FALSE) {
    $batches = array();
    foreach ($items as $item) {
      if ($item->operation == 'UPSERT') {
        $key = $item->object_type . '-' . $item->operation . '-' . $item->dedupe_field;
      }
      else {
        $key = $item->object_type . '-' . $item->operation;
      }
      $batches[$key]['object_type'] = $item->object_type;
      $batches[$key]['operation'] = $item->operation;
      $batches[$key]['items'][] = $item;
      $batches[$key]['sobjects'][] = &$item->sobject;
      $batches[$key]['batch_prepared'] = $batch_prepared;
      if (isset($item->sobject->Id)) {
        $batches[$key]['ids'][] = &$item->sobject->Id;
      }

      // Add this item's sync rules.
      if (($item->operation == 'UPSERT' || $item->operation == 'UPDATE') && isset($item->sync_rules) && !empty($item->sync_rules)) {
        if ($item->operation == 'UPSERT') {
          $batches[$key]['dedupe_field'] = $item->dedupe_field;
          $dedupe_value = $item->sobject->fields[$item->dedupe_field];
          $batches[$key]['sync_rules']['dedupe_values'][$dedupe_value] = $dedupe_value;
        }
        elseif ($item->operation == 'UPDATE') {
          $id = $item->sobject->Id;
          $batches[$key]['sync_rules']['ids'][$id] = $id;
        }
        foreach ($item->sync_rules as $field => $sync_rule) {
          $batches[$key]['sync_rules']['fields'][$field] = $field;
        }
      }
    }
    return $batches;
  }
}
