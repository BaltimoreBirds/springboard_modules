<?php

/**
 * @file module code & core hooks
 */

require_once('includes/webform_goals.goals.inc');

/**
 * Implements hook_menu().
 */
function webform_goals_menu() {
  $items['admin/config/content/webform_goals'] = array(
    'title' => 'Configure goal settings',
    'description' => 'Assign and track goals on webforms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'webform_goals.admin.inc',
  );
  $items['admin/config/content/webform_goals/add'] = array(
    'title' => 'Add a goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_add'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['admin/config/content/webform_goals/%webform_goal/edit'] = array(
    'title' => 'Edit goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_add', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['admin/config/content/webform_goals/%webform_goal/delete'] = array(
    'title' => 'Delete goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_delete', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['node/%webform_menu/webform/goals'] = array(
    'title' => 'Goals',
    'description' => t('Configure goal settings for this webform'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_settings'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/webform_goals.forms.inc',
  );
  $items['webform_goals'] = array(
    'title' => 'webform goals test page',
    'page callback' => 'webform_goals_test_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // TODO: declare api endpoint?
  return $items;
}

/**
 * Load a goal from the db.
 * @param int $gid
 * Goal id
 *
 * @return array
 * Returns an associative array containing goal settings.
 */
function webform_goal_load($gid) {
  $result = db_query('
    SELECT
      gid,
      name,
      context,
      metric,
      target_value,
      seed,
      display_threshold,
      starter_message,
      starter_message_format,
      start_date,
      end_date,
      auto_expire,
      template,
      template_format,
      extra
    FROM {webform_goals}
    WHERE gid = :gid
  ', array(':gid' => $gid));
  $goal = $result->fetchAssoc();
  if (!empty($goal['extra'])) {
    $goal['extra'] = unserialize($goal['extra']);
  }
  // TODO: convert timestamps?
  return $goal;
}

function webform_goal_load_multiple() {
  static $goals = array();
  if (!count($goals)) {
    $result = db_query('
      SELECT
        gid,
        name,
        context,
        metric,
        seed,
        target_value,
        display_threshold,
        starter_message,
        starter_message_format,
        start_date,
        end_date,
        auto_expire,
        template,
        template_format,
        extra
      FROM {webform_goals}
    ');
    while ($goal = $result->fetchAssoc()) {
      $goal['extra'] = unserialize($goal['extra']);
      $goals[] = $goal;
    }
  }
  return $goals;
}


function _webform_goals_list_webforms() {
  static $nodes = array();
  if (!count($nodes)) {
    $types = webform_variable_get('webform_node_types');
    $results = db_query('
      SELECT nid, title, type FROM {node} WHERE type IN(:types)
    ', array(':types' => $types));
    while ($result = $results->fetchAssoc()) {
      $nodes[$result['type']][$result['nid']] = $result['title'];
    }
  }
  return count($nodes) ? $nodes : FALSE;
}

function _webform_goals_field_list($nid) {
  $fields = array();
  $results = db_query('
    SELECT
      form_key,
      name
    FROM {webform_component}
    WHERE
      nid = :nid
    AND
      type NOT IN (:types)
  ', array(':nid' => $nid, ':types' => array('hidden', 'fieldset')));

  while ($result = $results->fetchAssoc()) {
    $fields[$result['form_key']] = $result['name'];
  }
  return $fields;
}

/**
 * Get metric progress (total and percentage of goal met)
 * @param type $goal
 * @return array
 * Returned value:
 *  array(
 *   'count' => total metric count
 *   'progress' => percentage of goal met
 *  );
 */
function webform_goals_track_metric($goal) {

  $data = module_invoke_all('webform_goals_track_metric', $goal);
  // apply seed
  if (!empty($goal['seed'])) {
    $data['count'] +=  $goal['seed'];
    $data['progress'] = ($data['count'] / $goal['target_value']) * 100;
  }
  return $data;
}

/**
 * Implements hook_token_info().
 */
function webform_goals_token_info() {

  $info['types']['webform_goal'] = array(
    'name' => t('Current goal'),
    'description' => t('Tokens related to specific webform goals.'),
    'needs-data' => 'donation',
  );

  $info['tokens']['webform_goal']['gid'] = array(
    'name' => t('Goal ID'),
    'description' => t('The unique ID of the goal.'),
  );
  $info['tokens']['webform_goal']['name'] = array(
    'name' => t('Goal name'),
    'description' => t('The goal name.'),
  );
  $info['tokens']['webform_goal']['starter_message'] = array(
    'name' => t('Goal starter message'),
    'description' => t('The started message to display for this goal if the display threshold has not been met.'),
  );
  $info['tokens']['webform_goal']['display_threshold'] = array(
    'name' => t('Goal display threshold'),
    'description' => t('The minimum progress towards goal required to display a progress bar.'),
  );
  $info['tokens']['webform_goal']['start_date'] = array(
    'name' => t('Goal start date'),
    'description' => t('Goal progress is calculated starting on this date.'),
  );
  $info['tokens']['webform_goal']['end_date'] = array(
    'name' => t('Goal end date'),
    'description' => t('Goal progress calculation ends on this date.'),
  );
  $info['tokens']['webform_goal']['progress'] = array(
    'name' => t('Goal progress raw'),
    'description' => t('Unfortmatted percentage of goal currently met.'),
  );
  $info['tokens']['webform_goal']['target'] = array(
    'name' => t('Goal target'),
    'description' => t('The goal target number.'),
  );
  $info['tokens']['webform_goal']['total'] = array(
    'name' => t('Total raw'),
    'description' => t('Unformatted total progress towards goal.'),
  );
  $info['tokens']['webform_goal']['node'] = array(
    'name' => t('Webform Node'),
    'description' => t('The webform node the goal is being processed for.'),
    'type' => 'node',
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function webform_goals_tokens($type, $tokens, $data = array(), $options = array()) {

  if ($type = 'webform_goal' && !empty($data['webform_goal'])) {
    $goal_progress = webform_goals_track_metric($data['webform_goal']);

    $standard_tokens = array('gid', 'name', 'starter_message', 'display_threshold');
    foreach($standard_tokens as $standard) {
      if (isset($tokens[$standard])) {
        $replacements[$tokens[$standard]]= $data['webform_goal'][$standard];
      }
    }

    foreach($tokens as $key => $token) {
      switch ($key) {
        case 'start_date':
          $replacements[$token] = date('m-d-Y', $data['webform_goal']['start_date']);
          break;
        case 'end_date':
          $replacements[$token] = date('m-d-Y', $data['webform_goal']['end_date']);
          break;
        case 'progress':
          $replacements[$token] = $goal_progress['progress'];
          break;
        case 'target':
          $replacements[$token] = $data['webform_goal']['target_value'];
          break;
        case 'total':
          $replacements[$token] = $goal_progress['count'];
      }
    }




    if ($node_tokens = token_find_with_prefix($tokens, 'node')) {
      $replacements += token_generate('node', $node_tokens, array('node' => $donation->node), $options);
    }
  }

  return $replacements;
}

function webform_goals_update_widget($goal, $nid, $update = array()) {
  $settings = array(
    'gid' => $goal['gid'],
    'nid' => $nid,
    'widget' => theme('webform_goals_widget', $goal, $nid),
  );
  drupal_write_record($settings, $update);
}

/**
 * Delete widget records by node id or goal id.
 *
 * @param array $params
 * Options:
 * 'nid' - node id
 * 'gid' - goal id
 */
function webform_goals_purge_widgets($params) {
  if (empty($params['nid']) && empty($params['gid'])) {
    return FALSE;
  }
  $query = db_delete('webform_goals_widget');
  if (isset($params['nid'])) {
    $query->condition('nid', $params['nid'], '=');
  }
  if (isset($params['gid'])) {
    $query->condition('gid', $params['gid'], '=');
  }
  $query->execute();
}

/**
 * Implements hook_theme().
 */
function webform_goals_theme($existing, $type, $theme, $path) {
  return array(
    'webform_goals_widget' => array(
      'arguments' => array(
        'goal' => NULL,
        'nid' => NULL,
      ),
    ),
    'webform_goals_default_template' => array(
      'arguments' => array(
        'goal' => NULL,
      ),
      'template' => 'templates/webform_goals.default',
    ),
  );
}

function theme_webform_goals_widget($vars) {
  $goal = $vars['goal'];
  $nid = $vars['nid'];
  $template = token_replace($goal['template'], array('webform_goal' => $goal, 'nid' => $nid));
  drupal_set_message('template:' . $template);
  $template_filtered = check_markup($template, $goal['template_format']);
  return $template_filtered;
}


function webform_goals_test_page() {
  $gid = !empty($_GET['gid']) ? $_GET['gid'] : 1;
  $nid = !empty($_GET['nid']) ? $_GET['nid'] : 2;
  $goal = webform_goal_load($gid);
  $vars['goal'] = $goal;
  $vars['nid'] = $nid;
  $output = theme('webform_goals_widget', $vars);
  return $output;
}
