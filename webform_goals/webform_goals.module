<?php

/**
 * @file module code & core hooks
 */

require_once('includes/webform_goals.goals.inc');

/**
 * Implements hook_menu().
 */
function webform_goals_menu() {
  $items['admin/config/content/webform_goals'] = array(
    'title' => 'Webform Goals',
    'description' => 'Assign and track goals on webforms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_admin_list'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'webform_goals.admin.inc',
  );
  $items['admin/config/content/webform_goals/list'] = array(
    'title' => 'List',
    'description' => 'Assign and track goals on webforms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_admin_list'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'webform_goals.admin.inc',
  );
  $items['admin/config/content/webform_goals/settings'] = array(
    'title' => 'Settings',
    'description' => 'Assign and track goals on webforms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'webform_goals.admin.inc',
  );
  $items['admin/config/content/webform_goals/add'] = array(
    'title' => 'Add a goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_add'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['admin/config/content/webform_goals/%webform_goal/edit'] = array(
    'title' => 'Edit goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_add', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['admin/config/content/webform_goals/%webform_goal/delete'] = array(
    'title' => 'Delete goal',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_goals_delete', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'webform_goals.forms.inc',
  );
  $items['webform_goals/%webform_goal/embed'] = array(
    'title' => 'Embeddable widget code',
    'description' => '',
    'page callback' => 'webform_goals_widget_display_embed',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/webform_goals.widget.inc',
  );
  $items['webform_goals_widget/%webform_goals_widget'] = array(
    'title' => 'widget service',
    'page callback' => 'webform_goals_serve_widget',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/webform_goals.widget.inc',
  );
  $items['webform_goals_cron'] = array(
    'title' => 'widget rebuild callback',
    'page callback' => 'webform_goals_rebuild_widgets',
    'access callback' => TRUE, // TODO: secure?
    'type' => MENU_CALLBACK,
    'file' => 'includes/webform_goals.widget.inc',
  );

  return $items;
}

/**
 * Load a goal from the db.
 * @param int $gid
 * Goal id
 *
 * @return array
 * Returns an associative array containing goal settings.
 */
function webform_goal_load($gid) {
  $result = db_query('
    SELECT
      gid,
      name,
      context,
      metric,
      target_value,
      seed,
      display_threshold,
      starter_message,
      starter_message_format,
      start_date,
      end_date,
      auto_expire,
      template,
      template_format,
      extra
    FROM {webform_goals}
    WHERE gid = :gid
  ', array(':gid' => $gid));
  $goal = $result->fetchAssoc();
  if (!empty($goal['extra'])) {
    $goal['extra'] = unserialize($goal['extra']);
  }
  // TODO: convert timestamps?
  return $goal;
}

/**
 *
 * @staticvar array $goals
 * @param int $nid
 * Node id.
 *
 * @return array()
 * An array of goals.
 */
function webform_goal_load_multiple($nid = FALSE) {
  static $goals = array();

  if (($nid && empty($goals[$nid])) || empty($goals)) {
    $query = db_select('webform_goals', 'w');

    if (!empty($nid)) {
      $query->join('webform_goals_node', 'n', 'w.gid = n.gid');
      $query->condition('n.nid', $nid, '=');
    }
    $query->fields('w');
    $result = $query->execute();
    while ($goal = $result->fetchAssoc()) {
      $goal['extra'] = unserialize($goal['extra']);
      if ($nid) {
        $goals[$nid][] = $goal;
      }
      else {
        $goals[] = $goal;
      }
    }
  }
  return $nid ? $goals[$nid] : $goals;
}

function webform_goals_widget_load($gid) {
  $widget = db_query('SELECT widget FROM {webform_goals_widget} WHERE gid = :gid', array(':gid' => $gid));
  return $widget->fetchField();
}

function _webform_goals_list_webforms() {
  static $nodes = array();
  if (!count($nodes)) {
    $types = webform_variable_get('webform_node_types');
    $results = db_query('
      SELECT nid, title, type FROM {node} WHERE type IN(:types)
    ', array(':types' => $types));
    while ($result = $results->fetchAssoc()) {
      $nodes[$result['type']][$result['nid']] = $result['title'];
    }
  }
  return count($nodes) ? $nodes : FALSE;
}

function _webform_goals_field_list($nid) {
  $fields = array();
  $results = db_query('
    SELECT
      form_key,
      name
    FROM {webform_component}
    WHERE
      nid = :nid
    AND
      type NOT IN (:types)
  ', array(':nid' => $nid, ':types' => array('hidden', 'fieldset')));

  while ($result = $results->fetchAssoc()) {
    $fields[$result['form_key']] = $result['name'];
  }
  return $fields;
}

/**
 * Get metric progress (total and percentage of goal met)
 * @param type $goal
 * @return array
 * Returned value:
 *  array(
 *   'count' => total metric count
 *   'progress' => percentage of goal met
 *  );
 */
function webform_goals_track_metric($goal) {

  $data = module_invoke_all('webform_goals_track_metric', $goal);
  // apply seed
  if (!empty($goal['seed'])) {
    $data['count'] +=  $goal['seed'];
    $data['progress'] = ($data['count'] / $goal['target_value']) * 100;
  }
  return $data;
}

/**
 * Implements hook_token_info().
 */
function webform_goals_token_info() {

  $info['types']['webform_goal'] = array(
    'name' => t('Current goal'),
    'description' => t('Tokens related to specific webform goals.'),
    'needs-data' => 'donation',
  );

  $info['tokens']['webform_goal']['gid'] = array(
    'name' => t('Goal ID'),
    'description' => t('The unique ID of the goal.'),
  );
  $info['tokens']['webform_goal']['name'] = array(
    'name' => t('Goal name'),
    'description' => t('The goal name.'),
  );
  $info['tokens']['webform_goal']['starter_message'] = array(
    'name' => t('Goal starter message'),
    'description' => t('The started message to display for this goal if the display threshold has not been met.'),
  );
  $info['tokens']['webform_goal']['display_threshold'] = array(
    'name' => t('Goal display threshold'),
    'description' => t('The minimum progress towards goal required to display a progress bar.'),
  );
  $info['tokens']['webform_goal']['start_date'] = array(
    'name' => t('Goal start date'),
    'description' => t('Goal progress is calculated starting on this date.'),
  );
  $info['tokens']['webform_goal']['end_date'] = array(
    'name' => t('Goal end date'),
    'description' => t('Goal progress calculation ends on this date.'),
  );
  $info['tokens']['webform_goal']['progress-raw'] = array(
    'name' => t('Goal progress raw'),
    'description' => t('Unfortmatted percentage of goal currently met.'),
  );
  $info['tokens']['webform_goal']['progress-bar'] = array(
    'name' => t('CSS driven progress bar'),
    'description' => t('Themed progress bar showing goal progress percentage'),
  );
  $info['tokens']['webform_goal']['progress-starter'] = array(
    'name' => t('Progress bar/starter message'),
    'description' => t('Displayes themed progress bar or starter message if display threshold has not been met.'),
  );
  $info['tokens']['webform_goal']['target'] = array(
    'name' => t('Goal target'),
    'description' => t('The goal target number.'),
  );
  $info['tokens']['webform_goal']['total'] = array(
    'name' => t('Total raw'),
    'description' => t('Unformatted total progress towards goal.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function webform_goals_tokens($type, $tokens, $data = array(), $options = array()) {

  if ($type = 'webform_goal' && !empty($data['webform_goal'])) {

    $goal_progress = webform_goals_track_metric($data['webform_goal']);
    $goal = $data['webform_goal'];
    $standard_tokens = array('gid', 'name', 'starter_message', 'display_threshold');
    foreach($standard_tokens as $standard) {
      if (isset($tokens[$standard])) {
        $replacements[$tokens[$standard]]= $data['webform_goal'][$standard];
      }
    }

    foreach($tokens as $key => $token) {
      switch ($key) {
        case 'start_date':
          $replacements[$token] = date('m-d-Y', $goal['start_date']);
          break;
        case 'end_date':
          $replacements[$token] = date('m-d-Y', $goal['end_date']);
          break;
        case 'progress-raw':
          $replacements[$token] = $goal_progress['progress'];
          break;
        case 'progress-bar':
          $replacements[$token] = theme('webform_goals_progress_bar', array('goal_id' => $goal['gid'], 'goal_progress' => $goal_progress['progress']));
          break;
        case 'starter-message':
          $replacements[$token] = check_markup($goal['starter_message'], $goal['starter_message_format']);
          break;
        case 'progress-starter':
          $output = '';
          if ($goal_progress['progress'] >= $data['webform_goal']['display_threshold']) {
            $output = theme('webform_goals_progress_bar', $goal['gid'], $goal_progress['progress']);
          }
          elseif (!empty($goal['starter_message'])) {
            $output = check_markup($goal['starter_message'], $goal['starter_message_format']);
          }
          $replacements[$token] = $output;
          break;
        case 'target':
          $replacements[$token] = $data['webform_goal']['target_value'];
          break;http://www.smbc-comics.com/index.php?db=comics&id=2887#comic
        case 'total':
          $replacements[$token] = $goal_progress['count'];
      }
    }
    return $replacements;
  }
}

/**
 * Re-render widget markup with up-to-date progress data.
 * @param array $goal
 * Goal array.
 *
 * @param $update
 * 'gid' if updating an existing record or array() if inserting new.
 */
function webform_goals_update_widget($args, $update = array()) {
  require_once('includes/webform_goals.files.inc');
  $goal = $args['webform_goal'];
  $nid = !empty($args['nid']) ? $args['nid'] : 0;
  $settings = array(
    'gid' => $goal['gid'],
    'widget' => theme('webform_goals_widget', $goal),
  );
  _webform_goals_file_insert($goal, $settings['widget']);
  drupal_write_record('webform_goals_widget', $settings, $update);
}

/**
 * Delete widget records by node id or goal id.
 *
 * @param array $params
 * Options:
 * 'nid' - node id
 * 'gid' - goal id
 */
function webform_goals_purge_widgets($params) {
  if (empty($params['nid']) && empty($params['gid'])) {
    return FALSE;
  }
  $query = db_delete('webform_goals_widget');
  if (isset($params['nid'])) {
    $query->condition('nid', $params['nid'], '=');
  }
  if (isset($params['gid'])) {
    $query->condition('gid', $params['gid'], '=');
  }
  $query->execute();
}

/**
 * Implements hook_webform_submission_insert().
 *
 * When a submission is inserted we check for goals assigned to this node and
 * update stored widget markup in response to the submission.
 */
function webform_goals_webform_submission_insert($node, $submission) {
  $gids = webform_goals_get_goals_by_nid($node->nid);

  if (count($gids)) {
    _webform_goals_flag_goal_updates($gids);
  }
}

/**
 * Implements hook_theme().
 */
function webform_goals_theme($existing, $type, $theme, $path) {
  return array(
    'webform_goals_widget' => array(
      'arguments' => array(
        'goal' => NULL,
        'nid' => NULL,
      ),
    ),
    'webform_goals_default_template' => array(
      'arguments' => array(
        'goal' => NULL,
      ),
      'template' => 'templates/webform_goals.default',
    ),
    'webform_goals_widget_loader' => array(
      'variables' => array(
        'goal_id' => NULL,
      ),
      'template' => 'templates/webform_goals.widget_loader',
    ),
    'webform_goals_progress_bar' => array(
      'variables' => array(
        'goal_id' => NULL,
        'goal_progress' => NULL,
      ),
      'template' => 'templates/webform_goals.progress_bar',
    ),
  );
}

/**
 * Implements theme_hook().
 *
 * Applies appropriate template filtering and token replacement to
 * goal templates when rendering a widget.
 */
function theme_webform_goals_widget($args) { //$goal) {
  $goal = $args['webform_goal'];
  $nid = isset($goal['extra']['selected_form_id']) ? $goal['extra']['selected_form_id'] : 0;
  $template = token_replace($goal['template'], array('webform_goal' => $goal, 'nid' => $nid));
  $template_filtered = check_markup($template, $goal['template_format']);
  $data['markup'] = $template_filtered;
  $data['tokens'] = _webform_goals_pack_tokens($goal, $nid);
  return serialize($data);
}

function  _webform_goals_pack_tokens($goal, $nid) {
  $tokens = webform_goals_token_info();
  foreach ($tokens['tokens']['webform_goal'] as $key => $value) {
    // I had this nifty idea where I packed all the tokens down with json_encode and then
    // replaced them in one go. Unfortunately the markup tokens screw up the decode.
    $tokens_replaced["[webform_goal:$key]"] = token_replace("[webform_goal:$key]", array('webform_goal' => $goal, 'nid' => $nid));
  }

  return $tokens_replaced;
}

/**
 * Implements template_preprocess_hook().
 *
 * Set up template variables for the widget loader template.
 */
function template_preprocess_webform_goals_widget_loader(&$vars) {
  $uri = 'webform_goals/template-' . $vars['gid'] . '.html';
  $file_uri = file_create_url(file_build_uri($uri));
  $vars['file_url'] = $file_uri;
}


/**
 * Goal status, used by admin display.
 */
function webform_goals_goal_status($goal) {


  if ($goal['end_date'] && $goal['end_date'] < time()) {

    return $goal['auto_expire'] ? t('expired') : t('ended');
  }
  if ($goal['start_date'] > time()) {
    return t('pending');
  }
  return t('active');
}

/**
 * Retrieve full context info based on form submission or current goal.
 */
function _webform_goals_get_selected_context($form_state, $goal = array()) {
  $contexts = module_invoke_all('webform_goals_list_context');
  $selected_context = $contexts['single'];
  // current selection trumps goal settings in a form context.
  // this prevents existing settings from overwriting new user
  // selections when editing a goal.
  if (!empty($form_state['values']['context'])) {
    $selected_context = $contexts[$form_state['values']['context']];
  }
  elseif (!empty($goal['context'])) {
    $selected_context = $contexts[$goal['context']];
  }
  return $selected_context;
}

/**
 * Figure out what webform nodes are impacted based on goal settings.
 * @param type $group
 * @return array of nids
 */
function _webform_goals_calculate_nids_for_goal($goal) {
  if ($goal['context'] == 'single') {

    return (array) $goal['extra']['selected_form_id'];
  }

  if ($goal['context'] == 'group') {
    $node_type = $goal['extra']['selected_node_type'];
    return _webform_goals_nids_by_type($node_type);
  }
}

/**
 * Retrieve full metric info based on form submission or current goal.
 */
function _webform_goals_get_selected_metric($selected_context, $form_state, $goal = array()) {
  $metrics = webform_goals_list_metrics($selected_context, $form_state, $goal);
  $selected_metric = $metrics['submission_count'];
  // as with context we defer to form submission values to
  // prevent existing settings interfering with edit form behavior.
  if (!empty($form_state['values']['metrics'])) {
    $selected_metric = $metrics[$form_state['values']['metrics']];
  }
  elseif (!empty($goal['metric'])) {
    $selected_metric = $metrics[$goal['metric']];
  }
  return $selected_metric;
}

/**
 * Retrieve an array of goals that are tracking a given node.
 */
function webform_goals_get_goals_by_nid($nid) {
  $gids = array();
  $results = db_query('SELECT gid FROM {webform_goals_node} WHERE nid = :nid', array(':nid' => $nid));
  while ($gid = $results->fetchField()) {
    $gids[] = $gid;
  }
  return $gids;
}

/**
 * List available context.
 */
function webform_goals_list_context() {
  static $contexts = array();
  if (empty($context)) {
    $contexts = module_invoke_all('webform_goals_list_context');
  }
  return $contexts;
}

function webform_goals_list_metrics($selected_context, $form_state = array(), $goal = array()) {
  $metrics = module_invoke_all('webform_goals_list_metrics', $selected_context, $form_state, $goal);
  return $metrics;
}

/**
 * retrieve a list of nids by node type without invoking entity_load().
 */
function _webform_goals_nids_by_type($type) {
  static $nids = array();
  if (empty($nids[$type])) {
    $results = db_query('
      SELECT
        nid
      FROM {node}
      WHERE type = :type
    ', array(':type' => $type));
    while ($nid = $results->fetchField()) {
      $nids[$type][] = $nid;
    }
  }
  return $nids[$type];
}

/**
 * Set db flag for goals that need widget rebuild when cron runs.
 */
function _webform_goals_flag_goal_updates($gids = array()) {

  if (count($gids)) {
    db_query('
      UPDATE {webform_goals}
      SET update_on_cron = 1
      WHERE gid IN (:gids)', array(':gids' => $gids));
  }
}
