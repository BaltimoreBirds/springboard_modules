<?php
/**
 * @file
 * Custom admin interface for Springboard.
 */

include_once 'springboard_admin.menu.inc';

/**
 * Implements hook_menu().
 */
function springboard_admin_menu() {
  $items = array();
  $items['admin/springboard/templates'] = array(
    'title' => 'Templates',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'springboard_admin_menu_access',
    'access arguments' => array('admin/springboard/templates'),
    'page callback' => 'springboard_admin_template_page',
  );
  $items['admin/springboard/results'] = array(
    'title' => 'Results',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/results'),
  );
  $items['admin/springboard/options'] = array(
    'title' => 'Options',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/options'),
  );
  $items['admin/springboard/tools'] = array(
    'title' => 'Other Tools',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/tools'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Redirects a user role to admin/springboard if it is given the Springboard
 * User Experience option in Springboard Settings.
 */
function springboard_admin_menu_alter(&$items) {
  global $user;
  if (springboard_admin_user_gets_sbux($user)) {
    $items['admin']['page callback'] = 'drupal_goto';
    $items['admin']['page arguments'] = array('admin/springboard');
  }
}

/**
 * Implements hook_permission().
 */
function springboard_admin_permission() {
  return array(
    'administer springboard theme' => array(
      'title' => t('Administer the Springboard theme'),
      'description' => t('Administer configurations related to the display of the springboard_backend theme.'),
    ),
  );
}

/**
 * Implements hook_form_ID_alter().
 *
 * Add options to springboard configuration for enabling/disabling the
 * springboard_backend theme.
 */
function springboard_admin_form_springboard_admin_settings_alter(&$form, &$form_state) {
  if (user_access('administer springboard theme')) {
    $form['admin'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Springboard administration settings'),
      '#description' => t('Configure how you administer Springboard.'),
      '#weight' => -1,
    );
    $form['admin']['springboard_theme_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable the Springboard administrative theme.'),
      '#description' => t('Force the use of the springboard_backend theme on all Springboard-related administrative pages. The administrative theme set at admin/appearence will still be used for other Drupal administrative pages.'),
      '#default_value' => variable_get('springboard_theme_enable', 1),
    );

    $form['admin']['springboard_drupal_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Organization homepage'),
      '#description' => t("Set the URL to the organization's main website."),
      '#default_value' => variable_get('springboard_drupal_path', 'http://drupal.org'),
    );
    $roles = user_roles(TRUE, 'access springboard dashboard');
    $form['admin']['springboard_user_experience'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Springboard User Experience.'),
      '#description' => t('Choose which user roles will be given the Springboard User Experience. This includes redirecting to the Dashboard on login and after performing some administration functions.'),
      '#options' => $roles,
      '#default_value' => variable_get('springboard_user_experience', array_keys($roles)),
    );
  }
  $form['#validate'][] = 'springboard_drupal_path_validate';
  $form['#submit'][] = 'springboard_drupal_path_submit';
}

/**
 * Validation function to check that the submitted URL is valid.
 */
function springboard_drupal_path_validate(&$form, &$form_state) {
  if (!valid_url($form_state['values']['springboard_drupal_path'], TRUE)) {
    form_error($form['admin']['springboard_drupal_path'], 'Please submit a valid URL, including "http://"');
  }
}

/**
 * Submit function to update the org admin link.
 *
 * Submit function to update the configurable link to the organization website
 * in the springboard_admin menu.
 *
 * We do this so that users who are allowed to administer Springboard can change
 * this menu item but not have control over menus in general.
 */
function springboard_drupal_path_submit(&$form, &$form_state) {
  if ($form['admin']['springboard_drupal_path']['#default_value'] != $form_state['values']['springboard_drupal_path']) {
    $update_menu = db_update('menu_links')
      ->fields(array(
        'link_path' => $form_state['values']['springboard_drupal_path'],
      ))
      ->condition('menu_name', "springboard_admin_menu", '=')
      ->condition('link_path', $form['admin']['springboard_drupal_path']['#default_value'], '=')
      ->execute();
    menu_rebuild();
  }
}

/**
 * Implements hook_user_login().
 *
 * Redirects users to the Springboard Dashboard based on user role.
 */
function springboard_admin_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    if (springboard_admin_user_gets_sbux($account)) {
      $edit['redirect'] = 'admin/springboard';
    }
  }
}

/**
 * Helper Function
 * Checks if a user has a role that enforces the Springboard User Experieince
 * as configured in the Springboard Settings.
 *
 * @return Boolean
 * True if the user does get the SBUX.
 */
function springboard_admin_user_gets_sbux($account) {
  $available_roles = user_roles(TRUE, 'access springboard dashboard');
  $redirect_roles = variable_get('springboard_user_experience', array_keys($available_roles));
  // Check if the user has ones of the roles that gets redirected to the
  // Sprinboard dashboard
  foreach ($account->roles as $rid => $assigned_role) {
    // If any role matches, change the redirect and end the function.
    if ($assigned_role && in_array($rid, $redirect_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_custom_theme().
 *
 * Force the use of springboard_backend theme on Springboard-related
 * administration pages.
 */
function springboard_admin_custom_theme() {
  // If the springboard_backend theme is disabled, do nothing.
  if (variable_get('springboard_theme_enable', 1) == 0) {
    return;
  }
  // If the springboard_backend theme does not exist, we can do nothing.
  $themes = list_themes();
  if (!isset($themes['springboard_backend'])) {
    return;
  }

  // Build an array of pages that the admin theme applies to.
  $sb_menu = springboard_admin_admin_menu_items();
  $paths = array();
  foreach ($sb_menu as $item) {
    $paths[] = $item['link_path'];
    // As with the installation, if we ever need more than 2 levels of
    // navigation, we will need real recursion here.
    foreach ($item['_children'] as $child) {
      $paths[] = $child['link_path'];
    }
  }

  if (in_array($_GET['q'], $paths)) {
    return 'springboard_backend';
  }
  // Adding user profile pages to use the admin theme
  // @TODO This should be a SB setting to include paths.
  elseif (preg_match("/^user\/[0-9]+/", $_GET['q']) || preg_match("/^user\/[0-9]+\/[a-z]+/", $_GET['q'])) {
    return 'springboard_backend';
  }
}

/**
 * Access callback for Springboard admin pages.
 *
 * Performs page access checks for Springboard administrative pages.
 *
 * @param string $path
 *   The page path.
 *
 * @return bool
 *   Boolean to indicate if access is allowed.
 */
function springboard_admin_menu_access($path) {
  switch ($path) {
    case 'admin/springboard/templates' :
      if (user_access('edit any page_wrapper content') || user_access('edit any email_wrapper content')) {
        return TRUE;
      }
      else {
        return FALSE;
      }
      break;
  }
}

/**
 * Page callback for the "Templates" admin page.
 *
 * Renders page content for the "Templates" administrative page.
 *
 * @return string
 *   HTML output for the page.
 */
function springboard_admin_template_page() {
  $output = '';

  // Load Page Templates view.
  $view = views_get_view('sbv_page_templates');
  $view -> set_display('block_1');
  $view -> set_arguments(array());
  $view -> pre_execute();
  $view -> execute();
  if ($view && $view -> access('block_1') && !empty($view -> result)) {
    $output .= '<h2>' . $view -> get_title('block_1') . '</h2>';
    $output .= $view -> render();
  }

  // Load Email Templates view.
  $view = views_get_view('sbv_email_templates');
  $view -> set_display('block_1');
  $view -> set_arguments(array());
  $view -> pre_execute();
  $view -> execute();
  if ($view && $view -> access('block_1') && !empty($view -> result)) {
    $output .= '<h2>' . $view -> get_title('block_1') . '</h2>';
    $output .= $view -> render();
  }

  return $output;
}

/**
 * Page callback for admin pages that are aggregates of child page links.
 *
 * @return string
 *   HTML output for the page.
 */
function springboard_admin_aggregate_links_page($path) {
  // Load the springboard admin menu so we know what links to render.
  $menu = springboard_admin_admin_menu_items();
  $links = array();
  foreach ($menu[$path]['_children'] as $item) {
    $options = array();
    if (isset($item['external'])) {
      $options['external'] = $item['external'];
    }
    $links[] = array(
      'title' => $item['link_title'],
      'href' => $item['link_path'],
      'options' => $options,
    );
  }

  return theme_links(array(
    'links' => $links,
    'attributes' => array(
      'class' => array('aggregate-links'),
    ),
    'heading' => '',
  ));
}

/**
 * Implements hook_form_alter().
 *
 * Add addition submit function for the "delete" action on the node delete
 * confirmation form.
 */
function springboard_admin_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {  
    case 'clone_node_confirm' :
      $form['#submit'][] = 'springboard_node_clone_form_submit';
    break;
    case 'node_delete_confirm' :
      $form['actions']['delete']['#submit'][] = 'springboard_admin_node_delete';
    break;
  }
}

/**
 * Submit handler for the "clone" action on the node clone confirmation form.
 * 
 * Redirects users to the node edit page for the newly created node.
 */
function springboard_node_clone_form_submit(&$form, &$form_state) {
  $_GET['destination'] = $form_state['redirect'];
  return;
}

/**
 * Sumbit handler for the "delete" action on the node delete confirmation form.
 *
 * Redirects configured user roles to the Springboard Dashboard after a node is
 * deleted.
 */
function springboard_admin_node_delete($form) {
  global $user;
  if (springboard_admin_user_gets_sbux($user)) {
    $form_state['redirect'] = 'admin/springboard';
    $_GET['destination'] = url('admin/springboard');
    return;
  }
}
