<?php 

include_once('springboard_admin.menu.inc');

/** 
 * Implements hook_menu().
 */
 
function springboard_admin_menu() {
  $items = array();
  $items['admin/springboard/templates'] = array(
    'title' => 'Templates',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'springboard_admin_menu_access',
    'access arguments' => array('admin/springboard/templates'),
    'page callback' => 'springboard_admin_template_page',
  );
  $items['admin/springboard/results'] = array(
    'title' => 'Results',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/results'),
   );
   $items['admin/springboard/options'] = array(
    'title' => 'Options',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/options'),
   );
   $items['admin/springboard/tools'] = array(
    'title' => 'Other Tools',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('admin/springboard/tools'),
   );
  return $items;
}

 /**
 * Implements hook_permission().
 */
function springboard_admin_permission() {
  return array(
    'administer springboard theme' => array(
      'title' => t('Administer the Springboard theme'),
      'description' => t('Administer configurations related to the display of the springboard_backend theme.')
    )
  );
}

/** 
 * Implements hook_form_ID_alter().
 * 
 * Add options to springboard configuration for enabling/disabling the 
 * springboard_backend theme.
 */

function springboard_admin_form_springboard_admin_settings_alter(&$form, &$form_state) {
  if (user_access('administer springboard theme')) {
  $form['admin'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Springboard administration settings'),
    '#description' => t('Configure how you administer Springboard.'),
  );
  $form['admin']['springboard_theme_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the Springboard administrative theme.'),
    '#description' => t('Force the use of the springboard_backend theme on all Springboard-related administrative pages. The administrative theme set at admin/appearence will still be used for other Drupal administrative pages.'),
    '#default_value' => variable_get('springboard_theme_enable', 1)
   );
  }
}

/**
 * Implements hook_custom_theme().
 * 
 * Force the use of springboard_backend theme on Springboard-related 
 * administration pages.
 */

function springboard_admin_custom_theme() {
  // If the springboard_backend theme is disabled, do nothing.
  if (variable_get('springboard_theme_enable', 1) == 0) {
    return;
  }  
  // If the springboard_backend theme does not exist, we can do nothing.
  $themes = list_themes();
  if (!isset($themes['springboard_backend'])) {
    return;
  }
  
  // Build an array of pages that the admin theme applies to
  $sb_menu = springboard_admin_admin_menu_items();
  $paths = array();
  foreach ($sb_menu as $item) {
    $paths[] = $item['link_path'];
    // as with the installation, if we ever need more than 2 levels of 
    // navigation, we will need real recursion here.
    foreach ($item['_children'] as $child) {
      $paths[] = $child['link_path'];
    }
  }

  if (in_array($_GET['q'], $paths)) {
    return 'springboard_backend';
  }
}

/**
 * Callback function. 
 * Performs page access checks for Springboard administrative pages.
 *
 * @param $path
 * The page path.
 * 
 * @return 
 * Boolean to indicate if access is allowed.
 *
 */

function springboard_admin_menu_access($path) {
  switch ($path) {
    case 'admin/springboard/templates':
      if (user_access('edit any page_wrapper content') || user_access('edit any email_wrapper content')) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    break;
  }
}

/**
 * Callback function.
 * Renders page content for the "Templates" administrative page.
 * 
 * @return
 * HTML output for the page.
 */

function springboard_admin_template_page() {
  $output = '';
  
  // load Page Templates view
  $view = views_get_view('sbv_page_templates');
  $view->set_display('block_1');
  $view->set_arguments(array());
  $view->pre_execute();
  $view->execute();
  if($view && $view->access('block_1') && !empty($view->result)) {
    $output .= '<h2>' . $view->get_title('block_1') . '</h2>';
    $output .= $view->render();
  }

  // load Email Templates view
  $view = views_get_view('sbv_email_templates');
  $view->set_display('block_1');
  $view->set_arguments(array());
  $view->pre_execute();
  $view->execute();
  if($view && $view->access('block_1') && !empty($view->result)) {
    $output .= '<h2>' . $view->get_title('block_1') . '</h2>';
    $output .= $view->render();
  }
  
  return $output;
}

/**
 * Callback function.
 * Renders page content for admin pages that are aggregates of child page links.
 * 
 * @return
 * HTML output for the page.
 */

function springboard_admin_aggregate_links_page($path) {
  // load the springboard admin menu so we know what links to render
  $menu = springboard_admin_admin_menu_items();
  $links = array();
  foreach ($menu[$path]['_children'] as $item) {
    $options = array();  
    if(isset($item['external'])) {
      $options['external'] = $item['external'];
    }
    $links[] = array(
      'title' => $item['link_title'],
      'href' => $item['link_path'],
      'options' => $options,
    );
  }

  return theme_links(array('links' => $links, 'attributes' => array('class' => array('aggregate-links')), 'heading' => ''));
}
