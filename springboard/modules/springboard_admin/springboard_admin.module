<?php
/**
 * @file
 * Custom admin interface for Springboard.
 */

include_once 'springboard_admin.menu.inc';

/**
 * Implements hook_menu().
 */
function springboard_admin_menu() {
  $items = array();
  $items['springboard/asset-library'] = array(
    'title' => 'Templates',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'springboard_admin_menu_access',
    'access arguments' => array('springboard/asset-library'),
    'page callback' => 'springboard_admin_template_page',
  );
  $items['springboard/donation-forms'] = array(
    'title' => 'Donation Forms',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_forms_page',
    'page arguments' => array('fundraiser')
  );
  $items['springboard/forms'] = array(
    'title' => 'Forms',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_forms_page',
    'page arguments' => array('webform_user')
  );
  $items['springboard/reports'] = array(
    'title' => 'Reports',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('springboard/reports'),
   );
  $items['springboard/settings'] = array(
    'title' => 'Options',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('springboard/settings'),
  );
  $items['springboard/tools'] = array(
    'title' => 'Other Tools',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_aggregate_links_page',
    'page arguments' => array('springboard/tools'),
  );
  $items['user/%/logout'] = array(
    'title' => 'Logout',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('user/logout'),
  );
  
  return $items;
}

function springboard_admin_admin_menu_output_build(&$content) {
  // Add new top-level item to the menu.
  if (isset($content['menu'])) {
    $content['menu']['springboard'] = array(
      '#title' => t('Springboard'),
      '#attributes' => array('class' => array('springboard_admin-springboard')),
      '#href' => 'springboard',
      '#options' => array(
        'query' => drupal_get_destination(),
        // Apply a class on the link (anchor).
        'attributes' => array('class' => array('myitem-link-anchor')),
      ),
      // #weight controls the order of links in the resulting item list.
      '#weight' => 50,
    );
  $sbadmin_menu = menu_tree('springboard_admin_menu');
  $content['menu']['springboard'] += springboard_admin_build_admin_menu_subnav($sbadmin_menu);
  }
}

function springboard_admin_build_admin_menu_subnav($items) {
  $nav = array();
  foreach ($items as $key => $item) {
    if (!preg_match('/^#.*$/', $key)) {
      $nav[$item['#href']] = springboard_admin_build_admin_menu_item($item);
      if (count($item['#below']) > 0) {
        $nav[$item['#href']] += springboard_admin_build_admin_menu_subnav($item['#below']);
      }
    }
  }
  return $nav;
}

function springboard_admin_build_admin_menu_item($item) {
  return array(
    '#title' => $item['#title'],
    '#href' => $item['#href'],
    '#options' => $item['#localized_options'],
    '#weight' => isset($item['#original_link']['#weight']) ? $item['#original_link']['#weight'] : 0,
  );
}

function springboard_admin_admin_menu_output_alter(&$content) {
  // remove lower-level springboard menu items from admin menu
    foreach ($content['menu'] as $key => $item) {
      if (preg_match('/^springboard\/.*$/', $key)) {
        unset($content['menu'][$key]);
      }
    }
}

/**
 * Implements hook_admin_paths().
 */
function springboard_admin_admin_paths() {
  return array(
    'springboard/asset-library' => TRUE,
    'springboard/reports' => TRUE,
    'springboard/settings' => TRUE,
    'springboard/tools' => TRUE,
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Redirects a user role to /springboard if it is given the Springboard
 * User Experience option in Springboard Settings.
 */
function springboard_admin_menu_alter(&$items) {
  global $user;
  if (springboard_admin_user_gets_sbux($user)) {
    $items['admin']['page callback'] = 'drupal_goto';
    $items['admin']['page arguments'] = array('springboard');
  }
  // Create a Springboard router item for each node add form
  $types = node_type_get_types();
  foreach ($types as $type) {
    if (_webform_user_is_webform_user_node_type($type->type) || fundraiser_is_donation_type($type->type)) {
      $items['springboard/add/' . preg_replace('/_/', '-', $type->type)] = $items['node/add/' . preg_replace('/_/', '-', $type->type)];
    }
  }
}

/**
 * Implements hook_permission().
 */
function springboard_admin_permission() {
  return array(
    'administer springboard theme' => array(
      'title' => t('Administer the Springboard theme'),
      'description' => t('Administer configurations related to the display of the springboard_backend theme.'),
    ),
  );
}

/**
 * Implements hook_form_ID_alter().
 *
 * Add options to springboard configuration for enabling/disabling the
 * springboard_backend theme.
 */
function springboard_admin_form_springboard_admin_settings_alter(&$form, &$form_state) {
  if (user_access('administer springboard theme')) {
    $form['admin'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Springboard administration settings'),
      '#description' => t('Configure how you administer Springboard.'),
      '#weight' => -1,
    );
    $form['admin']['springboard_theme_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable the Springboard administrative theme.'),
      '#description' => t('Force the use of the springboard_backend theme on all Springboard-related administrative pages. The administrative theme set at admin/appearence will still be used for other Drupal administrative pages.'),
      '#default_value' => variable_get('springboard_theme_enable', 1),
    );

    $form['admin']['springboard_drupal_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Organization homepage'),
      '#description' => t("Set the URL to the organization's main website."),
      '#default_value' => variable_get('springboard_drupal_path', 'http://drupal.org'),
    );
    $roles = user_roles(TRUE, 'access springboard dashboard');
    $form['admin']['springboard_user_experience'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Springboard User Experience.'),
      '#description' => t('Choose which user roles will be given the Springboard User Experience. This includes redirecting to the Dashboard on login and after performing some administration functions.'),
      '#options' => $roles,
      '#default_value' => variable_get('springboard_user_experience', array_keys($roles)),
    );
  }
  $form['#validate'][] = 'springboard_drupal_path_validate';
  $form['#submit'][] = 'springboard_drupal_path_submit';
}

/**
 * Validation function to check that the submitted URL is valid.
 */
function springboard_drupal_path_validate(&$form, &$form_state) {
  if (!valid_url($form_state['values']['springboard_drupal_path'], TRUE)) {
    form_error($form['admin']['springboard_drupal_path'], 'Please submit a valid URL, including "http://"');
  }
}

/**
 * Submit function to update the configurable link to the organization website
 * in the springboard_admin menu.
 *
 * We do this so that users who are allowed to administer Springboard can change
 * this menu item but not have control over menus in general.
 */
function springboard_drupal_path_submit(&$form, &$form_state) {
  if ($form['admin']['springboard_drupal_path']['#default_value'] != $form_state['values']['springboard_drupal_path']) {
    $update_menu = db_update('menu_links')
      ->fields(array(
        'link_path' => $form_state['values']['springboard_drupal_path'],
      ))
      ->condition('menu_name', "springboard_admin_menu", '=')
      ->condition('link_path', $form['admin']['springboard_drupal_path']['#default_value'], '=')
      ->execute();
    menu_rebuild();
  }
}

/**
 * Implements hook_user_login().
 *
 * Redirects users to the Springboard Dashboard based on user role.
 */
function springboard_admin_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    if (springboard_admin_user_gets_sbux($account)) {
      $edit['redirect'] = 'springboard';
    }
  }
}

/**
 * Helper Function
 * Checks if a user has a role that enforces the Springboard User Experieince
 * as configured in the Springboard Settings.
 *
 * @return Boolean
 * True if the user does get the SBUX.
 */
function springboard_admin_user_gets_sbux($account) {
  $available_roles = user_roles(TRUE, 'access springboard dashboard');
  $redirect_roles = variable_get('springboard_user_experience', array_keys($available_roles));
  // Check if the user has ones of the roles that gets redirected to the
  // Sprinboard dashboard
  foreach ($account->roles as $rid => $assigned_role) {
    // If any role matches, change the redirect and end the function.
    if ($assigned_role && in_array($rid, $redirect_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_custom_theme().
 *
 * Force the use of springboard_backend theme on Springboard-related
 * administration pages.
 */
function springboard_admin_custom_theme() {
  // If the springboard_backend theme is disabled, do nothing.
  if (variable_get('springboard_theme_enable', 1) == 0) {
    return;
  }
  // If the springboard_backend theme does not exist, we can do nothing.
  $themes = list_themes();
  if (!isset($themes['springboard_backend'])) {
    return;
  }

  // Build an array of pages that the admin theme applies to.
  $sb_menu = springboard_admin_admin_menu_items();
  $paths = array();
  foreach ($sb_menu as $item) {
    $paths[] = $item['link_path'];
    // As with the installation, if we ever need more than 2 levels of
    // navigation, we will need real recursion here.
    foreach ($item['_children'] as $child) {
      $paths[] = $child['link_path'];
    }
  }

  if (in_array($_GET['q'], $paths)) {
    return 'springboard_backend';
  }
  // Adding user profile pages to use the admin theme
  // @TODO This should be a SB setting to include paths.
  elseif (preg_match("/^user\/[0-9]+/", $_GET['q']) || preg_match("/^user\/[0-9]+\/[a-z]+/", $_GET['q'])) {
    return 'springboard_backend';
  }
}

/**
 * Access callback for Springboard admin pages.
 *
 * Performs page access checks for Springboard administrative pages.
 *
 * @param string $path
 *   The page path.
 *
 * @return bool
 *   Boolean to indicate if access is allowed.
 */
function springboard_admin_menu_access($path) {
  switch ($path) {
    case 'springboard/asset-library':
      if (user_access('edit any page_wrapper content') || user_access('edit any email_wrapper content')) {
        return TRUE;
      }
      else {
        return FALSE;
      }
      break;
  }
}

/**
 * Page callback for the "Templates" admin page.
 *
 * Renders page content for the "Templates" administrative page.
 *
 * @return string
 *   HTML output for the page.
 */
function springboard_admin_template_page() {
  $output = '';

  // Load Page Templates view.
  $view = views_get_view('sbv_page_templates');
  $view -> set_display('block_1');
  $view -> set_arguments(array());
  $view -> pre_execute();
  $view -> execute();
  if ($view && $view -> access('block_1') && !empty($view -> result)) {
    $output .= '<h2>' . $view -> get_title('block_1') . '</h2>';
    $output .= $view -> render();
  }

  // Load Email Templates view.
  $view = views_get_view('sbv_email_templates');
  $view -> set_display('block_1');
  $view -> set_arguments(array());
  $view -> pre_execute();
  $view -> execute();
  if ($view && $view -> access('block_1') && !empty($view -> result)) {
    $output .= '<h2>' . $view -> get_title('block_1') . '</h2>';
    $output .= $view -> render();
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function springboard_admin_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_admin_forms_page' => array(
      'variables' => array('tables' => array(), 'types' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-admin-forms-page',
    ),
  );
}

/**
 * Page callback for the "Donation Forms" and "Forms" admin pages.
 *
 * Renders page content for the "Donation Forms" and "Forms" administrative 
 * pages.
 *
 * @param $springboard_type
 *   'fundraiser' to show forms that utilize the Fundraiser module, 
 *   'webform_user' to show forms that utilize the Webform User module. If no
 *   type is specified, all other content types are displayed.
 * @return string
 *   HTML output for the page.
 */
function springboard_admin_forms_page($springboard_type) {
  $node_types = node_type_get_types();
  $display_types = array();
  $tables = array();
  // Get an appropriate set of content types to display nodes for.
  foreach ($node_types as $type) {
    switch ($springboard_type) {
      case 'fundraiser':
        if(fundraiser_is_donation_type($type->type)) {
          $display_types[$type->type] = $type;
        }
      break;
      case 'webform_user':
        if(_webform_user_is_webform_user_node_type($type->type) && !fundraiser_is_donation_type($type->type)) {
          $display_types[$type->type] = $type;
        }
      break;
      default:
        if(!_webform_user_is_webform_user_node_type($type->type) && !fundraiser_is_donation_type($type->type)) {
          $display_types[$type->type] = $type;
        }
      break;
    }
  }
  // Render the views tables for the appropriate set of content types.
  foreach($display_types as $type) {
    $view = views_get_view('sbv_forms');
    $view -> set_display('block_2');
    $view -> set_arguments(array($type->type));
    $view -> pre_execute();
    $view -> execute();
    if ($view && $view -> access('block_2') && !empty($view -> result)) {
      $tables[$type->type] = $view -> render();
    }
  }
  return theme('springboard_admin_forms_page', array('types'=> $display_types, 'tables' => $tables));
}

/**
 * Page callback for admin pages that are aggregates of child page links.
 *
 * @return string
 *   HTML output for the page.
 */
function springboard_admin_aggregate_links_page($path) {
  // Load the springboard admin menu so we know what links to render.
  $menu = springboard_admin_admin_menu_items();
  $links = array();
  foreach ($menu[$path]['_children'] as $item) {
    $options = array();
    if (isset($item['external'])) {
      $options['external'] = $item['external'];
    }
    $links[] = array(
      'title' => $item['link_title'],
      'href' => $item['link_path'],
      'options' => $options,
    );
  }

  return theme_links(array(
    'links' => $links,
    'attributes' => array(
      'class' => array('aggregate-links'),
    ),
    'heading' => '',
  ));
}

/**
 * Implements hook_form_alter().
 *
 * Add addition submit function for the "delete" action on the node delete
 * confirmation form.
 */
function springboard_admin_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {  
    case 'clone_node_confirm' :
      $form['#submit'][] = 'springboard_node_clone_form_submit';
    break;
    case 'node_delete_confirm' :
      $form['actions']['delete']['#submit'][] = 'springboard_admin_node_delete';
    break;
  }
}

/**
 * Submit handler for the "clone" action on the node clone confirmation form.
 *
 * Redirects users to the node edit page for the newly created node.
 */
function springboard_node_clone_form_submit(&$form, &$form_state) {
  $_GET['destination'] = $form_state['redirect'];
  return;
}

/**
 * Sumbit handler for the "delete" action on the node delete confirmation form.
 *
 * Redirects configured user roles to the Springboard Dashboard after a node is
 * deleted.
 */
function springboard_admin_node_delete($form) {
  global $user;
  if (springboard_admin_user_gets_sbux($user)) {
    $form_state['redirect'] = 'springboard';
    $_GET['destination'] = url('springboard');
    return;
  }
}

/**
 * Implements hook_node_type_insert().
 *
 * Adds a link to the springboard admin menu to create a new node of this 
 * content type if it is Fundraiser or Webform User enabled.
 */
function springboard_admin_node_type_insert($info) {
  $mlid = springboard_admin_menu_node_add_link($info);
}

/**
 * Implements hook_node_type_update.
 *
 * Deletes the existing node add link (if applicable) and creates a new node
 * add link for this content type if it is Fundraiser or Webform User enabled.
 */
function springboard_admin_node_type_update($info) {
  springboard_admin_menu_node_delete_link($info);
  $mlid = springboard_admin_menu_node_add_link($info);
}

/**
 * Implements hook_node_type_delete().
 *
 * Deletes the springboard admin menu link to create a node of this type.
 */
function springboard_admin_node_type_delete($info) {
  springboard_admin_menu_node_delete_link($info);
}

/**
 * Helper function. Returns a menu link item from the Springboard Admin Menu.
 *
 * @param string sbadmin_path
 *   The link_path value of the menu item to return.
 * @param int plid 
 *   The parent ID of the menu item to return.
 * @return array
 *   An associative array as required for menu_link_save() or FALSE if no item
 *   matches.
 */
function springboard_admin_menu_find_link($sbadmin_path, $plid = -1) {
  // Load all link items from the Springboard Admin Menu
  $sb_menu = menu_load_links('springboard_admin_menu');
  // If parent link ID is specified, return the first menu item with the defined 
  // path and defined plid
  if ($plid >= 0) {
    foreach ($sb_menu as $item) {
      if ($item['link_path'] == $sbadmin_path && $item['plid'] == $plid) {
        return $item;
      }
    }
  }
  // If a plid is not specified, return the first link in the menu that matches
  // the specified path.
  else {
    foreach ($sb_menu as $item) {
      if ($sbadmin_path == $item['link_path']) {
        return $item;
      }
    }
  }
  // If no item is found that matches the specified criteria, return FALSE.
  return FALSE;
}

/**
 * Helper Function. Creates an "add content" item in the Springboard Admin Menu 
 * for new content types if they are Fundraiser or Webform User enabled.
 *
 * @param object $type
 *    A node type object.
 *
 * @return int
 *   The menu link ID of the new menu item or FALSE if a menu item could not be
 *   created.
 */
function springboard_admin_menu_node_add_link($type) {
  // Get menu item definitions for the Donations and Forms parent links.
  $forms_menu_item = springboard_admin_menu_find_link('springboard/forms/all', 0);
  $donations_menu_item = springboard_admin_menu_find_link('springboard/forms/donations', 0);
  // Set up vars we need.
  $menu_link = array();
  $mlid = FALSE;
  // If node type is either useing Webform User or Fundraiser, and is not already
  // in the Springboard Admin Menu, create a menu item for it.
  if ((_webform_user_is_webform_user_node_type($type->type) || fundraiser_is_donation_type($type->type)) && !springboard_admin_menu_find_link('springboard/add/' . preg_replace('/_/', '-', $type->type))) {
    $menu_link = array(
      'link_path' => 'springboard/add/' . preg_replace('/_/', '-', $type->type),
      'link_title' => 'Create a ' . $type->name,
      'menu_name' => 'springboard_admin_menu',
      'weight' => '1',
      // If the node type is using Fundraiser, put it under the "Donations" item.
      // Otherwise, the parent item is "Forms".
      'plid' => fundraiser_is_donation_type($type->type) ? $donations_menu_item['mlid'] : $forms_menu_item['mlid'],
    );
    // Save that menu link.
    $mlid = menu_link_save($menu_link);
    // If saving the link fails, return a helpful error message.
    if (!$mlid) {
      watchdog('springboard_admin', "A Springboard Admin Menu item for node types %t could not be created.", array('%t' => $type->name));
      drupal_set_message(t('Please rebuild the Springboard Admin Menu by uninstalling and reinstalling the Springboard Admin module.'), 'warning');
    }
    // Otherwise, log the creation of the menu item.
    else {
      watchdog('springboard_admin', "Springboard Admin Menu items for node types %t were created.", array('%t' => $type->name));
    }
  }
  return $mlid;
}

/**
 * Helper function. Deletes a "add content" menu item from the Springboard
 * Admin Menu.
 *
 * @param object $type
 *   A node type object.
 *
 * @return bool
 *   TRUE if the link is successfully deleted, FALSE if the link cannot be
 *   found in the Springboard Admin Menu.
 */
function springboard_admin_menu_node_delete_link($type) {
    // Get the definition for the "add content" link for this node type.
    $link = springboard_admin_menu_find_link('springboard/add/' . preg_replace('/_/', '-', $type->type));
    // Delete the link if it exists.
    if ($link) {
      menu_link_delete($link['mlid']);
      return TRUE;
    }
    // Otherwise, return FALSE.
    else {
      return FALSE;
    }
}
