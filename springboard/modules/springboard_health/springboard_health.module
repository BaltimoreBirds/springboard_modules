<?php
/**
 * @file
 * Adds ability to track db health.
 */

/**
 * Implements hook_permission().
 */
function springboard_health_permission() {
  return array(
    'adminsiter site health reports' => array(
      'title' => t('Administer site health reports'),
      'description' => t('Springboard self-tracking'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_health_menu() {
  $items = array();

    $items['admin/reports/springboard-health'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Springboard Health'),
    'description' => t('View reports about your database.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_health_report_form'),
    'access arguments' => array('adminsiter site health reports'),
  );
  $items['admin/reports/springboard-health/report'] = array(
    'title' => 'Springboard Health',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/reports/springboard-health/settings'] = array(
    'title' => 'Table Settings',
    'description' => 'Configure the springboard health module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_health_admin_settings'),
    'access arguments' => array('adminsiter site health reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,

  );
  $items['admin/reports/springboard-health/email-settings'] = array(
    'title' => 'Email Settings',
    'description' => 'Configure the springboard health module.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/workflow/rules/reaction/manage/springboard_health_row_count_alert'),
    'access arguments' => array('adminsiter site health reports'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'weight' => 2,

  );
  return $items;
}



function springboard_health_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add an action linking to node/add to all pages.

  if(strpos($router_item['href'], 'admin/config/workflow/rules/reaction/manage/springboard_health_row_count_alert') !== FALSE ){
  
  $data['tabs'][0]['output'][] = array(
    '#theme' => 'menu_local_task',
    '#link' => array(
      'title' => t('Springboard Health'),
      'href' => 'admin/reports/springboard-health/report',
      'localized_options' => array(
        'attributes' => array(
          'title' => t(' d'),
        ),
      ),
    ),
  );
  $data['tabs']['0']['count'] =  2;

    $data['tabs'][0]['output'][] = array(
    '#theme' => 'menu_local_task',
    '#link' => array(
      'title' => t('Table Settings'),
      'href' => 'admin/reports/springboard-health/settings',
      'localized_options' => array(
        'attributes' => array(
          'title' => t(''),
        ),
      ),
    ),
  );

  $data['tabs'][0]['output'][] = array(
    '#theme' => 'menu_local_task',
    '#active' => TRUE,
    '#link' => array(
      'title' => t('Email Settings'),
      'href' => current_path(),
      'localized_options' => array(
        'attributes' => array(
          'title' => t('Add new content'),
        ),
      ),
    ),
  );
  $data['tabs']['2']['count'] =  2;

  }
}

function springboard_health_admin_settings() {
  
  $form = array();
  
  $default = array(
    'salesforce_log_batch' => 'salesforce_log_batch',
    'salesforce_log_item' => 'salesforce_log_item',
    'webform_submissions' => 'webform_submissions',
    'secure_prepopulate_expired' => 'secure_prepopulate_expired',
    'fundraiser_sustainers_log' => 'fundraiser_sustainers_log',
  );

  $keys = springboard_health_database_keys();
  $form['active'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select database'),
  );

  $form['active']['springboard_health_active_database'] = array(
    '#type' => 'select',
    '#options' => $keys,
    '#default_value' => variable_get('springboard_health_active_database', 'default'),
    '#description' => t('Select which database you would like to monitor. Changing this value will reset the table list below.'),
  );

  $tables = Database::getConnection('default', variable_get('springboard_health_active_database', 'default'))->schema()->findTables('%');

  $form['springboard_health_tables'] = array(
    '#type' => 'select',
    '#title' => t('Select the tables that should be visible in the reports interface.'),
    '#options' => $tables,
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#size' => 50,
    '#default_value' => variable_get('springboard_health_tables', $default),
  );

  return system_settings_form($form);
}

/**
 * List all defined database keys.
 */
function springboard_health_database_keys() {
  global $databases;
  $keys = array();
  foreach ($databases as $key => $database) {
    $keys[$key] = $key;
  }
  return $keys;
}

/**
 * Implements hook_theme().
 */
function springboard_health_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_health_table' => array(
      'render element' => 'element'
    ),
  );
}

function theme_springboard_health_table($vars) {
  $element = $vars['element'];
  $rows = array();
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => $element[$key]['send']),
      array('data' => $element[$key]['name']),
      array('data' => $element[$key]['row_limit']),
      array('data' => $element[$key]['current']),
    );
  }
  $header = array(t('Send Report'), t('Table name'), t('Set notification row limit'), t('Current Size'));
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function springboard_health_report_form() {
  $tables = variable_get('springboard_health_tables', 0);

  $db = variable_get('springboard_health_active_database', 'default');
  db_set_active($db);
  $form['header'] = array(
    '#markup' => t('Check "send" to emails when table count exceeds notification row limit'),
  );
  $form['health'] = array(
    '#tree' => TRUE,
    '#theme' => 'springboard_health_table',
  );


  foreach ($tables as $table) {
    $select = db_select($table);
    $size = $select->countQuery()->execute()->fetchField();
    $values = db_query('SELECT * FROM {springboard_health} where tablename = :name AND db_conn = :db', array(':name' => $table, ':db' => $db))->fetchAll();
    
    $form['health'][$table]['send'] = array (
     '#type' => 'checkbox',
      '#default_value' => $values[0]->mail,
      '#size' => 10
    );
    $form['health'][$table]['name'] = array(
      '#markup' => $table,
      '#size' => 10
    );
      $form['health'][$table]['row_limit'] = array(
        '#type' => 'textfield',
        '#default_value' => $values[0]->row_limit,
        '#size' => 30
      );
    $form['health'][$table]['current'] = array(
      '#type' => 'markup',
      '#markup' => $size,
      '#size' => 10
    );
  }
  $form['db'] = array(
    '#type' => 'hidden',
    '#value' => $db,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function springboard_health_report_form_submit(&$form, &$form_state) {

  $db = $form_state['values']['db'];
  $tables = $form_state['values']['health'];
  foreach ($tables as $name => $values) {
    $data = array(
      'tablename' => $name,
      'db_conn' => $db,
      'mail' => $values['send'],
      'row_limit' => $values['row_limit'],
    );

    $exists = db_query('SELECT * FROM {springboard_health} where tablename = :name AND db_conn = :db', array(':name' => $name, ':db' => $db))->fetchField();
  
    if($exists) {
      drupal_write_record('springboard_health', $data, array('tablename', 'db_conn'));
    }
    else {
      drupal_write_record('springboard_health', $data);
    }

  }
}

function springboard_health_cron() {
  springboard_health_status_check();
}

function springboard_health_status_check() {
  $db = variable_get('springboard_health_active_database', 'default');
  $result = db_query('SELECT * FROM {springboard_health} where mail = 1 AND db_conn = :db', array(':db' => $db));
  db_set_active($db);
  foreach ($result as $table) {
    $select = db_select($table->tablename);
    $size = $select->countQuery()->execute()->fetchField();
    if (($size > $table->row_limit) && module_exists("rules")) {
      rules_invoke_event("springboard_health_row_count_exceeded", $table->tablename);
    }
  }
}
