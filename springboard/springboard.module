<?php

/**
 * @file
 * Provides a admin facing interface to the Springboard system.
 */

/**
 * Implements hook_permission().
 */
function springboard_permission() {
  return array(
    'administer springboard' => array(
      'title' => t('Administer Springboard'),
      'description' => t('Perform administration tasks for springboard.'),
    ),
    'access springboard dashboard' => array(
      'title' => t('Access the Springboard dashboard'),
      'description' => t('Access the main landing page for springboard.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();
  // Admin settings for dashboard display.
  $items['admin/config/system/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Configurations for the Springboard system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_admin_settings'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'springboard.admin.inc',
  );
  // Springboard interface.
  $items['admin/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  // Forms sub-menu
  if (module_exists('fundraiser') || module_exists('webform')) {
    $items['admin/springboard/forms'] = array(
      'title' => 'Forms',
      'description' => 'Manage your donation forms and other webforms.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Reports submenu
  if (module_exists('queue_processor')) {
    $items['admin/springboard/reports'] = array(
      'title' => 'Reports',
      'description' => 'Access reports on donations and Salesforce activity.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
    $items['admin/springboard/reports/batch'] = array(
      'title' => 'Batch History',
      'description' => 'View the batch history report.',
      'weight' => -10,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/batch'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/queued'] = array(
      'title' => 'Queued Items',
      'description' => 'Report on items currently queued for processing.',
      'weight' => -9,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/current'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/retries'] = array(
      'title' => 'Retries',
      'description' => 'Report on queued items that didn\'t go through the first time.',
      'weight' => -8,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/retries'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/failures'] = array(
      'title' => 'Permanent Failures',
      'description' => 'Report on permanently failed transactions.',
      'weight' => -7,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/permanent-failures'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Forms sub-menu
  if (module_exists('salesforce_api')) {
    $items['admin/springboard/salesforce'] = array(
      'title' => 'Salesforce',
      'description' => 'Manage Salesforce configurations.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Provide settings tabs for easy access to various sub modules under this tab.
  $items['admin/springboard/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Springboard settings.',
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
  );
  // Help tab.
  $items['admin/springboard/help'] = array(
    'title' => 'Help',
    'description' => 'Future home of Springboard help documentation.',
    'page callback' => 'springboard_help_page',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  // Callback for the Springboard sync button.
  $items['springboard_sync'] = array(
    'title' => 'Syncronize',
    'page callback' => '_springboard_syncronize',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  // Callback for the additional details modals in the fundraiser report panel.
  $items['springboard_report_modal'] = array(
    'title' => 'Syncronize',
    'page callback' => '_springboard_form_report',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu().
 * Add sub menus for the settings page per active Springboard module.
 */
function springboard_menu_alter(&$items) {
  // Add menus under forms.
  $types_added = array();
  if (module_exists('fundraiser')) {
    $types = fundraiser_get_donation_types();
    foreach ($types as $type => $status) {
      if (isset($status) && $status == 1) {
        $types_added[] = $type;
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/' . $type]['type'] = MENU_LOCAL_TASK;
        $items['admin/springboard/forms/' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/' . $type]['access callback']);
      }
    }
  }
  if (module_exists('webform')) {
    $types = webform_variable_get('webform_node_types');
    foreach ($types as $type) {
      if (!in_array($type, $types_added) && isset($items['node/add/' . $type])) {
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/' . $type]['type'] = MENU_LOCAL_TASK;
        $items['admin/springboard/forms/' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/' . $type]['access callback']);
      }
    }
    $items['admin/springboard/forms/webforms'] = $items['admin/content/webform'];
    $items['admin/springboard/forms/webforms']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/forms/webforms']['access arguments'] = array('administer springboard');
    $items['admin/springboard/forms/webforms']['title'] = 'View ' . $items['admin/content/webform']['title'];
    $items['admin/springboard/forms/webforms']['weight'] = 100; 
    unset($items['admin/springboard/forms/webforms']['access callback']);
  }
  // Add menus under salesforce.
  if (module_exists('salesforce_api')) {
    // Salesforce settings
    $items['admin/springboard/salesforce/salesforce'] = $items['admin/config/services/salesforce'];
    $items['admin/springboard/salesforce/salesforce']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/salesforce/salesforce']['title'] = $items['admin/config/services/salesforce']['title'] . ' settings';
    $items['admin/springboard/salesforce/salesforce']['access arguments'] = array('administer springboard');
    $items['admin/springboard/salesforce/salesforce']['weight'] = 100;
    // Update WSDL.
    $items['admin/springboard/salesforce/salesforce-wsdl'] = $items['admin/config/services/salesforce/wsdl'];
    $items['admin/springboard/salesforce/salesforce-wsdl']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/salesforce/salesforce-wsdl']['title'] = 'Salesforce ' . $items['admin/config/services/salesforce/wsdl']['title'];
    $items['admin/springboard/salesforce/salesforce-wsdl']['access arguments'] = array('administer springboard');
    $items['admin/springboard/salesforce/salesforce-wsdl']['weight'] = 101;
    // Fieldmaps.
    $items['admin/springboard/salesforce/salesforce-fieldmap'] = $items['admin/config/services/salesforce/fieldmap'];
    $items['admin/springboard/salesforce/salesforce-fieldmap']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/salesforce/salesforce-fieldmap']['title'] = $items['admin/config/services/salesforce/fieldmap']['title'];
    $items['admin/springboard/salesforce/salesforce-fieldmap']['access arguments'] = array('administer springboard');
    // Fieldmap sub tasks, moved up to actual tasks. Add.
    $items['admin/springboard/salesforce/salesforce-fieldmap-add'] = $items['admin/config/services/salesforce/fieldmap/add'];
    $items['admin/springboard/salesforce/salesforce-fieldmap-add']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/salesforce/salesforce-fieldmap-add']['title'] = $items['admin/config/services/salesforce/fieldmap/add']['title'] . ' Fieldmaps';
    $items['admin/springboard/salesforce/salesforce-fieldmap-add']['access arguments'] = array('administer springboard');
    $items['admin/springboard/salesforce/salesforce-fieldmap-add']['weight'] = 80;
    // Fieldmap sub tasks, moved up to actual tasks. Import.
    $items['admin/springboard/salesforce/salesforce-fieldmap-import'] = $items['admin/config/services/salesforce/fieldmap/import'];
    $items['admin/springboard/salesforce/salesforce-fieldmap-import']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/salesforce/salesforce-fieldmap-import']['title'] = $items['admin/config/services/salesforce/fieldmap/import']['title'] . ' Fieldmaps';
    $items['admin/springboard/salesforce/salesforce-fieldmap-import']['access arguments'] = array('administer springboard');
    $items['admin/springboard/salesforce/salesforce-fieldmap-import']['weight'] = 81;
  }
  // Add menus under settings.
  $items['admin/springboard/settings/springboard'] = $items['admin/config/system/springboard'];
  $items['admin/springboard/settings/springboard']['type'] = MENU_LOCAL_TASK;
  $items['admin/springboard/settings/springboard']['access arguments'] = array('administer springboard');
  $items['admin/springboard/settings/springboard']['title'] = 'Springboard';
  $items['admin/springboard/settings/springboard']['weight'] = 100;
  if (module_exists('fundraiser')) {
    $items['admin/springboard/settings/fundraiser'] = $items['admin/config/system/fundraiser'];
    $items['admin/springboard/settings/fundraiser']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/fundraiser']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/fundraiser']['title'] = 'Fundraiser';
  }
  if (module_exists('market_source')) {
    $items['admin/springboard/settings/market-source'] = $items['admin/config/search/market-source'];
    $items['admin/springboard/settings/market-source']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/market-source']['access arguments'] = array('administer springboard');
  }
  if (module_exists('sf_donation')) {
    $items['admin/springboard/settings/salesforce-management'] = $items['admin/config/system/salesforce-management'];
    $items['admin/springboard/settings/salesforce-management']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-management']['access arguments'] = array('administer springboard');
  }
  if (module_exists('queue_processor')) {
    $items['admin/springboard/settings/salesforce-queue'] = $items['admin/config/system/salesforce-management/queue'];
    $items['admin/springboard/settings/salesforce-queue']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-queue']['access arguments'] = array('administer springboard');
  }
  if (module_exists('gateway_manager')) {
    $items['admin/springboard/settings/gateways'] = $items['admin/config/system/fundraiser/gateways'];
    $items['admin/springboard/settings/gateways']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/gateways']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/gateways-add'] = $items['admin/config/system/fundraiser/gateways/add'];
    $items['admin/springboard/settings/gateways-add']['title'] = t('Add gateway');
    $items['admin/springboard/settings/gateways-add']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/gateways-add']['access arguments'] = array('administer springboard');
  }
  if (module_exists('webform_ab')) {
    $items['admin/springboard/settings/webform-ab'] = $items['admin/config/content/webform_ab'];
    $items['admin/springboard/settings/webform-ab']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/webform-ab']['access arguments'] = array('administer springboard');
  }
  if (module_exists('secure_prepopulate')) {
    $items['admin/springboard/settings/secure-prepopulate'] = $items['admin/config/system/secure-prepopulate'];
    $items['admin/springboard/settings/secure-prepopulate']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/secure-prepopulate']['access arguments'] = array('administer springboard');
  }
}

/**
 * Implements hook_theme().
 */
function springboard_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_logo' => array(
      'variables' => array('logo' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-logo',
    ),
    'springboard_sf_status' => array(
      'variables' => array('status' => '', 'updated_time' => '', 'batch_status' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-sf-status',
    ),
    'springboard_jump' => array(
      'variables' => array('menu' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-jump',
    ),
    'springboard_form_performance' => array(
      'variables' => array('form_table' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-form-performance',
    ),
    'springboard_help' => array(
      'variables' => array('help_array' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-help',
    ),
    'springboard_form_report' => array(
      'variables' => array('access_results' => '', 'nid' => '', 'total_donations' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-form-report',
    ),
  );
}

/**
 * Menu callback. Springboard dashboard page.
 */
function springboard_admin() {
  // Add our CSS for display.
  drupal_add_css(drupal_get_path('module', 'springboard') . '/css/springboard.css', 'module');
  $content = '';
  // Show form to configure defaults for Salesforce if values haven't already been set.
  // If we already set this, then short circuit to avoid further efforts.
  if (module_exists('salesforce_api') && variable_get('springboard_salesforce_enabled', FALSE) == FALSE) {
    module_load_include('inc', 'salesforce_api', 'salesforce_api.admin');
    $content .= '<div class="springboard-welcome">';
    $content .= drupal_render(drupal_get_form('salesforce_api_settings_form'));
    $content .= drupal_render(drupal_get_form('salesforce_api_update_wsdl_form'));
    $content .= '</div>';
  }
  $content .= '<div class="springboard-dashboard dashboard">';
  // Load the enabled panes for the dashboard.
  $panes = module_invoke_all('springboard_dashboard_panes');
  drupal_alter('springboard_dashboard_panes', $panes);
  $enabled_panes = variable_get('springboard_enabled_panes', array());
  foreach ($panes as $pane_key => $pane) {
    if (isset($enabled_panes[$pane_key]) && !empty($pane['content'])) {
      $content .= $pane['content'];
    }  
  }
  $content .= '</div>';
  return $content;
}

/**
 * Form alter, springboard's standard settings form.
 */
function springboard_form_salesforce_api_settings_form_alter(&$form, &$form_state, $form_id) {
/*
TODO come back to this, if this even exists by the time we're done with integration.
  // Check the default campaign.
  if (module_exists('sf_donation')) {
    $default_campaign = variable_get('sf_donation_default_campaign', '');
    if (isset($default_campaign) && !empty($default_campaign)) {
      $form['default_campaign'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Default campaign') . '</h3><p class="default_campaign_message">',
        '#suffix' => '</p>',
        '#value' => t('The %campaign campaign has been selected as default.', array('%campaign' => $default_campaign)),
      );
    }
    else {
      $form['default_campaign'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Default campaign') . '</h3><p class="default_campaign_message">',
        '#suffix' => '</p>',
        '#value' => t('Springboard needs to know which Salesforce campaign to use as a default.'),
      );
    }
  }
*/
  $form['#submit'][] = 'springboard_salesforce_api_test_connection';
}

/**
 * Form alter, springboard's standard settings form.
 */
function springboard_form_salesforce_api_update_wsdl_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'springboard_salesforce_api_test_connection';
}

/**
 * Submit handler, springboard's standard settings form.
 */
function springboard_salesforce_api_test_connection(&$form, &$form_state) {
  // Check that we have a working connection, and if we do we don't need to show the message anymore.
  $sf = salesforce_api_connect();
  if (isset($sf) && is_object($sf)) {
    variable_set('springboard_salesforce_enabled', TRUE);
  }
  else {
    variable_set('springboard_salesforce_enabled', FALSE);
  }
}

/**
 * Menu callback. Springboard help.
 */
function springboard_help_page() {
  $help_array = module_invoke_all('springboard_help');
  drupal_alter('springboard_help', $help_array);
  return theme('springboard_help', array('help_array' => $help_array));
}

/**
 * Implements hook_springboard_help().
 */
function springboard_springboard_help() {
  $help_array = array();
  $help_array[t('Documentation')] = array(
    t('Springboard documentation is available on !docs.',
      array('!docs' => l('gospringboard.com', 'http://www.gospringboard.com/documentation')))
  );
  $help_array[t('Issue Tracker')] = array(
    t('The Springboard project issue tracker is hosted on !issue_tracker',
      array('!issue_tracker' => l('drupal.org', 'http://drupal.org/project/springboard')))
  );
  return $help_array;
}

/**
 * Menu callback. Syncronization callback for Springboard Sync button.
 */
function _springboard_syncronize() {
  if (module_exists('queue_processor')) {
    module_load_include('module', 'queue_processor');
    queue_processor_process();
    drupal_set_message(t('Salesforce queues have been processed.'));
  }
  drupal_goto('admin/springboard');
}

/**
 * Menu callback. Report callback for Springboard info button.
 */
function _springboard_form_report($nid = '') {
  // Short circuit if no legit data found.
  if (empty($nid) || !module_exists('fundraiser')) {
    ctools_modal_render('', '');
  }
  ctools_include('ajax');
  ctools_include('modal');
  // Grab data from fundraiser tracker data.
  if (is_numeric($nid)) {
    $access_results = db_query('SELECT ft.pageviews, ft.conversions, ft.local_failures, ft.gateway_failures, f.internal_name FROM {fundraiser} f ' .
      'INNER JOIN {fundraiser_tracking} ft ON f.nid = ft.nid WHERE f.nid = :nid', array(':nid' => $nid))->fetchObject();
  }
// TODO correct this for new structures.
//  $total_donations = db_query('SELECT sum(uc.order_total) FROM {uc_orders} uc
//        INNER JOIN {fundraiser_webform_donation} f ON f.did = uc.order_id
//        WHERE f.webform_nid = :nid AND uc.order_status = "payment_received"',
//        array(':nid' => $nid))->fetchObject();
//  $total_donations = round($total_donations) . '.00';
  $total_donations = 'TBD';
  $total_donations = $total_donations ? $total_donations : '0.00';
  $output = theme('springboard_form_report',
    array('access_results' => $access_results, 'nid' => $nid, 'total_donations' => $total_donations));
  ctools_modal_render($access_results->internal_name, $output);
}

/**
 * Implements hook_springboard_dashboard_panes().
 */
function springboard_springboard_dashboard_panes() {
  $panes['springboard_sf_status'] = array(
    'label' => 'Salesforce connection status',
    'description' => t('Salesforce connection status'),
    'content' => _springboard_sf_status(),
    'weight' => 0,
  );
  $panes['springboard_recent_donation_forms'] = array(
    'label' => 'Recent Donation Forms',
    'description' => t('Configuration and submissions summary for recently created or updated springboard donation forms.'),
    'content' => module_exists('views') ? views_embed_view('sbv_forms', 'block_1') : t('Please enable the Views module to improve your Springboard experience.'),
    'weight' => 1,
  );
  $panes['springboard_recent_forms'] = array(
    'label' => 'Recent Forms',
    'description' => t('Configuration and submissions summary for recently created or updated springboard forms.'),
    'content' => module_exists('views') ? views_embed_view('sbv_forms', 'block') : t('Please enable the Views module to improve your Springboard experience.'),
    'weight' => 2,
  );
  return $panes;
}

/**
 * Hook callback. For the Springboard Salesforce Status pane.
 */
function _springboard_sf_status() {
  $output = '';
  if (module_exists('salesforce')) {
    // Call on the module to get the current connection status
    $status = salesforce_get_api();
    // WSDL update
    $updated_time = variable_get('salesforce_api_wsdl_updated', 0);
    // Latest batch # total items :: success :: fail.
    $batch_status = t('Batch info unavailable, please install Queue API.');
    if (module_exists('queue_api')) {
      $batch = db_fetch_object(db_query('SELECT * FROM {sf_batch} ORDER BY id DESC LIMIT 1'));
      if ($batch) {
        $batch_status = t('Batch # @id - @record_count::<span class="successes">@success_count</span>::' .
          '<span class="failures">@fail_count</span>',
          array('@id' => $batch->id, '@record_count' => $batch->record_count, '@success_count' => $batch->success_count,
          '@fail_count' => $batch->failure_count));
      }
      else {
        $batch_status = t('No batches processed yet.');
      }
    }
    return theme('springboard_sf_status', array('status' => $status, 'updated_time' => $updated_time, 'batch_status' => $batch_status));
  }
  return 'status';
}

/**
 * Helper functions.
 */

/**
 * Helper function, sort donation forms by conversion rate.
 */
function _springboard_sort_by_conversion($a, $b) {
  if (isset($a['conversion']) && isset($b['conversion'])) {
    if ($a['conversion'] == $b['conversion']) {
      return 0;
    }
    return ($a['conversion'] > $b['conversion']) ? -1 : 1;
  }
  return -1;
}

/**
 * Helper function.
 * Sets CSS class for dashboard elements based on comparison between the current value and the threshold value.
 *
 * @param $threshold
 * Int threshold value.
 *
 * @param $value
 * Int current value.
 *
 * @param $op
 * Specifies which type of comparison to perform, options are 'min' or 'max', defaults to min.
 */
function springboard_set_dashboard_class($threshold, $value, $op = 'min') {
  $value = preg_replace('/\%|ms/', '', $value);
  if (!$threshold || !is_numeric($value)) {
    $class = 'no-threshold';
  }
  else {
    switch ($op) {
      case 'min':
        $class = ($value >= $threshold) ? 'successes' : 'failures';
        break;
      case 'max':
        $class = ($value <= $threshold) ? 'successes' : 'failures';
        break;
    }
  }
  return $class;
}

/**
 * Helper function.
 * Calculate performance percentages.
 *
 * @param $a
 * Int first number.
 *
 * @param $b
 * Int second number.
 *
 * @return
 * Returns a percentage or N/A if either number is zero.
 */
function _springboard_percentage($a, $b) {
  if ($a && $b) {
    return round(100 * $a / $b) . '%';
  }
  else {
    return 'N/A';
  }
}