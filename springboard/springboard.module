<?php

/**
 * @file
 * Provides a admin facing interface to the Springboard system.
 */

/**
 * Implements hook_permission().
 */
function springboard_permission() {
  return array(
    'administer springboard' => array(
      'title' => t('Administer Springboard'),
      'description' => t('Perform administration tasks for springboard.'),
    ),
    'access springboard dashboard' => array(
      'title' => t('Access the Springboard dashboard'),
      'description' => t('Access the main landing page for springboard.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();
  // Admin settings for dashboard display.
  $items['admin/config/system/springboard'] = array(
    'title' => 'Springboard settings',
    'description' => 'Configurations for the Springboard system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_admin_settings'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'springboard.admin.inc',
  );
  // Springboard interface.
  $items['admin/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  // Forms sub-menu
  if (module_exists('fundraiser') || module_exists('webform')) {
    $items['admin/springboard/forms'] = array(
      'title' => 'Forms',
      'description' => 'Manage your donation forms and other webforms.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Reports submenu
  if (module_exists('queue_processor')) {
    $items['admin/springboard/reports'] = array(
      'title' => 'Reports',
      'description' => 'Access reports on donations and Salesforce activity.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
    $items['admin/springboard/reports/batch'] = array(
      'title' => 'Batch History',
      'description' => 'View the batch history report.',
      'weight' => -10,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/batch'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/queued'] = array(
      'title' => 'Queued Items',
      'description' => 'Report on items currently queued for processing.',
      'weight' => -9,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/current'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/retries'] = array(
      'title' => 'Retries',
      'description' => 'Report on queued items that didn\'t go through the first time.',
      'weight' => -8,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/retries'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/failures'] = array(
      'title' => 'Permanent Failures',
      'description' => 'Report on permanently failed transactions.',
      'weight' => -7,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/permanent-failures'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Provide settings tabs for easy access to various sub modules under this tab.
  $items['admin/springboard/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Springboard settings.',
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
  );
  // Help tab.
  $items['admin/springboard/help'] = array(
    'title' => 'Help',
    'description' => 'Future home of Springboard help documentation.',
    'page callback' => 'springboard_help_page',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  // Callback for the Springboard sync button.
  $items['springboard_sync'] = array(
    'title' => 'Syncronize',
    'page callback' => '_springboard_syncronize',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  // Callback for the additional details modals in the fundraiser report panel.
  $items['springboard_report_modal'] = array(
    'title' => 'Syncronize',
    'page callback' => '_springboard_form_report',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu().
 * Add sub menus for the settings page per active Springboard module.
 */
function springboard_menu_alter(&$items) {
  // Add menus under forms.
  if (module_exists('fundraiser')) {
    // TODO - check if this even still exists in Fundraiser, move to here if not
    //$items['admin/springboard/forms/donation'] = $items['admin/content/donation-forms'];
    //$items['admin/springboard/forms/donation']['type'] = MENU_LOCAL_TASK;
    //$items['admin/springboard/forms/donation']['access arguments'] = array('administer springboard');
    //unset($items['admin/springboard/forms/donation']['access callback']);
    // TODO generate a list of FR available types for adding
    //$items['admin/springboard/forms/donation-add'] = $items['node/add/donation-form'];
    //$items['admin/springboard/forms/donation-add']['type'] = MENU_LOCAL_TASK;
    //$items['admin/springboard/forms/donation-add']['access arguments'] = array('administer springboard');
    //unset($items['admin/springboard/forms/donation-add']['access callback']);
  }
  if (module_exists('webform')) {
    $items['admin/springboard/forms/webforms'] = $items['admin/content/webform'];
    $items['admin/springboard/forms/webforms']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/forms/webforms']['access arguments'] = array('administer springboard');
    unset($items['admin/springboard/forms/webforms']['access callback']);
    // TODO generate a list of WF available types for adding.
    $items['admin/springboard/forms/webform-add'] = $items['node/add/webform'];
    $items['admin/springboard/forms/webform-add']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/forms/webform-add']['access arguments'] = array('administer springboard');
    unset($items['admin/springboard/forms/webform-add']['access callback']);
  }
  // Add menus under settings.
  $items['admin/springboard/settings/springboard'] = $items['admin/config/system/springboard'];
  $items['admin/springboard/settings/springboard']['type'] = MENU_LOCAL_TASK;
  $items['admin/springboard/settings/springboard']['access arguments'] = array('administer springboard');
  $items['admin/springboard/settings/springboard']['weight'] = 100;
  if (module_exists('salesforce_management_api')) {
    // Salesforce settings.
    $items['admin/springboard/settings/salesforce'] = $items['admin/config/system/salesforce-management'];
    $items['admin/springboard/settings/salesforce']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce']['access arguments'] = array('administer springboard');
    // Update WSDL.
    $items['admin/springboard/settings/salesforce-wsdl'] = $items['admin/config/system/salesforce-management/update-wsdl'];
    $items['admin/springboard/settings/salesforce-wsdl']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-wsdl']['access arguments'] = array('administer springboard');
    // Fieldmaps.
    $items['admin/springboard/settings/salesforce-fieldmap'] = $items['admin/config/system/salesforce-management/fieldmap'];
    $items['admin/springboard/settings/salesforce-fieldmap']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-fieldmap']['access arguments'] = array('administer springboard');
  }
  if (module_exists('fundraiser')) {
    $items['admin/springboard/settings/fundraiser'] = $items['admin/config/system/fundraiser'];
    $items['admin/springboard/settings/fundraiser']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/fundraiser']['access arguments'] = array('administer springboard');
  }
  if (module_exists('market_source')) {
    $items['admin/springboard/settings/market-source'] = $items['admin/config/search/market-source'];
    $items['admin/springboard/settings/market-source']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/market-source']['access arguments'] = array('administer springboard');
  }
  if (module_exists('sf_donation')) {
    $items['admin/springboard/settings/salesforce-management'] = $items['admin/config/system/salesforce-management'];
    $items['admin/springboard/settings/salesforce-management']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-management']['access arguments'] = array('administer springboard');
  }
  if (module_exists('queue_processor')) {
    $items['admin/springboard/settings/salesforce-queue'] = $items['admin/config/system/salesforce-management/queue'];
    $items['admin/springboard/settings/salesforce-queue']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/salesforce-queue']['access arguments'] = array('administer springboard');
  }
  if (module_exists('gateway_manager')) {
    $path = module_exists('gateway_manager') ? 'admin/config/system/fundraiser/gateways' : 'admin/store/settings/payment/edit/gateways';
    $items['admin/springboard/settings/gateways'] = $items[$path];
    $items['admin/springboard/settings/gateways']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/gateways']['access arguments'] = array('administer springboard');
  }
  if (module_exists('webform_ab')) {
    $items['admin/springboard/settings/webform-ab'] = $items['admin/config/system/webform_ab'];
    $items['admin/springboard/settings/webform-ab']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/webform-ab']['access arguments'] = array('administer springboard');
  }
  if (module_exists('secure_prepopulate')) {
    $items['admin/springboard/settings/secure-prepopulate'] = $items['admin/config/system/secure-prepopulate'];
    $items['admin/springboard/settings/secure-prepopulate']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/secure-prepopulate']['access arguments'] = array('administer springboard');
  }
}

/**
 * Implements hook_theme().
 */
function springboard_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_logo' => array(
      'variables' => array('logo' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-logo',
    ),
    'springboard_sf_status' => array(
      'variables' => array('status' => '', 'updated_time' => '', 'batch_status' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-sf-status',
    ),
    'springboard_jump' => array(
      'variables' => array('menu' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-jump',
    ),
    'springboard_form_performance' => array(
      'variables' => array('form_table' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-form-performance',
    ),
    'springboard_help' => array(
      'variables' => array('help_array' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-help',
    ),
    'springboard_form_report' => array(
      'variables' => array('access_results' => '', 'nid' => '', 'total_donations' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-form-report',
    ),
  );
}

/**
 * Menu callback. Springboard dashboard page.
 */
function springboard_admin() {
  // Add our CSS for display.
  drupal_add_css(drupal_get_path('module', 'springboard') . '/css/springboard.css', 'module');
  $content = '';
  // Show form to configure defaults for Salesforce if values haven't already been set.
  // If we already set this, then short circuit to avoid further efforts.
  if (module_exists('salesforce_management_api') && variable_get('springboard_salesforce_enabled', FALSE) == FALSE) {
    $content .= '<div class="springboard-welcome">' . drupal_render(drupal_get_form('springboard_welcome')) . '</div>';
  }
  $content .= '<div class="springboard-dashboard dashboard">';
  // Load the enabled panes for the dashboard.
  $panes = module_invoke_all('springboard_dashboard_panes');
  drupal_alter('springboard_dashboard_panes', $panes);
  $enabled_panes = variable_get('springboard_enabled_panes', array());
  foreach ($panes as $pane_key => $pane) {
    if ($enabled_panes[$pane_key] && !empty($pane['content'])) {
      $content .= $pane['content'];
    }  
  }
  $content .= '</div>';
  return $content;
}

/**
 * Form to setup initial Salesforce variables if not already set.
 */
function springboard_welcome() {
  $form = array();
  // Check the default campaign.
  if (module_exists('sf_donation')) {
    $default_campaign = variable_get('sf_donation_default_campaign', '');
    if (isset($default_campaign) && !empty($default_campaign)) {
      $form['default_campaign'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Default campaign') . '</h3><p class="default_campaign_message">',
        '#suffix' => '</p>',
        '#value' => t('The %campaign campaign has been selected as default.', array('%campaign' => $default_campaign)),
      );
    }
    else {
      $form['default_campaign'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Default campaign') . '</h3><p class="default_campaign_message">',
        '#suffix' => '</p>',
        '#value' => t('Springboard needs to know which Salesforce campaign to use as a default.'),
      );
    }
  }
  // If the Salesforce Management API can connect to Salesforce we no longer need the salesforce configuration form.
  if (module_exists('salesforce_management_api')) {
    $sf = salesforce_management_api_connect();
    if (isset($sf) && is_object($sf)) {
      $form['salesforce_status'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Salesforce integration status') . '</h3><p class="springboard_status_message">',
        '#suffix' => '</p>',
        '#value' => t('Drupal can now connect to Salesforce.'),
      );
    }
    else {
      $form['salesforce_status'] = array(
        '#type' => 'markup',
        '#prefix' => '<h3>' . t('Salesforce integration status') . '</h3><p class="springboard_status_message">',
        '#suffix' => '</p>',
        '#value' => t('Salesforce integration is enabled but Springboard is unable to connect to Salesforce. ' .
        'Please fill out the form below with your Salesforce credentials.'),
      );
      $form['sf'] = array(
        '#type' => 'fieldset',
        '#title' => t('Salesforce configuration'),
        '#description' => t('Springboard needs your Salesforce credentials to continue.'),
      );
      $form['sf']['salesforce_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#description' => t('Your Salesforce login name. This should be an email address.'),
        '#default_value' => variable_get('salesforce_management_api_username', ''),
        '#required' => TRUE,
      );
      $form['sf']['salesforce_password'] = array(
        '#type' => 'password',
        '#title' => t('Password'),
        '#description' => t('Your Salesforce login password.'),
        '#default_value' => variable_get('salesforce_management_api_password', ''),
        '#required' => TRUE,
      );
      $form['sf']['salesforce_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Security Token'),
        '#description' => t('You may set your security token by logging into Salesforce and navigating to Setup > ' .
        'My Personal Information > Reset My Security Token.'),
        '#default_value' => variable_get('salesforce_management_api_token', ''),
        '#required' => TRUE,
      );
      $form['#attributes']['enctype'] = 'multipart/form-data';
      $form['sf']['salesforce_wsdl'] = array(
        '#type' => 'file',
        '#title' => t('WSDL File'),
        '#description' => t('The WSDL file tells your site what kinds of information are available in Salesforce. ' .
        'Insert instructions on obtaining a copy of your org WSDL here.'),
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save settings'),
      );
      $form['#validate'][] = 'springboard_welcome_salesforce_validate';
      $form['#submit'][] = 'springboard_welcome_salesforce_submit';
    }
  }
  return $form;
}

/**
 * Validation handler for salesforce configuration form.
 */
function springboard_welcome_salesforce_validate(&$form, $form_state) {
  if (isset($_FILES['files']) && $_FILES['files']['name']['salesforce_wsdl']
    && is_uploaded_file($_FILES['files']['tmp_name']['salesforce_wsdl'])) {
    // Check for file upload errors and return FALSE if a lower level system error occurred.
    switch ($_FILES['files']['error']['salesforce_wsdl']) {
      // @see http://php.net/manual/en/features.file-upload.errors.php
      case UPLOAD_ERR_OK:
        break;
      case UPLOAD_ERR_INI_SIZE:
      case UPLOAD_ERR_FORM_SIZE:
        drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.',
          array('%file' => 'salesforce_wsdl', '%maxsize' => format_size(file_upload_max_size()))), 'error');
        return 0;
      case UPLOAD_ERR_PARTIAL:
      case UPLOAD_ERR_NO_FILE:
        drupal_set_message(t('The file %file could not be saved, because the upload did not complete.',
          array('%file' => 'salesforce_wsdl')), 'error');
        return 0;
      default:
        drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.',
          array('%file' => 'salesforce_wsdl')), 'error');
        return 0;
    }
    // Check the file extension and existance.
    $path_parts = pathinfo($_FILES['files']['name']['salesforce_wsdl']);
    if (!in_array(drupal_strtolower($path_parts['extension']), array('xml', 'wsdl'))) {
      form_set_error('salesforce_wsdl', t('File upload error: invalid file extension. Please upload a file with an XML or WSDL  extension.'));
      return 0;
    }
  }
}

/**
 * Submit handler for salesforce configuration form.
 */
function springboard_welcome_salesforce_submit($form, $form_state) {
  // Set the values from the form.
  variable_set('salesforce_management_api_username', $form_state['values']['salesforce_username']);
  variable_set('salesforce_management_api_password', $form_state['values']['salesforce_password']);
  variable_set('salesforce_management_api_token', $form_state['values']['salesforce_token']);
  // Get the WSDL file.
  $dir = drupal_get_path('module', 'salesforce_management_api') . '/toolkit/soapclient/';
  $file = $dir . 'enterprise.wsdl.xml';
  // Make sure the directory is writeable
  if (file_check_directory($dir, NULL, 'salesforce_wsdl')) {
    // Try to move the uploaded file into the right place
    if (!move_uploaded_file($_FILES['files']['tmp_name']['salesforce_wsdl'], $file)) {
      form_set_error('salesforce_wsdl', t('File upload error. Could not move uploaded file.'));
      watchdog('file', 'Upload error. Could not move uploaded file to destination %destination.', array('%destination' => $dir));
      return 0;
    }
    else {
      drupal_set_message(t('The WSDL file has been successfully uploaded'));
      variable_set('salesforce_management_api_wsdl_updated', REQUEST_TIME);
      drupal_flush_all_caches();
      // Clear WSDL files from tmp directory
      $tmp = file_directory_temp();
      if (is_dir($tmp) && $tmp != '/') {
        $cmd = 'rm -f ' . $tmp . '/*.wsdl.*';
        $exec_output = exec($cmd);
      }
      drupal_set_message(t('Drupal cache emptied and WSDL files removed from temp directory.'));
    }
  }
  else {
    drupal_set_message( t('WARNING: server directory is not writeable. Please contact a site admin to correct this.'), 'error' );
    watchdog('salesforce_management_api', 'WSDL file upload failed because directory is not writeable: %directory',
      array('%directory' => $dir), WATCHDOG_ERROR);
    return 0;
  }
  // Check that we have a working connection, and if we do we don't need to show the message anymore.
  $sf = salesforce_management_api_connect();
  if (isset($sf) && is_object($sf)) {
    variable_set('springboard_salesforce_enabled', TRUE);
  }
}

/**
 * Menu callback. Springboard help.
 */
function springboard_help_page() {
  $help_array = array();
  $help_array[t('Documentation')] = array(
    t('Springboard documentation is available on !docs.',
      array('!docs' => l('gospringboard.com', 'http://www.gospringboard.com/documentation')))
  );
  $help_array[t('Issue Tracker')] = array(
    t('The Springboard project issue tracker is hosted on !issue_tracker',
      array('!issue_tracker' => l('drupal.org', 'http://drupal.org/project/springboard')))
  );
  return theme('springboard_help', array('help_array' => $help_array));
}

/**
 * Menu callback. Syncronization callback for Springboard Sync button.
 */
function _springboard_syncronize() {
  if (module_exists('queue_processor')) {
    module_load_include('module', 'queue_processor');
    queue_processor_process();
    drupal_set_message(t('Salesforce queues have been processed.'));
  }
  drupal_goto('admin/springboard');
}

/**
 * Menu callback. Report callback for Springboard info button.
 */
function _springboard_form_report($nid = '') {
  // Short circuit if no legit data found.
  if (empty($nid)) {
    return '';
  }
  ctools_include('ajax');
  ctools_include('modal');
  // Grab data from fundraiser tracker data.
  if (is_numeric($nid)) {
    $access_results = db_query('SELECT ft.pageviews, ft.conversions, ft.local_failures, ft.gateway_failures, f.internal_name FROM {fundraiser} f ' .
      'INNER JOIN {fundraiser_tracking} ft ON f.nid = ft.nid WHERE f.nid = :nid', array(':nid' => $nid))->fetchObject();
  }
// TODO correct this for new structures.
//  $total_donations = db_query('SELECT sum(uc.order_total) FROM {uc_orders} uc
//        INNER JOIN {fundraiser_webform_donation} f ON f.did = uc.order_id
//        WHERE f.webform_nid = :nid AND uc.order_status = "payment_received"',
//        array(':nid' => $nid))->fetchObject();
//  $total_donations = round($total_donations) . '.00';
  $total_donations = 'TBD';
  $total_donations = $total_donations ? $total_donations : '0.00';
  $output = theme('springboard_form_report',
    array('access_results' => $access_results, 'nid' => $nid, 'total_donations' => $total_donations));
  ctools_modal_render($access_results->internal_name, $output);
}

/**
 * Implements hook_springboard_dashboard_panes().
 */
function springboard_springboard_dashboard_panes() {
  $panes['springboard_logo'] = array(
    'label' => 'Springboard logo',
    'description' => t('Springboard logo'),
    'content' => _springboard_logo(),
    'weight' => -1,
  );
  $panes['springboard_sf_status'] = array(
    'label' => 'Salesforce connection status',
    'description' => t('Salesforce connection status'),
    'content' => _springboard_sf_status(),
    'weight' => 0,
  );
  $panes['springboard_jump'] = array(
    'label' => 'Springboard jump menu',
    'description' => t('Springboard jump menu'),
    'content' => _springboard_jump(),
    'weight' => 1,
  );
  $panes['springboard_fundraiser_performance'] = array(
    'label' => 'Fundraiser performance',
    'description' => t('Fundraiser performance'),
    'content' => _springboard_form_performance(),
    'weight' => 2,
  );
  return $panes;
}

/**
 * Hook callback. For the Springboard logo pane.
 */
function _springboard_logo() {
  $theme = variable_get('theme_default', '0');
  if (theme_get_setting('default_logo', $theme) == 1) {
    $logo = '<img src="' . base_path() . drupal_get_path('theme', $theme) . '/logo.png" width="150" alt="Site logo" />';
  }
  else {
    $logo =  '<img src="' . base_path() . theme_get_setting('logo_path', $theme) . '" width="150" alt="Site logo" />';
  }
  return theme('springboard_logo', array('logo' => $logo));
}

/**
 * Hook callback. For the Springboard Salesforce Status pane.
 */
function _springboard_sf_status() {
  $output = '';
  if (module_exists('salesforce_management_api')) {
    // Call on the module to get the current connection status
    $status = salesforce_management_api_test_connection();
    // WSDL update
    $updated_time = variable_get('salesforce_management_api_wsdl_updated', 0);
    // Latest batch # total items :: success :: fail.
    $batch_status = t('Batch info unavailable, please install Queue API.');
    if (module_exists('queue_api')) {
      $batch = db_fetch_object(db_query('SELECT * FROM {sf_batch} ORDER BY id DESC LIMIT 1'));
      if ($batch) {
        $batch_status = t('Batch # @id - @record_count::<span class="successes">@success_count</span>::' .
          '<span class="failures">@fail_count</span>',
          array('@id' => $batch->id, '@record_count' => $batch->record_count, '@success_count' => $batch->success_count,
          '@fail_count' => $batch->failure_count));
      }
      else {
        $batch_status = t('No batches processed yet.');
      }
    }
    return theme('springboard_sf_status', array('status' => $status, 'updated_time' => $updated_time, 'batch_status' => $batch_status));
  }
  return '';
}

/**
 * Hook callback. For the Springboard Quick Jump pane.
 */
function _springboard_jump() {
  ctools_include('jump-menu');
  $types = fundraiser_get_donation_types();
  foreach ($types as $type => $enabled) {
    if ($enabled && node_access('create', $type)) {
      $targets[url('node/add/' . $type)] = 'Create ' . node_type_get_name($type);
    }
  }
  $options = array();
  $menu = drupal_render(drupal_get_form('ctools_jump_menu', $targets, $options));
  return theme('springboard_jump', array('menu' => $menu));
}

/**
 * Hook callback. For the Springboard fundraiser performance pane.
 */
function _springboard_form_performance() {
  // Include the ctool features for htemodal windows.
  module_load_include('inc', 'ctools', 'includes/ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  // Set headers.
  $headers = array('Internal Form Name', 'Conversion %', 'Local Failure', 'Gateway Failure', 'Load Time');
  // TODO: add code to find and display form layout if/when this becomes available.
  $forms = array();
  // Given the scattered nature of this data I predict this page is going to perform poorly.
  $query = db_select('node', 'n');
    $query->innerJoin('fundraiser', 'f', 'f.nid = n.nid');
    $query->fields('n', array('nid'))
      ->fields('f', array('internal_name'))
      ->range(0, 10);
  $results = $query->execute();
  // Loop over each donation form.
  foreach ($results as $donation_form) {
    $forms[$donation_form->nid]['internal_name'] = ' ' . l('<img src="' . base_path() . drupal_get_path('module', 'springboard') . '/images/icon-hidepane.png">',
    'springboard_report_modal/' . $donation_form->nid, array('attributes' => array('class' => 'ctools-use-modal'), 'html' => TRUE));
    $forms[$donation_form->nid]['internal_name'] .= ' ' . $donation_form->internal_name;
    $forms[$donation_form->nid]['conversion'] = '<span class="' . springboard_set_dashboard_class(0, 0, 'max') . '">N/A</span>';
    $forms[$donation_form->nid]['local_failure'] = '<span class="' . springboard_set_dashboard_class(0, 0, 'max') . '">N/A</span>';
    $forms[$donation_form->nid]['gateway_failure'] = '<span class="' . springboard_set_dashboard_class(0, 0, 'max') . '">N/A</span>';
    $forms[$donation_form->nid]['load_time'] = '<span class="' . springboard_set_dashboard_class(0, 0, 'max') . '">N/A</span>';
    // If the fundraiser information is available for tracking data, update it.
    if (module_exists('fundraiser')) {
      $access_results = db_query('SELECT * FROM {fundraiser_tracking} WHERE nid = :nid', array(':nid' => $donation_form->nid))->fetchObject();
      if ($access_results) {
        $conversion = _springboard_percentage($access_results->conversions, $access_results->pageviews);
        $conversion_threshold =  variable_get('springboard_conversion_threshold', 0);
        $forms[$donation_form->nid]['conversion'] = '<span class="' . springboard_set_dashboard_class($conversion_threshold, $conversion, 'min') . '">'
          . $conversion . '</span>';
        $local_failure = _springboard_percentage($access_results->local_failures, $access_results->pageviews);
        $local_failure_threshold = variable_get('springboard_local_failure_threshold', 0);
        $forms[$donation_form->nid]['local_failure'] =  '<span class="' . springboard_set_dashboard_class($local_failure_threshold, $local_failure, 'max') . '">'
          . $local_failure . '</span>';
        $gateway_failure = _springboard_percentage($access_results->gateway_failures, $access_results->pageviews);
        $gateway_failure_threshold = variable_get('springboard_gateway_failure_threshold', 0);
        $forms[$donation_form->nid]['gateway_failure'] =  '<span class="' . springboard_set_dashboard_class($gateway_failure_threshold, $gateway_failure, 'max') . '">'
          . $gateway_failure . '</span>';
        if (module_exists('statistics')) {
          $load_time = db_result(db_query('SELECT timer FROM {accesslog} WHERE path = CONCAT("node/", %d) ORDER BY aid desc', $donation_form->nid)) . 'ms';
          $load_time_threshold = variable_get('springboard_load_time_threshold', 0);
          $forms[$donation_form->nid]['load_time'] = '<span class="' . springboard_set_dashboard_class($load_time_threshold, $load_time, 'max') . '">'
            . $load_time . '</span>';
        }
      }
    }
  }
  // Sort the forms by conversion rate.
  usort($forms, '_springboard_sort_by_conversion');
  // Create table for display.
  $rows = array();
  foreach ($forms as $form) {
    $rows[] = array($form['internal_name'], $form['conversion'], $form['local_failure'], $form['gateway_failure'], $form['load_time']);
  }
  // Theme it.
  $form_table = theme('table', array('headers' => $headers, 'rows' => $rows));
  return theme('springboard_form_performance', array('form_table' => $form_table));
}

/**
 * Helper functions.
 */

/**
 * Helper function, sort donation forms by conversion rate.
 */
function _springboard_sort_by_conversion($a, $b) {
  if (isset($a['conversion']) && isset($b['conversion'])) {
    if ($a['conversion'] == $b['conversion']) {
      return 0;
    }
    return ($a['conversion'] > $b['conversion']) ? -1 : 1;
  }
  return -1;
}

/**
 * Helper function.
 * Sets CSS class for dashboard elements based on comparison between the current value and the threshold value.
 *
 * @param $threshold
 * Int threshold value.
 *
 * @param $value
 * Int current value.
 *
 * @param $op
 * Specifies which type of comparison to perform, options are 'min' or 'max', defaults to min.
 */
function springboard_set_dashboard_class($threshold, $value, $op = 'min') {
  $value = preg_replace('/\%|ms/', '', $value);
  if (!$threshold || !is_numeric($value)) {
    $class = 'no-threshold';
  }
  else {
    switch ($op) {
      case 'min':
        $class = ($value >= $threshold) ? 'successes' : 'failures';
        break;
      case 'max':
        $class = ($value <= $threshold) ? 'successes' : 'failures';
        break;
    }
  }
  return $class;
}

/**
 * Helper function.
 * Calculate performance percentages.
 *
 * @param $a
 * Int first number.
 *
 * @param $b
 * Int second number.
 *
 * @return
 * Returns a percentage or N/A if either number is zero.
 */
function _springboard_percentage($a, $b) {
  if ($a && $b) {
    return round(100 * $a / $b) . '%';
  }
  else {
    return 'N/A';
  }
}