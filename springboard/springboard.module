<?php

/**
 * @file
 * Provides a admin facing interface to the Springboard system.
 */

/**
 * Implements hook_permission().
 */
function springboard_permission() {
  return array(
    'administer springboard' => array(
      'title' => t('Administer Springboard'),
      'description' => t('Perform administration tasks for springboard.'),
    ),
    'access springboard dashboard' => array(
      'title' => t('Access the Springboard dashboard'),
      'description' => t('Access the main landing page for springboard.'),
    ),
    'administer springboard dashboard' => array(
      'title' => t('Administer the Springboard dashboard'),
      'description' => t('Change available panes and other settings for the main landing page for springboard.')
    )
  );
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();

  // Springboard task list.
  $items['admin/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('access springboard dashboard'),
    'page callback' => 'springboard_admin_dashboard',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    );
    
  // Springboard forms admin.
  $items['admin/springboard/forms'] = array(
    'title' => 'Forms',
    'description' => 'Create, edit and analyze Springboard forms.',
    'page callback' => 'system_admin_menu_block_page',
    'module' => 'system',
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -4,
  );
  // Springboard reports admin.
  $items['admin/springboard/reports'] = array(
    'title' => 'Reports',
    'description' => 'View Springboard-related reports.',
    'page callback' => 'system_admin_menu_block_page',
    'module' => 'system',
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -3,
  );
  // Springboard settings list.
  $items['admin/springboard/options'] = array(
    'title' => 'Settings',
    'description' => 'Configure Springboard modules.',
    'page callback' => 'system_admin_menu_block_page',
    'module' => 'system',
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -2,
  );
  // Springboard dashboard settings.
  $items['admin/springboard/options/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Configure Springboard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_admin_settings'),
    'access arguments' => array('administer springboard'),
    'file' => 'springboard.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  );
  // Springboard dashboard settings.
  $items['admin/springboard/options/dashboard'] = array(
    'title' => 'Springboard Dashboard Configuration',
    'description' => 'Configure Springboard dashboard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_dashboard_settings'),
    'access arguments' => array('administer springboard dashboard'),
    'file' => 'springboard.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  // Springboard Help
  $items['admin/springboard/help'] = array(
    'title' => 'Help',
    'description' => 'Get help using Springboard.',
    'page callback' => 'springboard_help_page',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
  );

  return $items;
}

/**
 * Implements hook_menu().
 * Build Springboard admin menu from existing modules' paths.
 */
function springboard_menu_alter(&$items) {
  // Load Views' paths for later reference.
  $views_paths = array();
  views_menu_alter($views_paths);

  // Add menu items from dsr.
  if (module_exists('dsr')) {
    // DSR reports
    $items['admin/springboard/reports/dsr'] = $items['admin/reports/dsr'];
    $items['admin/springboard/reports/dsr']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/reports/dsr']['access arguments'] = array('administer springboard');
    $items['admin/springboard/reports/dsr']['title'] = 'Reconcilliation report';
    $items['admin/springboard/reports/dsr']['weight'] = 5;

    // DSR settings
    $items['admin/springboard/options/dsr'] = $items['admin/config/system/dsr'];
    $items['admin/springboard/options/dsr']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/dsr']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/dsr']['title'] = 'Reconciliation';
    $items['admin/springboard/options/dsr']['weight'] = 10;
  }

  // Add menu items from email_wrappers.
  if (module_exists('email_wrappers')) {
    // Email Wrappers settings
    $items['admin/springboard/options/email-wrappers'] = $items['admin/config/system/email-wrappers'];
    $items['admin/springboard/options/email-wrappers']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/email-wrappers']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/email-wrappers']['title'] = 'Email Confirmations';
    $items['admin/springboard/options/email-wrappers']['weight'] = 11;
  }

  // Add menu items from fundraiser.
  $types_added = array();
  if (module_exists('fundraiser')) {
    //dynamically generate links to create fundraiser forms
    $types = fundraiser_get_donation_types();
    foreach ($types as $type => $status) {
      if (isset($status) && $status == 1) {
        $types_added[] = $type;
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/create-' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/create-' . $type]['type'] = MENU_NORMAL_ITEM;
        $items['admin/springboard/forms/create-' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/create-' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/create-' . $type]['access callback']);
      }
    }

    // View Donation forms
    if (isset($views_paths['admin/content/donation-forms'])) {
      $items['admin/springboard/forms/donations'] = $views_paths['admin/content/donation-forms'];
      $items['admin/springboard/forms/donations']['type'] = MENU_NORMAL_ITEM;
      $items['admin/springboard/forms/donations']['access arguments'] = array('administer springboard');
      $items['admin/springboard/forms/donations']['title'] = 'View Donation Forms';
      $items['admin/springboard/forms/donations']['weight'] = 4;
      unset($items['admin/springboard/forms/donations']['access callback']);
    }

    // Fundraiser settings
    $items['admin/springboard/options/fundraiser'] = $items['admin/config/system/fundraiser'];
    $items['admin/springboard/options/fundraiser']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/fundraiser']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/fundraiser']['title'] = 'Fundraiser';
    $items['admin/springboard/options/fundraiser']['weight'] = 3;
  }

  // Add menu items for fundraiser_sustainers
  if (module_exists('fundraiser_sustainers')) {
    // Fundraiser cron
    $items['admin/springboard/fundraiser_cron'] = array(
      'title' => 'Fundraiser Cron',
      'description' => 'Run the Fundraiser cron.',
      'page callback' => 'fundraiser_sustainers_standalone_cron',
      'module' => 'fundraiser_sustainers',
      'file path' => drupal_get_path('module', 'fundraiser_sustainers'),
      'file' => 'fundraiser_sustainers.module',
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 98,
    );
  }

  // Add menu items from market_source.
  if (module_exists('market_source')) {
    $items['admin/springboard/options/market-source'] = $items['admin/config/search/market-source'];
    $items['admin/springboard/options/market-source']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/market-source']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/market-source']['weight'] = 2;
  }

  // Add menu items from page_wrappers.
  if (module_exists('page_wrappers')) {
    $items['admin/springboard/options/page-wrappers'] = $items['admin/config/content/page-wrappers'];
    $items['admin/springboard/options/page-wrappers']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/page-wrappers']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/page-wrappers']['title'] = 'Page Wrappers';
    $items['admin/springboard/options/page-wrappers']['weight'] = 4;
  }

  // Add menu items from Salesforce.
  if (module_exists('salesforce')) {
    $items['admin/springboard/options/salesforce'] = $items['admin/config/salesforce/authorize'];
    $items['admin/springboard/options/salesforce']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/salesforce']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/salesforce']['title'] = 'Salesforce Admin';
    $items['admin/springboard/options/salesforce']['weight'] = 8;
  }

  // Add menu items from salesforce_donation.
  if (module_exists('salesforce_donation')) {
    $items['admin/springboard/options/salesforce-donation'] = $items['admin/config/salesforce/salesforce-donation'];
    $items['admin/springboard/options/salesforce-donation']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/salesforce-donation']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/salesforce-donation']['title'] = 'Donation';
    $items['admin/springboard/options/salesforce-donation']['weight'] = 9;
  }

  // Add menu items from salesforce_log.
  if (module_exists('salesforce_log')) {

    // Salesforce batch history
    if (isset($views_paths['admin/reports/salesforce/batch'])) {
      $items['admin/springboard/reports/history'] = $views_paths['admin/reports/salesforce/batch'];
      $items['admin/springboard/reports/history']['type'] = MENU_NORMAL_ITEM;
      $items['admin/springboard/reports/history']['title'] = 'Batch History Report';
      $items['admin/springboard/reports/history']['access arguments'] = array('administer springboard');
      $items['admin/springboard/reports/history']['weight'] = 1;
      unset($items['admin/springboard/reports/history']['access callback']);
    }

    // Salesforce queues
    if (isset($views_paths['admin/reports/salesforce/queue'])) {
      // Salesforce current queue
      $items['admin/springboard/reports/queue'] = $views_paths['admin/reports/salesforce/queue'];
      $items['admin/springboard/reports/queue']['type'] = MENU_NORMAL_ITEM;
      $items['admin/springboard/reports/queue']['title'] = 'Currently Queued Items';
      $items['admin/springboard/reports/queue']['access arguments'] = array('administer springboard');
      $items['admin/springboard/reports/queue']['options'] = array('query' => array('queue' => 'new'));
      $items['admin/springboard/reports/queue']['weight'] = 2;
      unset($items['admin/springboard/reports/queue']['access callback']);

      // Salesforce retry queue
      $items['admin/springboard/reports/queue-retry'] = $items['admin/springboard/reports/queue'];
      $items['admin/springboard/reports/queue-retry']['title'] = 'Retry Queue';
      $items['admin/springboard/reports/queue-retry']['options'] = array('query' => array('queue' => 'retry'));
      $items['admin/springboard/reports/queue-retry']['weight'] = 3;

      // Salesforce permanent failures queue
      $items['admin/springboard/reports/queue-fail'] = $items['admin/springboard/reports/queue'];
      $items['admin/springboard/reports/queue-fail']['title'] = 'Permanent Failure Queue';
      $items['admin/springboard/reports/queue-fail']['options'] = array('query' => array('queue' => 'fail'));
      $items['admin/springboard/reports/queue-fail']['weight'] = 4;
    }
  }

  // Add menu items from salesforce_mapping.
  if (module_exists('salesforce_mapping')) {
    $items['admin/springboard/options/mappings'] = $items['admin/structure/salesforce/mappings'];
    $items['admin/springboard/options/mappings']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/mappings']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/mappings']['title'] = 'Salesforce Fieldmaps';
    $items['admin/springboard/options/mappings']['weight'] = 1;
    unset($items['admin/springboard/options/mappings']['access callback']);
  }

  // Add menu items from secure_prepopulate.
  if (module_exists('secure_prepopulate')) {
    $items['admin/springboard/options/secure-prepopulate'] = $items['admin/config/system/secure-prepopulate'];
    $items['admin/springboard/options/secure-prepopulate']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/secure-prepopulate']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/secure-prepopulate']['weight'] = 5;
  }

  // Add menu items from webform.
  if (module_exists('webform')) {
    //dynamically generate links to create non-fundraiser forms
    $types = webform_variable_get('webform_node_types');
    foreach ($types as $type) {
      if (!in_array($type, $types_added) && isset($items['node/add/' . $type])) {
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/create-' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/create-' . $type]['type'] = MENU_NORMAL_ITEM;
        $items['admin/springboard/forms/create-' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/create-' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/create-' . $type]['access callback']);
      }
    }

    // Administer webform content
    $items['admin/springboard/forms/webforms'] = isset($views_paths['admin/content/webform']) ? $views_paths['admin/content/webform'] : $items['admin/content/webform'];
    $items['admin/springboard/forms/webforms']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/forms/webforms']['access arguments'] = array('administer springboard');
    $title = isset($views_paths['admin/content/webform']['title']) ? $views_paths['admin/content/webform']['title'] : $items['admin/content/webform']['title'];
    $items['admin/springboard/forms/webforms']['title'] = 'View ' . $title;
    $items['admin/springboard/forms/webforms']['weight'] = 100;
    unset($items['admin/springboard/forms/webforms']['access callback']);

    // Webform settings
    $items['admin/springboard/options/webform'] = $items['admin/config/content/webform'];
    $items['admin/springboard/options/webform']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/webform']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/webform']['title'] = 'Webform';
    $items['admin/springboard/options/webform']['weight'] = 6;
    unset($items['admin/springboard/options/webform']['access callback']);
  }

  // Add menu items from webform_dupe_cop.
  if (module_exists('webform_dupe_cop')) {
    $items['admin/springboard/options/webform-dupe'] = $items['admin/config/content/webform-dupe-cop'];
    $items['admin/springboard/options/webform-dupe']['type'] = MENU_NORMAL_ITEM;
    $items['admin/springboard/options/webform-dupe']['access arguments'] = array('administer springboard');
    $items['admin/springboard/options/webform-dupe']['title'] = 'Webform Dupe';
    $items['admin/springboard/options/webform-dupe']['weight'] = 12;
  }

  if (module_exists('sb_social')) {
    $items['admin/springboard/sb-social'] = $items['admin/config/services/springboard_social'];
    $items['admin/springboard/sb-social']['type'] = MENU_NORMAL_ITEM;
  }
}

/**
 * Implements hook_theme().
 */
function springboard_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_sf_status' => array(
      'variables' => array('status' => '', 'identity' => array(), 'batch_status' => '', 'queue' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-sf-status',
    ),
    'springboard_help' => array(
      'variables' => array('help_array' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-help',
    ),
  );
}

/**
 * Menu callback. Springboard dashboard page.
 */
function springboard_admin_dashboard() {
  // Add our CSS for display.
  drupal_add_css(drupal_get_path('module', 'springboard') . '/css/springboard.css', 'module');
  $content = '<div class="springboard-dashboard dashboard">';
  if(user_access('administer springboard dashboard')) {
    $content = '<div class="springboard-dashboard-customize">';
    $content .= l(t('Customize Dashboard'), 'admin/springboard/options/dashboard', array('attributes' => array('class'=>array('button', 'options-task'))));
    $content .= '</div>';
  }
  // Load the enabled panes for the dashboard.
  $panes = module_invoke_all('springboard_dashboard_panes');
  drupal_alter('springboard_dashboard_panes', $panes);
  $enabled_panes = variable_get('springboard_enabled_panes', array());
  // Sort panes based on weight. Weight is current hard-coded. 
  uasort($panes, 'drupal_sort_weight');
  $pane_count = 1;
  $column_left = '';
  $column_right = '';
  foreach ($panes as $pane_key => $pane) {
    if (!empty($pane['content']) && !empty($enabled_panes[$pane_key])) {
      if($pane_count%2) {
        $column_left .= '<div class="springboard-pane odd ' . drupal_clean_css_identifier($pane_key) . '">' . $pane['content'] . '</div>';
      }  
      else {
        $column_right .= '<div class="springboard-pane even ' . drupal_clean_css_identifier($pane_key) . '">' . $pane['content'] . '</div>';
      }
      $pane_count++;
    }
  }
  $content .= '<div class="springboard-column sb-col-left">' . $column_left . "</div>";
  $content .= '<div class="springboard-column sb-col-right">' . $column_right . "</div>";
  $content .= '</div>';
  return $content;
}

/**
 * Menu callback. Springboard help.
 */
function springboard_help_page() {
  $help_array = module_invoke_all('springboard_help');
  drupal_alter('springboard_help', $help_array);
  return theme('springboard_help', array('help_array' => $help_array));
}

/**
 * Implements hook_springboard_help().
 */
function springboard_springboard_help() {
  $help_array = array();
  $help_array[t('Documentation')] = array(
    t('Springboard documentation is available on !docs.',
      array('!docs' => l('gospringboard.com', 'http://www.gospringboard.com/documentation'))),
  );
  $help_array[t('Issue Tracker')] = array(
    t('The Springboard project issue tracker is hosted on !issue_tracker',
      array('!issue_tracker' => l('drupal.org', 'http://drupal.org/project/springboard'))),
  );
  return $help_array;
}

/**
 * Implements hook_block_info().
 */
function springboard_block_info() {
  $blocks = array();
  $blocks['springboard_sf_status'] = array(
    'info' => t('Salesforce Status'),
    'cache' => DRUPAL_NO_CACHE,
    
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function springboard_block_view($delta) {
  switch($delta) {
    case 'springboard_sf_status':
      return array('subject' => t('Salesforce connection status'), 'content' => _springboard_sf_status());
    break;
  }
}
/**
 * Implements hook_springboard_dashboard_panes().
 */
function springboard_springboard_dashboard_panes() {
  $sf_status = module_invoke('springboard', 'block_view', 'springboard_sf_status');
  $panes['springboard_sf_status'] = array(
    'label' => $sf_status ['subject'],
    'description' => $sf_status ['subject'],
    'content' => $sf_status['content'],
    'weight' => 1,
  );
  return $panes;
}

/**
 * Hook callback. For the Springboard Salesforce Status pane.
 */
function _springboard_sf_status() {
  $output = '';
  if (module_exists('salesforce')) {
    $identity = array();
    // Call on the module to get the current connection status
    $sf = salesforce_get_api();
    $status = FALSE;
    if ($sf->isAuthorized()) {
      $status = TRUE;
      $identity = $sf->getIdentity();
    }
    else {
      $status = FALSE;
    }
    // Latest batch # total items :: success :: fail.
    $batch_status = t('Batch info unavailable, please install Salesforce Log.');
    if (module_exists('salesforce_log')) {
      $query = db_select('salesforce_log_batch', 'sflog')
        ->fields('sflog')
        ->orderBy('bid', 'DESC')
        ->range(0, 1)
        ->execute();
      $batch = $query->fetchObject();
      if ($batch) {
        $batch_status = t('Batch # @id of @record_count items processed with <span class="successes">@success_count successes</span> and <span class="failures">@fail_count failures</span>.',
          array(
          '@id' => $batch->bid,
          '@record_count' => $batch->count,
          '@success_count' => $batch->successes,
          '@fail_count' => $batch->failures,
        ));
      }
      else {
        $batch_status = t('No batches processed yet.');
      }
    }
    $queue = (module_exists('salesforce_queue') && $status) ? drupal_get_form('springboard_dashboard_queue') : '';
    return theme('springboard_sf_status', array('status' => $status, 'identity' => $identity, 'batch_status' => $batch_status, 'queue' => $queue));
  }
  return 'status';
}

/**
 * Springboard dashboard queue processor button
 */
function springboard_dashboard_queue() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run Springboard Sync'),
    '#submit' => array('springboard_dashboard_queue_submit'),
  );
  return $form;
}

/**
 * Submit handler for Springboard dashboard queue processor button
 */
function springboard_dashboard_queue_submit(&$form_state) {
  salesforce_queue_process_queue();
}

/**
 * Additional universal behaviors.
 */

/**
 * Implements hook_form_alter().
 */
function springboard_form_alter(&$form, &$form_state, $form_id) {
  // Alter the webform client form.
  // Why hook_form_alter and not hook_form_FORM_ID_alter?
  // Because webform's form id varies: webform_client_form_NID.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    // Include the file with the user profile list. TODO for effeciency, move user profile list to .module
    module_load_include('inc', 'springboard', 'springboard.admin');
    $user_profile_fields = _springboard_default_user_profile();
    // For each user profile, update the field with the given value.
    foreach ($user_profile_fields as $user_profile_field) {
      $field_name = $user_profile_field['field_name'];
      $input_class = isset($user_profile_field['extra']['classes']) ? $user_profile_field['extra']['classes'] : 'input-medium';
      $field = _springboard_get_form_field($form, $field_name);
      $field['#attributes']['class'][] = $input_class;
      $form = _springboard_update_form_field($form, $field_name, $field);
    }
  }
}

/**
 * Given a standard form array. Locate a given key and return it.
 * Recursive.
 */
function _springboard_get_form_field($form, $field_key) {
  // Walks a given form looking for the given key. Returns it when found.
  foreach (element_children($form) as $child) {
    if ($child == $field_key) {
      // Return the found array.
      return $form[$child];
    }
    else {
      // Check this child for other children.
      $found = _springboard_get_form_field($form[$child], $field_key);
      if (!empty($found)) {
        return $found;
      }
    }
  }
}

/**
 * Given a standard form array. Locate a given key and update it.
 * Recursive.
 */
function _springboard_update_form_field($form, $field_key, $new_field) {
  // Walks a given form looking for the given key. Returns it when found.
  foreach (element_children($form) as $child) {
    if ($child == $field_key) {
      // Update the array.
      $form[$child] = array_merge($form[$child], $new_field);
    }
    else {
      // Check this child for other children.
      $form[$child] = _springboard_update_form_field($form[$child], $field_key, $new_field);
    }
  }
  return $form;
}

