<?php

/**
 * @file
 *
 */

require_once('springboard.admin.inc');

/**
 * Implements hook_perm()
 */
function springboard_perm() {
  return array('administer springboard', 'access springboard dashboard');
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();
  $items['admin/springboard'] = array(
    'title' => 'Springboard settings',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'springboard.admin.inc',
  );
    $items['admin/springboard/forms'] = array(
    'title' => t('Forms'),
    'description' => t('Manage your donation forms and other webforms.'),
    'weight' => -10,
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/reports'] = array(
    'title' => t('Reports'),
    'description' => t('Access reports on donations and Salesforce activity.'),
    'weight' => -9,
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/settings'] = array(
    'title' => t('Settings'),
    'description' => t('Manage Springboard settings.'),
    'weight' => -8,
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/confirmation'] = array(
    'title' => t('Confirmation & Notifications'),
    'description' => t('Manage your email templates and user notifications.'),
    'weight' => -7,
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  if (module_exists('salesforce_management_api')) {
    $items['admin/springboard/fieldmaps'] = array(
      'title' => t('Salesforce Fieldmaps'),
      'description' => t('Map form fields to Salesforce.'),
      'weight' => -6,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/salesforce-management/fieldmap'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  $items['admin/springboard/help'] = array(
    'title' => t('Help'),
    'description' => t('Future home of Springboard help documentation.'),
    'page callback' => 't',
    'page arguments' => array('hello world'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  // Forms submenu
  if (module_exists('fundraiser')) {
    $items['admin/springboard/forms/donation'] = array(
      'title' => t('Donation Forms'),
      'description' => t('Manage your donation forms.'),
      'weight' => -10,
      'access arguments' => array('administer springboard'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/content/donation-forms'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/forms/donation_add'] = array(
      'title' => t('Create donation form'),
      'description' => t('Add a new donation form.'),
      'weight' => -8,
      'access arguments' => array('administer springboard'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/donation-form'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  
  if (module_exists('webform')) {
    $items['admin/springboard/forms/webforms'] = array(
      'title' => t('Webforms'),
      'description' => t('Manage your webforms.'),
      'weight' => -9,
      'access arguments' => array('administer springboard'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/content/webform-user'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/springboard/forms/webform_add'] = array(
      'title' => t('Create a webform'),
      'description' => t('Add a new webform.'),
      'weight' => -7,
      'access arguments' => array('administer springboard'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/webform'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Reports submenu
  if (module_exists('queue_processor')) {
    $items['admin/springboard/reports/batch'] = array(
      'title' => t('Batch History'),
      'description' => t('View the batch history report.'),
      'weight' => -10,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/batch'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/queued'] = array(
      'title' => t('Queued Items'),
      'description' => t('Report on items currently queued for processing.'),
      'weight' => -9,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/current'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/retries'] = array(
      'title' => t('Retries'),
      'description' => t('Report on queued items that didn\'t go through the first time.'),
      'weight' => -8,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/retries'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/failures'] = array(
      'title' => t('Permanent Failures'),
      'description' => t('Report on permanently failed transactions.'),
      'weight' => -7,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/permanent-failures'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Settings submenu
  if (module_exists('salesforce_management_api')) {
    $items['admin/springboard/settings/salesforce'] = array(
      'title' => t('Salesforce API Credentials'),
      'description' => t('Administer your Salesforce integration.'),
      'weight' => -10,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/salesforce-management'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/settings/salesforce_wsdl'] = array(
      'title' => t('Update Salesforce WSDL'),
      'description' => t('Update your copy of the Salesforce API WSDL.'),
      'weight' => -6,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/salesforce-management/update-wsdl'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('fundraiser')) {
    $items['admin/springboard/settings/fundraiser'] = array(
      'title' => t('Fundraiser Settings'),
      'description' => t('Manage donation settings.'),
      'weight' => -9,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/fundraiser'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('market_source')) {
    $items['admin/springboard/settings/marketsource'] = array(
      'title' => t('Market Source Settings'),
      'description' => t('Configure Market Source.'),
      'weight' => -8,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/market-source'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('sf_donation')) {
    $items['admin/springboard/settings/donation'] = array(
      'title' => t('Donation Integration Settings'),
      'description' => t('Administer integration between site donations and Salesforce.'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/salesforce-management'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('queue_processor')) {
    $items['admin/springboard/settings/queue'] = array(
      'title' => t('Queue Processor'),
      'description' => t('Configure the queue processor.'),
      'weight' => -5,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/salesforce-management/queue'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('gateway_manager')) {
    $items['admin/springboard/settings/gateways'] = array(
      'title' => t('Payment Gateways'),
      'description' => t('Manage credit card payment gateways.'),
      'weight' => -4,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/store/settings/payment/edit/gateways'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  if (module_exists('webform_ab')) {
    $items['admin/springboard/settings/webform_ab'] = array(
      'title' => t('Webform A/B Settings'),
      'description' => t('Configure A/B testing with Webform.'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/settings/webform_ab'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Confirmation submenu
  $items['admin/springboard/confirmation/email'] = array(
    'title' => t('Email Templates'),
    'description' => t('Manage your email templates.'),
    'page callback' => 't',
    'page arguments' => array('hello world'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/confirmation/notifications'] = array(
    'title' => t('Notifications'),
    'description' => t('Configure user notifications.'),
    'page callback' => 't',
    'page arguments' => array('hello world'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/confirmation/pages'] = array(
    'title' => t('Web Pages'),
    'description' => t('Manage web pages.'),
    'page callback' => 't',
    'page arguments' => array('hello world'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Add a landing page for additonal configuration tasks if SF integration is enabled during installation.
  if (variable_get('springboard_config_homepage', 0)) {
    $items['springboard'] = array(
      'title' => t('Welcome to Springboard'),
      'description' => t('Lorum ipsum dolor amet.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('springboard_welcome'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

/**
 * Dashboard page
 */
function springboard_dashboard() {
  if (arg(0) == 'springboard') {
    $breadcrumbs = array();
    $breadcrumbs[] = l(t('Home'), '<front');
    $breadcrumbs[] = l(t('Dashboard'), 'springboard');
  }
  drupal_set_breadcrumb($breadcrumbs);
  $output = 'hello world';
  // Pull in themed blocks
  return $output;
}

/**
 * Welcome page
 */
function springboard_welcome() {
  $form = array();
  $form['message'] = array(
    '#type' => 'markup',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#value' => t('Insert a warm welcome to our newest Springboard user here.'),
  );

  // If the Salesforce Management API can connect to Salesforce we no longer need the salesforce configuration form.
  $sf = salesforce_management_api_connect();
  if (is_object($sf)) {
    variable_del('springboard_salesforce_enabled');
    variable_del('springboard_config_homepage');
    variable_set('site_frontpage', 'node');
    $form['salesforce_status'] = array(
      '#type' => 'markup',
      '#prefix' => '<h3>' . t('Salesforce integration status') . '</h3><p class="springboard_status_message">',
      '#suffix' => '</p>',
      '#value' => t('Drupal can now connect to Salesforce.'),
    );
  }
  else {
    $form['salesforce_status'] = array(
      '#type' => 'markup',
      '#prefix' => '<h3>' . t('Salesforce integration status') . '</h3><p class="springboard_status_message">',
      '#suffix' => '</p>',
      '#value' => t('Salesforce integration is enabled but Springboard is unable to connect to Salesforce. Please fill out the form below with your Salesforce credentials.'),
    );
  }
  
  if (variable_get('springboard_salesforce_enabled', 0)) {
    $form['sf'] = array(
      '#type' => 'fieldset',
      '#title' => t('Salesforce configuration'),
      '#description' => t('Springboard needs your Salesforce credentials to continue.'),
    );
    $form['sf']['salesforce_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#description' => t('Your Salesforce login name. This should be an email address.'),
      '#default_value' => variable_get('salesforce_management_api_username', ''),
      '#required' => TRUE,
    );
    $form['sf']['salesforce_password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#description' => t('Your Salesforce login password.'),
      '#default_value' => variable_get('salesforce_management_api_password', ''),
      '#required' => TRUE,
    );
    $form['sf']['salesforce_token'] = array(
      '#type' => 'textfield',
      '#title' => t('Security Token'),
      '#description' => t('You may set your security token by logging into Salesforce and navigating to Setup > My Personal Information > Reset My Security Token.'),
      '#default_value' => variable_get('salesforce_management_api_token', ''),
      '#required' => TRUE,
    );
    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['sf']['salesforce_wsdl'] = array(
      '#type' => 'file',
      '#title' => t('WSDL File'),
      '#description' => t('The WSDL file tells your site what kinds of information are available in Salesforce. Insert instructions on obtaining a copy of your org WSDL here.'),

    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save settings'),
    );
    $form['#validate'][] = 'springboard_welcome_salesforce_validate';
    $form['#submit'][] = 'springboard_welcome_salesforce_submit';
  }
  return $form;
}

function springboard_welcome_salesforce_validate(&$form, $form_state) {
 
  // validate Salesforce credentials
  if ($form_state['values']['salesforce_username']) {
    if (!valid_email_address($form_state['values']['salesforce_username'])) {
      form_set_error('salesforce_username', t('The Salesforce username should be a valid email address.'));
    }
  }
  // Deal with WSDL file

  $source = 'salesforce_wsdl';
  if (isset($_FILES['files']) && $_FILES['files']['name'][$source] && is_uploaded_file($_FILES['files']['tmp_name'][$source])) {
    // Check for file upload errors and return FALSE if a
    // lower level system error occurred.
    switch ($_FILES['files']['error'][$source]) {
      // @see http://php.net/manual/en/features.file-upload.errors.php
      case UPLOAD_ERR_OK:
        break;

      case UPLOAD_ERR_INI_SIZE:
      case UPLOAD_ERR_FORM_SIZE:
        drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array('%file' => $source, '%maxsize' => format_size(file_upload_max_size()))), 'error');
        return 0;

      case UPLOAD_ERR_PARTIAL:
      case UPLOAD_ERR_NO_FILE:
        drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array('%file' => $source)), 'error');
        return 0;

        // Unknown error
      default:
        drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $source)), 'error');
        return 0;
    }
    
    // Check the file extension
    $pathParts = pathinfo($_FILES['files']['name'][$source]);
    if(!in_array(strtolower($pathParts['extension']), array('xml', 'wsdl'))) {
      form_set_error($source, t('File upload error: invalid file extension. Please upload a file with an XML or WSDL  extension.'));
      return 0;
    }
  }
  // Check for connection
}

function springboard_welcome_salesforce_submit($form, $form_state) {
 // If the user hit "Save Configuration" and the required field
  // salesforce_management_api_password is blank, try to get it from variables
  if ($form_state['values']['submit'] == $form_state['values']['op'] and empty($form_state['values']['salesforce_password'])) {
    $pass = variable_get('salesforce_management_api_password', FALSE);
    if ($pass) {
      $form_state['values']['salesforce_password'] = $pass;
    }
  }
  // Save settings. If connection validates and WSDL is valid unset springboard_salesforce_enabled flag.
  variable_set('salesforce_management_api_username', $form_state['values']['salesforce_username']);
  variable_set('salesforce_management_api_password', $form_state['values']['salesforce_password']);
  variable_set('salesforce_management_api_token', $form_state['values']['salesforce_token']);

  // Save WSDL
  $dir = drupal_get_path('module', 'salesforce_management_api') . '/toolkit/soapclient/';

  // Upload file path
  $file = $dir . 'enterprise.wsdl.xml';

  // Array key for the file element
  $source = 'salesforce_wsdl';

 
    // Make sure the directory is writeable
    if (file_check_directory($dir)) {  
      // Try to move the uploaded file into the right place
      if (!move_uploaded_file($_FILES['files']['tmp_name'][$source], $file)) {
        form_set_error($source, t('File upload error. Could not move uploaded file.'));
        watchdog('file', 'Upload error. Could not move uploaded file to destination %destination.', array('%destination' => $dir));
        return 0;
      }
      else {
        drupal_set_message('The WSDL file has been successfully uploaded');

        // Clear the cache
        drupal_flush_all_caches();

        // Clear WSDL files from tmp directory
        $tmpDir = file_directory_temp();
        // Make sure the tmp dir exists and isn't the root, just to be safe
        if(is_dir($tmpDir) && $tmpDir != '/') {
          $cmd = 'rm -f ' . $tmpDir . '/*.wsdl.*';
          $execOutput = exec($cmd);
        }

        drupal_set_message('Drupal cache emptied and WSDL files removed from temp directory.');
      }
    } 
    else {
      drupal_set_message( t('WARNING: server directory is not writeable. Please contact a site admin to correct this.'), 'error' );
      watchdog('salesforce_management_api', 'WSDL file upload failed because directory is not writeable: %directory', array('%directory'=>$dir), WATCHDOG_ERROR);
      return 0;
    }

}