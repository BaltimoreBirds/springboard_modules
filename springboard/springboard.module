<?php

/**
 * @file
 * Provides a admin facing interface to the Springboard system.
 */

/**
 * Implements hook_permission().
 */
function springboard_permission() {
  return array(
    'administer springboard' => array(
      'title' => t('Administer Springboard'),
      'description' => t('Perform administration tasks for springboard.'),
    ),
    'access springboard dashboard' => array(
      'title' => t('Access the Springboard dashboard'),
      'description' => t('Access the main landing page for springboard.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function springboard_menu() {
  $items = array();
  // Admin settings for dashboard display.
  $items['admin/config/system/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Configurations for the Springboard system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_admin_settings'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'springboard.admin.inc',
  );
  // Springboard interface.
  $items['admin/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/springboard/springboard'] = array(
    'title' => 'Springboard',
    'description' => 'Access reports and site maintenance tasks.',
    'access arguments' => array('administer springboard'),
    'page callback' => 'springboard_admin',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  // Forms sub-menu
  if (module_exists('fundraiser') || module_exists('webform')) {
    $items['admin/springboard/forms'] = array(
      'title' => 'Forms',
      'description' => 'Manage your donation forms and other webforms.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Reports submenu
  if (module_exists('queue_processor')) {
    $items['admin/springboard/reports'] = array(
      'title' => 'Reports',
      'description' => 'Access reports on donations and Salesforce activity.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
    $items['admin/springboard/reports/batch'] = array(
      'title' => 'Batch History',
      'description' => 'View the batch history report.',
      'weight' => -10,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/batch'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/queued'] = array(
      'title' => 'Queued Items',
      'description' => 'Report on items currently queued for processing.',
      'weight' => -9,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/current'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/retries'] = array(
      'title' => 'Retries',
      'description' => 'Report on queued items that didn\'t go through the first time.',
      'weight' => -8,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/retries'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/springboard/reports/failures'] = array(
      'title' => 'Permanent Failures',
      'description' => 'Report on permanently failed transactions.',
      'weight' => -7,
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/reports/salesforce/permanent-failures'),
      'access arguments' => array('administer springboard'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  // Salesforce sub-menu
  if (module_exists('salesforce')) {
    $items['admin/springboard/salesforce'] = array(
      'title' => 'Salesforce',
      'description' => 'Manage Salesforce configurations.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Add logging task.
  if (module_exists('salesforce_log')) {
    $items['admin/springboard/salesforce-log'] = array(
      'title' => 'Salesforce Logs',
      'description' => 'View Salesforce logs.',
      'page callback' => 'springboard_admin',
      'access arguments' => array('administer springboard'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  // Provide settings tabs for easy access to various sub modules under this tab.
  $items['admin/springboard/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Springboard settings.',
    'page callback' => 'springboard_admin',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
  );
  // Help tab.
  $items['admin/springboard/help'] = array(
    'title' => 'Help',
    'description' => 'Future home of Springboard help documentation.',
    'page callback' => 'springboard_help_page',
    'access arguments' => array('administer springboard'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  return $items;
}

/**
 * Implements hook_menu().
 * Add sub menus for the settings page per active Springboard module.
 */
function springboard_menu_alter(&$items) {
  // Add menus under forms.
  $types_added = array();
  if (module_exists('fundraiser')) {
    $types = fundraiser_get_donation_types();
    foreach ($types as $type => $status) {
      if (isset($status) && $status == 1) {
        $types_added[] = $type;
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/' . $type]['type'] = MENU_LOCAL_TASK;
        $items['admin/springboard/forms/' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/' . $type]['access callback']);
      }
    }
  }
  if (module_exists('webform')) {
    $types = webform_variable_get('webform_node_types');
    foreach ($types as $type) {
      if (!in_array($type, $types_added) && isset($items['node/add/' . $type])) {
        $type = str_replace('_', '-', $type);
        $items['admin/springboard/forms/' . $type] = $items['node/add/' . $type];
        $items['admin/springboard/forms/' . $type]['type'] = MENU_LOCAL_TASK;
        $items['admin/springboard/forms/' . $type]['access arguments'] = array('administer springboard');
        $items['admin/springboard/forms/' . $type]['title'] = 'Add ' . $items['node/add/' . $type]['title'];
        unset($items['admin/springboard/forms/' . $type]['access callback']);
      }
    }
    $items['admin/springboard/forms/webforms'] = $items['admin/content/webform'];
    $items['admin/springboard/forms/webforms']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/forms/webforms']['access arguments'] = array('administer springboard');
    $items['admin/springboard/forms/webforms']['title'] = 'View ' . $items['admin/content/webform']['title'];
    $items['admin/springboard/forms/webforms']['weight'] = 100;
    unset($items['admin/springboard/forms/webforms']['access callback']);
  }
  // Add menus under salesforce. This only works if Views runs before this hook. Module weights is an issue here.
  if (module_exists('salesforce_log')) {
    // Grab the views path if views hasn't added it's menus yet to get the ones we want.
    if (empty($items['admin/reports/salesforce/batch']) && function_exists('views_menu_alter')) {
      $views_paths = array();
      views_menu_alter($views_paths);
      if (isset($views_paths['admin/reports/salesforce/batch'])) {
        $items['admin/reports/salesforce/batch'] = $views_paths['admin/reports/salesforce/batch'];
      }
      if (isset($views_paths['admin/reports/salesforce/item'])) {
        $items['admin/reports/salesforce/item'] = $views_paths['admin/reports/salesforce/item'];
      }
      if (isset($views_paths['admin/reports/salesforce/queue'])) {
        $items['admin/reports/salesforce/queue'] = $views_paths['admin/reports/salesforce/queue'];
      }
    }
    // And try again.
    if (!empty($items['admin/reports/salesforce/batch'])) {
      // Salesforce settings
      $items['admin/springboard/salesforce-log/batch'] = $items['admin/reports/salesforce/batch'];
      $items['admin/springboard/salesforce-log/batch']['type'] = MENU_LOCAL_TASK;
      $items['admin/springboard/salesforce-log/batch']['title'] = $items['admin/reports/salesforce/batch']['title'];
      $items['admin/springboard/salesforce-log/batch']['access arguments'] = array('administer springboard');
      unset($items['admin/springboard/salesforce-log/batch']['access callback']);
      // Salesforce settings
      $items['admin/springboard/salesforce-log/item'] = $items['admin/reports/salesforce/item'];
      $items['admin/springboard/salesforce-log/item']['type'] = MENU_LOCAL_TASK;
      $items['admin/springboard/salesforce-log/item']['title'] = $items['admin/reports/salesforce/item']['title'];
      $items['admin/springboard/salesforce-log/item']['access arguments'] = array('administer springboard');
      unset($items['admin/springboard/salesforce-log/item']['access callback']);
      // Salesforce settings
      $items['admin/springboard/salesforce-log/queue'] = $items['admin/reports/salesforce/queue'];
      $items['admin/springboard/salesforce-log/queue']['type'] = MENU_LOCAL_TASK;
      $items['admin/springboard/salesforce-log/queue']['title'] = $items['admin/reports/salesforce/queue']['title'];
      $items['admin/springboard/salesforce-log/queue']['access arguments'] = array('administer springboard');
      $items['admin/springboard/salesforce-log/queue']['weight'] = 100;
      unset($items['admin/springboard/salesforce-log/queue']['access callback']);
    }
  }
  // Add menus under settings.
  if (module_exists('fundraiser')) {
    $items['admin/springboard/settings/fundraiser'] = $items['admin/config/system/fundraiser'];
    $items['admin/springboard/settings/fundraiser']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/fundraiser']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/fundraiser']['title'] = 'Fundraiser';
  }
  if (module_exists('market_source')) {
    $items['admin/springboard/settings/market-source'] = $items['admin/config/search/market-source'];
    $items['admin/springboard/settings/market-source']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/market-source']['access arguments'] = array('administer springboard');
  }
  if (module_exists('webform')) {
    $items['admin/springboard/settings/webform'] = $items['admin/config/content/webform'];
    $items['admin/springboard/settings/webform']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/webform']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/webform']['title'] = 'Webform';
  }
  if (module_exists('webform_ab')) {
    $items['admin/springboard/settings/webform-ab'] = $items['admin/config/content/webform_ab'];
    $items['admin/springboard/settings/webform-ab']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/webform-ab']['access arguments'] = array('administer springboard');
  }
  if (module_exists('secure_prepopulate')) {
    $items['admin/springboard/settings/secure-prepopulate'] = $items['admin/config/system/secure-prepopulate'];
    $items['admin/springboard/settings/secure-prepopulate']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/secure-prepopulate']['access arguments'] = array('administer springboard');
  }
  if (module_exists('email_wrappers')) {
    $items['admin/springboard/settings/email-wrappers'] = $items['admin/config/system/email-wrappers'];
    $items['admin/springboard/settings/email-wrappers']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/email-wrappers']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/email-wrappers']['title'] = 'Email wrappers';
  }
  if (module_exists('gateway_manager')) {
    $items['admin/springboard/settings/gateways'] = $items['admin/config/system/fundraiser/gateways'];
    $items['admin/springboard/settings/gateways']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/gateways']['access arguments'] = array('administer springboard');
    $items['admin/springboard/settings/gateways-add'] = $items['admin/config/system/fundraiser/gateways/add'];
    $items['admin/springboard/settings/gateways-add']['title'] = t('Add gateway');
    $items['admin/springboard/settings/gateways-add']['type'] = MENU_LOCAL_TASK;
    $items['admin/springboard/settings/gateways-add']['access arguments'] = array('administer springboard');
  }
  $items['admin/springboard/settings/springboard'] = $items['admin/config/system/springboard'];
  $items['admin/springboard/settings/springboard']['type'] = MENU_LOCAL_TASK;
  $items['admin/springboard/settings/springboard']['access arguments'] = array('administer springboard');
  $items['admin/springboard/settings/springboard']['title'] = 'Springboard';
  $items['admin/springboard/salesforce/salesforce']['weight'] = 100;
}

/**
 * Implements hook_theme().
 */
function springboard_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_sf_status' => array(
      'variables' => array('status' => '', 'identity' => array(), 'batch_status' => '', 'queue' => ''),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-sf-status',
    ),
    'springboard_help' => array(
      'variables' => array('help_array' => array()),
      'template' => drupal_get_path('theme', $theme) . '/templates/springboard-help',
    ),
  );
}

/**
 * Menu callback. Springboard dashboard page.
 */
function springboard_admin() {
  // Add our CSS for display.
  drupal_add_css(drupal_get_path('module', 'springboard') . '/css/springboard.css', 'module');
  $content = '<div class="springboard-dashboard dashboard">';
  // Load the enabled panes for the dashboard.
  $panes = module_invoke_all('springboard_dashboard_panes');
  drupal_alter('springboard_dashboard_panes', $panes);
  $enabled_panes = variable_get('springboard_enabled_panes', array());
  foreach ($panes as $pane_key => $pane) {
    if (!empty($pane['content']) && !empty($enabled_panes[$pane_key])) {
      $content .= $pane['content'];
    }
  }
  $content .= '</div>';
  return $content;
}

/**
 * Menu callback. Springboard help.
 */
function springboard_help_page() {
  $help_array = module_invoke_all('springboard_help');
  drupal_alter('springboard_help', $help_array);
  return theme('springboard_help', array('help_array' => $help_array));
}

/**
 * Implements hook_springboard_help().
 */
function springboard_springboard_help() {
  $help_array = array();
  $help_array[t('Documentation')] = array(
    t('Springboard documentation is available on !docs.',
      array('!docs' => l('gospringboard.com', 'http://www.gospringboard.com/documentation')))
  );
  $help_array[t('Issue Tracker')] = array(
    t('The Springboard project issue tracker is hosted on !issue_tracker',
      array('!issue_tracker' => l('drupal.org', 'http://drupal.org/project/springboard')))
  );
  return $help_array;
}

/**
 * Implements hook_springboard_dashboard_panes().
 */
function springboard_springboard_dashboard_panes() {
  $panes['springboard_sf_status'] = array(
    'label' => t('Salesforce connection status'),
    'description' => t('Salesforce connection status'),
    'content' => _springboard_sf_status(),
    'weight' => 0,
  );
  global $base_url;
  $panes['springboard_recent_donation_forms'] = array(
    'label' => t('Recent donation forms'),
    'description' => t('Configuration and submissions summary for recently created or updated springboard donation forms.'),
    'content' => '<h2>' . t('Recent donation forms ') .
      (module_exists('webform') ? l(t('Create donation form'), $base_url.'/node/add/donation-form', array('attributes' => array('class' => 'button'))) : '' ) .
      '</h2>' .
      '<div class="springboard-pane" id="springboard-recent-donation-forms">' .
      (module_exists('views') ? views_embed_view('sbv_forms', 'block_1') : t('Please enable the Views module to improve your Springboard experience.')) .
      '</div>',
    'weight' => 1,
  );
  $panes['springboard_recent_forms'] = array(
    'label' => t('Recent forms'),
    'description' => t('Configuration and submissions summary for recently created or updated springboard forms.'),
    'content' => '<h2>' . t('Recent forms ') .
      (module_exists('fundraiser') ? l(t('Create form'), $base_url.'/node/add/webform', array('attributes' => array('class' => 'button'))) : '')  .
      '</h2>' .
      '<div class="springboard-pane" id="springboard-recent-forms">' .
      (module_exists('views') ? views_embed_view('sbv_forms', 'block') : t('Please enable the Views module to improve your Springboard experience.')) .
      '</div>',
    'weight' => 2,
  );
  return $panes;
}

/**
 * Hook callback. For the Springboard Salesforce Status pane.
 */
function _springboard_sf_status() {
  $output = '';
  if (module_exists('salesforce')) {
    $identity = array();
    // Call on the module to get the current connection status
    $sf = salesforce_get_api();
    $status = FALSE;
    if ($sf->isAuthorized()) {
      $status = TRUE;
      $identity = $sf->getIdentity();
    } else {
      $status = FALSE;
    }
    // Latest batch # total items :: success :: fail.
    $batch_status = t('Batch info unavailable, please install Salesforce Log.');
    if (module_exists('salesforce_log')) {
      $query = db_select('salesforce_log_batch', 'sflog')
        ->fields('sflog')
        ->orderBy('bid', 'DESC')
        ->range(0,1)
        ->execute();
      $batch = $query->fetchObject();
      if ($batch) {
        $batch_status = t('Batch # @id - @record_count::<span class="successes">@success_count</span>::' .
          '<span class="failures">@fail_count</span>',
          array('@id' => $batch->bid, '@record_count' => $batch->count, '@success_count' => $batch->successes,
          '@fail_count' => $batch->failures));
      }
      else {
        $batch_status = t('No batches processed yet.');
      }
    }
    $queue = (module_exists('salesforce_queue') && $status) ? drupal_get_form('springboard_dashboard_queue') : '';
    return theme('springboard_sf_status', array('status' => $status, 'identity' => $identity, 'batch_status' => $batch_status, 'queue' => $queue));
  }
  return 'status';
}

/**
 * Springboard dashboard queue processor button
 */
function springboard_dashboard_queue() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#prefix' => t('Run Springboard Sync'),
    '#submit' => array('springboard_dashboard_queue_submit'),
  );
  return $form;
}

/**
 * Submit handler for Springboard dashboard queue processor button
 */
function springboard_dashboard_queue_submit(&$form_state) {
  salesforce_queue_process_queue();
}

/**
 * Helper functions.
 */

/**
 * Helper function, sort donation forms by conversion rate.
 */
function _springboard_sort_by_conversion($a, $b) {
  if (isset($a['conversion']) && isset($b['conversion'])) {
    if ($a['conversion'] == $b['conversion']) {
      return 0;
    }
    return ($a['conversion'] > $b['conversion']) ? -1 : 1;
  }
  return -1;
}

/**
 * Helper function.
 * Sets CSS class for dashboard elements based on comparison between the current value and the threshold value.
 *
 * @param $threshold
 * Int threshold value.
 *
 * @param $value
 * Int current value.
 *
 * @param $op
 * Specifies which type of comparison to perform, options are 'min' or 'max', defaults to min.
 */
function springboard_set_dashboard_class($threshold, $value, $op = 'min') {
  $value = preg_replace('/\%|ms/', '', $value);
  if (!$threshold || !is_numeric($value)) {
    $class = 'no-threshold';
  }
  else {
    switch ($op) {
      case 'min':
        $class = ($value >= $threshold) ? 'successes' : 'failures';
        break;
      case 'max':
        $class = ($value <= $threshold) ? 'successes' : 'failures';
        break;
    }
  }
  return $class;
}

/**
 * Helper function.
 * Calculate performance percentages.
 *
 * @param $a
 * Int first number.
 *
 * @param $b
 * Int second number.
 *
 * @return
 * Returns a percentage or N/A if either number is zero.
 */
function _springboard_percentage($a, $b) {
  if ($a && $b) {
    return round(100 * $a / $b) . '%';
  }
  else {
    return 'N/A';
  }
}
