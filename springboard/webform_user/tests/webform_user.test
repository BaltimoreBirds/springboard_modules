<?php
/**
 * Test interaction between user accounts and webform fields.
 */
class WebformUserTestCase extends DrupalWebTestCase {

  function setUp() {
    parent::setUp('webform', 'webform_user', 'profile2');
    
    // create some profile fields
    // "normal" core profile field
    $field_name = 'firstname';
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'user',
      'bundle' => 'user',
    );
    field_create_instance($instance);
    
    // Profile2 style profile field
    $field_name = 'lastname';
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'profile2',
      'bundle' => 'main',
    );
    field_create_instance($instance);

    // Configure webform_user
    variable_set('webform_user_node_types', array('webform'));
    
    // Do some user accounts
    // Create a webform editor to test creating and editing own content.
    $permissions['editor'] = array(
      'access content',
      'create webform content',
      'edit own webform content',
      'access all webform results',
    );

    // Create a webform admin that will do all node creation.
    $permissions['admin'] = array(
      'access content',
      'administer nodes',
      'create webform content',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'administer users',
    );

    foreach ($permissions as $user_key => $role_permissions) {
      $this->users[$user_key] = $this->drupalCreateUser($role_permissions);
    }
  }
  
  public static function getInfo() {
    return array(
      'name' => t('Webform User'),
      'description' => t('Checks new account creation & profile field settings.'),
      'group' => t('Webform User'),
    );
  }
  
  // confirm UI elements on webform node create form.
  function testWebformUserUI () {
    // log in our editor
    $this->drupalLogin($this->users['editor']);
    $edit = array(
      'title' => 'Test Webform User',
      'body[und][0][value]' => 'test',
      'is_webform_user' => 1,
    );
    $this->drupalPost('node/add/webform', $edit, t('Save'));
    
    // Confirm webform components are created
    $this->assertTrue($this->webformUserComponentExists(1, 'mail'), t('Webform User mail component found.'));
    $this->assertTrue($this->webformUserComponentExists(1, 'firstname'), t('Webform component created from core field found.'));
    $this->assertTrue($this->webformUserComponentExists(1, 'lastname'), t('Webform component created from profile2 field found.'));
    
    // Submit form anonymously
    $this->drupalLogout();
    $edit = array(
      'submitted[mail]' => 'test@example.com',
      'submitted[firstname]' => 'testname',
      'submitted[lastname]' => 'testlast',
    );
    $this->drupalPost('node/1', $edit, t('Submit'));
    
    // confirm new user account created
    $uid = db_query('SELECT uid FROM {users} WHERE mail = :mail AND name = :name', array(':mail' => 'test@example.com', ':name' => 'test@example.com'))->fetchField();
    $this->assertTrue($uid, t('user id found: @uid', array('@uid' => $uid)));
    
    // confirm profile values set
    $this->drupalLogin($this->users['admin']);
    $this->drupalGet("user/$uid/edit");
    // TODO: provide a method for generic field checking so we can expand this test to deal with multiple profile field types.
    $this->assertFieldById('edit-firstname-und-0-value', 'testname', t('Profile value set for firstname field.'));
    
    // submit form authenticated
    $edit = array(
      'submitted[mail]' => 'admintest@example.com',
      'submitted[firstname]' => 'admintest',
      'submitted[lastname]' => 'adminlast',
    );
    $this->drupalPost('node/1', $edit, t('Submit'));
    
    // confirm user profile values are updated
    $this->drupalGet("user/3/edit");
    $this->assertFieldById('edit-firstname-und-0-value', 'admintest', t('Profile value updated for firstname field.'));
    // view form, confirm defaults set from user profile
    $this->drupalGet("node/1");
    $this->assertFieldById('edit-submitted-firstname', 'admintest', t('Default component value set from core field value.'));
  }
  
  /**
   * Utility function, checks to see if a component exists for a given webform.
   */
  function webformUserComponentExists($nid, $form_key) {
    return (bool) db_query('SELECT cid FROM {webform_component} WHERE form_key = :form_key AND nid=:nid', array(':form_key' => $form_key, ':nid' => $nid))->fetchField();
  }
    
}
