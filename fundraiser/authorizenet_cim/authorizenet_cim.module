<?php

/**
 * @file
 * Methods for updating authorize.net CIM profiles.
 *
 */

/**
 * Implementation of uc_payment_gateway_alter().
 */
function authorizenet_cim_uc_payment_gateway_alter(&$uc_gateways) {
  foreach ($uc_gateways as &$gateway) {
    if ($gateway['id'] == 'authorizenet') {
      $gateway['billing_update'] = 'authorizenet_cim_update';
    }
  }
}

/**
 * Main function to update a Authorize.net CIM profile with new billing information.
 *
 * @param $profile_id
 *   The CIM profile to update.
 * @param $billing_info
 *   An array of credit card billing information.
 */
function authorizenet_cim_update($profile_id, $billing_info) {
  $result = array(
    'success' => TRUE,
  );

  // first, we need the profile so we can get the payment profile id
  $response = authorizenet_cim_profile_get($profile_id);

  // Profile get failed
  if ($response['resultCode'] == 'Error') {
    $result['success'] = FALSE;
    $result['message'] = $response['text'];
    $result['data'] = array('profile_id' => $profile_id);
    return $result;
  }

  // Continue on and try to get the payment profile
  $payment_profile_id = $response['customerPaymentProfileId'];
  if ($payment_profile_id) {
    $response = authorizenet_cim_update_payment_profile($profile_id, $payment_profile_id, $billing_info);
    if ($response['resultCode'] == 'Ok') {
      $result['message'] = t('Billing information successfully updated for profile id @profile_id', array('@profile_id' => $profile_id));
      // Make sensitive data before returning it
      $billing_info['card_num'] = str_pad(substr($billing_info['card_num'], -4), strlen($billing_info['card_num']), '*', STR_PAD_LEFT);
      $result['data'] = array(
        'profile_id' => $profile_id,
        'payment_profile_id' => $payment_profile_id,
        'billing_info' => $billing_info,
      );
    }
    else {
      // Update failed for some reason
      $result['success'] = FALSE;
      $result['message'] = $response['text'];
      $result['data'] = array(
        'profile_id' => $profile_id,
        'payment_profile_id' => $payment_profile_id,
        'billing_info' => $billing_info,
      );
    }

  }

  // return the result
  return $result;
}

/**
 * Returns a CIM profile for a given profile id.
 *
 * @param $profile_id
 *   A valid Authorize.net CIM.
 * @param $data
 *   Gateway configuration data.
 */
function authorizenet_cim_profile_get($profile_id) {
  $server = variable_get('uc_authnet_cim_mode', 'disabled');
  $request = array(
    'customerProfileId' => $profile_id,
  );

  // Request a profile from auth.net.
  $xml = _uc_authorizenet_xml_api_wrapper('getCustomerProfileRequest', _uc_authorizenet_array_to_xml($request));

  // Parse the response.
  $response = uc_authorizenet_xml_api($server, $xml);
  $response = str_replace('xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"', '', $response);
  $xml_raw = strstr($response, '<getCustomerProfileResponse');

  return _uc_authorizenet_cim_parse_response($xml_raw);
}

/**
 * Updates a CIM payment profile with new billing and credit card information.
 *
 * @param $profile_id
 *   Payment gateway-assigned ID associated with the customer profile.
 * @param $payment_profile_id
 *   Payment gateway assigned ID associated with the customer payment profile.
 * @param $billing_info
 *   Array of billing info to update the payment profile.
 *     array(
 *      'first_name' => 'John',
 *      'last_name' => 'Doe',
 *      'address_1 => '100 Elm Street',
 *      'city' => 'Springfield'
 *      'state' => 44,
 *      'zipcode' => 55555,
 *      'country' => 840,
 *      'card_num' => 4111111111111111,
 *      'card_exp_date' => array(
 *        'year' => 2012,
 *        'month' => 12,
 *      ),
 *      'card_cvv' => 122,
 *    );
 *
 */
function authorizenet_cim_update_payment_profile($profile_id, $payment_profile_id, $billing_info) {
  $server = variable_get('uc_authnet_cim_mode', 'disabled');

  // format expirdation date for API
  $expiration_date = $billing_info['card_exp_date']['year'] . '-' . sprintf("%02d", $billing_info['card_exp_date']['month']);

  // If a numeric country is supplied, convert to iso code 2
  if (!empty($billing_info['country']) && is_numeric($billing_info['country'])) {
    $country = uc_get_country_data(array('country_id' => $billing_info['country']));
    // Get the iso code, that's all we need
    $country = $country[0]['country_iso_code_2'];
  }

  // If a numeric state is supplied, convert to code
  if (!empty($billing_info['state']) && is_numeric($billing_info['state'])) {
    $state = uc_get_zone_code($billing_info['state']);
  }
  else {
    $state = $billing_info['state'];
  }

  // create the updateCustomerPaymentProfileRequest xml request
  $request = array(
    'customerProfileId' => $profile_id,
    'paymentProfile' => array(
      'billTo' => array(
        'firstName' => $billing_info['first_name'],
        'lastName' => $billing_info['last_name'],
        'address' => $billing_info['address_1'],
        'city' => $billing_info['city'],
        'state' => $state,
        'zip' => $billing_info['zipcode'],
        'country' => $country,
      ),
      'payment' => array(
        'creditCard' => array(
          'cardNumber' => $billing_info['card_num'],
          'expirationDate' => $expiration_date,
          'cardCode' => $billing_info['card_cvv'],
        ),
      ),
      'customerPaymentProfileId' => $payment_profile_id,
    ),
  );

  $xml = _uc_authorizenet_xml_api_wrapper('updateCustomerPaymentProfileRequest',   _uc_authorizenet_array_to_xml($request));
  $response = uc_authorizenet_xml_api($server, $xml);
  //$response = _authorizenet_cim_strip_namespace($response);
  $xml_raw = strstr($response, '<updateCustomerPaymentProfileResponse');
  return _uc_authorizenet_cim_parse_response($xml_raw);
}

function _authorizenet_cim_strip_namespace($xml) {
  return str_replace('xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"', '', $xml);
}
