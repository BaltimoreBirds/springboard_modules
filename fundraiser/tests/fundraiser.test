<?php
// $Id$

/**
 * @file
 * Fundraiser module tests.
 */

class FundraiserTestCase extends DrupalWebTestCase {
  private $_fundraiser_node;
  public $_user;

  public static function getInfo() {
    return array(
      'name' => 'Fundraiser configuration',
      'description' => 'Tests the setup and configuration of donation forms.',
      'group' => 'Springboard',
    );
  }
  
  /**
   * Implemenation of setUp().
   */
  function setUp() {
    parent::setUp(
      'webform',
      'profile',
      'token',
      'uc_store',
      'uc_order',
      'uc_cart',
      'uc_product',
      'uc_payment',
      'uc_credit',
      'ca',
      'test_gateway',
      'fundraiser'
    );
    
    $permissions = array(
      'access content',
      'administer nodes',
      'create webform content',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'create donation forms',
    );
    
    // Create and log in our privileged user.
    $this->_user =  $this->drupalCreateUser($permissions);
    
    // Create ubercart settings
    $this->setupPayment();
  }
  
  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    // Delete nodes
    $result = db_query('SELECT nid FROM {node}');
    while ($node = db_fetch_array($result)) {
      node_delete($node['nid']);
    }

    parent::tearDown();
  }
  
  /**
   * Performs the installation and configuration of payment methods
   */
  function setupPayment() {
    variable_set('uc_pg_test_gateway_enabled', 1);
    variable_set('uc_pg_test_gateway_cc_txn_type', 'auth_capture');
    variable_set('uc_payment_credit_gateway', 'test_gateway');
    variable_set('uc_credit_debug', 1);
  }
  
  /**
   *
   */
  function fundraiserReset() {
    $this->_fundraiser_node = NULL;
  }
  
  function testFundraiserDonationAmounts() {
    $node = $this->testFundraiserForm();
    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['form_key'] == 'amount') {
        $amounts = explode("\n", $component['extra']['items']);
        $items = count($amounts); // there should be 4 (3 amounts and other)
        $this->assertEqual($items, 4, t('Verify the donation form has 4 donation amounts'));
        
        $amount = explode('|', $amounts[0]);
        $this->assertEqual($amount[0], 10, t('Verify the first donation amount is 10'));
        
        $amount = explode('|', $amounts[1]);
        $this->assertEqual($amount[0], 20, t('Verify the second donation amount is 20'));
        
        $amount = explode('|', $amounts[2]);
        $this->assertEqual($amount[0], 30, t('Verify the third donation amount is 30'));
        
        $amount = explode('|', $amounts[3]);
        $this->assertEqual($amount[0], 'other', t('Verify the last donation amount is other'));
      }
    }
  }
  
  function testFundraiserFields() {
    $node = $this->testFundraiserForm();
     // loop over and create an array of form keys
    $keys = array();
    foreach ($node->webform['components'] as $cid => $component) {
      $keys[] = $component['form_key'];
    }
    //$this->pass(var_export($node, TRUE));
    
    // make sure all the required fields have been added to the form
    $valid = in_array('ms', $keys);
    $this->assertTrue($valid, t('Verify the market source component is added to the donation form'));
    
    $valid = in_array('cid', $keys);
    $this->assertTrue($valid, t('Verify the campaign id component is added to the donation form'));
    
    $valid = in_array('referrer', $keys);
    $this->assertTrue($valid, t('Verify the referrer component is added to the donation form'));
    
    $valid = in_array('initial_referrer', $keys);
    $this->assertTrue($valid, t('Verify the initial referrer component is added to the donation form'));
    
    $valid = in_array('amount', $keys);
    $this->assertTrue($valid, t('Verify the amount component is added to the donation form'));
    
    $valid = in_array('other_amount', $keys);
    $this->assertTrue($valid, t('Verify the other amount component is added to the donation form'));
    
    $valid = in_array('first_name', $keys);
    $this->assertTrue($valid, t('Verify the first name component is added to the donation form'));
    
    $valid = in_array('last_name', $keys);
    $this->assertTrue($valid, t('Verify the last name component is added to the donation form'));
    
    $valid = in_array('email', $keys);
    $this->assertTrue($valid, t('Verify the email component is added to the donation form'));
    
    $valid = in_array('billing_address', $keys);
    $this->assertTrue($valid, t('Verify the billing address component is added to the donation form'));
    
    $valid = in_array('billing_address_2', $keys);
    $this->assertTrue($valid, t('Verify the billing address 2 component is added to the donation form'));
    
    $valid = in_array('billing_city', $keys);
    $this->assertTrue($valid, t('Verify the billing city component is added to the donation form'));
    
    $valid = in_array('billing_country', $keys);
    $this->assertTrue($valid, t('Verify the billing country component is added to the donation form'));
    
    $valid = in_array('billing_state', $keys);
    $this->assertTrue($valid, t('Verify the billing state component is added to the donation form'));
    
    $valid = in_array('billing_zipcode', $keys);
    $this->assertTrue($valid, t('Verify the billing zipcode component is added to the donation form'));
    
    $valid = in_array('card_number', $keys);
    $this->assertTrue($valid, t('Verify the credit card number component is added to the donation form'));
    
    $valid = in_array('card_expiration_date', $keys);
    $this->assertTrue($valid, t('Verify the credit card expiration date component is added to the donation form'));
    
    $valid = in_array('card_cvv', $keys);
    $this->assertTrue($valid, t('Verify the credit card cvv component is added to the donation form'));
    
    $valid = in_array('recurs_monthly', $keys);
    $this->assertTrue($valid, t('Verify the recurs monthly component is added to the donation form'));
    
  }
  
  function testFundraiserForm() {
    $args = func_get_args();
    if (isset($this->_fundraiser_node)) {
      return $this->_fundraiser_node;
    }

    $settings = array(
     'type' => 'webform',
     'language' => '',
     'uid' => '1',
     'status' => '1',
     'promote' => '1',
     'moderate' => '0',
     'sticky' => '0',
     'tnid' => '0',
     'translate' => '0',
     'title' => 'Test Donation Form',
     'body' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla. Nunc est ipsum, pretium quis, dapibus sed, varius non, lectus. Proin a quam. Praesent lacinia, eros quis aliquam porttitor, urna lacus volutpat urna, ut fermentum neque mi egestas dolor.',
     'teaser' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla.',
     'log' => '',
     'format' => '1',
     'is_donation_form' => '1',
     'gateway' => 'test_gateway',
     'confirmation_email_from_name' => 'Test',
     'confirmation_email_from_email' => 'test@jacksonriver.com',
     'confirmation_email_subject' => 'Thanks',
     'confirmation_email_message' => 'Thanks',
     'donation_amounts' => '10,20,30',
     'show_other_amount' => '1',
     'minimum_donation_amount' => '10',
     'internal_name' => 'Test Donation Form',
     'is_being_cloned' => '0',
     'webform' => array(
        'confirmation' => 'Thanks!',
        'confirmation_format' => FILTER_FORMAT_DEFAULT,
        'redirect_url' => '<confirmation>',
        'teaser' => '0',
        'allow_draft' => '1',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'submit_notice' => '1',
        'roles' => array('1', '2'),
        'components' => array(),
        'emails' => array(),
      ),
    );

    $node = $this->drupalCreateNode($settings);
    $node = node_load($node->nid, TRUE);
    $this->_fundraiser_node = $node;

    return $this->_fundraiser_node;
  }



}

