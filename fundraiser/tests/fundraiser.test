<?php
/**
 * @file
 * Fundraiser module tests.
 */

include_once(dirname(__FILE__) . '/fundraiserTestHelper.class.php');

class FundraiserTestCase extends fundraiserTestHelper {

  public static function getInfo() {
    return array(
      'name' => 'Fundraiser configuration',
      'description' => 'Tests the setup and configuration of donation forms.',
      'group' => 'Springboard',
    );
  }

  /**
   * Implemenation of setUp().
   */
  function setUp() {
    parent::setUp();
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  function testFundraiserDonationAmounts() {
    $node = $this->getFundraiserForm();
    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['form_key'] == 'amount') {
        $amounts = explode("\n", $component['extra']['items']);
        $items = count($amounts); // there should be 5 (4 amounts and other)
        $this->assertEqual($items, 5, t('Verify the donation form has 4 donation amounts'));

        $amount = explode('|', $amounts[0]);
        $this->assertEqual($amount[0], 10, t('Verify the first donation amount is 10'));

        $amount = explode('|', $amounts[1]);
        $this->assertEqual($amount[0], 20, t('Verify the second donation amount is 20'));

        $amount = explode('|', $amounts[2]);
        $this->assertEqual($amount[0], 50, t('Verify the third donation amount is 50'));

        $amount = explode('|', $amounts[3]);
        $this->assertEqual($amount[0], 100, t('Verify the third donation amount is 100'));

        $amount = explode('|', $amounts[4]);
        $this->assertEqual($amount[0], 'other', t('Verify the last donation amount is other'));
      }
    }
  }

  function testFundraiserFields() {
    $node = $this->getFundraiserForm();
     // loop over and create an array of form keys
    $keys = array();
    foreach ($node->webform['components'] as $cid => $component) {
      $keys[] = $component['form_key'];
    }
    //$this->pass(var_export($node, TRUE));

    // make sure all the required fields have been added to the form
    $valid = in_array('ms', $keys);
    $this->assertTrue($valid, t('Verify the market source component is added to the donation form'));

    $valid = in_array('cid', $keys);
    $this->assertTrue($valid, t('Verify the campaign id component is added to the donation form'));

    $valid = in_array('referrer', $keys);
    $this->assertTrue($valid, t('Verify the referrer component is added to the donation form'));

    $valid = in_array('initial_referrer', $keys);
    $this->assertTrue($valid, t('Verify the initial referrer component is added to the donation form'));

    $valid = in_array('amount', $keys);
    $this->assertTrue($valid, t('Verify the amount component is added to the donation form'));

    $valid = in_array('other_amount', $keys);
    $this->assertTrue($valid, t('Verify the other amount component is added to the donation form'));

    $valid = in_array('first_name', $keys);
    $this->assertTrue($valid, t('Verify the first name component is added to the donation form'));

    $valid = in_array('last_name', $keys);
    $this->assertTrue($valid, t('Verify the last name component is added to the donation form'));

    $valid = in_array('email', $keys);
    $this->assertTrue($valid, t('Verify the email component is added to the donation form'));

    $valid = in_array('address', $keys);
    $this->assertTrue($valid, t('Verify the billing address component is added to the donation form'));

    $valid = in_array('address_line_2', $keys);
    $this->assertTrue($valid, t('Verify the billing address 2 component is added to the donation form'));

    $valid = in_array('city', $keys);
    $this->assertTrue($valid, t('Verify the billing city component is added to the donation form'));

    $valid = in_array('country', $keys);
    $this->assertTrue($valid, t('Verify the billing country component is added to the donation form'));

    $valid = in_array('state', $keys);
    $this->assertTrue($valid, t('Verify the billing state component is added to the donation form'));

    $valid = in_array('zip', $keys);
    $this->assertTrue($valid, t('Verify the billing zipcode component is added to the donation form'));

    $valid = in_array('card_number', $keys);
    $this->assertTrue($valid, t('Verify the credit card number component is added to the donation form'));

    $valid = in_array('card_expiration_month', $keys);
    $this->assertTrue($valid, t('Verify the credit card expiration month component is added to the donation form'));

    $valid = in_array('card_expiration_year', $keys);
    $this->assertTrue($valid, t('Verify the credit card expiration year component is added to the donation form'));

    $valid = in_array('card_cvv', $keys);
    $this->assertTrue($valid, t('Verify the credit card cvv component is added to the donation form'));

    $valid = in_array('recurs_monthly', $keys);
    $this->assertTrue($valid, t('Verify the recurs monthly component is added to the donation form'));

  }

  function testFundraiserForm() {
    $this->getFundraiserForm();
  }

//  function createFundraiserType($type, $name) {
//    $content_type = new stdClass();
//    $content_type->type = $type;
//    $content_type->name = $name;
//    $content_type->orig_type = '';
//    $content_type->old_type = '';
//    $content_type->description = '';
//    $content_type->help = '';
//    $content_type->min_word_count = 0;
//    $content_type->title_label = 'Title';
//    $content_type->body_label = 'Body';
//    $content_type->has_title = 1;
//    $content_type->has_body = 1;
//    $content_type->module = 'node';
//    $content_type->custom = 1;
//    $content_type->modified = 1;
//    $content_type->locked = '';
//
//    node_type_save($content_type);
//    node_types_rebuild();
//
//    // we have to fudge here since we're not actually submitting the form
//    $primary_types = variable_get('webform_node_types_primary', array('webform'));
//    $types = variable_get('webform_node_types', array('webform'));
//    $primary_types[] = $type;
//    variable_set('webform_node_types_primary', $primary_types);
//    $types[] = $type;
//    variable_set('webform_node_types', $types);
//    variable_set('fundraiser_' . $type, TRUE);
//  }

}

