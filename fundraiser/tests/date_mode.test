<?php
/**
 * @file
 * Fundraiser module sustainer date mode tests.
 */

class FundraiserSustainerDateModeTestCase extends DrupalWebTestCase {

  protected  $fundraiser_node;
  protected $orders;
  public $_user;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Fundraiser sustainer date mode'),
      'description' => t('Submits recurring donations and checks the charge dates.'),
      'group' => t('Springboard'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp(
      'webform',
      'profile',
      'token',
      'uc_store',
      'uc_order',
      'uc_cart',
      'uc_product',
      'uc_payment',
      'uc_credit',
      'ca',
      'test_gateway',
      'fundraiser',
      'fundraiser_uc_gateway',
      'market_source',
      'drupal_queue'
    );

    // Install any additional modules specified by helper modules
    $modules = func_get_args();
    foreach ($modules as $module) {
      drupal_install_modules(array($module));
    }

    $permissions = array(
      'administer blocks',
      'access content',
      'administer nodes',
      'create webform content',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'create donation form',
      'administer fundraiser',
    );

    // Create and log in our privileged user.
    $this->_user =  $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->_user);

    // Create ubercart settings
    $this->setupPayment();
    $this->setupProfileFields();
    $this->setProfileFields();

    // Create a donation form
    $this->getFundraiserNode();

  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  function testAnniveersaryOrdersCreated() {
    $number_of_orders = 1;
    // Create some orders in anniversary mode
    $this->disableDateMode();
    $this->createRecurringOrders($number_of_orders);
    $this->assertEqual($number_of_orders, count($this->orders), 'Order count matches number of orders created.');
    $today = date('d');
    foreach ($this->orders as $order) {
      $charges = db_query("SELECT order_id, next_charge FROM {fundraiser_recurring} WHERE master_order_id = %d ORDER BY next_charge ASC", $order->order_id);
      while ($charge = db_fetch_object($charges)) {
        $this->assertEqual($today, date('d', $charge->next_charge), 'Today\'s day ' . $today . ' matches the anniversary next_charge day from order' . $charge->order_id);
      }
    }
  }

  function testDateModeOrdersCreated() {
    $number_of_orders = 1;
    $day = date('d', strtotime('+2 days'));
    if ($day > 28) {
      $day = 28;
    }

    $this->enableDateMode($day);
    $this->createRecurringOrders($number_of_orders);
    $this->assertEqual($number_of_orders, count($this->orders), 'Order count matches number of orders created.');
    foreach ($this->orders as $order) {
      $charges = db_query("SELECT order_id, next_charge FROM {fundraiser_recurring} WHERE master_order_id = %d ORDER BY next_charge ASC", $order->order_id);
      while ($charge = db_fetch_object($charges)) {
        $this->assertEqual($day, date('d', $charge->next_charge), 'The date mode day ' . $day . ' matches the next_charge day from order' . $charge->order_id);
      }
    }
  }

  function enableDateMode($day) {

    // start out disabled
    variable_set('fundraiser_sustainer_set_date_mode', FALSE);
    variable_set('fundraiser_sustainer_set_dates', '10');

    $submission = array(
      'fundraiser_sustainer_set_date_mode' => TRUE,
      'fundraiser_sustainer_set_dates' => $day,
    );

    $this->drupalGet('admin/settings/fundraiser/date_mode');
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Finished updating the existing sustainers to the new date.'), t('Make sure the "Finished" text is displayed after converting sustainers.'));
    $this->assertTrue(variable_get('fundraiser_sustainer_set_date_mode', 'Date mode is enabled.'));
    $this->assertEqual(variable_get('fundraiser_sustainer_set_dates', ''), $day, 'Dates for date mode correctly set.');
  }

  function disableDateMode() {

    // start out enabled
    variable_set('fundraiser_sustainer_set_date_mode', TRUE);

    $submission = array(
      'fundraiser_sustainer_set_date_mode' => FALSE,
      'fundraiser_sustainer_set_dates' => '15',
    );

    $this->drupalGet('admin/settings/fundraiser/date_mode');
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Finished updating the existing sustainers to the new date.'), t('Make sure the "Finished" text is displayed after converting sustainers.'));
    $this->assertFalse(variable_get('fundraiser_sustainer_set_date_mode', 'Date mode is disabled.'));
  }

  /**
   * Recurring donation submission test
   */
  function createRecurringOrder() {
    // use the same node each time so we don't keep creating them.
    // $this->fundraiserReset();
    $node = $this->getFundraiserNode();

    $data = $this->createTestData();
    $submission = $this->createSubmission($data);

    // change credit card expiration date 3 months into the future
    $future = strtotime("+3 month");
    $cc_exp_month = date('n', $future);
    $cc_exp_year = date('Y', $future);

    $submission["submitted[credit_card_information][recurs_monthly][recurs]"] = 'recurs';
    $submission["submitted[credit_card_information][expiration_date][card_expiration_month]"] = $cc_exp_month;
    $submission["submitted[credit_card_information][expiration_date][card_expiration_year]"] = $cc_exp_year;

    $this->drupalGet('node/' . $node->nid);
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Credit card payment processed successfully.'), t('Make sure the text "Type: Authorization and capture" appear after successful donation form submission'));

    // Get the SID of the new submission.
    $matches = array();
    preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
    $sid = $matches[1];

    $order_id = db_result(db_query("SELECT order_id FROM {fundraiser_webform_order} WHERE sid = %d", $sid));
    return uc_order_load($order_id);
//    // get the id of the next recurring order
//    $next_order_id = db_result(db_query("SELECT order_id FROM {fundraiser_recurring} WHERE master_order_id = %d ORDER BY next_charge LIMIT 1", $order_id));
//    $yesterday = strtotime("-1 day");
//    db_query("UPDATE {fundraiser_recurring} SET next_charge = %d WHERE order_id = %d", $yesterday, $next_order_id);
//    _fundraiser_cron_process();

  }

  function getFundraiserNode($type = 'donation_form') {
    $args = func_get_args();
    if (isset($this->fundraiser_node)) {
      return $this->fundraiser_node;
    }

    $settings = array(
      'type' => $type,
      'language' => '',
      'uid' => '1',
      'status' => '1',
      'promote' => '1',
      'moderate' => '0',
      'sticky' => '0',
      'tnid' => '0',
      'translate' => '0',
      'title' => 'Test Donation Form',
      'body' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla. Nunc est ipsum, pretium quis, dapibus sed, varius non, lectus. Proin a quam. Praesent lacinia, eros quis aliquam porttitor, urna lacus volutpat urna, ut fermentum neque mi egestas dolor.',
      'teaser' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla.',
      'log' => '',
      'format' => '1',
      'is_donation_form' => '1',
      'donation_amounts' => '10,20,30', //array(10,20,30), // legacy code that can be removed from fundraiser.module
      'gateway' => 'test_gateway',
      'receipt_email_from' => 'Test',
      'receipt_email_address' => 'test@jacksonriver.com',
      'receipt_email_subject' => 'Thanks',
      'receipt_email_message' => 'Thanks',
      'amount_delta' => 4,
      'amount_0' => 10,
      'label_0' => '$10',
      'amount_1' => 20,
      'label_1' => '$20',
      'amount_2' => 50,
      'label_2' => '$50',
      'amount_3' => 100,
      'label_3' => '$100',
      'show_other_amount' => '1',
      'minimum_donation_amount' => '10',
      'internal_name' => 'Test Donation Form',
      'redirect_url' => '<confirmation>',
      'is_being_cloned' => '0',
      'clone_from_original_nid' => '0',
      'confirmation_page_title' => 'Thanks!',
      'confirmation_page_body' => 'Thanks thanks.',
      'confirmation_page_format' => FILTER_FORMAT_DEFAULT,
      'webform' => array(
        'confirmation' => 'Thanks!',
        'confirmation_format' => FILTER_FORMAT_DEFAULT,
        'teaser' => '0',
        'allow_draft' => '0',
        'status' => '1',
        'record_exists' => '1',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'submit_notice' => '1',
        'roles' => array('1', '2'),
        'components' => array(),
        'emails' => array(),
      ),
    );

    if (isset($args[0]['settings'])) {
      $settings = array_merge($settings, $args[0]['settings']);
    }

    $node = $this->drupalCreateNode($settings);
    $node = node_load($node->nid, TRUE);

    $this->fundraiser_node = $node;
    return $this->fundraiser_node;
  }

  /**
   * Performs the installation and configuration of payment methods
   */
  function setupPayment() {
    variable_set('uc_pg_test_gateway_enabled', 1);
    variable_set('uc_pg_test_gateway_cc_txn_type', 'auth_capture');
    variable_set('uc_payment_credit_gateway', 'test_gateway');
    variable_set('uc_credit_debug', 1);
    variable_set('fundraiser_development_mode', 1);
  }

  /**
   * Creates the stanard profile fields used by the fundraiser module.
   */
  function setupProfileFields() {
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('First Name', 'profile_first_name', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Last Name', 'profile_last_name', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Address', 'profile_address', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Address Line 2', 'profile_address_line_2', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('City', 'profile_city', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('State', 'profile_state', 'Personal Information', 'selection', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Zip', 'profile_zip', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Country', 'profile_country', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Campaign Id', 'profile_cid', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Market Source', 'profile_ms', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Referrer', 'profile_referrer', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Initial Referrer', 'profile_initial_referrer', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Salesforce Account Id', 'profile_salesforce_account_id', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Salesforce Contact Id', 'profile_salesforce_contact_id', 'System', 'textfield', 4)");
  }

  function setProfileFields() {
    $personal = array();
    $personal['profile_first_name'] = 'John';
    $personal['profile_last_name'] = 'Doe';
    $personal['profile_address'] = '100 Elm Street';
    $personal['profile_address_line_2'] = '#5';
    $personal['profile_city'] = 'Washington';
    $personal['profile_state'] = 'DC';
    $personal['profile_zip'] = 20009;
    $personal['profile_country'] = 'US';
    _fundraiser_profile_save_profile($personal, $this->_user, 'Personal Information');
    $system = array();
    $system['profile_cid'] = '';
    $system['profile_ms'] = 'market-source';
    $system['profile_referrer'] = '';
  }

  function createFundraiserType($type, $name) {
    $content_type = new stdClass();
    $content_type->type = $type;
    $content_type->name = $name;
    $content_type->orig_type = '';
    $content_type->old_type = '';
    $content_type->description = '';
    $content_type->help = '';
    $content_type->min_word_count = 0;
    $content_type->title_label = 'Title';
    $content_type->body_label = 'Body';
    $content_type->has_title = 1;
    $content_type->has_body = 1;
    $content_type->module = 'node';
    $content_type->custom = 1;
    $content_type->modified = 1;
    $content_type->locked = '';

    node_type_save($content_type);
    node_types_rebuild();

    // we have to fudge here since we're not actually submitting the form
    $primary_types = variable_get('webform_node_types_primary', array('webform'));
    $types = variable_get('webform_node_types', array('webform'));
    $primary_types[] = $type;
    variable_set('webform_node_types_primary', $primary_types);
    $types[] = $type;
    variable_set('webform_node_types', $types);
    variable_set('fundraiser_' . $type, TRUE);
  }

  function createTestData() {
    $tomorrow = strtotime("+1 day");
    $first_name = $this->randomName(7);
    $last_name = $this->randomName(5);
    return array(
      'amount' => 10,
      'first_name' => $first_name,
      'last_name' => $last_name,
      'mail' => $first_name . '.' . $last_name . '@example.com',
      'address' => $this->randomName(25),
      'city' => $this->randomName(15),
      'state' => 44,
      'country' => 840,
      'zipcode' => '55555',
      'cc_number' => '4111111111111111',
      'cc_cvv' => '111',
      'cc_exp_month' => date('n', $tomorrow),
      'cc_exp_year' => date('Y', $tomorrow),
      'cc_exp_day' => date('j', $tomorrow),
    );
  }

  function createSubmission($data) {
    $edit1["submitted[donation][amount]"] = $data['amount'];
    $edit1["submitted[donor_information][first_name]"] = $data['first_name'];
    $edit1["submitted[donor_information][last_name]"] = $data['last_name'];
    $edit1["submitted[donor_information][email]"] = $data['mail'];
    $edit1["submitted[billing_information][address]"] = $data['address'];
    $edit1["submitted[billing_information][city]"] = $data['city'];
    $edit1["submitted[billing_information][state]"] = $data['state'];
    $edit1["submitted[billing_information][country]"] = $data['country'];
    $edit1["submitted[billing_information][zip]"] = $data['zipcode'];
    $edit1["submitted[credit_card_information][card_number]"] = $data['cc_number'];
    $edit1["submitted[credit_card_information][expiration_date][card_expiration_month]"] = $data['cc_exp_month'];
    $edit1["submitted[credit_card_information][expiration_date][card_expiration_year]"] = $data['cc_exp_year'];
    $edit1["submitted[credit_card_information][card_cvv]"] = $data['cc_cvv'];
    return $edit1;
  }

  function clearOrders() {
    db_query("truncate {uc_orders}");
    db_query("truncate uc_order_comments");
    db_query("truncate uc_order_admin_comments");
    db_query("truncate uc_order_products");
    db_query("truncate uc_order_line_items");
    db_query("truncate uc_payment_receipts");
  }


  function createRecurringOrders($count = 3) {
    for ($i = 0; $i < $count; $i++) {
      $this->orders[] = $this->createRecurringOrder();
    }
  }

}

/**
 *

        Convert  Create  Extend
on      X         X       X
off     X         X       X


Disable date mode through the UI

(mode off and create order)
Create a few recurring orders - at least one on Jan 31st
assert that the next_charge dates on these orders is correct

(mode off and convert to on)
enable date mode through the UI
set date to a month day that has already passed (1 < x < today)
(Does simpletest play nice with batch api?)
assert that the next_charge dates are correctly updated

(mode on and extend)
Change the expiration date on an order to further in the future
assert new next_charges are correct

(mode on and create)
create a new recurring order
assert next_charges are correct

(change date while mode is already on)
change date to a month day that hasn't happened yet (today < x < 28)
assert next_charges on all orders

(mode on and extend)
Change the expiration date on an order to further in the future
assert new next_charges are correct

(mode on and create)
create a new recurring order
assert next_charges are correct

(mode on and convert)
disable date mode through the UI
assert next_charges are correct (anniversary mode)

(mode off and extend)
Change the expiration date on an order to further in the future
assert new next_charges are correct

(mode off and create)
create a new recurring order
assert next_charge is anniversary

 */
