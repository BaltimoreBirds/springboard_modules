<?php
/**
 * @file
 * Fundraiser module sustainer date mode tests.
 */

class FundraiserSustainerDateModeTestCase extends DrupalWebTestCase {

  protected $number_of_orders = 3;
  protected $fundraiser_node;
  protected $orders;
  protected $cc_exp_month;
  protected $cc_exp_year;
  protected $new_cc_exp_month;
  protected $new_cc_exp_year;
  public $user;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Fundraiser sustainer date mode'),
      'description' => t('Submits recurring donations and checks the charge dates when date mode is enabled.'),
      'group' => t('Springboard'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp(
      'webform',
      'profile',
      'token',
      'uc_store',
      'uc_order',
      'uc_cart',
      'uc_product',
      'uc_payment',
      'uc_credit',
      'ca',
      'test_gateway',
      'fundraiser',
      'fundraiser_uc_gateway',
      'market_source',
      'drupal_queue'
    );

    // Install any additional modules specified by helper modules
    $modules = func_get_args();
    foreach ($modules as $module) {
      drupal_install_modules(array($module));
    }

    $permissions = array(
      'administer blocks',
      'access content',
      'administer nodes',
      'create webform content',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'delete all webform submissions',
      'create donation form',
      'administer fundraiser',
    );

    // Create and log in our privileged user.
    $this->user =  $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->user);

    // Create ubercart settings
    $this->setupPayment();
    $this->setupProfileFields();
    $this->setProfileFields();

    // Create a donation form
    $this->getFundraiserNode();

    // change credit card expiration date 3 months into the future
    $future = strtotime("+3 months");
    $this->cc_exp_month = date('m', $future);
    $this->cc_exp_year = date('Y', $future);

    // new expiration date
    $future = strtotime("+6 months");
    $this->new_cc_exp_month = date('m', $future);
    $this->new_cc_exp_year = date('Y', $future);
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  /**
   * This should actually happen in the normal submissions tests.
   */
//  function testAnniversaryOrdersCreated() {
//    $number_of_orders = 1;
//    // Create some orders in anniversary mode
//    $this->disableDateMode();
//    $this->createRecurringOrders($number_of_orders);
//    $this->assertEqual($number_of_orders, count($this->orders), 'Order count matches number of orders created.');
//    $today = date('d');
//    foreach ($this->orders as $order) {
//      $charges = db_query("SELECT order_id, next_charge FROM {fundraiser_recurring} WHERE master_order_id = %d ORDER BY next_charge ASC", $order->order_id);
//      while ($charge = db_fetch_object($charges)) {
//        $this->assertEqual($today, date('d', $charge->next_charge), 'Today\'s day ' . $today . ' matches the anniversary next_charge day from order' . $charge->order_id);
//      }
//    }
//  }

  /**
   * Enables date mode and creates recurring orders and checks the next_charge days.
   */
  function testDateModeOrdersCreated() {
    // day should be between 1 and 28, and shouldn't be today's day.
    // here we're picking two days after today, unless it's out of range.
    $today = date('d');
    if ($today > 26) {
      $day = 2;
    }
    else {
      $day = $today + 2;
    }

    $this->enableDateMode($day);
    $this->createRecurringOrders($this->number_of_orders);
    $this->assertEqual($this->number_of_orders, count($this->orders), 'Order count matches number of orders created.');

    // Within each master order, confirm that the next_charge days are correct.
    foreach ($this->orders as $order) {
      $charges = db_query("SELECT order_id, next_charge
        FROM {fundraiser_recurring}
        WHERE master_order_id = %d ORDER BY next_charge ASC",
        $order->order_id);

      while ($charge = db_fetch_object($charges)) {
        $this->assertEqual($day, date('d', $charge->next_charge),
          'The date mode day ' . $day . ' matches the next_charge day from order ' . $charge->order_id
        );
      }

      // extend the order
      fundraiser_extend_future_orders($order->order_id, $this->new_cc_exp_month, $this->new_cc_exp_year);

      // grab the new last charge after the extension
      $new_last_charge = db_query("SELECT order_id, next_charge
        FROM {fundraiser_recurring}
        WHERE master_order_id = %d ORDER BY next_charge DESC LIMIT 0, 1",
        $order->order_id);

      $new_last_charge = db_fetch_object($new_last_charge);
      $new_last_charge = $new_last_charge->next_charge;
      $new_exp_date = $this->new_cc_exp_year . '-' . $this->new_cc_exp_month . '-' . $day;
      $this->assertEqual($new_exp_date, date('Y-m-d', $new_last_charge),
        'The new last charge date matches the extended expiration date.' .
        "New exp date $new_exp_date" .
        "New last charge " . date('Y-m-d', $new_last_charge)
      );

    }
  }

  /**
   * Enables date mode on the settings page.
   *
   * @param integer $day  The day to set for date mode. (1 - 28)
   */
  function enableDateMode($day) {

    // start out disabled
    variable_set('fundraiser_sustainer_set_date_mode', FALSE);
    variable_set('fundraiser_sustainer_set_dates', '10');

    $submission = array(
      'fundraiser_sustainer_set_date_mode' => TRUE,
      'fundraiser_sustainer_set_dates' => $day,
    );

    $this->drupalGet('admin/settings/fundraiser/date_mode');
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Finished updating the existing sustainers to the new date.'), t('Make sure the "Finished" text is displayed after converting sustainers.'));
    $this->assertTrue(variable_get('fundraiser_sustainer_set_date_mode', 'Date mode is enabled.'));
    $this->assertEqual(variable_get('fundraiser_sustainer_set_dates', ''), $day, 'Dates for date mode correctly set.');
  }

  /**
   * Goes to the date mode settings page and disables it.
   */
  function disableDateMode() {

    // start out enabled
    variable_set('fundraiser_sustainer_set_date_mode', TRUE);

    $submission = array(
      'fundraiser_sustainer_set_date_mode' => FALSE,
      'fundraiser_sustainer_set_dates' => '15',
    );

    $this->drupalGet('admin/settings/fundraiser/date_mode');
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Finished updating the existing sustainers to the new date.'), t('Make sure the "Finished" text is displayed after converting sustainers.'));
    $this->assertFalse(variable_get('fundraiser_sustainer_set_date_mode', 'Date mode is disabled.'));
  }

  /**
   * Recurring donation submissions
   */
  function createRecurringOrder($cc_exp_month, $cc_exp_year) {
    // use the same node each time so we don't keep creating them.
    $node = $this->getFundraiserNode();

    $data = $this->createTestData();
    $submission = $this->createSubmission($data);

    $submission["submitted[credit_card_information][recurs_monthly][recurs]"] = 'recurs';
    $submission["submitted[credit_card_information][expiration_date][card_expiration_month]"] = $cc_exp_month;
    $submission["submitted[credit_card_information][expiration_date][card_expiration_year]"] = $cc_exp_year;

    $this->drupalGet('node/' . $node->nid);
    $this->drupalPost(NULL, $submission, t('Submit'));

    $this->assertText(t('Credit card payment processed successfully.'), t('Make sure the text "Credit card payment processed successfully." appears after successful donation form submission'));

    // Get the SID of the new submission.
    $matches = array();
    preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
    $sid = $matches[1];

    $order_id = db_result(db_query("SELECT order_id FROM {fundraiser_webform_order} WHERE sid = %d", $sid));

    return uc_order_load($order_id);
  }

  /**
   * Returns the node for the donation form.  Creates one if it doesn't exist.
   *
   * @return stdClass
   */
  function getFundraiserNode() {
    if (isset($this->fundraiser_node)) {
      return $this->fundraiser_node;
    }

    $settings = array(
      'type' => 'donation_form',
      'language' => '',
      'uid' => '1',
      'status' => '1',
      'promote' => '1',
      'moderate' => '0',
      'sticky' => '0',
      'tnid' => '0',
      'translate' => '0',
      'title' => 'Test Donation Form',
      'body' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla. Nunc est ipsum, pretium quis, dapibus sed, varius non, lectus. Proin a quam. Praesent lacinia, eros quis aliquam porttitor, urna lacus volutpat urna, ut fermentum neque mi egestas dolor.',
      'teaser' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla.',
      'log' => '',
      'format' => '1',
      'is_donation_form' => '1',
      'donation_amounts' => '10,20,30', //array(10,20,30), // legacy code that can be removed from fundraiser.module
      'gateway' => 'test_gateway',
      'receipt_email_from' => 'Test',
      'receipt_email_address' => 'test@jacksonriver.com',
      'receipt_email_subject' => 'Thanks',
      'receipt_email_message' => 'Thanks',
      'amount_delta' => 4,
      'amount_0' => 10,
      'label_0' => '$10',
      'amount_1' => 20,
      'label_1' => '$20',
      'amount_2' => 50,
      'label_2' => '$50',
      'amount_3' => 100,
      'label_3' => '$100',
      'show_other_amount' => '1',
      'minimum_donation_amount' => '10',
      'internal_name' => 'Test Donation Form',
      'redirect_url' => '<confirmation>',
      'is_being_cloned' => '0',
      'clone_from_original_nid' => '0',
      'confirmation_page_title' => 'Thanks!',
      'confirmation_page_body' => 'Thanks thanks.',
      'confirmation_page_format' => FILTER_FORMAT_DEFAULT,
      'webform' => array(
        'confirmation' => 'Thanks!',
        'confirmation_format' => FILTER_FORMAT_DEFAULT,
        'teaser' => '0',
        'allow_draft' => '0',
        'status' => '1',
        'record_exists' => '1',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'submit_notice' => '1',
        'roles' => array('1', '2'),
        'components' => array(),
        'emails' => array(),
      ),
    );

    $node = $this->drupalCreateNode($settings);
    $node = node_load($node->nid, TRUE);

    $this->fundraiser_node = $node;
    return $this->fundraiser_node;
  }

  /**
   * Performs the installation and configuration of payment methods
   */
  function setupPayment() {
    variable_set('uc_pg_test_gateway_enabled', 1);
    variable_set('uc_pg_test_gateway_cc_txn_type', 'auth_capture');
    variable_set('uc_payment_credit_gateway', 'test_gateway');
    variable_set('uc_credit_debug', 1);
    variable_set('fundraiser_development_mode', 1);
  }

  /**
   * Creates the stanard profile fields used by the fundraiser module.
   */
  function setupProfileFields() {
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('First Name', 'profile_first_name', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Last Name', 'profile_last_name', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Address', 'profile_address', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Address Line 2', 'profile_address_line_2', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('City', 'profile_city', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('State', 'profile_state', 'Personal Information', 'selection', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Zip', 'profile_zip', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Country', 'profile_country', 'Personal Information', 'textfield', 2)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Campaign Id', 'profile_cid', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Market Source', 'profile_ms', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Referrer', 'profile_referrer', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Initial Referrer', 'profile_initial_referrer', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Salesforce Account Id', 'profile_salesforce_account_id', 'System', 'textfield', 4)");
    db_query("INSERT INTO {profile_fields} (title, name, category, type, visibility) VALUES ('Salesforce Contact Id', 'profile_salesforce_contact_id', 'System', 'textfield', 4)");
  }

  function setProfileFields() {
    $personal = array();
    $personal['profile_first_name'] = 'John';
    $personal['profile_last_name'] = 'Doe';
    $personal['profile_address'] = '100 Elm Street';
    $personal['profile_address_line_2'] = '#5';
    $personal['profile_city'] = 'Washington';
    $personal['profile_state'] = 'DC';
    $personal['profile_zip'] = 20009;
    $personal['profile_country'] = 'US';
    _fundraiser_profile_save_profile($personal, $this->user, 'Personal Information');
    $system = array();
    $system['profile_cid'] = '';
    $system['profile_ms'] = 'market-source';
    $system['profile_referrer'] = '';
  }

  /**
   * Returns some test data.
   *
   * @return array
   */
  function createTestData() {
    $tomorrow = strtotime("+1 day");
    $first_name = $this->randomName(7);
    $last_name = $this->randomName(5);
    return array(
      'amount' => 10,
      'first_name' => $first_name,
      'last_name' => $last_name,
      'mail' => $first_name . '.' . $last_name . '@example.com',
      'address' => $this->randomName(25),
      'city' => $this->randomName(15),
      'state' => 44,
      'country' => 840,
      'zipcode' => '55555',
      'cc_number' => '4111111111111111',
      'cc_cvv' => '111',
      'cc_exp_month' => date('n', $tomorrow),
      'cc_exp_year' => date('Y', $tomorrow),
    );
  }

  /**
   * Sets up the form API array with the given data.
   *
   * @param array $data
   *
   * @return array
   */
  function createSubmission($data) {
    $edit1["submitted[donation][amount]"] = $data['amount'];
    $edit1["submitted[donor_information][first_name]"] = $data['first_name'];
    $edit1["submitted[donor_information][last_name]"] = $data['last_name'];
    $edit1["submitted[donor_information][email]"] = $data['mail'];
    $edit1["submitted[billing_information][address]"] = $data['address'];
    $edit1["submitted[billing_information][city]"] = $data['city'];
    $edit1["submitted[billing_information][state]"] = $data['state'];
    $edit1["submitted[billing_information][country]"] = $data['country'];
    $edit1["submitted[billing_information][zip]"] = $data['zipcode'];
    $edit1["submitted[credit_card_information][card_number]"] = $data['cc_number'];
    $edit1["submitted[credit_card_information][expiration_date][card_expiration_month]"] = $data['cc_exp_month'];
    $edit1["submitted[credit_card_information][expiration_date][card_expiration_year]"] = $data['cc_exp_year'];
    $edit1["submitted[credit_card_information][card_cvv]"] = $data['cc_cvv'];
    return $edit1;
  }

  /**
   * Creates count number of recurring donations.
   *
   * @param int $count
   */
  function createRecurringOrders($count = 3) {
    for ($i = 0; $i < $count; $i++) {
      // spread out the expiration dates
      $timestamp = strtotime($this->cc_exp_year . '-' . $this->cc_exp_month . '-01');
      $new_timestamp = strtotime("+$i months", $timestamp);
      $month = date('n', $new_timestamp);
      $year = date('Y', $new_timestamp);

      $this->orders[] = $this->createRecurringOrder($month, $year);
    }
  }

}

/**
 *

        Convert  Create  Extend
on               Tested  Tested
off              n/a      n/a



This test should go in the normal submission tests.
(mode off and create order)
Create a few recurring orders - at least one on Jan 31st
assert that the next_charge dates on these orders is correct

Needs to be tested in normal submission tests
(mode off and extend)
Change the expiration date on an order to further in the future
assert new next_charges are correct


(mode off and convert to on)
have some existing orders
enable date mode through the UI
set date to a month day that has already passed (1 < x < today)
assert that the next_charge dates are correctly updated

This is being currently being tested.
(mode on and create)
create a new recurring order
assert next_charges are correct

This is currently being tested.
(mode on and extend expiration)
change the expiration date and call the extend function
assert that new last charge date matches

(change date mode date while mode is already on)
change date to a month day that hasn't happened yet (today < x < 28)
assert next_charges on all orders

(mode on and convert to off)
have some recurring orders while date mode is on
disable date mode through the UI
assert next_charges are correct (anniversary mode)

 */
