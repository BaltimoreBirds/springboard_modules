<?php

/**
 * The following functions need unit test coverage.
 */

/**
 * @file
 * Fundraiser module tests.
 */

/**
 * Setup and tear down web class. Does nothing else.
 */
class FundraiserUnitTestSetup extends DrupalWebTestCase {

  /**
   * Implemenation of setUp().
   */
  function setUp() {
    // Call the parent to set all of the base modules up.
    parent::setUp( array(
        'fundraiser',
      )
    );
  }
}

/**
 * Fundraiser testing class.
 */
class FundraiserUnitTestCase extends FundraiserUnitTestSetup {

  /**
   * Implements getInfo(). Declares this test class to fundraiser testing.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fundraiser unit tests',
      'description' => 'Tests fundraiser functions as unit tests.',
      'group' => 'Springboard',
    );
  }

  /**
   * Test coverage performed elsewhere as part of API unit testing.
   * --------------------------------------------------------------
   * _fundraiser_amount_field_create is tested in fundraiser_webform.unit.test
   * _fundraiser_other_amount_field_create is tested in fundraiser_webform.unit.test
   */

  /**
   * Unit test internal form field get/set functions.
   */
  function testFundraiserFormGetSetFunctions() {
    $form['field1'] = array(
      '#type' => 'textfield',
      '#title' => 'title1',
    );
    $form['field2'] = array(
      '#type' => 'textfield',
      '#title' => 'title2',
    );
    $form['field2']['field3'] = array(
      '#type' => 'textfield',
      '#title' => 'title3',
    );
    $form['field4'] = array(
      '#type' => 'textfield',
      '#title' => 'title4',
    );
    $form['field4']['field5'] = array(
      '#type' => 'textfield',
      '#title' => 'title5',
    );
    $form['field4']['field5']['field6'] = array(
      '#type' => 'textfield',
      '#title' => 'title6',
    );
    // Find a matching element on the first level.
    $expected = array(
      '#type' => 'textfield',
      '#title' => 'title1',
    );
    $field = _fundraiser_get_form_field($form, 'field1');
    $this->assertEqual($expected, $field, '_fundraiser_get_form_field() returned the correct field.', 'testFundraiserFormGetSetFunctions');
    // Find no matching element on the first level.
    $field = _fundraiser_get_form_field($form, 'field_none');
    $this->assertEqual(empty($field), TRUE, '_fundraiser_get_form_field() returned an empty field.', 'testFundraiserFormGetSetFunctions');
    // Find a matching element on the second level.
    $expected = array(
      '#type' => 'textfield',
      '#title' => 'title3',
    );
    $field = _fundraiser_get_form_field($form, 'field3');
    $this->assertEqual($expected, $field, '_fundraiser_get_form_field() returned the correct nested.', 'testFundraiserFormGetSetFunctions');
    // Find a matching element on the third level.
    $expected = array(
      '#type' => 'textfield',
      '#title' => 'title6',
    );
    $field = _fundraiser_get_form_field($form, 'field6');
    $this->assertEqual($expected, $field, '_fundraiser_get_form_field() returned the correct nestedx2 field.', 'testFundraiserFormGetSetFunctions');
    // Update this twice nested field in the form.
    $field['#updated'] = 'UpdatedValue';
    $form = _fundraiser_update_form_field($form, 'field6', $field);
    $this->assertEqual($form['field4']['field5']['field6']['#updated'], 'UpdatedValue', '_fundraiser_update_form_field() updated the nestedx2 field.', 'testFundraiserFormGetSetFunctions');
    // Update this nested field.
    $field = _fundraiser_get_form_field($form, 'field3');
    $field['#updated'] = 'UpdatedValue2';
    $form = _fundraiser_update_form_field($form, 'field3', $field);
    $this->assertEqual($form['field2']['field3']['#updated'], 'UpdatedValue2', '_fundraiser_update_form_field() updated the nested field.', 'testFundraiserFormGetSetFunctions');
    // Update this field.
    $field = _fundraiser_get_form_field($form, 'field1');
    $field['#updated'] = 'UpdatedValue3';
    $form = _fundraiser_update_form_field($form, 'field1', $field);
    $this->assertEqual($form['field1']['#updated'], 'UpdatedValue3', '_fundraiser_update_form_field() updated the field.', 'testFundraiserFormGetSetFunctions');
  }

  /**
   * Unit test helper functions.
   */
  function testFundraiserHelperFunctions() {
    //fundraiser_donation_get_donation Check that given a donation, the donation pulls from cache.
    //_fundraiser_gateway_info, collect given gateway information.
    //_fundraiser_get_donation_gateway, get a specific gateway for a donation - not same as fundraiser's donation.

    // Test array flattening for field ino keys.
    $field_info = array(
      'child' => array(),
      'child2' => array(
        '#element' => 'with element',
      ),
      'child3' => array(
        '#element' => 'with element',
        '#elements' => 'with elements',
      ),
      'child4' => array(
        '#element' => 'with element',
        '#elements' => 'with elements',
        'second_child5' => array(
          '#element' => 'with element',
        ),
      ),
      'child6' => array(
        '#element' => 'with element',
        '#elements' => 'with elements',
        'second_child7' => array(
          '#element' => 'with element',
        ),
      ),
      'child8' => array(
        '#element' => 'with element',
        '#elements' => 'with elements',
        'second_child9' => array(
          '#element' => 'with element',
          'third_child0' => array(
            '#element' => 'with element',
          ),
        ),
      ),
    );
    $expected = array(
      'child',
      'child2',
      'child3',
      'child4',
      'second_child5',
      'child6',
      'second_child7',
      'child8',
      'second_child9',
      'third_child0',
    );
    $results = _fundraiser_get_field_keys($field_info);
    // Order doesn't matter, we don't have a reliable return of orders from recursion.
    sort($expected);
    sort($results);
    $this->assertEqual($expected, $results, '_fundraiser_get_field_keys() returned the correct flattened list of field keys.', 'testFundraiserHelperFunctions');

    // Test content type identification.
    $content_types = array('type_one', 'type_two', 'type_three');
    foreach ($content_types as $type) {
      // Create donation_node content type.
      $settings = array(
        'type' => $type,
      );
      $content_type = $this->drupalCreateContentType($settings);
      variable_set('fundraiser_' . $type, TRUE);
    }
    // Create donation_node content type.
    $settings = array(
      'type' => 'not_type',
    );
    $content_type = $this->drupalCreateContentType($settings);
    $result = fundraiser_is_donation_type('type_one');
    $this->assertEqual(TRUE, $result, 'fundraiser_is_donation_type() returned TRUE for a fundraiser enabled content type.', 'testFundraiserHelperFunctions');
    $result = fundraiser_is_donation_type('not_type');
    $this->assertEqual(FALSE, $result, 'fundraiser_is_donation_type() returned FALSE for a non-fundraiser enabled content type.', 'testFundraiserHelperFunctions');
    $results = fundraiser_get_donation_types();
    $types = array(
      'article' => FALSE, // Content types added during setUp.
      'page' => FALSE, // Content types added during setUp.
      'type_one' => TRUE,
      'type_two' => TRUE,
      'type_three' => TRUE,
      'not_type' => FALSE,
    );
    // Order doesn't matter, we don't have a reliable return of orders from content type.
    ksort($results);
    ksort($types);
    $this->assertEqual($types, $results, 'fundraiser_get_donation_types() returned a list of correct fundraiser enabled results.', 'testFundraiserHelperFunctions');

    //Test for HTTPS security checks.
    $orig = isset($_SERVER['HTTPS']) ? $_SERVER['HTTPS'] : 'n/a';
    unset($_SERVER['HTTPS']);
    $result = _fundraiser_is_secure();
    $this->assertEqual(FALSE, $result, '_fundraiser_is_secure() returned FALSE when HTTPS unset.', 'testFundraiserHelperFunctions');
    $_SERVER['HTTPS'] = 'off';
    $result = _fundraiser_is_secure();
    $this->assertEqual(FALSE, $result, '_fundraiser_is_secure() returned FALSE when HTTPS set to "off".', 'testFundraiserHelperFunctions');
    $_SERVER['HTTPS'] = 'on';
    $result = _fundraiser_is_secure();
    $this->assertEqual(TRUE, $result, '_fundraiser_is_secure() returned TRUE when HTTPS set to "on".', 'testFundraiserHelperFunctions');
    if ($orig != 'n/a') {
      $_SERVER['HTTPS'] = $orig;
    }

    // Test email detection.
    $emails[] = array('', 0); // Empty string.
    $emails[] = array('@', 0); // Only the designator.
    $emails[] = array('email', 0); // Only the name.
    $emails[] = array('email@', 0); // Only the name and and designator.
    $emails[] = array('@com', 0); // Only the domain ending and designator.
    $emails[] = array('@example.com', 0); // Only the domain.
    $emails[] = array('email@example', 0); // No domain ending.
    $emails[] = array('email@.com', 0); // No domain.
    $emails[] = array('1Email!add@example.com', 0); // Invalid character in name.
    $emails[] = array('1Email+add@!example.com', 0); // Invalid character in domain.
    $emails[] = array('1Email+add@example.!com', 0); // Invalid character in domain ending.
    $emails[] = array('1Email+add@example.c', 0); // Too short domain ending.
    $emails[] = array('1Email+add@example.coooooom', 0); // Too long domain ending.
    $emails[] = array('1Email+add@example.c0m', 0); // Invalid character in domain ending.

    $emails[] = array('email@example.com', 1); // Standard good email.
    $emails[] = array('Email@example.com', 1); // Good email with capital.
    $emails[] = array('1Email.add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email_add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email%add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email-add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@sub.example.com', 1); // Wih a sub-domain.
    $emails[] = array('1Email+add@sub-example.com', 1); // With additional punctuation.
    $emails[] = array('1Email+add@sub-example.cm', 1); // Minimum length domain ending.
    $emails[] = array('1Email+add@sub-example.coooom', 1); // Maximum length domain ending.

    foreach ($emails as $email) {
      $result = _fundraiser_validate_email($email[0]);
      $this->assertEqual($email[1], $result, '_fundraiser_validate_email() returned ' . $email[1] . ' for ' . $email[0] . '.', 'testFundraiserHelperFunctions');
    }
  }

  /**
   * Unit test DB functions for fundraiser.
   */
  function testFundraiserDBFunctions() {
    // Setup.
    $defaults = array(
      'nid' => 1,
      'gateway' => 'Gateway id',
      'receipt_email_from' => 'Email from',
      'receipt_email_address' => 'Email address',
      'receipt_email_subject' => 'Email subject',
      'receipt_email_message' => 'Email message',
      'donation_amounts' => array(
        array('10', '$10'),
        array('20', '$20'),
        array('30', '$30'),
      ),
      'show_other_amount' => 1,
      'minimum_donation_amount' => 10,
      'internal_name' => 'Internal name',
      'confirmation_page_title' => 'Page title',
      'confirmation_page_body' => 'Page body',
      'confirmation_page_format' => 2,
      'redirect_url' => 'Redirect URL',
    );

    // For this node, create a new tracking record.
    _fundraiser_create_fundraiser($defaults);
    $defaults['donation_amounts'] = '10|$10,20|$20,30|$30';
    // Expect to see a row in {fundraiser_tracking} for this node.
    $result = db_query('SELECT * FROM {fundraiser}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 1, '_fundraiser_create_fundraiser() created only one row.', 'testFundraiserDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result, (object) $defaults, '_fundraiser_create_fundraiser() created correct defaults.', 'testFundraiserDBFunctions');
    $defaults['donation_amounts'] = array(
      array('10', '$10'),
      array('20', '$20'),
      array('30', '$30'),
    );
    $fundraiser = $defaults;

    // Get it.
    $retrieved = _fundraiser_get_fundraiser_by_nid($fundraiser['nid']);
    // Expect to see a row with default values.
    $this->assertEqual($retrieved, (object) $fundraiser, '_fundraiser_get_fundraiser_by_nid() retrieved correct row.', 'testFundraiserDBFunctions');

    // Update it.
    $fundraiser['gateway'] = 'SpecificGateway';
    _fundraiser_update_fundraiser($fundraiser);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_fundraiser_by_nid($fundraiser['nid']);
    $this->assertEqual($retrieved->gateway, $fundraiser['gateway'], '_fundraiser_update_fundraiser() updated the gateway value.', 'testFundraiserDBFunctions');

    // Create a second with the same example.
    $defaults['nid'] = 2;
    _fundraiser_update_fundraiser($defaults);
    // Expect to see another row.
    $result = db_query('SELECT * FROM {fundraiser}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_update_donation() correctly fell back to _fundraiser_create_fundraiser().', 'testFundraiserDBFunctions');

    // Update with wrong creation code.
    _fundraiser_create_fundraiser($fundraiser);
    $fundraiser['donation_amounts'] = '10|$10,20|$20,30|$30';
    // Expect to see the same number of rows.
    $result = db_query('SELECT * FROM {fundraiser}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_create_fundraiser() correctly fell back to _fundraiser_update_fundraiser().', 'testFundraiserDBFunctions');

    // Delete them.
    _fundraiser_delete_fundraiser($fundraiser['nid']);
    $result = db_query('SELECT * FROM {fundraiser}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_delete_fundraiser() deleted only one row.', 'testFundraiserDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result->nid, $defaults['nid'], '_fundraiser_delete_donation() deleted correct row.', 'testFundraiserDBFunctions');

    // Now to test the non CRUD DB functions.
    $nids = array(2);
    $retrieved = _fundraiser_get_fundraiser_by_nids($nids);
    $count = 0;
    foreach ($retrieved as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_get_fundraiser_by_nids() got only one row.', 'testFundraiserDBFunctions');
  }

  /**
   * Unit test DB functions for fundraiser_donation.
   */
  function testDonationDBFunctions() {
    // Setup.
    $defaults = array(
      'did' => 1,
      'nid' => 2,
      'uid' => 3,
      'sid' => 4,
      'gateway' => 'Gateway id',
      'txn_id' => 'Transaction id',
    );

    // For this node, create a new tracking record.
    _fundraiser_create_donation($defaults);
    // Expect to see a row in {fundraiser_tracking} for this node.
    $result = db_query('SELECT * FROM {fundraiser_donation}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 1, '_fundraiser_create_donation() created only one row.', 'testDonationDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result, (object) $defaults, '_fundraiser_create_donation() created correct defaults.', 'testDonationDBFunctions');
    $donation = $defaults;

    // Get it.
    $retrieved = _fundraiser_get_donation_by_did($donation['did']);
    // Expect to see a row with default values.
    $this->assertEqual($retrieved, (object) $donation, '_fundraiser_get_donation_by_did() retrieved correct row.', 'testDonationDBFunctions');

    // Update it.
    $donation['gateway'] = 'SpecificGateway';
    _fundraiser_update_donation($donation);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_donation_by_did($donation['did']);
    $this->assertEqual($retrieved->gateway, $donation['gateway'], '_fundraiser_update_donation() updated the gateway value.', 'testDonationDBFunctions');

    // Create a second with the same example.
    $defaults['did'] = 5;
    _fundraiser_update_donation($defaults);
    // Expect to see another row.
    $result = db_query('SELECT * FROM {fundraiser_donation}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_update_donation() correctly fell back to _fundraiser_create_donation().', 'testDonationDBFunctions');

    // Update with wrong creation code.
    _fundraiser_create_donation($donation);
    // Expect to see the same number of rows.
    $result = db_query('SELECT * FROM {fundraiser_donation}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_create_donation() correctly fell back to _fundraiser_update_donation().', 'testDonationDBFunctions');

    // Delete them.
    _fundraiser_delete_donation($donation['did']);
    $result = db_query('SELECT * FROM {fundraiser_donation}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_delete_donation() deleted only one row.', 'testDonationDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result->did, $defaults['did'], '_fundraiser_delete_donation() deleted correct row.', 'testDonationDBFunctions');

    // Now to test the non CRUD DB functions.
    $retrieved = _fundraiser_get_donations();
    $count = 0;
    foreach ($retrieved as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_get_donations() got only one row.', 'testDonationDBFunctions');
  }

  /**
   * Unit test DB functions for fundraiser_refund.
   */
  function testRefundDBFunctions() {
    // Setup.
    $defaults = array(
      //'refund_id' => '',                   // Serial id for table.
      'did' => 1,                            // Original donation id.
      'receipt_id' => 2,                     // New reverse donation id.
      'amount' => 50,                        // Amount refunded.
      'txn_id' => 'Transaction_id',          // Transaction id.
      'reason' => 'Some reason given',       // Reason given.
    );

    // For this node, create a new tracking record.
    _fundraiser_create_refund($defaults);
    // Expect to see a row in {fundraiser_tracking} for this node.
    $result = db_query('SELECT * FROM {fundraiser_refund}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 1, '_fundraiser_create_refund() created only one row.', 'testRefundDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result->did, $defaults['did'], '_fundraiser_create_refund() created correct did.', 'testRefundDBFunctions');
    $this->assertEqual($this_result->receipt_id, $defaults['receipt_id'], '_fundraiser_create_refund() created correct receipt_id.', 'testRefundDBFunctions');
    $this->assertEqual($this_result->amount, $defaults['amount'], '_fundraiser_create_refund() created correct amount.', 'testRefundDBFunctions');
    $this->assertEqual($this_result->txn_id, $defaults['txn_id'], '_fundraiser_create_refund() created correct txn_id.', 'testRefundDBFunctions');
    $this->assertEqual($this_result->reason, $defaults['reason'], '_fundraiser_create_refund() created correct reason.', 'testRefundDBFunctions');
    $refund = $defaults;
    $refund['refund_id'] = $this_result->refund_id;

    // Get it.
    $retrieved = _fundraiser_get_refund_by_rid($refund['refund_id']);
    // Expect to see a row with default values.
    $this->assertEqual($retrieved, (object) $refund, '_fundraiser_get_refund_by_rid() retrieved correct row.', 'testRefundDBFunctions');

    // Update it.
    $refund['reason'] = 'SpecificReason';
    _fundraiser_update_refund($refund);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_refund_by_rid($refund['refund_id']);
    $this->assertEqual($retrieved->reason, $refund['reason'], '_fundraiser_update_refund() updated the reason value.', 'testRefundDBFunctions');

    // Create a second with the same example.
    $defaults['did'] = 3;
    $defaults['receipt_id'] = 4;
    _fundraiser_update_refund($defaults);
    // Expect to see another row.
    $result = db_query('SELECT * FROM {fundraiser_refund}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_update_refund() correctly fell back to _fundraiser_create_refund().', 'testRefundDBFunctions');

    // Update with wrong creation code.
    _fundraiser_create_refund($refund);
    // Expect to see the same number of rows.
    $result = db_query('SELECT * FROM {fundraiser_refund}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 2, '_fundraiser_create_refund() correctly fell back to _fundraiser_update_refund().', 'testRefundDBFunctions');

    // Delete them.
    _fundraiser_delete_refund($refund['refund_id']);
    $result = db_query('SELECT * FROM {fundraiser_refund}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_delete_refund() deleted only one row.', 'testRefundDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result->did, $defaults['did'], '_fundraiser_delete_refund() deleted correct row.', 'testRefundDBFunctions');
    $refund = $defaults;
    $refund['refund_id'] = $this_result->refund_id;

    // Now to test the non CRUD DB functions.
    // Expect to get one result with the right did.
    $retrieved = _fundraiser_get_refund_by_did(3);
    $count = 0;
    foreach ($retrieved as $this_result) {
      $count++;
    }
    $this->assertEqual($this_result, (object) $refund, '_fundraiser_get_refund_by_did(2) retrieved correct row.', 'testRefundDBFunctions');
    // Expect to get no results with the wrong did.
    $retrieved = _fundraiser_get_refund_by_did(1);
    $count = 0;
    foreach ($retrieved as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 0, '_fundraiser_get_refund_by_did(1) retrieved no rows.', 'testRefundDBFunctions');
  }

  /**
   * Unit test DB functions for fundraiser_tracking.
   */
  function testTrackingDBFunctions() {
    // Setup.
    $tracking = array(
      'nid' => 1,
    );
    $defaults = array(
      'nid' => 1,
      'pageviews' => 1,
      'conversions' => 0,
      'local_failures' => 0,
      'gateway_failures' => 0,
    );

    // For this node, create a new tracking record.
    _fundraiser_create_tracking($defaults);
    // Expect to see a row in {fundraiser_tracking} for this node.
    $result = db_query('SELECT * FROM {fundraiser_tracking} WHERE nid = :nid', array(':nid' => $defaults['nid']));
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    $this->assertEqual($count, 1, '_fundraiser_create_tracking() created only one row.', 'testTrackingDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result, (object) $defaults, '_fundraiser_create_tracking() '.print_r($this_result,1).'created correct defaults.', 'testTrackingDBFunctions');
    $tracking = $defaults;

    // Get it.
    $retrieved = _fundraiser_get_tracking_by_nid($tracking['nid']);
    // Expect to see a row with default values.
    $this->assertEqual($retrieved, (object) $tracking, '_fundraiser_get_tracking_by_nid() retrieved correct row.', 'testTrackingDBFunctions');

    // Update it.
    $tracking['pageviews']++;
    _fundraiser_update_tracking($tracking);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_tracking_by_nid($tracking['nid']);
    $this->assertEqual($retrieved->pageviews, 2, '_fundraiser_update_tracking() updated pageviews value.', 'testTrackingDBFunctions');

    // Create a second with the same example.
    $tracking['pageviews']++;
    _fundraiser_create_tracking($tracking);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_tracking_by_nid($tracking['nid']);
    $this->assertEqual($retrieved->pageviews, 3, '_fundraiser_create_tracking() correctly fell back to _fundraiser_update_tracking().', 'testTrackingDBFunctions');

    // Update a third with wrong creation code.
    $defaults['nid'] = 2;
    _fundraiser_update_tracking($defaults);
    // Expect to see a row with updated values.
    $retrieved = _fundraiser_get_tracking_by_nid($defaults['nid']);
    $this->assertEqual($retrieved, (object) $defaults, '_fundraiser_update_tracking() correctly fell back to _fundraiser_create_tracking().', 'testTrackingDBFunctions');

    // Delete them.
    _fundraiser_delete_tracking($tracking['nid']);
    $result = db_query('SELECT * FROM {fundraiser_tracking}');
    $count = 0;
    foreach ($result as $this_result) {
      $count++;
    }
    // Expect to see only one row left.
    $this->assertEqual($count, 1, '_fundraiser_delete_tracking() deleted only one row.', 'testTrackingDBFunctions');
    // Expect to see a row with default values.
    $this->assertEqual($this_result, (object) $defaults, '_fundraiser_delete_tracking() deleted the correct row.', 'testTrackingDBFunctions');

    // Now to test the non CRUD DB functions.
    // Expect a node with tracking to update the field.
    _fundraiser_update_tracking_value($defaults['nid'], 'pageviews');
    $retrieved = _fundraiser_get_tracking_by_nid($defaults['nid']);
    $this->assertEqual($retrieved->pageviews, 2, '_fundraiser_update_tracking_value() correctly updated the value.', 'testTrackingDBFunctions');
    // Expect a node without tracking to create a row with updated field.
    _fundraiser_update_tracking_value($tracking['nid'], 'pageviews');
    $retrieved = _fundraiser_get_tracking_by_nid($tracking['nid']);
    $this->assertEqual($retrieved->pageviews, 2, '_fundraiser_update_tracking_value() correctly created a row and updated the value.', 'testTrackingDBFunctions');
    // Expect a bad field value to not change anything.
    _fundraiser_update_tracking_value($tracking['nid'], 'notARealFieldName');
    $retrieved = _fundraiser_get_tracking_by_nid($tracking['nid']);
    $this->assertEqual($retrieved->pageviews, 2, '_fundraiser_update_tracking_value() ignored a bad field name.', 'testTrackingDBFunctions');
  }

}
