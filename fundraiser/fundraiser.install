<?php
/**
 * @file
 * Install, update and uninstall functions for the fundraiser module.
 */

/**
 * Implements hook_install().
 */
function fundraiser_install() {
  variable_set('fundraiser_development_mode', 1);
}

/**
 * Implements hook_schema().
 */
function fundraiser_schema() {
  $schema['fundraiser'] = array(
    'description' => 'Stores data for donation_form nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gateway' => array(
        'description' => 'The payment gateway the donation form uses to process credit cards.',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'receipt_email_from' => array(
        'description' => 'The name that will appear in the from line in the receipt email.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'receipt_email_address' => array(
        'description' => 'The from email address that will be used in the receipt email.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'receipt_email_subject' => array(
        'description' => 'The subject line of the receipt email.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'receipt_email_message' => array(
        'description' => 'The message that will appear in the receipt email.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'donation_amounts' => array(
        'description' => 'A comma delimited string of ask amounts to be displayed on the donation form.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'show_other_amount' => array(
        'description' => 'Flag to toggle the other amount field on and off.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'minimum_donation_amount' => array(
        'description' => 'The minimum donation amount the donation form will accept.',
        'type' => 'numeric',
        'not null' => FALSE,
        'precision' => '15',
        'scale' => '3',
      ),
      'internal_name' => array(
        'description' => 'Another name for the donation form that will not be displayed to end users.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'confirmation_page_title' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'confirmation_page_body' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'confirmation_page_format' => array(
        'description' => 'input type for the confirmation page textarea',
        'type' => 'int',
      ),
      'redirect_url' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );
  $schema['fundraiser_donation'] = array(
    'description' => 'Store primary donation information.',
    'fields' => array(
      'did' => array(
        'description' => 'Donation ID - other tables call it order_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Originating fundraiser node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Donating user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('did'),
  );
  $schema['fundraiser_refund'] = array(
    'description' => 'Stores information about refunds made on donations',
    'fields' => array(
      'refund_id' => array(
        'description' => 'Primary key: refund ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'Ubercart order ID the refund applies to',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'receipt_id' => array(
        'description' => 'Ubercart receipt ID of the payment',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'amount' => array(
        'description' => 'Amount of the refund (positive)',
        'type' => 'float',
        'not null' => FALSE,
      ),
      'txn_id' => array(
        'description' => 'Transaction ID of the refund',
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
      ),
      'reason' => array(
        'description' => 'Reason for the refund',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('refund_id'),
    'indexes' => array('refund_order_id' => array('order_id')),
  );
  $schema['fundraiser_tracking'] = array(
    'description' => 'Store conversion & pageview information for donation forms.',
    'fields' => array(
      'nid' => array(
        'description' => 'Donation Form node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pageviews' => array(
        'description' => 'Number of times the donation form has been viewed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'conversions' => array(
        'description' => 'Number of times the donation form has been submitted successfully.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'local_failures' => array(
        'description' => 'Number of times form submission has resulted in form_set_error().',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'gateway_failures' => array(
        'description' => 'Number of times submission has resulted in a failure reported by the payment gateway.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function fundraiser_update_last_removed() {
  // We've removed versions of this module prior to 7.x-3.x.
  // The next update function is fundraiser_update_7000().
  return 6309;
}

/**
 * 7.x branch updates below.
 */

/**
 * D7 upgrade, copy donation information out of Ubercart orders, into a location where fundraiser can track it.
 */
function fundraiser_update_7000() {
  // Create new table.
  $donation_table = fundraiser_schema();
  db_create_table('fundraiser_donation', $donation_table['fundraiser_donation']);
  // Get all existing fundraiser donation information, and load the fundriaser_donation table with it all.
  // From ubercart's order tables.
  $donations = db_query('SELECT o.order_id, f.nid, o.uid FROM {uc_orders} o ' .
   'LEFT JOIN {uc_order_products} p ON o.order_id = p.order_id '.
   'LEFT JOIN {fundraiser} f ON p.nid = f.nid ');
  foreach ($donations as $donation) {
    if (isset($donation->order_id) && isset($donation->nid) && isset($donation->uid)) { 
      $record = array(
        'did' => $donation->order_id,
        'nid' => $donation->nid,
        'uid' => $donation->uid,
      );
      drupal_write_record('fundraiser_donation', $record);
    }
  }
}