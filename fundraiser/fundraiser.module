<?php

/**
 * @file
 * Provides behaviors to handle donation form creation and donation submission.
 */

define('FUNDRAISER_SINGLE_DONATION_TYPE', 'donation');
define('FUNDRAISER_RECURRING_DONATION_TYPE', 'recurring_donation');
define('FUNDRAISER_DONATION_REFUND_TYPE', 'refund');
define('RECURRING_DONATION_STATUS', 'pending_future_payment');
define('DONATION_NON_RECURRING', 0);
define('DONATION_RECURRING', 1);
define('DONATION_CANCELLED', 2);

// Include theme related functions.
require_once('fundraiser.theme.inc'); 

/**
 * Implements hook_cron().
 */
function fundraiser_cron() {
  // If cron.php is being run while standalone cron is enabled, do nothing.
  // This allows this code to still execute if cron is run from the status page.
  if (variable_get('fundraiser_standalone_cron_enabled', 0)) {
    if (preg_match('/cron.php$/', $_SERVER['REQUEST_URI'])) {
      return 0;
    }
    else {
      watchdog('fundraiser_cron', 'Fundraiser cron run.');
    }
  }
  else {
    watchdog('fundraiser_cron', 'Standard cron run.');
  }
  // Load all cron related functions.
  module_load_include('inc', 'fundraiser', 'fundraiser.cron');
  // Process recurring donations.
  if (fundraiser_processor_key_match()) { // From fundraiser.cron.inc
    fundraiser_process_recurring_donations(); // From fundraiser.cron.inc
    // TODO: Provide hook here for cron complete on recurring donations?
  }
  else {
    $message = 'The fundraiser sustainer key has not been configured correctly. Recurring donations will not be processed.';
    drupal_set_message(t($message), 'warning');
    watchdog('fundraiser', $message, NULL, WATCHDOG_CRITICAL);
  }
}

/**
 * Implements hook_permission().
 */
function fundraiser_permission() {
  return array(
    'administer fundraiser' => array(
      'title' => t('Administer fundraiser'), 
      'description' => t('Perform administration tasks for fundraiser.'),
    ),
    'create donation form' => array(
      'title' => t('Create donation form'), 
      'description' => t('Create donation forms.'),
    ),
    'edit own donation form' => array(
      'title' => t('Edit own donation form'), 
      'description' => t('Edit own donation forms.'), 
    ),
    'edit any donation form' => array(
      'title' => t('Edit any donation form'), 
      'description' => t('Edit any donation forms.'), 
    ),
    'delete own donation form' => array(
      'title' => t('Delete own donation form'), 
      'description' => t('Delete own donation forms.'), 
    ),
    'delete any donation form' => array(
      'title' => t('Delete any donation form'), 
      'description' => t('Delete any donation forms.'), 
    ),
    'clone donation form' => array(
      'title' => t('Clone donation form'), 
      'description' => t('Clone donation forms.'), 
    ),
    'cancel future donations' => array(
      'title' => t('Cancel future donations'), 
      'description' => t('Cancel future donations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fundraiser_menu() {
  $items['fundraiser_changestate/js'] = array(
    'page callback' => 'fundraiser_changestate',
    'type' => MENU_CALLBACK,
    'access arguments' => array("access content"),
  );
  // Add the cron handler if it's enabled.
  if (variable_get('fundraiser_standalone_cron_enabled', 0)) {
    $items['fundraiser_cron'] = array(
      'page callback' => 'fundraiser_cron',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  $items['admin/config/system/fundraiser'] = array(
    'title' => 'Fundraiser settings',
    'description' => t('Configurations for the Fundraiser system.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array("administer fundraiser"),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fundraiser.admin.inc',
  );
  $items['admin/config/system/fundraiser/settings'] = array(
    'title' => 'Fundraiser settings',
    'description' => t('Configurations for the Fundraiser system.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array("administer fundraiser"),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'fundraiser.admin.inc',
  );
  $items['admin/config/system/fundraiser/recurring'] = array(
    'title' => 'Current Fundraiser Recurring Payments',
    'page callback' => 'fundraiser_recurring_admin',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/store/orders/%/recurring/edit'] = array( //TODO - Move this to it's own page. Remove Ubercart as defaults.
    'title' => 'Edit Recurring Donations',
    'page callback' => 'fundraiser_recurring_edit_forms',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/store/orders/%/refund'] = array( //TODO - Move this to it's own page. Remove Ubercart as defaults.
    'title' => 'Refund',
    'page callback' => 'fundraiser_show_refund_form',
    'page arguments' => array(3),
    'access arguments' => array('edit orders'),
    'file' => 'fundraiser.admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/store/orders/%/recurring/overview'] = array(  //TODO - Move this to it's own page. Remove Ubercart as defaults.
    'title' => 'Recurring Info',
    'page callback' => 'fundraiser_recurring_master_order_overview',
    'access arguments' => array('view all orders'),
    'access callback' => 'fundraiser_recurring_check_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'fundraiser.admin.inc',
  );

  return $items;
}

/**
 * Menu access callback, check if the user has recurring orders.
 */ // TODO do NOT pass these as args. Actually pull them from the menu structure.
function fundraiser_recurring_check_access() {
  $count = db_query('SELECT COUNT(order_id) FROM {fundraiser_recurring} '.
    'WHERE master_order_id = :master_order_id OR order_id = :order_id',
    array(':master_order_id' => arg(3), ':order_id' => arg(3)))->fetchColumn();
  if ($count > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_menu_alter(&$items) {
  // Workaround for bug where only uid 1 can see custom triggers.
  // TODO: Has this been patched yet? Is there an issue in the queue for Triggers? - AF 5/3/2011
  // User access is handled by: 'access arguments' => array('administer actions') in D7.
  // Is that the same as it was when you looked in May? - SeH 1/10/12
  if (module_exists('trigger')) {
    $items['admin/build/trigger/fundraiser']['access callback'] = TRUE;
  }
}

/**
 * Menu callback, display fundraiser confirmation page.
 */
function fundraiser_donation_confirmation($node) {
  drupal_set_title(check_plain($node->confirmation_page_title));
  if (empty($output)) {
    // TODO come back to this, will need to be rethemed.
    $output = theme(array('fundraiser_confirmation_' . $node->nid, 'fundraiser_confirmation'), $node, $_GET['sid']);
  }
  return $output;
}

// TODO come back to fix these. This is no longer how tokens work.
/**      
 * Implementation of hook_token_list().
 */
function fundraiser_token_list($type = 'all') {
  if ($type == 'fundraiser' || $type == 'all') {
    $tokens['fundraiser']['fundraiser-cc-last-four']  = t('The last four digits of the credit card used for the order.');
    $tokens['fundraiser']['fundraiser-cc-card-exp-month'] = t('The credit card expiration month.');
    $tokens['fundraiser']['fundraiser-cc-card-exp-year'] = t('The credit card expiration year.');
    $tokens['fundraiser']['fundraiser-cc-card-type'] = t('The credit card type used for the order.');
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function fundraiser_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'fundraiser':
      $values['fundraiser-cc-last-four'] = substr($object->payment_details['cc_number'], -4);
      $values['fundraiser-cc-card-exp-month'] = $object->payment_details['cc_exp_month'];
      $values['fundraiser-cc-card-exp-year'] = $object->payment_details['cc_exp_year'];
      $values['fundraiser-cc-card-type'] = ucfirst($object->payment_details['cc_type']);
      break;
  }
  return $values;
}
// TODO.

/**
 * Implemenation of hook_mail().
 */
function fundraiser_mail($key, &$message, &$params) {
  switch ($key) {
    case 'fundraiser_cc_notification':
      $body = variable_get('fundraiser_cc_exp_body', 'Your card ending in [cc_last_4] is about to expire on [exp_month]/[exp_year].');
      // Do some token replacements.
      $tokens = array('[exp_month]', '[exp_year]', '[cc_type]', '[cc_last_4]', '[amount]');
      $replaces = array($params['exp_month'], $params['exp_year'], $params['cc_type'], $params['cc_last_4'], $params['amount']);
      $body = str_replace($tokens, $replaces, $body);
      // Replace any user tokens via the token module.
      $body = token_replace($body, 'user', $params['user']);
      $message['subject'] = variable_get('fundraiser_cc_exp_subject', 'Your credit card is about to expire');
      $message['body'] = $body;
      break;
  }
}

/**
 * Implements hook_clone_access_alter() from Node clone module.
 */
function fundraiser_clone_access_alter(&$access, $node) {
  // Remove the access if the user isn't allowed to clone the donation form.
  if (!user_access('clone donation form')) {
    $access = 0;
  }
}

/**
 * Implements hook_clone_node_alter() from Node clone module.
 *
 * From: http://drupal.org/node/1256478
 */
function fundraiser_clone_node_alter(&$node, $context) {
  // Set the internal name.
  $node->internal_name = t('Clone of ') . $context['original_node']->internal_name;
  // The additional load in hook_node_load already will have brought in additional node data.
  // The additional saves in hook_node_insert / hook_node_update will save the additional node data.
}

/**
 * Implemenation of queue_report_item_name().  TODO where does this come from??
 */
function fundraiser_queue_report_item_title_alter(&$row) {
  if ($row['type'] == 'donation' || $row['type'] == 'recurring_donation') {
    $title = 'Donation ' . $row['oid'];
    $row['title'] = $title;
  }
  elseif ($row['type'] == 'refund') {
    $did = db_query("SELECT order_id FROM {fundraiser_refund} WHERE refund_id = :refund_id",
      array(':refund_id' => $row['oid']))->fetchColumn();
    $title = 'Donation ' . $did;
    $row['title'] = $title;
  }
}

/**
 * Implements hook_views_api(). From Views module.
 */
function fundraiser_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implementation of hook_access().
 */
function fundraiser_access($op, $node, $account) {
  if (_fundraiser_is_donation_type($node->type)) {
    $is_author = $account->uid == $node->uid;
    switch ($op) {
      case 'create':
        return user_access('create donation form', $account) ? TRUE : NULL;
      case 'update':
        return ((user_access('edit own donation form', $account) && $is_author) ||
          user_access('edit any donation form', $account)) ? TRUE : NULL;
      case 'delete':
        return ((user_access('delete own donation form', $account) && $is_author) ||
          user_access('delete any donation form', $account)) ? TRUE : NULL;
    }
  }
}

// TODO REMOVE THIS WE ARE NOT FOLLOWING THIS PATH IN THE FUTURE.
// NO MORE OF THIS.
// SERIOUSLY.
// Replace with a 'is this a donation type' flag for donation info to attach to a node type.
/**
 * Implements hook_node_info().
 *
function fundraiser_node_info() {
  return array(
    'donation_form' => array(
      'name' => t('Donation Form'),
      'base' => 'fundraiser', // All the functions are in fundraiser_X form.
      'description' => t('Create a flexible form that users can use to donate to noble causes.'),
      'help' => t('Create a flexible form that users can use to donate to noble causes.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'locked' => TRUE,
    ),
  );
}
*/

/**
 * Node API Functions. Handle for each case of node operation.
 */

/**
 * Implements hook_node_delete().
 */
function fundraiser_node_delete($node) {
  if (_fundraiser_is_donation_type($node->type)) {
    _fundraiser_delete_fundraiser($nid);
  }
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_node_insert($node) {
  if (_fundraiser_is_donation_type($node->type)) {
    _fundraiser_create_fundraiser($node);
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (_fundraiser_is_donation_type($node->type)) {
      // Get the fundraiser information.
      // This also loads additional data presented from other modules to FR.
      // AKA fundraiser_webform and fundraiser_profile data.
      $fundraiser = _fundraiser_get_fundraiser($node->nid);
      // Merge data from fundraiser with node.
      $fundraiser = (array) $fundraiser;
      foreach ($fundraiser as $key => $value) {
        $nodes[$node->nid]->$key = $value;
      }
    }
  }
}

// Not used.
// function fundraiser_node_prepare() {}

/**
 * Implements hook_node_presave().
 */
function fundraiser_node_presave($node) {
  if (_fundraiser_is_donation_type($node->type)) {
    // Check the submission to remove the donation amounts marked.
    foreach ($node->donation_amounts as $index => donation_amount) {
      if ($donation_amount['remove'] == 1) {
         unset($node->donation_amounts[$index]);
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_node_update($node) {
  if (_fundraiser_is_donation_type($node->type)) {
    _fundraiser_update_fundraiser($node);
  }
}

/**
 * Implements hook_node_validate().
 */
function fundraiser_node_validate($node, $form, &$form_state) {
  if (_fundraiser_is_donation_type($node->type)) {
    $donation_amounts = array();
    // If each given amount if numeric, we're ok.
    foreach ($node->donation_amounts as $index => $donation_amount) {
      if (isset($donation_amount[1])) {
        if (!is_numeric($donation_amount[1])) {
          form_set_error('donation_amounts', t('Ask amounts must be numeric, you entered "@s".', array("@s" => $donation_amount[1])));
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function fundraiser_node_view($node, $view_mode, $langcode) {
  if (_fundraiser_is_donation_type($node->type)) {
    // Track the pageview.
    if ($view_mode == 'full') {
      _fundraiser_update_tracking_value($node->nid, 'pageviews');
    }
    // Check to see if the form is being accessed over HTTPS.
    if ($view_mode == 'full' && (!fundraiser_is_secure() && !variable_get('fundraiser_development_mode', 0))) {
      // Return a 404 if the page isn't secure and should be.
      watchdog('fundraiser', 'The donation form <em>!title</em> is not protected with SSL.',
        array('!title' => $node->title), WATCHDOG_CRITICAL, l('View the donation form', 'node/' . $node->nid));
      drupal_not_found();
      exit();
    }
    // Set a reminder to turn off development mode on the page view.
    if (variable_get('fundraiser_development_mode', 0) && $view_mode == 'full') {
      drupal_set_message(t('Fundraiser is currently running in development mode. Remember to ' .
        '!link this feature on production websites.',
        array('!link' => l('turn off', 'admin/config/system/fundraiser'))));
    }
  }
}

/**
 * Form function. This form collects the information to create donation forms per donation node types.
 *
 * This is added to the node display via form_alter when editting nodes of the correct type.
 *
 * It ultimately populates the fundraiser table from which donation forms are created :
 * nid, gateway, receipt_email_from, receipt_email_address, receipt_email_subject, receipt_email_message,
 * donation_amounts, show_other_amount, minimum_donation_amount, internal_name, confirmation_page_title,
 * confirmation_page_body, confirmation_page_format, redirect_url
 */
function _fundraiser_donation_form(&$form, &$form_state, $node) {
  // Fundraiser values are loaded by hook_node_load() on the node type.
  // So we can safely assume any associated fundraiser information is already available.

  // Check if this is being called on an enabled node type.
  if (!_fundraiser_is_donation_type($node->type)) {
    return $form;
  }
  
  // Add additional js and css for this form.
  drupal_add_css(drupal_get_path('module', 'fundraiser') . '/css/fundraiser.css');
  drupal_add_js(drupal_get_path('module', 'fundraiser') . '/js/fundraiser_form.js');

  // Now create form elements for everything we need to set.
  $form['internal_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Internal name'),
    '#required' => TRUE,
    '#default_value' => isset($node->internal_name) ? $node->internal_name : '',
    '#weight' => -4.99,
    '#maxlength' => 255,
  );
  $form['fundraiser_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fundraiser settings'),
    '#weight' => -4.96,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $gateway_options = array();
  $gateways = _fundraiser_get_gateway_info();
  foreach ($gateways as $gateway) {
    $gateway_options[$gateway['id']] = $gateway['title'];
  }
  if (empty($gateway_options)) {
    $gateway_options[-1] = t('No gateways are available. Please configure one.');
  }
  $form['fundraiser_settings']['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Payment Gateway'),
    '#options' => $gateway_options,
    '#weight' => -5,
    '#description' => t('The payment gateway that will be used to process payments for this donation form.'),
    '#default_value' =>  isset($node->gateway) ? $node->gateway : '',
    '#required' => TRUE,
  );
  $form['fundraiser_settings']['amount_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ask amounts'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div class="clear-block" id="ask-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE, // This is important, this allows the deltas below to function.
  );
  $form['fundraiser_settings']['amount_wrapper']['amounts'] = array(
    '#prefix' => '<div id="ask-amounts">',
    '#suffix' => '</div>',
    '#theme' => 'fundraiser_ask_amounts',
  );
  // AJAXy bits.
  // Donation amounts were loaded on node_load, and exploded at that time.
  // If they exist, they're on the node.
  // If they don't exist, look in form_state.
  $existing_donation_amounts = $node->donation_amounts; // An array of paired array values.
  if (count($existing_donation_amounts) == 0) {
    $existing_donation_amounts = array(
      array(10, '$10'), 
      array(20, '$20'),
      array(50, '$50'), 
      array(100, '$100'),
    );
  }
  // Generate a form set for each existing amount. (To be themed into table format.)
  foreach ($existing_donation_amounts as $existing_donation_amount) {
    $form['fundraiser_settings']['amount_wrapper']['donation_amounts'][] = _fundraiser_ask_form($existing_donation_amount);
  }
  $form['fundraiser_settings']['amount_wrapper']['help'] = array(
    '#value' => '<p>' . t('If you want the user to choose from a predetermined list donation amounts, enter them here. '.
      'If no amounts are entered, a textbox will be displayed for the user to enter a custom amount.') . '</p>',
  );
  $form['fundraiser_settings']['amount_wrapper']['amount_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add another'),
    '#description' => t('Click here to add more choices.'),
    '#submit' => array('_fundraiser_form_amount_no_js_submit'), // If no javascript action.
    '#ajax' => array(
      'callback' => '_fundraiser_form_amount_ajax_submit',
      'wrapper' => 'ask-amounts',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['fundraiser_settings']['amount_wrapper']['amount_less'] = array(
    '#type' => 'submit',
    '#value' => t('Remove marked'),
    '#description' => t('Click here to remove marked choices.'),
    '#submit' => array('_fundraiser_form_amount_no_js_submit'), // If no javascript action.
    '#ajax' => array(
      'callback' => '_fundraiser_form_amount_ajax_submit',
      'wrapper' => 'ask-amounts',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['fundraiser_settings']['amount_wrapper']['show_other_amount'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show other amount option'),
    '#description' => t('Use this option if you want to provide an "Other Amount" field in conjunction with the list ' .
      'of Donation Amounts.'),
    '#default_value' => isset($node->show_other_amount) ? $node->show_other_amount : '',
  );
  $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum donation amount'),
    '#description' => t('The minimum acceptable donation amount.'),
    '#default_value' => isset($node->minimum_donation_amount) ? number_format($node->minimum_donation_amount, 2) : variable_get('fundraiser_default_minimum', 10.00),
  );
  /* Hidden fields. These are set later or else where. */
  $form['confirmation_page_title'] = array(
    '#type' => 'hidden',
    '#value' =>  isset($node->confirmation_page_title) ? $node->confirmation_page_title : '',
  );
  $form['confirmation_page_body'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->confirmation_page_body) ? $node->confirmation_page_body : '',
  );
  $form['receipt_email_from'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_from) ? $node->receipt_email_from : '',
  );
  $form['receipt_email_address'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_address) ? $node->receipt_email_address : '',
  );
  $form['receipt_email_subject'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_subject) ? $node->receipt_email_subject : '',
  );
  $form['receipt_email_message'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_message) ? $node->receipt_email_message : '',
  );
  $form['redirect_url'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->redirect_url) ? $node->redirect_url : '',
  );
  //$form['#after_build'][] = '_fundraiser_validation_includes';
  return $form;
}

/**
 * Generate donation ask amount fields, used by donation form
 */
function _fundraiser_ask_form($amount_values = array()) {
  $form = array();
  if (count($amount_values) == 2) {
    $form['label'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($amount_values[0]) ? $amount_values[0] : '',
      '#size' => 30,
    );
    $form['amount'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($amount_values[1]) ? $amount_values[1] : '',
      '#size' => 10,
    );
    $form['remove'] = array(
      '#type' => 'checkbox',
      '#return_value' => 1,
      '#default_value' => 0,
      '#weight' => 2,
    );
  }
  return $form;
}

/**
 * Form helper function, required to get stylesheets and scripts added to the donation form after a validation error.
 * see: http://drupal.org/node/645880
 */
//function _fundraiser_validation_includes($element, $form_state) {
//  drupal_add_css(drupal_get_path('module', 'fundraiser') . '/css/fundraiser.css');
//  drupal_add_js(drupal_get_path('module', 'fundraiser') . '/js/fundraiser_form.js');
//  return $element;
//}

/**
 * Callback handler for the donation ask amount form #ajax.
 */
function _fundraiser_form_amount_ajax_submit($form, $form_state) {
  $amount_form = $form['fundraiser_settings']['amount_wrapper']['amounts'];
  // Unset the prefix / suffix to avoid duplication of divs.
  unset($amount_form['#prefix'], $amount_form['#suffix']);
  return $amount_form;
}

/**
 * Submit handler for ask amount more button if no JS in place.
 */
function _fundraiser_form_amount_no_js_submit($form, &$form_state) {
  unset($form_state['submit_handlers']);
  // TODO correct for delta use here.
  $delta = $form_state['values']['amount_delta'];
  for ($i = 0; $i < $form_state['values']['amount_delta']; ++$i) {
    if (!$form_state['values']['amount_' . $i]) {
      --$delta;
    }
  }
  ++$form_state['values']['amount_delta'];
  form_execute_handlers('submit', $form, $form_state);
  $values = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Form modification functions.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node type forms.
 */
function fundraiser_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (_fundraiser_is_donation_type($form['#node']->type)) {
    $node = node_load($form['#node']->nid);
    _fundraiser_donation_form($form, $form_state, $node);
    
    // TODO provide hook for other modules to add input here.
    // Aka fundraiser_webform, etc.
  }
}

/**
 * Implements hook_form_alter().
 * Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id is a subset, as: webform_client_form_NID.
 */
function fundraiser_form_alter(&$form, $form_state, $form_id) {
  // Now that we have the donation form information saved, we must generate the information for each related node display.
  // PROBLEM:
  // Fundraiser does not have an internal form generation system. It uses webform (at the moment).
  // So this is actually going to be called via hooks? Or on display a la webform?
  // Need to think abotu this.
  // Webform provides a form to be hooked into.
  // Either way, we need to pick back up *after* donation submission by an end user in order to catch up on donation ops.
}
 
/**
 * Helper functions.
 */

/**
 * Helper function, returns list containing a list of defined states for donation information.
 * Currently called in fundraiser_webform.
 */
function fundraiser_options_states() {
  return array(); //TODO make a hook
}

/**
 * Helper function, returns list containing a list of defined countries for donation information.
 * Currently called in fundraiser_webform.
 */
function fundraiser_options_countries() {
  return array(); //TODO make a hook
}

/**
 * Helper function, get gateway information by calling all hook_fundraiser_gateway_info.
 */
function _fundraiser_get_gateway_info() {
  $gateways = module_invoke_all('fundraiser_gateway_info');
  drupal_alter('fundraiser_gateway_info', $gateways);
  return (array) $gateways;
}

/** 
 * Helper function, determine if this node type supports donation forms.
 */
function _fundraiser_is_donation_type($type) {
  // TODO move this to a setting check, not a specific node type.
  return ($type == 'donation_form');
}

/**
 * Helper function. Check if the current page is SSL protected.
 */
function fundraiser_is_secure() {
  return (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? TRUE : FALSE;
}

/**
 * DB functions.
 */

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_create_fundraiser($fundraiser) {
  $fundraiser = (object) $fundraiser;

  // Implode donation amounds for saving.
  $imploded_amounts = array();
  foreach ($fundraiser->donation_amounts as $donation_amount) {
     $imploded_amounts[] = implode('|', $donation_amount);
  }
  $fundraiser->donation_amounts = implode(',', $imploded_amounts);
  // On getting fundraiser this will be exploded into the correct values.

  // After the node is created, add additional data to fundraiser.
  $record = array(
    'nid' => $fundraiser->nid, 
    'gateway' => $fundraiser->gateway, 
    'donation_amounts' => $fundraiser->donation_amounts, 
    'show_other_amount' => $fundraiser->show_other_amount, 
    'internal_name' => $fundraiser->internal_name, 
    'minimum_donation_amount' => $fundraiser->minimum_donation_amount, 
    'receipt_email_from' => variable_get('site_name', ''), 
    'receipt_email_address' => variable_get('site_mail', ''), 
    'receipt_email_subject' => t('Thank you for your donation'), 
    'redirect_url' => '<confirmation>',
  );
  drupal_write_record('fundraiser', $record);
}

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_get_fundraiser($nid) {
  // Get fundraiser table information.
  $results = db_query('SELECT * FROM {fundraiser} WHERE nid = :nid', array(':nid' => $nid));
  $fundraiser = $results->fetchObject(); // Return an object.

  // Explode the donation amounts that were imploded during save.
  $donation_amounts = explode(',', $fundraiser->donation_amounts);
  $exploded_amounts = array();
  foreach ($donation_amounts as $donation_amount) {
    $exploded_amounts[] = explode('|', $donation_amount);
  }
  $fundraiser->donation_amounts = $exploded_amounts;

  // Get values from other modules, allow them to be overridden.
  module_invoke_all('fundraiser_get_fundraiser_alter');

  // Get the user profile map. // TODO move this into a hook.
  //$results = _fundraiser_get_fields_from_table('fundraiser_component_map', array('nid' => $node->nid), array('cid', 'map_id') );
  //foreach($results as $result) {
  //  $map[$result->cid] = $result->map_id;
  //}

  // Get the webform data. // TODO move this also into a hook.
  // Protection vs node_save() for donation amounts.
  // From fundraiser.fields.inc. get the extra data.
  //$extra = _fundraiser_get_webform_extra_by_key($node->nid, 'amount');
  //$items = preg_split('/\s/', $extra['items']);
  //$count = 0;
  //for ($i = 0; $i < count($items); ++$i) {
  //  $item = explode('|', $items[$i]);
  //  if ($item[0] != 'other') {
  //    $amount = 'amount_' . $i;
  //    $label = 'label_' . $i;
  //    $fundraiser->$amount = $item[0];
  //    $fundraiser->$label = $item[1];
  //    ++$count;
  //  }
  //}
  //$fundraiser->amount_delta = $count;
  //$fundraiser->map = $map;
  // Add the amount_values for the fundraiser information on load.
  //$amount_values = array();
  //if (is_numeric($node->nid)) {
  //  $amount_values = _fundraiser_get_webform_extra_by_key($node->nid, 'amount');
  //  $amount_values = preg_split('/\n/', trim($amount_values['items']));
  //  // This includes 'Other' as an option which is dropped on the display end.
  //}
}

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_get_fundraisers($nids) {
  // Get fundraiser table information.
  $fundraisers = array();
  foreach ($nids as $nid) {
    $fundraisers[] = _fundraiser_get_fundraiser($nid);
  }
  return $fundraisers;
}

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_update_fundraiser($fundraiser) {
  $fundraiser = (object) $fundraiser;

  // Implode donation amounds for saving.
  $imploded_amounts = array();
  foreach ($fundraiser->donation_amounts as $donation_amount) {
     $imploded_amounts[] = implode('|', $donation_amount);
  }
  $fundraiser->donation_amounts = implode(',', $imploded_amounts);
  // On getting fundraiser this will be exploded into the correct values.
  
  $record = array(
    'nid' => $fundraiser->nid,
    'internal_name' => $fundraiser->internal_name, 
    'show_other_amount' => $fundraiser->show_other_amount, 
    'minimum_donation_amount' => $fundraiser->minimum_donation_amount, 
    'gateway' => $fundraiser->gateway, 
    'receipt_email_from' => $fundraiser->receipt_email_from, 
    'receipt_email_address' => $fundraiser->receipt_email_address, 
    'receipt_email_subject' => $fundraiser->receipt_email_subject, 
    'receipt_email_message' => $fundraiser->receipt_email_message, 
    'confirmation_page_title' => $fundraiser->confirmation_page_title, 
    'confirmation_page_body' => $fundraiser->confirmation_page_body, 
    'confirmation_page_format' => $fundraiser->confirmation_page_format, 
    'redirect_url' => $fundraiser->redirect_url, 
  );
  drupal_write_record('fundraiser', $record, 'nid');

// And invoke the hooks for all the other webform etc. thingies to grab hold of.
  // From fundraiser.fields.inc. update the webform component amounts.
  $donation_amounts = array();
  for ($i = 0; $i < $node->amount_delta; ++$i) {
    $amount = 'amount_' . $i;
    $label = 'label_' . $i;
    if ($node->$amount) {
      $donation_amounts[$node->$amount] = $node->$label;
    }
  }
  ksort($donation_amounts, SORT_NUMERIC);
  $keys = array_keys($donation_amounts);
  _fundraiser_update_amount_webform_component($node, $donation_amounts, $keys[0]);

  // Update the label on the minimum donation amount.
  if ($node->show_other_amount) {
    $extra = _fundraiser_get_webform_extra_by_key($node->nid, 'other_amount');
    $extra['description'] = 'Minimum payment $' . $node->minimum_donation_amount . '.';
    _fundraiser_set_webform_extra_by_key($node->nid, 'other_amount', $extra);
  }
}

/*
  if (!$node->is_being_cloned) {
    // From fundraiser.fields.inc. update the webform component amounts.
    $donation_amounts = array();
    // Add webform components.
    for ($i = 0; $i < $node->amount_delta; ++$i) {
      $value = 'amount_' . $i;
      $label = 'label_' . $i;
      if ($node->$value) {
        $donation_amounts[$node->$value] = $node->$label;
      }
      ksort($donation_amounts, SORT_NUMERIC);
    }
    $components = fundraiser_create_webform_components($node->nid, $donation_amounts, $node->show_other_amount, $node->minimum_donation_amount);

    // Create the user profile map.
    fundraiser_create_user_map($node->nid, $components);

    // Fire a hook that other modules can use to add additional processing when a donation form is created.
    // Called in: fundraiser_multi_currency.module, sf_donation.module
    // This can, and should, be replaced with hook_node_insert() implementations.
    // THIS HOOK IS TO BE DEPR.
    // module_invoke_all('fundraiser_form_insert', $node, $components);
  }
//*/

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_delete_fundraiser($nid) {
  db_delete('fundraiser')->condition('nid', $node->nid)->execute();
}

/**
 * CRUD style DB function for fundraiser.
 */
function _fundraiser_delete_fundraisers($nids) {
  foreach ($nids as $nid) {
    _fundraiser_delete_fundraiser($nid);
  }
}

/**
 * CRUD style DB function for fundraiser_tracking.
 */
function _fundraiser_get_tracking($nid) {
  // Get fundraiser tracking table information.
  $results = db_query('SELECT * FROM {fundraiser_tracking} WHERE nid = :nid', array(':nid' => $nid));
  return $results->fetchObject(); // Return an object.
}

/**
 * DB function for updating the stats in fundraiser_tracking.
 */
function _fundraiser_update_tracking_value($nid, $field) {
  $tracking = _fundraiser_get_tracking($nid);
  if (!$tracking) {
    // Insert.
    $tracking = array('nid' => $nid, 'pageviews' => 1, 'conversions' => 0,'local_failures' => 0, 'gateway_failures' => 0, 'latest_load_time' => 0);
    $tracking[$field] = 1;
    drupal_write_record('fundraiser_tracking', $tracking);
  }
  else {
    // Update.
    $tracking = array('nid' => $nid, $field => $tracking->$field + 1);
    drupal_write_record('fundraiser_tracking', $tracking, 'nid');
  }
}