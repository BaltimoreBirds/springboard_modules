<?php

define('FUNDRAISER_SINGLE_DONATION_TYPE', 'donation');
define('FUNDRAISER_RECURRING_DONATION_TYPE', 'recurring_donation');
define('FUNDRAISER_DONATION_REFUND_TYPE', 'refund');
define('RECURRING_DONATION_STATUS', 'pending_future_payment');
define('DONATION_NON_RECURRING', 0);
define('DONATION_RECURRING', 1);
define('DONATION_CANCELLED', 2);

// Include webform field related functions.
require_once('fundraiser.fields.inc'); 
// Include theme related functions.
require_once('fundraiser.theme.inc'); 
// Include ubercart based implementations of fundraiser hooks.
require_once('fundraiser.ubercart.inc'); 

/**
 * Implements hook_cron().
 */
function fundraiser_cron() {
  // If cron.php is being run while standalone cron is enabled, do nothing.
  // This allows this code to still execute if cron is run from status page.
  if (variable_get('fundraiser_standalone_cron_enabled', 0)) {
    if (preg_match('/cron.php$/', $_SERVER['REQUEST_URI'])) {
      return 0;
    }
    else {
      watchdog('fundraiser_cron', 'Standalone cron run.');
    }
  }
  else {
    watchdog('fundraiser_cron', 'Standard cron run.');
  }
  // Load all cron related functions.
  module_load_include('inc', 'fundraiser', 'fundraiser.cron');
  // Process recurring donations.
  if (fundraiser_processor_key_match()) {
    fundraiser_process_recurring_donations();
  }
  else {
    $message = t('The fundraiser sustainer key has not been configured correctly. Recurring donations will not be processed.');
    drupal_set_message(check_plain($message), 'warning');
    watchdog('fundraiser', $message, NULL, WATCHDOG_CRITICAL);
  }
}

/**
 * Implements hook_permission().
 */
function fundraiser_permission() {
  return array(
    'administer fundraiser' => array(
      'title' => t('Administer fundraiser'), 
      'description' => t('Perform administration tasks for fundraiser.'),
    ),
    'create donation form' => array(
      'title' => t('Create donation form'), 
      'description' => t('Create donation forms.'),
    ),
    'edit own donation form' => array(
      'title' => t('Edit own donation form'), 
      'description' => t('Edit own donation forms.'), 
    ),
    'edit any donation form' => array(
      'title' => t('Edit any donation form'), 
      'description' => t('Edit any donation forms.'), 
    ),
    'delete own donation form' => array(
      'title' => t('Delete own donation form'), 
      'description' => t('Delete own donation forms.'), 
    ),
    'delete any donation form' => array(
      'title' => t('Delete any donation form'), 
      'description' => t('Delete any donation forms.'), 
    ),
    'clone donation form' => array(
      'title' => t('Clone donation form'), 
      'description' => t('Clone donation forms.'), 
    ),
    'cancel future donations' => array(
      'title' => t('Cancel future donations'), 
      'description' => t('Cancel future donations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fundraiser_menu() {
// TODO make sure there are MENU_LOCAL_TASKs for each of the admin screens
  $items['admin/config/system/fundraiser'] = array(
    'title' => 'Fundraiser settings',
    'description' => t('Configurations for the Fundraiser system.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array("administer fundraiser"),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fundraiser.admin.inc',
  );

  $items['admin/store/reports/fundraiser'] = array(
    'title' => 'Donation report',
    'description' => t('Donation reports for campaigns.'),
    'page callback' => 'fundraiser_monthly_report',
    'access arguments' => array('view store reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fundraiser.admin.inc',
  );

  $items['node/%webform_menu/webform/mapping'] = array(
    'title' => 'User map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_mapping_form', 1),
    'access callback' => 'fundraiser_mapping_form_access',
    'access arguments' => array(1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%webform_menu/webform/confirmations'] = array(
    'title' => 'Confirmations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_confirmation_settings_form', 1),
    'access callback' => 'fundraiser_confirmations_perm',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['fundraiser_changestate/js'] = array(
    'page callback' => 'fundraiser_changestate',
    'type' => MENU_CALLBACK,
    'access arguments' => array("access content"),
  );

  // Add the cron handler if it's enabled.
  if (variable_get('fundraiser_standalone_cron_enabled', 0)) {
    $items['fundraiser_cron'] = array(
      'page callback' => 'fundraiser_cron',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  $items['admin/fundraiser/recurring'] = array(
    'title' => 'Current Fundraiser Recurring Payments',
    'page callback' => 'fundraiser_recurring_admin',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 2,
    'type' => MENU_CALLBACK,
  );
  // Unable to find the function associated with this menu path. Check if still in use. - TODO
  $items['admin/fundraiser/recurring/test'] = array(
    'title' => 'Fundraiser Recurring Payment Tester',
    'page callback' => 'fundraiser_recurring_test',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 2,
    'type' => MENU_CALLBACK,
  );

  $items['admin/store/orders/%uc_order/recurring/edit'] = array(
    'title' => 'Edit Recurring Donations',
    'page callback' => 'fundraiser_recurring_edit_forms',
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'fundraiser.admin.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/store/orders/%uc_order/refund'] = array(
    'title' => 'Refund',
    'page callback' => 'fundraiser_show_refund_form',
    'page arguments' => array(3),
    'access arguments' => array('edit orders'),
    'file' => 'fundraiser.billing.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/recurring_overview'] = array(
    'title' => 'My Recurring Payments',
    'page callback' => 'fundraiser_recurring_user_overview',
    'access callback' => 'fundraiser_user_has_recurring_orders',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'file' => 'fundraiser.sustainer.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/recurring_overview/%'] = array(
    'title' => 'My Recurring Payments',
    'page callback' => 'fundraiser_recurring_user_edit_forms',
    'access callback' => 'fundraiser_user_has_recurring_orders',
    'access arguments' => array(1),
    'page arguments' => array(1, 3),
    'file' => 'fundraiser.sustainer.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/orders/%uc_order/recurring/overview'] = array(
    'title' => 'Recurring Info',
    'page callback' => 'fundraiser_recurring_master_order_overview',
    'access arguments' => array('view all orders'),
    'access callback' => 'fundraiser_recurring_check_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'fundraiser.admin.inc',
  );

  $items['admin/content/donation-forms'] = array(
    'title' => 'Donation Forms',
    'page callback' => 'fundraiser_donation_form_list',
    'access arguments' => array('create donation form'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 20,
    'file' => 'fundraiser.admin.inc',
  );

  $items['admin/content/clone-form/%'] = array(
    'title' => 'Clone donation form',
    'page callback' => 'fundraiser_clone_donation_form',
    'page arguments' => array(3),
    'access arguments' => array('create donation forms'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%webform_menu/confirmation'] = array(
    'title' => 'Webform submission',
    'load arguments' => array(1),
    'page callback' => 'fundraiser_donation_confirmation',
    'page arguments' => array(1),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/clone_form'] = array(
    'title' => 'Clone',
    'description' => 'Create a new donation form that inherits settings from this form.',
    'access callback' => 'fundraiser_access_clone',
    'page callback' => 'fundraiser_clone_donation_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_menu_alter(&$items) {
  // Workaround for bug where only uid 1 can see custom triggers.
  // TODO: Has this been patched yet? Is there an issue in the queue for Triggers? - AF 5/3/2011
  // User access is handled by: 'access arguments' => array('administer actions') in D7.
  // Is that the same as it was when you looked in May? - SeH 1/10/12
  if (module_exists('trigger')) {
    $items['admin/build/trigger/fundraiser']['access callback'] = TRUE;
  }
  // Alter some built-in webform menu items.
  $items['node/%webform_menu/webform/configure']['access callback'] = 'fundraiser_webform_configure_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array('update', 1);
}

/**
 * Menu access callback, determines if the "clone" link should be displayed on a donation form.
 */
function fundraiser_access_clone() {
  global $user;
  $access = FALSE;
  $nid = arg(1);
  if (is_numeric($nid)) {
    $node = node_load($nid);
    if (!strcmp($node->type, 'donation_form')) {
      if (user_access('clone donation form')) {
        $access = TRUE;
      }
      // Alterable so modules like Advanced Permissions can tweak as needed.
      // Alter function: hook_fundraiser_access_clone_alter(), isn't that a peach?
      // Pointless to call the alter function if the current node isn't a donation form.
      drupal_alter('fundraiser_access_clone', $access, $node);
    }
  }
  return $access;
}

/**
 * Menu access callback, returns TRUE if current node is a donation form.
 */
function fundraiser_mapping_form_access($node) {
  return $node->type == 'donation_form';
}

/**
 * Fundraiser confirmation page.
 */
function fundraiser_donation_confirmation($node) {
  drupal_set_title(check_plain($node->confirmation_page_title));
  if (empty($output)) {
    // TODO come back to this, will need to be rethemed.
    $output = theme(array('fundraiser_confirmation_' . $node->nid, 'fundraiser_confirmation'), $node, $_GET['sid']);
  }
  return $output;
}

/**
 * Menu access callback.
 */
function fundraiser_recurring_check_access() {
// TODO come back to this.
  $count = db_query('SELECT COUNT(order_id) FROM {fundraiser_recurring} '.
    'WHERE master_order_id = :master_order_id OR order_id = :order_id',
    array(':master_order_id' => arg(3), ':order_id' => arg(3)))->fetchColumn();
  $bool = FALSE;
  if ($count > 0) {
    $bool = TRUE;
  }
  return $bool;
}

/**
 * Menu access. Permission check for webform form settings tab.
 */
function fundraiser_webform_configure_access($perm, $node) {
  // Don't show the 'Form settings' tab on donation forms.
  if ($node->type == 'donation_form') {
    return FALSE;
  }
  else {
    return node_access($perm, $node);
  }
}

/**
 * Menu access callback.
 */
function fundraiser_confirmations_perm($perm, $node) {
  if (($node->type == 'donation_form') && node_access($perm, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**      
 * Implementation of hook_token_list().
 */
function fundraiser_token_list($type = 'all') {
  if ($type == 'order' || $type == 'all') {
    $tokens['order']['order-cc-last-four']  = t('The last four digits of the credit card used for the order.');
    $tokens['order']['order-cc-card-exp-month'] = t('The credit card expiration month.');
    $tokens['order']['order-cc-card-exp-year'] = t('The credit card expiration year.');
    $tokens['order']['order-cc-card-type'] = t('The credit card type used for the order.');
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function fundraiser_token_values($type, $object = NULL) {
  $values = array();
  switch ($type) {
    case 'order':
      $values['order-cc-last-four'] = substr($object->payment_details['cc_number'], -4); // support cc debug mode
      $values['order-cc-card-exp-month'] = $object->payment_details['cc_exp_month'];
      $values['order-cc-card-exp-year'] = $object->payment_details['cc_exp_year'];
      $values['order-cc-card-type'] = ucfirst($object->payment_details['cc_type']);
      break;
  }
  return $values;
}

/**
 * Implemenation of hook_mail().
 */
function fundraiser_mail($key, &$message, &$params) {
  switch ($key) {
    case 'fundraiser_cc_notification':
      $body = variable_get('fundraiser_cc_exp_body', 'Your card ending in [cc_last_4] is about to expire on [exp_month]/[exp_year].');
      // do some token replacements
      $tokens = array('[exp_month]', '[exp_year]', '[cc_type]', '[cc_last_4]', '[amount]');
      $replaces = array($params['exp_month'], $params['exp_year'], $params['cc_type'], $params['cc_last_4'], $params['amount']);
      $body = str_replace($tokens, $replaces, $body);
      // replace any user tokens via the token module
      $body = token_replace($body, 'user', $params['user']);

      $message['subject'] = variable_get('fundraiser_cc_exp_subject', 'Your credit card is about to expire');
      $message['body'] = $body;
      break;
  }
}

/**
 * Implemenation of hook_mail_alter().
 *
 * Change the from address and subject for donation receipt emails.
 */
function fundraiser_mail_alter(&$message) {
  $parts = explode("/", $_GET['q']);
  $nid = $parts[1];
  $node = node_load($nid);

  if ($message['id'] == 'uc_order_action-mail') {
    $message['headers']['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
    $bcc = variable_get('fundraiser_receipt_bcc', '');
    if (!empty($bcc)) {
      $message['headers']['Bcc'] = $bcc;
    }

    $message['from'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
    $message['subject'] = $node->receipt_email_subject;
  }
}

/**
 * Implements hook_clone_access_alter() from Node clone.
 */
function fundraiser_clone_access_alter(&$access, $node) {
  // Removing cloning access since fundraiser implements it's own cloning routine.
  if ($node->type == 'donation_form') {
    $access = 0;
  }
}

/**
 * Fundraiser node functions.
 */

/**
 * Implementation of hook_access().
 */
function fundraiser_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      return user_access('create donation form', $account) ? TRUE : NULL;
    case 'update':
      return ((user_access('edit own donation form', $account) && $is_author) || user_access('edit any donation form', $account)) ? TRUE : NULL;
    case 'delete':
      return ((user_access('delete own donation form', $account) && $is_author) || user_access('delete any donation form', $account)) ? TRUE : NULL;
  }
}

/**
 * Implements hook_node_info().
 */
function fundraiser_node_info() {
  return array(
    'donation_form' => array(
      'name' => t('Donation Form'),
      'base' => 'fundraiser', // All the functions are in fundraiser_X form.
      'description' => t('Create a flexible form that users can use to donate to noble causes.'),
      'help' => t('Create a flexible form that users can use to donate to noble causes.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 */
function fundraiser_form($node, &$form_state) {

  // Add additional js and css for this form.
  $base = drupal_get_path('module', 'fundraiser');
  drupal_add_css($base . '/css/fundraiser.css');
  drupal_add_js($base . '/js/fundraiser_form.js');

  // Get the type.
  $type = node_type_get_type($node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#maxlength' => 255,
  );

  $form['internal_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Internal Name'),
    '#required' => TRUE,
    '#default_value' => isset($node->internal_name) ? $node->internal_name : '',
    '#weight' => -4.99,
    '#maxlength' => 255,
  );
  /* The body field is set up by Field API in D7, and does not need to be configured here. */

  $form['fundraiser_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fundraiser settings'),
    '#weight' => -4.96,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['fundraiser_settings']['amount_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ask amounts'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div class="clear-block" id="ask-wrapper">',
    '#suffix' => '</div>',
  );

  $form['fundraiser_settings']['amount_wrapper']['amounts'] = array(
    '#prefix' => '<div id="ask-amounts">',
    '#suffix' => '</div>',
    '#theme' => 'fundraiser_ask_amounts',
  );

  // Retrieve saved values if available from where they were saved in webform.
  $amount_values = array();
  if (is_numeric($node->nid)) {
    $amount_values = _fundraiser_get_webform_extra_by_key($node->nid, 'amount');
    $amount_values = preg_split('/\n/', trim($amount_values['items']));
  }

  // By default we add three new fields.
  $delta = 3;
  if (isset($form_state['values']['amount_delta'])) {
    // If we're editing an existing donation form that's had new fields added we use the current 
    // delta (updated by the more button) to tell the form how many field sets to build.
    $delta = $form_state['values']['amount_delta'];
  }
  elseif (count($amount_values) > 0) {
    // Otherwise we start by generating enough fields to house the data currently in the database.
    $delta = count($amount_values);
  }

  $form['fundraiser_settings']['amount_wrapper']['amounts']['amount_delta'] = array(
    '#type' => 'value',
    '#value' => $delta,
  );

  for ($i = 0; $i < $delta; ++$i ) {
// TODO this  cause: Warning: array_merge() [function.array-merge]: 
// Argument #1 is not an array in _form_set_class()
    $form['fundraiser_settings']['amount_wrapper']['amounts'][] = _fundraiser_ask_form($i, $form_state, $amount_values);
  }

  $form['fundraiser_settings']['amount_wrapper']['help'] = array(
    '#value' => '<p>' . t('If you want the user to choose from a predetermined list donation amounts, enter them here. '.
      'If no amounts are entered, a textbox will be displayed for the user to enter a custom amount.') . '</p>',
  );

  $form['fundraiser_settings']['amount_wrapper']['amount_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add another'),
    '#description' => t('Click here to add more choices.'),
    '#submit' => array('_fundraiser_form_amount_no_js_submit'), // If no javascript action.
    '#ajax' => array(
      'callback' => '_fundraiser_form_amount_ajax_submit',
      'wrapper' => 'ask-amounts',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['fundraiser_settings']['amount_wrapper']['show_other_amount'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show other amount option'),
    '#description' => t('Use this option if you want to provide an "Other Amount" field in conjunction with the list of Donation Amounts.'),
    '#default_value' => isset($node->show_other_amount) ? $node->show_other_amount : '',
  );

  $form['fundraiser_settings']['amount_wrapper']['minimum_donation_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum donation amount'),
    '#description' => t('The minimum acceptable donation amount.'),
    '#default_value' => isset($node->minimum_donation_amount) ? number_format($node->minimum_donation_amount, 2) : variable_get('fundraiser_default_minimum', 10.00),
  );

  // Get payment gateway list, create options set.
  // Returns an array of gateway information.
  $gateways = _fundraiser_get_gateway_info();
  $gateway_options = array();
  foreach ($gateways as $gateway) {
    $gateway_options[$gateway['id']] = $gateway['title'];
  }
  $form['fundraiser_settings']['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Payment Gateway'),
    '#options' => $gateway_options,
    '#weight' => -5,
    '#description' => t('The payment gateway that will be used to process payments for this donation form.'),
    '#default_value' =>  isset($node->gateway) ? $node->gateway : '',
    '#required' => TRUE,
  );

  /* Hidden fields. */
  $form['confirmation_page_title'] = array(
    '#type' => 'hidden',
    '#value' =>  isset($node->confirmation_page_title) ? $node->confirmation_page_title : '',
  );
  $form['confirmation_page_body'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->confirmation_page_body) ? $node->confirmation_page_body : '',
  );
  $form['receipt_email_from'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_from) ? $node->receipt_email_from : '',
  );
  $form['receipt_email_address'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_address) ? $node->receipt_email_address : '',
  );
  $form['receipt_email_subject'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_subject) ? $node->receipt_email_subject : '',
  );
  $form['receipt_email_message'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->receipt_email_message) ? $node->receipt_email_message : '',
  );
  $form['redirect_url'] = array(
    '#type' => 'hidden',
    '#value' => isset($node->redirect_url) ? $node->redirect_url : '',
  );
  $form['#after_build'][] = '_fundraiser_validation_includes';
  return $form;
}

/**
 * Generate donation ask amount fields, used by donation form
 */
function _fundraiser_ask_form($delta, $form_state, $amount_values = array()) {
  // Workaround for bogus blank fields being added if user first deletes a set or sets before adding a set.
  if(isset($form_state['values'])) {
    if (!isset($form_state['post']['amount_' . $delta]) && $delta < $form_state['values']['amount_delta'] - 1) {
      return array();
    }
  }

  $form = array();
  $fields = array(
    'amount_' => array(
      'label' => 'Ask amount',
      'size' => 10,
      'class' => 'amount_field',
    ),
    'label_' => array(
      'label' => 'Label',
      'size' => 30,
      'class' => 'label_field',
    ),
  );
  $weight = 0;

  foreach ($fields as $key => $value) {
    $form[$key . $delta] = array(
      '#type' => 'textfield',
      '#title' => t($value['label']),
      '#size' => $value['size'],
      '#weight' => $weight,
      '#attributes' => array('class' => $value['class']),
    );

    // Post values take precedence as they're fresh from the form.
    // We defer to values retrieved from the DB only during initial form generation.
    if (!isset($form_state['post']) && count($amount_values)) {
      $values = explode('|', $amount_values[$delta]);
      $form[$key . $delta]['#default_value'] = $values[$weight];
      if ($values[0] == 'other') {
        return FALSE;
      }
    }
    else {
      $form[$key . $delta]['#default_value'] = $form_state['post'][$key . $delta];
    }
    ++$weight;
  }

  $form['remove_' . $delta] = array(
    '#type' => 'button',
    '#value' => t('remove'),
    '#weight' => 2,
    '#suffix' => '<div class="clear-block"></div>',
  );
  return $form;
}

/**
 * Form helper function, required to get stylesheets and scripts added to the donation form after a validation error.
 * see: http://drupal.org/node/645880
 */
function _fundraiser_validation_includes($element, $form_state) {
  $base = drupal_get_path('module', 'fundraiser');
  drupal_add_css($base . '/css/fundraiser.css');
  drupal_add_js($base . '/js/fundraiser_form.js');
  return $element;
}

/**
 * Callback handler for the donation ask amount form #ajax.
 */
function _fundraiser_form_amount_ajax_submit($form, $form_state) {
  $amount_form = $form['fundraiser_settings']['amount_wrapper']['amounts'];
  // Unset the prefix / suffix to avoid duplication of divs. TODO - test that this is needed. -SeH
  unset($amount_form['#prefix'], $amount_form['#suffix']);
  return $amount_form;
}

/**
 * Submit handler for ask amount more button if no JS in place.
 */
function _fundraiser_form_amount_no_js_submit($form, &$form_state) {
  unset($form_state['submit_handlers']);
  $delta = $form_state['values']['amount_delta'];
  for ($i = 0; $i < $form_state['values']['amount_delta']; ++$i) {
    if (!$form_state['values']['amount_' . $i]) {
      --$delta;
    }
  }
  ++$form_state['values']['amount_delta'];
  form_execute_handlers('submit', $form, $form_state);
  $values = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements of hook_validate().
 */
function fundraiser_validate($node, $form, &$form_state) {
  $donation_amounts = array();
  for ($i = 0; $i < $node->amount_delta; ++$i) {
    $value = 'amount_' . $i;
    if ($node->$value) {
      if (is_numeric($node->$value)) {
        $donation_amounts[] = $node->$value;
      }
      else {
        form_set_error($value, t('Ask amounts must be numeric, you entered "@s".', array("@s" => $node->$value)));
        break;
      }
    }
  }
  // From http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_validate/7
  // Note: Changes made to the $node object within your hook implementation will have no effect. 
  // The preferred method to change a node's content is to use hook_node_presave() instead.
}

/**
 * Implements of hook_node_presave().
 */
function fundraiser_node_presave($node) {
  if ($node->type == 'donation_form') {
    $donation_amounts = array();
    for ($i = 0; $i < $node->amount_delta; ++$i) {
      $value = 'amount_' . $i;
      if ($node->$value) {
        $donation_amounts[] = $node->$value;
      }
    }
    // Added to node, will be saved when the node saves on insert or update.
    $node->donation_amounts = implode(',', $donation_amounts);
  }
}

/**
 * Implements hook_insert().
 */
function fundraiser_insert($node) {
  // After the node is created, add additional data to fundraiser.
  $fundraiser = array(
    'nid' => $node->nid, 
    'gateway' => $node->gateway, 
    'donation_amounts' => $node->donation_amounts, 
    'show_other_amount' => $node->show_other_amount, 
    'internal_name' => $node->internal_name, 
    'minimum_donation_amount' => $node->minimum_donation_amount, 
    'receipt_email_from' => variable_get('site_name', ''), 
    'receipt_email_address' => variable_get('site_mail', ''), 
    'receipt_email_subject' => t('Thank you for your donation'), 
    'redirect_url' => '<confirmation>',
  );
  drupal_write_record('fundraiser', $fundraiser);

  if (!$node->is_being_cloned) {
    // From fundraiser.fields.inc. update the webform component amounts.
    $donation_amounts = array();
    // Add webform components.
    for ($i = 0; $i < $node->amount_delta; ++$i) {
      $value = 'amount_' . $i;
      $label = 'label_' . $i;
      if ($node->$value) {
        $donation_amounts[$node->$value] = $node->$label;
      }
      ksort($donation_amounts, SORT_NUMERIC);
    }
    $components = fundraiser_create_webform_components($node->nid, $donation_amounts, $node->show_other_amount, $node->minimum_donation_amount);

    // Create the user profile map.
    fundraiser_create_user_map($node->nid, $components);

    // Fire a hook that other modules can use to add additional processing when a donation form is created.
    // Called in: fundraiser_multi_currency.module, sf_donation.module
    // This can, and should, be replaced with hook_node_insert() implementations.
    // THIS HOOK IS TO BE DEPR.
    // module_invoke_all('fundraiser_form_insert', $node, $components);
  }
}

/**
 * Implemenation of hook_update().
 */
function fundraiser_update($node) {
  $fundraiser = array(
    'nid' => $node->nid,
    'internal_name' => $node->internal_name, 
    'show_other_amount' => $node->show_other_amount, 
    'minimum_donation_amount' => $node->minimum_donation_amount, 
    'gateway' => $node->gateway, 
    'receipt_email_from' => $node->receipt_email_from, 
    'receipt_email_address' => $node->receipt_email_address, 
    'receipt_email_subject' => $node->receipt_email_subject, 
    'receipt_email_message' => $node->receipt_email_message, 
    'confirmation_page_title' => $node->confirmation_page_title, 
    'confirmation_page_body' => $node->confirmation_page_body, 
    'confirmation_page_format' => $node->confirmation_page_format, 
    'redirect_url' => $node->redirect_url, 
  );
  drupal_write_record('fundraiser', $fundraiser, 'nid');

  // From fundraiser.fields.inc. update the webform component amounts.
  $donation_amounts = array();
  for ($i = 0; $i < $node->amount_delta; ++$i) {
    $amount = 'amount_' . $i;
    $label = 'label_' . $i;
    if ($node->$amount) {
      $donation_amounts[$node->$amount] = $node->$label;
    }
  }
  ksort($donation_amounts, SORT_NUMERIC);
  $keys = array_keys($donation_amounts);
  _fundraiser_update_amount_webform_component($node, $donation_amounts, $keys[0]);

  // Update the label on the minimum donation amount.
  if ($node->show_other_amount) {
    $extra = _fundraiser_get_webform_extra_by_key($node->nid, 'other_amount');
    $extra['description'] = 'Minimum payment $' . $node->minimum_donation_amount . '.';
    _fundraiser_set_webform_extra_by_key($node->nid, 'other_amount', $extra);
  }
}

/**
 * Implementation of hook_delete().
 */
function fundraiser_delete($node) {
  db_delete('fundraiser')->condition('nid', $node->nid)->execute();
}

/**
 * Implementation of hook_load().
 */
function fundraiser_load($nodes) {
  foreach ($nodes as $nid => $node) {
    // Get the fundraiser.
    $fundraiser = _fundraiser_get_fields_from_table('fundraiser', array('nid' => $nid));
    // Get the user profile map.
    $results = _fundraiser_get_fields_from_table('fundraiser_component_map', array('nid' => $nid), array('cid', 'map_id') );
    foreach($results as $result) {
      $map[$result->cid] = $result->map_id;
    }

    // Protection vs node_save() for donation amounts.
    // From fundraiser.fields.inc. get the extra data.
    $extra = _fundraiser_get_webform_extra_by_key($nid, 'amount');
  
    $items = preg_split('/\s/', $extra['items']);
    $count = 0;
    for ($i = 0; $i < count($items); ++$i) {
      $item = explode('|', $items[$i]);
      if ($item[0] != 'other') {
        $amount = 'amount_' . $i;
        $label = 'label_' . $i;
        $fundraiser->$amount = $item[0];
        $fundraiser->$label = $item[1];
        ++$count;
      }
    }
    $fundraiser->amount_delta = $count;
    $fundraiser->map = $map;

    // Merge data from fundraiser with node.
    $node = (object) array_merge((array) $node, (array) $fundraiser);
    $nodes[$nid] = $node;
  }
}

/**
 * Implemenation of hook_view().
 */
function fundraiser_view($node, $view_mode) {
  // Track the pageview.
  if ($view_mode == 'full') {
    fundraiser_set_tracking($node->nid, 'pageviews');
  }
  // Check to see if the form is being accessed over HTTPS.
  if ($view_mode == 'full' && (!fundraiser_is_secure() && !variable_get('fundraiser_development_mode', 0))) {
    // Return a 404 if the page isn't secure and should be.
    watchdog('fundraiser', 'The donation form <em>!title</em> is not protected with SSL.',
      array('!title' => $node->title), WATCHDOG_CRITICAL, l('View the donation form', 'node/' . $node->nid));
    drupal_not_found();
    exit();
  }
  // Set a reminder to turn off development mode on the page view.
  if (variable_get('fundraiser_development_mode', 0) && $view_mode == 'full') {
    drupal_set_message(t('Fundraiser is currently running in development mode. Remember to ' .
      '!link this feature on production websites.',
      array('!link' => l('turn off', 'admin/config/system/fundraiser'))));
  }
  return $node;
}

/**
 * Form modification functions.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter the webform component delete form to prevent the deletion of required fundraiser fields
 * Why not handle this with the main interface? because edit/clone/delete operations are added at theme layer.
 * TODO: add theme override to this level.
 */
function fundraiser_form_webform_component_delete_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we are dealing with a donation form.
  if ($form['node']['#value']->type == 'donation_form') {
    // Check vs. required fields to make sure we can't delete them.
    $required_fields = fundraiser_required_fields();
    $cid = $form['component']['#value']['cid'];
    $component = $form['node']['#value']->webform['components'][$cid];
    // Check to see if the form_key is in our required fields array
    if (in_array($component['form_key'], $required_fields)) {
      $message = t('<strong>!name</strong> is a required fundraiser field and cannot be deleted from this form.',
        array('!name' => $component['name']));
      $form['description']['#markup'] = $message;
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add the clone button if the user is allowed.
 */
function fundraiser_form_donation_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Alter the donation_form displayed on the node.
  if (user_access('clone donation form')) {
    $form['buttons']['clone'] = array(
      '#type' => 'submit',
      '#value' => 'Clone',
      '#submit' => array('fundraiser_clone_form'),
      '#weight' => 100,
    );
  }
}

/**
 * Implements hook_form_alter().
 * Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id is a subset, as: webform_client_form_NID.
 */
function fundraiser_form_alter(&$form, $form_state, $form_id) {
  // Alter the webform client form.
  if (strstr($form_id, 'webform_client_form')) {
    // Get node information.
    $node = node_load($form['#node']->nid);

    // Handle donation form submissions.
    if ($node->type == 'donation_form' && arg(2) == 'submission') {
      // Set up a view only display of the donation amount
      if ('other' != $form['submitted']['donation']['amount']['#default_value']) {
        $amount = $form['submitted']['donation']['amount']['#default_value'];
      }
      else {
        $amount = $form['submitted']['donation']['other_amount']['#default_value'];
      }
      $form['submitted']['donation']['display_amount'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Donation Amount') .
          ':</label>' . '$' . number_format($amount, 2) . '</div>',
      );
      // Show whether or not it's a recurring donation
      if (isset($form['submitted']['credit_card_information']['recurs_monthly'])) {
        $recurs = $form['submitted']['credit_card_information']['recurs_monthly']['#default_value'][0] == 'recurs' ? t('Yes') : t('No');
        $form['submitted']['donation']['recurring'] = array(
          '#type' => 'markup',
          '#value' => '<div class="form-item"><label>' . t('Recurring Donation?') .
            ':</label>' . $recurs . '</div>',
        );
      }
      unset($form['submitted']['donation']['amount']);
      unset($form['submitted']['donation']['other_amount']);
      unset($form['submitted']['credit_card_information']);

      // Clean up the donor info section - replace the form fields with read only info
      $form['submitted']['donor_information']['#title'] = t('Donor Information');
      $form['submitted']['donor_information']['first_name_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('First Name') . ':</label>' .
          $form['submitted']['donor_information']['first_name']['#default_value'] . '</div>',
      );
      $form['submitted']['donor_information']['last_name_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Last Name') . ':</label>' .
          $form['submitted']['donor_information']['last_name']['#default_value'] . '</div>',
      );
      $form['submitted']['donor_information']['email_readonly'] = array(
        '#type' => 'markup',
        '#value' => '<div class="form-item"><label>' . t('Email') . ':</label>' .
          $form['submitted']['donor_information']['email']['#default_value'] . '</div>',
      );
      $form['submitted']['donor_information']['first_name']['#prefix'] =
        $form['submitted']['donor_information']['last_name']['#prefix'] =
        $form['submitted']['donor_information']['email']['#prefix'] = '<div style="display:none">';
      $form['submitted']['donor_information']['first_name']['#suffix'] =
        $form['submitted']['donor_information']['last_name']['#suffix'] =
        $form['submitted']['donor_information']['email']['#suffix'] = '</div>';
    } // End handle donation form submissions.

    global $user;
    $this_user = user_load($user->uid); // Loads profile fields.

    // Handle the donation form itself
    if ($node->type == 'donation_form' && arg(2) != 'submission') {
      $base = drupal_get_path('module', 'fundraiser');
      drupal_add_js( $base . '/js/jquery.alphanumeric.js', 'file');
      drupal_add_js( $base . '/js/fundraiser.js', 'file');
      drupal_add_css( $base . '/css/fundraiser-donation-form.css', 'file');

      // Create an data structure that will tell us exactly where each webform component lives in the FAPI array.
      $components = $node->webform['components'];
      $component_hierarchy = fundraiser_parse_components($node->nid, $components);

      // Preload any fields if the user is logged in.
      if (user_is_logged_in()) {
        // Load up any mapped profile fields.
        $map = fundraiser_get_user_map($node->nid);
        foreach ($map as $field_key => $profile_key) {
          $field = fundraiser_find_field($form, $component_hierarchy[$field_key]);
          if (empty($field['#default_value'])) {
            if (property_exists($this_user, $profile_key)) {
              switch ($field['#type']) {
                case 'checkboxes':
                  $field['#default_value'] = array($this_user->$profile_key);
                  break;
                default:
                  $field['#default_value'] = $this_user->$profile_key;
              }
            }
          }
        }
      }

      // Combine expiration month and year into a single component.
      $cc_exp_month_field = fundraiser_find_field($form, $component_hierarchy['card_expiration_month']);
      $cc_exp_year_field = fundraiser_find_field($form, $component_hierarchy['card_expiration_year']);
      $cc_info_field = fundraiser_find_field($form, $component_hierarchy['credit_card_information']);
      $cc_exp_month_field['#default_value'] = date('n');
      $cc_exp_year_field['#default_value'] = date('Y');

      // Make sure the year field always has a good range of years.
      $this_year = date('Y');
      $years = array($this_year => $this_year);
      for ($i = 1; $i <= 5; $i++) {
        $years[$this_year + $i] = $this_year + $i;
      }
      $cc_exp_year_field['#options'] = $years;

      // Check to see if the credit card information fieldset still exists because it may have been removed.
      if (is_array($cc_info_field)) {
        $cc_info_field['expiration_date'] = array();
        $cc_info_field['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
        $cc_info_field['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
        $cc_info_field['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
        $cc_info_field['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
      }
      else {
        // Add the new expiration_date directly to the form with the same weight as the cc_exp_month field.
        $form['expiration_date'] = array();
        $form['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
        $form['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
        $form['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
        $form['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
      }
      // Remove old fields after moving them.
      $cc_exp_month_field = NULL;
      $cc_exp_year_field = NULL;

      // Alter country drop down to populate zone drop down.
      $country_field = fundraiser_find_field($form, $component_hierarchy['country']);
      $country_field['#ajax'] = array(
        'callback' => '_fundraiser_form_webform_client_state_ajax_submit',
        'wrapper' => 'zone-select-wrapper',
      );
  
      // Add default country & state values from user profile
      // Found in fields.inc.
      $fids = _fundraiser_get_profile_location_fields();
      if ($fids['country'] && $this_user->profile_country) {
        $country_field['#default_value'] = fundraiser_get_user_country($fids['country'], $this_user->uid);
      }

      // Add a wrapper around the state field so it can be replaced via ajax.
      $state_field = fundraiser_find_field($form, $component_hierarchy['state']);
      if ($fids['state'] && $this_user->profile_state) {
        $state_field['#default_value'] = fundraiser_get_user_zone($fids['state'], $this_user->uid);
      }
      $state_field['#prefix'] = '<div id="zone-select-wrapper">';
      $state_field['#suffix'] = '</div>';

      // Flatten form state array so that it is easier to work with
      $fields = _fundraiser_array_flatten($form_state);
      // Country/state dependant drop down code
      if (array_key_exists('country', $fields)) {
        // User selected country
        $country_field['#default_value'] = $fields['country'];
        $state_field['#options'] = fundraiser_get_country_zones($fields['country']);
      }
      else {
        $state_field['#options'] = fundraiser_get_country_zones($country_field['#default_value']);
      }

      // Add a validation handler and two additional submit handlers
      $form['#validate'][] = 'fundraiser_webform_validate';
      $form['#submit'][] = 'fundraiser_webform_submit';
      $form['#submit'][] = 'fundraiser_webform_confirm';
      // And lastly add a user facing message for submit.
      $form['submit']['#suffix'] = '<div class="fundraiser_submit_message">' .
        theme('image', array('path' =>  drupal_get_path('module', 'fundraiser') . '/images/padlock.gif' )) .
        t('By clicking SUBMIT DONATION your credit card will be securely processed.') .
        '</div>';
    } // End handle the donation form itself.
  }  // End alter the webform client form.

  return $form;
}

/**
 * AJAX callback for dealing with changes to the donation form.
 */
function _fundraiser_form_webform_client_state_ajax_submit($form, $form_state) {
  // Get the form item we want to render.
  $nid = $form['#parameters'][2]->nid; //TODO make sure this is the nid.
  $form_item = fundraiser_find_field($form, fundraiser_parse_component($nid, 'state'));
  return $form_item;
}

/**
 * Submit handler for donation form cloning.
 */
function fundraiser_clone_form($form, &$form_state) {
  $nid = $form['nid']['#value'];
  fundraiser_clone_donation_form($nid);
}

/**
 * Clones a donation form and related fieldmaps. Called from button or by menu paths.
 */
function fundraiser_clone_donation_form($nid) {
  // Check that the nid is numeric, and then load it up to clone.
  if (is_numeric($nid)) {
    global $user;
    $node = node_load($nid);
    if (isset($node->nid)) {
      $original_node = clone $node;
      $node->nid = NULL;
      $node->vid = NULL;
      $node->name = $user->name;
      $node->uid = $user->uid;
      $node->created = NULL;
      $node->menu = NULL;
      $node->book['mlid'] = NULL;
      $node->path = NULL;
      $node->files = array();
      $node->title = t('Clone of !title', array('!title' => $node->title));
      $node->internal_name = 'Clone of ' . $original_node->internal_name;
      $node->is_being_cloned = TRUE;
      if (variable_get('clone_reset_' . $node->type, FALSE)) {
        $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
        // Fill in the default values.
        foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
          $node->$key = in_array($key, $node_options);
        }
      }
      node_save($node);
      $new_nid = $node->nid;

      // Update confirmation information
      db_update('fundraiser')
      ->fields(array(
        'confirmation_page_title' => $original_node->confirmation_page_title,
        'confirmation_page_body' => $original_node->confirmation_page_body,
        'redirect_url' => $original_node->redirect_url,
      ))
      ->condition('nid', $new_nid)
      ->execute();
      
      // Get profile map for the original donation form
      $results = db_query('SELECT f.nid, f.cid, f.map_id, c.form_key FROM {fundraiser_component_map} f ' .
        'INNER JOIN {webform_component} c on c.cid = f.cid AND c.nid = f.nid ' .
        'WHERE f.nid = :nid',
        array(':nid' => $nid));

      // Loop over mapped components and find new component in cloned donation form
      foreach ($results as $data) {
        $cid = _fundraiser_get_fields_from_table('webform_component', array('nid' => $new_nid, 'form_key' => $data->form_key), 'cid' );
        if ($cid) {
          $id = db_insert('fundraiser_component_map')
          ->fields(array(
            'nid' => $new_nid,
            'cid' => $cid,
            'map_id' => $data->map_id,
          ))
          ->execute();
        }
      }
      // TODO make this a hook that sf_donation triggers on.
      if (module_exists('sf_donation')) {
        sf_donation_clone_map($nid, $new_nid);
      }
      drupal_set_message(t('Donation form [@title] has been cloned succesfully.', array('@title' => $original_node->title)));
      drupal_goto('node/' . $new_nid . '/edit');
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 */
function fundraiser_webform_submission_presave($node, &$submission) {
  // Remove any non-component form fields from the submitted data.
  unset($submission->data['']);
  // Remove senstive form data before the submission is saved to the database.
  if ($node->type == 'donation_form') {
    $results = _fundraiser_get_fields_from_table('webform_component',
      array('nid' => $node->nid, 'form_key' => array('card_number', 'card_cvv', 'card_expiration_date')), 'cid');
    foreach ($results as $result) {
      $submission->data[$result->cid]['value'][0] = NULL;
    }
  }
}

/**
 * Validate donation form submissions.
 */
function fundraiser_webform_validate($form, &$form_state) {
  $fundraiser_fields = _fundraiser_array_flatten($form_state['values']['submitted']);

  $node_id = $form_state['values']['details']['nid'];
  $errors = FALSE;
  // collect all of our donation fields
  $donation_amount = $fundraiser_fields['amount'];
  $cc_number = $fundraiser_fields['card_number'];
  $cc_cvv = $fundraiser_fields['card_cvv'];
  $cc_expiration_month = $fundraiser_fields['card_expiration_month'];
  $cc_expiration_year = $fundraiser_fields['card_expiration_year'];
  $email = $fundraiser_fields['email'];

  // look for other amount
  if ($donation_amount == "other") {
    $donation_amount = preg_replace("/[^\d\.]/i", "", $fundraiser_fields['other_amount']);
    // make sure other amount is numeric
    if (!is_numeric($donation_amount)) {
      form_set_error('other_amount', "You must enter a valid donation amount.");
      $errors = TRUE;
    }
  }

  // check for minimum amount
  $minimum_donation_amount = _fundraiser_get_fields_from_table('fundraiser', array('nid' => $node_id), 'minimum_donation_amount');
  $minimum_donation_amount = number_format($minimum_donation_amount, 2);
  if ($donation_amount < $minimum_donation_amount) {
    form_set_error('submitted][donation][other_amount', "Your donation amount must be greater than or equal to $minimum_donation_amount.");
    $errors = TRUE;
  }

  // Validate the card number.
  if (!empty($cc_number) && ( !fundraiser_validate_card($cc_number) || !ctype_digit($cc_number) )) {
    form_set_error('submitted][credit_card_information][card_number', "You have entered an invalid credit card number.");
    $errors = TRUE;
  }

  // Validate the card expiration date.
  if (!empty($cc_expiration_month) && !empty($cc_expiration_year) && !fundraiser_validate_card_expiration($cc_expiration_month, $cc_expiration_year)) {
    form_set_error('submitted][credit_card_information][expiration_date][card_expiration_month', t('The credit card you entered has expired.'));
    form_set_error('submitted][credit_card_information][expiration_date][card_expiration_year', ' ');
    $errors = TRUE;
  }

  // Validate the CVV Number
  if (!empty($cc_cvv) && !fundraiser_validate_card_cvv($cc_cvv)) {
    form_set_error('submitted][credit_card_information][card_cvv', t('You have entered an invalid CVV number.'));
    $errors = TRUE;
  }

  // Validate email address
  if (!fundraiser_validate_email($email)) {
    form_set_error('email', t('You must enter a valid email address.'));
    $errors = TRUE;
  }

  // create watchdog entry on validation errors
  if ($errors) {
    $base = drupal_get_path('module', 'fundraiser');
    drupal_add_js($base . '/js/jquery.alphanumeric.js');
    drupal_add_js($base . '/js/fundraiser.js');
    drupal_add_css($base . '/css/fundraiser-donation-form.css');

    $message = "The following donation form fields failed local validation:\n\n";
    $validation_errors = array_keys(form_get_errors());
    foreach ($validation_errors as $field) {
      $keys = explode('][', $field);
      $message .= array_pop($keys) . "\n";
    }

    $fundraiser_fields['card_number'] = substr_replace($fundraiser_fields['card_number'], str_repeat('*', strlen($fundraiser_fields['card_number'])), 0);
    $fundraiser_fields['card_cvv'] = substr_replace($fundraiser_fields['card_cvv'], str_repeat('*', strlen($fundraiser_fields['card_cvv'])), 0);

    $message .= "\n\nSubmitted Values:\n\n";
    foreach ($fundraiser_fields as $key => $value) {
      $message .= $key . ': ' . $value . "\n";
    }
    fundraiser_set_tracking($node_id, 'local_failures');
    watchdog('fundraiser', $message, NULL, WATCHDOG_DEBUG, NULL);
  }
}

/**
 * Submission handler for donation forms.
 */
function fundraiser_webform_submit($form, &$form_state) {
  global $user;

  $node = $form['#parameters'][2];
  $fundraiser_fields = _fundraiser_array_flatten($form_state['values']['submitted_tree']);
  $node_id = $form_state['values']['details']['nid'];

  // See if this was a recurring donation.
  $recurs = FALSE;
  $recurs_cid = _fundraiser_get_fields_from_table('webform_component', array('nid' => $node->nid, 'form_key' => 'recurs_monthly'), 'cid');
  if (!empty($recurs_cid)) {
    $value = $form_state['values']['submitted'][$recurs_cid];
    if (is_array($value)) { // If this is an array, then it is a single item checkbox
      $recurs = $value[0] == 'recurs' ? TRUE : FALSE;
    }
    else {
      $recurs = $value == 'recurs' ? TRUE : FALSE;
    }
  }
  $recurs = $recurs ? DONATION_RECURRING : DONATION_NON_RECURRING;

  // Allow other modules to add additional fields to the order before processing the payment
  $additional_order_fields = module_invoke_all('fundraiser_add_order_fields', $fundraiser_fields);
  
  // Generate an order given the values submitted.
  // Fundraiser uses the concept of an order (as per ubercart).
  // So any hook creating an order should keep that structure in mind.
  // Return an order with correct subvalues.
  // Fundraiser sees this order only by an order_id.
  // The supporting system (here ubercart) handles everythign else.
  $order_id = fundraiser_create_order($user, $fundraiser_fields, $recurs, $additional_order_fields);

  // Relate the order to submission before we try and process the payment
  $webform_order = array('webform_nid' => $node->nid, 'order_id' => $order_id, 'sid' => $form_state['values']['details']['sid'], 'recurring_status' => $recurs);
  drupal_write_record('fundraiser_webform_order', $webform_order);

  // additional data to pass to the payment gateway's charge function
  $data = array('txn_type' => 'auth_capture');

  // varaible to hold the name of the payment gateway charge function we need to call
  $charge_function = NULL;

  // if the gateway manager module is in use, attempt to extract the charge function from there
  if (module_exists('gateway_manager')) {
    $info = gateway_manager_gateway_info($node->gateway);
    $charge_function = $info['charge_function'];
    $data['config'] = $info['config'];
  }
  else {
    $charge_function = fundraiser_get_charge_function_by_gateway($node->gateway);
  }
  // call the charge function and store the result
  $result = $charge_function($order_id, $donation_amount, $data);

  if ($result['success']) {
    fundraiser_order_accept($order_id, $result['data']['txn_id'], $result['message']);
  }
  else {
    // failed to process credit cart
    fundraiser_order_decline($order_id, $result['message']);
    fundraiser_set_tracking($node_id, 'gateway_failures');
    // tell webform we're not done and rebuild the form
    unset($form_state['values']['details']['sid']);
    form_set_error('credit_card_information][card_number', $result['message']);
    $form_state['values']['details']['finished'] = 0;
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Handles the final destination redirect (even after webform).
 */
function fundraiser_webform_confirm($form, &$form_state) {
  // Everything worked, redirect as the last submit handler.
  $node = $form['#node'];
  $sid = $form_state['values']['details']['sid'];

  $redirect_url = trim($node->redirect_url);
  // Remove the domain name from the redirect.
  $redirect_url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $redirect_url);
  if ($redirect_url == '<confirmation>') {
    $redirect = array('node/' . $node->nid . '/confirmation', 'sid=' . $sid);
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $parts = parse_url($redirect_url);
    $query = $parts['query'] ? ($parts['query'] . '&sid=' . $sid) : ('sid=' . $sid);
    $redirect = array($parts['path'], $query, $parts['fragment']);
  }
  $form_state['redirect'] = $redirect;
}

/**
 * Charge related functions.
 */

/**
 * Completes the processing of an accepted order.
 *
 * @param $order_id
 *   The id of the order.
 * @param $transaction_id
 *   The id of the transaction that was returned from the gateway.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_accept($order_id, $transaction_id, $message = NULL) {
  // reload the order
  $order = uc_order_load($order_id);

  module_invoke_all('fundraiser_order_success', $order);

  // use order_id to find the nid and then go ahead and load up the node
  $webform = db_query("SELECT webform_nid, sid, recurring_status FROM {fundraiser_webform_order} WHERE order_id = :order_id", array(':order_id' => $order_id))->fetchObject();
  fundraiser_set_tracking($webform->webform_nid, 'conversions');
  $node = node_load($webform->webform_nid);

  // complete the sale
  uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));

  // enter the payment
  uc_payment_enter($order_id, 'fundraiser', $order->order_total, 0, NULL, t('Payment processed by the fundraiser module.'));

  // mark payment as received
  db_query("UPDATE {uc_orders} SET order_status = 'payment_received' WHERE order_id = :order_id", array(':order_id' => $order_id));

  // update the order/webform relationship
  db_query("UPDATE {fundraiser_webform_order} SET gateway = :gateway, txn_id = :txn_id WHERE order_id = :order_id", array(':gateway' => $node->gateway, ':txn_id' => $transaction_id, ':order_id' => $order_id));

  // update the uid on the webform submission
  db_query("UPDATE {webform_submissions} SET uid = :uid WHERE sid = :sid", array(':uid' => $order->uid, ':sid' => $webform->sid));

  // Update the recurring status, if it was changed by the payment gateway module
  if ($webform->recurring_status != $order->data['recurring_status']) {
    db_query('UPDATE {fundraiser_webform_order} SET recurring_status = :recurring_status WHERE order_id = :order_id', array(':recurring_status' => $order->data['recurring_status'], ':order_id' => $order_id));
  }

  // update the user's profile
  fundraiser_update_user_profile($order->uid, $webform->webform_nid, $webform->sid);

  // if it's recurring, spawn all the future orders
  if (fundraiser_is_recurring_order($order_id)) {
    fundraiser_create_future_orders($order_id, $node->gateway);
  }

  // TODO: This should be changed to a hook (hook_donation_successful) and another module can put it in the queue.
  fundraiser_add_to_queue($order);

  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message($message);
  }
}


/**
 * Updates the profile of user that submitted the donation.
 *
 * @param $uid
 *   The id of the user that made the donation.
 * @param $nid
 *   The nid of the webform node.
 * @param $sid
 *   The id of the webform submission that contains the values.
 */
function fundraiser_update_user_profile($uid, $nid, $sid) {
  global $user;
  $update_user = $user;
  $map = fundraiser_create_profile_values_map($nid, $sid);

  if ($user->uid == 0) {
    $update_user = user_load($uid);
  }

  // make sure the profile module is enabled
  if (module_exists('profile')) {
    $cat_array = profile_categories();

    foreach ($cat_array as $cat) {
      $updates = array(); // array for storing updates to each profile category
      $results = _fundraiser_profile_get_fields($cat['name']);
      foreach ($results as $result) {
        $row = (array) $result;
        if (array_key_exists($row['name'], $map)) {
          $updates[$row['name']] = $map[$row['name']];
        }
      }
      // save profile
      _fundraiser_profile_save_profile($updates, $update_user, $cat['name']);
    }
    // convert ubercart's numeric ids to textual values
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($nid, $sid);
    _fundraiser_update_profile_location($submission, $update_user);
  }

  // update last_updated date so user will be re-synced on next cron run
  user_save($update_user, array('last_updated' => time()));

  // insert user back into queue
  $action = 'update';
  if (empty($update_user->salesforce_contact_id)) {
    $action = 'upsert';
  }

  // If the SF Queue API is enabled, insert this user into the queue
  if (module_exists('queue_api')) {
    sf_queue_insert($update_user->uid, 'user', $action);
  }

}


/**
 * Creates future order based on the the order's credit card expiration date.
 */
function fundraiser_create_future_orders($order_id, $gateway = NULL) {
  global $user;

  // reload the original order so we get any changes that have been made by the payment gateways
  $order = uc_order_load($order_id);

  // determine the number of future donations (Salesforce hard limit is 50. Set as 49 because original order is 1)
  $counter = min(_fundraiser_months_between_dates($order->payment_details['cc_exp_month'], $order->payment_details['cc_exp_year']), 49);

  for ($i = 1; $i <= $counter; $i++) {
    $next_order = uc_order_new($user->uid);
    // copy all values to new order
    $new_id = $next_order->order_id;
    $next_order = clone $order;
    $next_order->order_id = $new_id;
    $next_order->order_status = 'pending_future_payment';

    unset($next_order->products[0]->order_product_id);
    uc_order_save($next_order);
    $next_charge = strtotime("+$i months");

    // make a record of the recurring order
    $recurring = array('master_order_id' => $order_id, 'order_id' => $new_id, 'next_charge' => $next_charge, 'gateway' => $gateway);
    drupal_write_record('fundraiser_recurring', $recurring);

    // add a comment to the order stating when it will be charged
    uc_order_comment_save($new_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $next_charge))), 'admin');
  }

}

/**
 * Completes the processing of an declined order.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_decline($order_id, $message) {
  // make the order as failed
  db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = :order_id", array(':order_id' => $order_id));
  // make a log entry
  watchdog('fundraiser', 'Order @id was declined by the payment gateway. Reason: @message', array('@id' => $order_id, '@message' => $message), WATCHDOG_DEBUG, NULL);

  // clean up
  $sid = db_query('SELECT sid FROM {fundraiser_webform_order} WHERE order_id = :order_id', array(':order_id' => $order_id))->fetchColumn();
  db_delete('fundraiser_webform_order')->condition('order_id', $order_id)->execute();
  db_delete('webform_submitted_data')->condition('sid', $sid)->execute();
  db_delete('webform_submissions')->condition('sid', $sid)->execute();

  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message($message);
  }
}

/**
 * Helper functions below.
 */


/**
 * Helper function. Check if the current page is SSL protected.
 */
function fundraiser_is_secure() {
  return (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? TRUE : FALSE;
}

/**
 * Helper function, these are the fields we can't delete.
 */
// This is only used in webform_token_selector/webform_token_selector.module
// Should it be moved to that module?
function _fundraiser_field_blacklist() {
  return array(
    'card_number',
    'card_cvv',
    'recurs_monthly',
    'card_expiration_month',
    'card_expiration_year',
  );
}

/**
 * Helper function.
 * Creates a nested array of where components exist in the FAPI array for all components in a webform.
 * This is needed because the fundraiser module allows the user to move components around. Therefore
 * we must be able to find them if they are not in their usual spot.
 */
function fundraiser_parse_components($nid, $components) {
  $component_hierarchy = array();
  foreach ($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // Convert string to a nested array.
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Helper function.
 * Creates a nested array of where a component exists in the FAPI array.
 */
function fundraiser_parse_component($nid, $form_key) {
  $cid = _fundraiser_get_fields_from_table('webform_component', array('nid' => $nid, 'form_key' => $form_key), 'cid');
  $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
  parse_str($component_path, $output); // Convert. string to a nested array
  return $output;
}

/**
 * Helper function.
 * Builds a path from the webform component to it's topmost parent.
 * Recursion is here. Be careful.
 */
function fundraiser_walk_component_hierarchy($nid, $cid, &$path = array()) { 
  // Store all the components for this node in a static cache to reduce the number of duplicated database hits.
  static $component_hierarchy = array();
  if (empty($component_hierarchy[$nid])) {
    $component_hierarchy[$nid] = array();
    $results = _fundraiser_get_fields_from_table('webform_component', array('nid' => $nid), array('cid', 'pid', 'form_key'));
    foreach ($results as $data) {
      $cid = $data->cid;
      $component_hierarchy[$nid][$cid][] = $data;
    }
  }
  // Build a path from the webform component to its topmost parent.
  foreach ($component_hierarchy[$nid][$cid] as $data) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      fundraiser_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

/**
 * Helper function, returns a reference to an element of a FAPI array based on a known path.
 */
function fundraiser_find_field(&$form, $path) {
  foreach (array_keys($path) as $v) {
    if (is_array($path[$v]) && count($path[$v])) {
      // Recurse if there are more keys.
      return fundraiser_find_field($form[$v], $path[$v]);
    }
    else {
      return $form[$v];
    }
  }
}

/**
 * Helper function function, flatten given arrays.
 */
function _fundraiser_array_flatten($array, $preserve_keys = 1, &$newArray = array()) {
  foreach ($array as $key => $child) {
    if (is_array($child)) {
      $newArray = &_fundraiser_array_flatten($child, $preserve_keys, $newArray);
    }
    elseif ($preserve_keys + is_string($key) > 1) {
      $newArray[$key] = $child;
    }
    else {
      $newArray[] = $child;
    }
  }
  return $newArray;
}

/**
 * Helper function, check if given string is an email format.
 */
function fundraiser_validate_email($mail) {
// TODO fix this err -SeH
//Deprecated function: Function eregi() is deprecated in fundraiser_validate_email() 
//(line 2615 of /Users/cg176010/Repos/springboard_modules/fundraiser/fundraiser.module).
  return eregi("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$", $mail);
}

/**
 * Determines if an order is a recurring order.
 */
function fundraiser_is_recurring_order($order_id) {
  $status = _fundraiser_get_fields_from_table('fundraiser_webform_order', array('order_id' => $order_id) , 'recurring_status');
  return $status == DONATION_RECURRING;
}

/**
 * DB Function, Check if the given order was made on a payment gateway that supports refunds
 */
function fundraiser_gateway_can_refund_order($order) {
  // Get details on the original payment so we can load the payment gateway details
  $payment_details = db_query('SELECT gateway, txn_id FROM {fundraiser_webform_order} '.
    'WHERE order_id = :order_id '.
    'UNION '.
    'SELECT gateway, txn_id FROM {fundraiser_recurring} '.
    'WHERE order_id = :order_id',
    array(':order_id' => $order->order_id))->fetchObject();

  if (module_exists('gateway_manager')) {
    $info = gateway_manager_gateway_info($payment_details->gateway);
    $refund_function = $info['refund_function'];
  }
  else {
    $refund_function = fundraiser_refund_function($node->gateway);
  }
  return trim($refund_function) != '';
}


/**
 * Function returns months between today's datestamp and $exp_date -1
 */
function _fundraiser_months_between_dates($exp_month, $exp_year) {
  $startDate = strtotime("now");
  $stopDate = mktime(0, 0, 0, $exp_month, 1, $exp_year);
  $nrmonths = ((idate('Y', $stopDate) * 12) + idate('m', $stopDate)) - ((idate('Y', $startDate) * 12) + idate('m', $startDate));
  return $nrmonths;
}

/**
 * Returns the refund function associated with the specified gateway
 */
function fundraiser_refund_function($type) {
  $gateways = _fundraiser_get_gateway_info();
  foreach ($gateways as $key => $gateway) {
    if ($gateway['id'] == $type && $gateway['credit_refund']) {
      return $gateway['credit_refund'];
    }
  }
  return NULL;
}

/**
 * Returns a duplicate of a given order
 */
function fundraiser_clone_order($order) {
  $cloned_order = uc_order_new($order->uid);
  $id = $cloned_order->order_id;
  $cloned_order = clone $order;
  $cloned_order->order_id = $id;
  $cloned_order->order_status = RECURRING_DONATION_STATUS;
  unset($cloned_order->products[0]->order_product_id);
  uc_order_save($cloned_order);
  return $cloned_order->order_id;
}

/**
 * Creates a webform specific string of donations amount to be used in the amount component
 *
 * @param $donation_amounts
 * Array of amount => label values.
 *
 * @param $show_other_amount
 * Indicates other amount field is in use by the current donation form.
 *
 * @return
 * Returns a formatted string of amount|value pairs in the format required by webform_component.extra
 */
function _fundraiser_create_amount_options($donation_amounts, $show_other_amount) {
  $formatted_amounts = '';
  // Convert to nice dollar format if label isn't present.
  foreach ($donation_amounts as $amount => $label) {
    if (!$label) {
      $formatted_amounts .= $amount . '|$' . $amount;
    }
    else {
      $formatted_amounts .= $amount . '|' . $label;
    }
    $formatted_amounts .= "\n";
  }
  if ($show_other_amount && count($donation_amounts)) {
    $formatted_amounts .= 'other|Other';
  }
  return $formatted_amounts;
}

/**
 * Smarter version of array_merge_recursive: overwrites scalar values.
 *
 * This also came (like a God send) from Wim's AHAH helper module. Really, that's the
 * easiest way to go, and the module works like a charm - but I wanted to get my
 * head around the whole AHAH thing, and maybe you do to, or maybe you can't or don't
 * want to be dependant on a different module.
 *
 * @see PHP Manual on: array-merge-recursive comment #82976.
 */
function _fundraiser_array_smart_merge($array, $override) {
  if (is_array($array) && is_array($override)) {
    foreach ($override as $k => $v) {
      if (isset($array[$k]) && is_array($v) && is_array($array[$k])) {
        $array[$k] = _fundraiser_array_smart_merge($array[$k], $v);
      }
      else {
        $array[$k] = $v;
      }
    }
  }
  return $array;
}

/** 
 * Helper function, given a card number return likely type.
 */
function _fundraiser_get_cc_type($cardnumber) {
  $cardtype = "UNKNOWN";
  $len = strlen($cardnumber);
  if ( $len == 15 && substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = "amex";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = "discover";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = "mc";
  }
  elseif ( ($len == 16 || $len == 13) && substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = "visa";
  }
  return ( $cardtype );
}

/**
 * Returns the charge function associated with the specified gateway
 */
function fundraiser_get_charge_function_by_gateway($id) {
  $gateways = _fundraiser_get_gateway_info();
  foreach ($gateways as $key => $gateway) {
    if ($gateway['id'] == $i) {
      return $gateway['credit'];
    }
  }
  return NULL;
}



/**
 * DB generic function, given a nid and options to filter by, get the given fields from given table.
 * Doesn't handle joined tables, but handles the basic pretty readily.
 */
function _fundraiser_get_fields_from_table($tablename, $options = array(), $fields = array()) {
  $fields = (array) $fields; // Convert strings given for the field set to an array.
  $options = (array) $options;
  $query = db_select($tablename, $tablename);
  if (!empty($fields)) {
    $query->fields($tablename, $fields); // Get selected fields.
  }
  else {
    $query->fields($tablename); // Get all.
  }
  // Filter, by nid or other result.
  foreach ($options as $option_key => $option_value) {
    if (is_array($option_value)) {
      $query->condition($option_key, $option_value, 'IN');
    }
    else {
      $query->condition($option_key, $option_value, '=');
    }
  }
  // Check return values.
  // If looking for one column and got one row then just return the value.
  // Else return array set of objects or FALSE if no result.
  $results = $query->execute();
  if($results->rowCount() == 0 ) {
    return FALSE;
  }
  if($results->rowCount() == 1 && !empty($fields) && count($fields) == 1) {
    return $results->fetchColumn();
  }
  if($results->rowCount() == 1 && (empty($fields) || count($fields) > 1)) {
    return $results->fetchObject();
  }
  return $results->fetchAll();
}

/**
 * DB function, creates a map of profile fields with their corrosponding values.
 */
function fundraiser_create_profile_values_map($nid, $sid) {
  $map = array();
  $results = db_query('SELECT f.map_id, d.data FROM {fundraiser_component_map} f ' .
    'INNER JOIN {webform_submitted_data} d on d.cid = f.cid ' .
    'WHERE f.nid = :nid and d.sid = :sid', array(':nid'=> $nid, ':sid' => $sid));
  foreach ($results as $row) {
    $map[$row->map_id] = $row->data;
  }
  return $map;
}

/**
 * DB function, version of _profile_get_fields that includes hidden profile fields by default.
 */
function _fundraiser_profile_get_fields($category) {
  $query = db_select('profile_field');
  $query->condition('category', db_like($category), 'LIKE');
  return $query
    ->fields('profile_field')
    ->orderBy('category', 'ASC')
    ->orderBy('weight', 'ASC')
    ->execute();
}

/**
 * Version of profile_save_profile that includes hidden profile fields
 */
function _fundraiser_profile_save_profile(&$edit, &$user, $category) {
  $results = _fundraiser_profile_get_fields($category);
  foreach ($results as $field) {
    if (_profile_field_serialize($field->type)) {
      $edit[$field->name] = serialize($edit[$field->name]);
    }
    db_delete('profile_value')->condition('fid', $field->fid)->condition('uid', $user->uid)->execute();
    $profile_values = array('fid' => $field->fid, 'uid' => $user->uid, 'value' => $edit[$field->name]);
    drupal_write_record('profile_value', $profile_values);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}


/**
 * DB function, handle update (or create) for tracking data by field given.
 */
function fundraiser_set_tracking($nid, $field) {
  $tracked_nid = _fundraiser_get_fields_from_table('fundraiser_tracking', array('nid' => $nid));
  if (!$tracked_nid) {
    // Insert.
    $tracking = array('nid' => $nid, 'pageviews' => 1, 'conversions' => 0,'local_failures' => 0, 'gateway_failures' => 0, 'latest_load_time' => 0);
    $tracking[$field] = 1;
    drupal_write_record('fundraiser_tracking', $tracking);
  }
  else {
    // Update.
    $tracking = array('nid' => $nid, $field => $tracked_nid->$field + 1);
    drupal_write_record('fundraiser_tracking', $tracking, 'nid');  
  }
}

/**
 * API functions, these call hooks to get the data they need to create.
 * TODO - eventually refactor these out as the untangle is completed.
 */

/**
 * API wrapper, get gateway information if given a country id.
 */
function fundraiser_get_country_zones($country_id) {
  $xone_array = FALSE;
  $zone_array = module_invoke_all('fundraiser_get_country_zones', $country_id);
  return $zone_array;
}

/**
 * API wrapper, get country info given profile and user id.
 */
function fundraiser_get_user_country($profile_value, $uid) {
  $country_id = FALSE;
  $country_id = module_invoke_all('fundraiser_get_user_country', $profile_value, $uid);
  return $country_id;
}

/**
 * API wrapper, get zone info given profile and user id.
 */
function fundraiser_get_user_zone($profile_value, $uid) {
  $country_id = FALSE;
  $country_id = module_invoke_all('fundraiser_get_user_zone', $profile_value, $uid);
  return $country_id;
}

/**
 * API wrapper, get gateway information.
 */
function _fundraiser_get_gateway_info() {
  $gateways = module_invoke_all('fundraiser_gateway_info');
  drupal_alter('fundraiser_gateway_info', $gateways);
  return (array) $gateways;
}

/**
 * API wrapper, validate card information.
 */
function fundraiser_validate_card($cc_number) {
  $valid = FALSE;
  $valid = module_invoke_all('fundraiser_validate_card', $cc_number);
  return $valid;
}

/**
 * API wrapper, validate card expiration date.
 */
function fundraiser_validate_card_expiration($cc_expiration_month, $cc_expiration_year) {
  $valid = FALSE;
  $valid = module_invoke_all('fundraiser_validate_card_expiration', $cc_expiration_month, $cc_expiration_year);
  return $valid;
}

/**
 * API wrapper, validate card cvv number.
 */
function fundraiser_validate_card_cvv($cc_cvv) {
  $valid = FALSE;
  $valid = module_invoke_all('fundraiser_validate_card_cvv', $cc_cvv);
  return $valid;
}

/**
 * API wrapper, create an order from the order tracking system.
 */
function fundraiser_create_order($user, $fundraiser_fields, $recurs, $additional_order_fields) {
  $order = FALSE;
  $order = module_invoke_all('fundraiser_create_order', $user, $fundraiser_fields, $recurs, $additional_order_fields);
  return $order;
}

/**
 * API wrapper, determines if a user has any recurring donations, used as a Menu callback.
 */
function fundraiser_user_has_recurring_orders($user) {
  $recur = FALSE;
  $recur = module_invoke_all('fundraiser_user_has_recurring_orders', $user->uid);
  return $recur;
}

/**
 * API wrapper, get the encryption key path.
 */
function fundraiser_get_credit_encryption_path() {
  $path = FALSE;
  $path = module_invoke_all('fundraiser_get_credit_encryption_path');
  return $path;
}

/**
 * Uncatagorized, these functions need to be tracked down for where they're called.
 */

/**
 * Implements hook_confirmation_page_tokens().
 * TODO figure out where this hook comes from - webform? - SeH 1/10/12
 */
function fundraiser_confirmation_page_tokens($type) {
  if ($type == 'donation_form') {
    $order_tokens = array();
    $items = token_get_list('order');
    foreach ($items as $module => $tokens) {
      foreach ($tokens as $token => $desc) {
        $order_tokens['order']['[' . $token . ']'] = $desc;
      }
    }
    return $order_tokens;
  }
}

/**
 * Implementation of hook_webform_submission_update()
 * From webform, see http://drupalcontrib.org/api/drupal/contributions--webform--webform_hooks.php/function/hook_webform_submission_update/7
 */
 // TODO this looks like it should be in another module based on what it does, perhaps sf_queue? - SeH 1/12/12
function fundraiser_webform_submission_update($node, $submission) {
  if ($node->type == 'donation_form') {
    if (module_exists('queue_api')) {
      $order_id = db_query('SELECT f.order_id FROM {fundraiser_webform_order} f ' .
        'INNER JOIN {uc_orders} u ON u.order_id = f.order_id ' .
        'WHERE f.webform_nid = :webform_nid AND f.sid = :sid AND u.order_status = \'payment_received\'',
        array(':webform_nid' => $node->nid, ':sid' => $submission->sid))->fetchColumn();
      if ($order_id) {
        // Determine if we need an INSERT or an UPDATE
        $action = 'create';
        $sfid = db_query('SELECT sfid FROM {salesforce_management_object_map} WHERE oid = :oid AND drupal_type = \'donation\'', 
          array(':oid' => $order_id))->fetchColumn();
        if ($sfid) {
          $action = 'update';
        }
        sf_queue_insert($order_id, FUNDRAISER_SINGLE_DONATION_TYPE, $action);
      }
    }
  }
}

//TODO figure out where this comes from.
/**
 * Implemenation of hook_preprocess_fundraiser_confirmation().
 */
function fundraiser_preprocess_fundraiser_confirmation(&$vars) {
  $sid = $vars['sid'];
  if ($sid) {
    // load up the id of the order
    $order_id = db_query('SELECT order_id FROM {fundraiser_webform_order} WHERE sid = :sid', array(':sid' => $sid))->fetchColumn();
    $order = uc_order_load($order_id);  // SHOULD BE HOOKED. TODO
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($vars['node']->nid, $sid);
    $message = $vars['node']->confirmation_page_body;
    // replace any submission level tokens
    $message = _webform_filter_values($message, $vars['node'], $submission, NULL, FALSE);
    // replace any order tokens
    $message = token_replace($message, 'order', $order);

    // set a variable that can be used in the template
    $vars['confirmation_message'] = $message;
  }
}


/**
 * Adds an order to the Salesforce queue.
 *
 * @param $order
 *   The order to add to the queue.
 */
function fundraiser_add_to_queue($order) {
  // TODO: This should really be moved to the SF Donation module where it can listen for new orders being created.
  $add_to_queue = (module_exists('queue_api')) ? TRUE : FALSE;

  if ($add_to_queue) {
    if (fundraiser_is_recurring_order($order->order_id)) {
      sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'create');
    }
    else {
      sf_queue_insert($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'create');
    }
  }
}

// Unsorted below.


// Only called by gateway_manager/gm_ogone/gm_ogone.module:
/**
 * Completes the processing of an order when an error occurs.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_exception($order_id, $message) {
  // make the order as failed
  db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = :order_id", array(':order_id' => $order_id));
  // make a log entry
  watchdog('fundraiser', 'An error occurred while processing order @id. Error: @message', array('@id' => $order_id, '@message' => $message), WATCHDOG_ERROR, NULL);

  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message($message);
  }
}

// Only called by gateway_manager/gm_ogone/gm_ogone.module:
/**
 * Completes the processing of an order when it is cancelled by the user.
 *
 * @param $order_id
 *   The id of the order.
 * @param $message
 *   Any message that was returned by the gateway.
 */
function fundraiser_order_cancel($order_id) {
  // make the order as canceled
  db_query("UPDATE {uc_orders} SET order_status = 'canceled' WHERE order_id = :order_id", array(':order_id' => $order_id));
  // make a comment on the order
  uc_order_comment_save($order_id, 0, t('Payment was canceled during checkout by the user.'));
  // make a log entry
  watchdog('fundraiser', 'Order @id was canceled by the user.', array('@id' => $order_id), WATCHDOG_DEBUG, NULL);

  // show gateay message if appropriate
  $display_message = variable_get('fundraiser_gateway_messages', 1);
  if ($display_message) {
    drupal_set_message(t('Your payment has been canceled'));
  }
}

// Called in fundraiser/fundraiser.sustainer.inc:
/**
 * Extends a current recurring donation series out to a new credit card expiration date.
 */
function fundraiser_extend_future_orders($order_id, $exp_month, $exp_year) {
  // determine the date of the last order, and the number of orders to create out to the new expiration date
  $exp = $exp_year . sprintf("%02d", $exp_month)  ;
  $results = db_query("SELECT max(order_id) as last_order_id, max(next_charge) as last_charge_date, period_diff(:exp, date_format(from_unixtime(max(next_charge)),'%Y%m')) as new_order_count FROM {fundraiser_recurring} WHERE master_order_id = :order_id",
    array(':exp' => $exp, ':order_id' => $order_id));

  foreach ($results as $data) {
    $last_order_id = $data->last_order_id;
    $last_charge_date = $data->last_charge_date;
    $new_order_count = $data->new_order_count;
  }

  // load up the last order since it will have the most recent changes
  $order = uc_order_load($last_order_id);
  $gateway = db_query("SELECT gateway FROM {fundraiser_recurring} WHERE order_id = :order_id", array(':order_id' => $last_order_id))->fetchColumn();
  for ($i = 1; $i <= $new_order_count; $i++) {
    $new_order_id = fundraiser_clone_order($order);
    $charge_date = strtotime("+$i months", $last_charge_date);
    $recurring = array('master_order_id' => $order_id, 'order_id' => $new_order_id, 'next_charge' => $charge_date, 'gateway' => $gateway);
    drupal_write_record('fundraiser_recurring', $recurring);
    uc_order_comment_save($new_order_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $charge_date))), 'admin');
    // add these new orders to the queue
    if (module_exists('sf_donation') && module_exists('queue_api')) {
      sf_queue_insert($new_order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'create');
      sf_queue_insert($order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'update');
    }
  }
}

// UC related - SeH TODO hook
/**
 * Implementation of hook_order().
 */
function fundraiser_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'delete':
      // remove the order from fundraiser tables
      db_delete('fundraiser_recurring')->condition('order_id', $arg1->order_id)->execute();
      break;
  }
}

// UC related - SeH TODO hook
/**
 * Implementation of hook_preprocess_uc_order().
 *
 * Adds additional variables for use in donation receipt emails.
 *
 */
function fundraiser_preprocess_uc_order(&$variables) {
  switch ($variables['op']) {
    case 'checkout-mail':
      $nid = $variables['order']->products[0]->nid;
      $message = db_query("SELECT receipt_email_message FROM {fundraiser} WHERE nid = :nid", array(':nid' => $nid))->fetchColumn();
      $variables['fundraiser_message'] = $message;
      break;
  }
}

/*
 * Support for cloning via the node clone module
 */
function fundraiser_clone_node_alter(&$node, $original_node, $method) {
  if ($method == 'prepopulate') {
    $node->internal_name = 'Clone of ' . $original_node->internal_name;
  }
}

/**
 * Implemenation of queue_report_item_name().
 */
function fundraiser_queue_report_item_title_alter(&$row) {
  if ($row['type'] == 'donation' || $row['type'] == 'recurring_donation') {
    $title = 'Order ' . $row['oid'];
    $row['title'] = $title;
  }
  elseif ($row['type'] == 'refund') {
    $order_id = db_query("SELECT order_id FROM {fundraiser_refund} WHERE refund_id = :refund_id",
      array(':refund_id' => $row['oid']))->fetchColumn();
    $title = 'Order ' . $order_id;
    $row['title'] = $title;
  }
}

/**
 * Trigger and action related functions.
 */

/**
 * Implementation of hook_hook_info().
 */
function fundraiser_hook_info() {
  return array(
    'fundraiser' => array(
      'fundraiser' => array(
        'sustainer_payment_declined' => array(
          'runs when' => t('A sustainer\'s credit card payment is declined'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_fundraiser().
 */
function fundraiser_fundraiser($op, $order) {
  if (module_exists('trigger')) {
    $aids = _trigger_get_hook_aids('fundraiser', $op);
    $context = array(
      'hook' => 'fundraiser',
      'op' => $op,
      'order' => $order,
    );
    $dummy = new stdClass();
    actions_do(array_keys($aids), $dummy, $context);
  }
}

/**
 * Implementation of hook_action_info_alter().
 */
function fundraiser_action_info_alter(&$info) {
  if (isset($info['token_actions_send_email_action']['hooks']['fundraiser'])) {
    array_merge($info['token_actions_send_email_action']['hooks']['fundraiser'], array('sustainer_payment_declined'));
  }
  else {
    $info['token_actions_send_email_action']['hooks']['fundraiser'] = array('sustainer_payment_declined');
  }
}

/**
 * Implemenation of hook_webform_select_options_info().
 */
function fundraiser_webform_select_options_info() {
  $items = array();
  $items['uc_states'] = array(
    'title' => t('Ubercart defined states'),
    'options callback' => 'fundraiser_options_states',
  );
  $items['uc_countries'] = array(
    'title' => t('Ubercart defined countries'),
    'options callback' => 'fundraiser_options_countries',
  );
  return $items;
}

/**
 * Options list containing a list of ubercart defined states
 */
function fundraiser_options_states() {
  return array();
}

/**
 * Options list containing a list of ubercart defined countries
 */
function fundraiser_options_countries() {
  return array();
}

/**
 * Implementation of hook_order_actions().
 * Add a refund action to the Order list
 */
// New Ubercart uses rules now, this should be ported. - SeH TODO
function fundraiser_order_actions($order) {
  if (user_access('edit orders') && (in_array($order->order_status, array('payment_received', 'partially_refunded')) || empty($order->order_status)) && fundraiser_gateway_can_refund_order($order)) {
    $module_path = base_path() . drupal_get_path('module', 'fundraiser');
    $title = t('Issue refund on order !order_id.', array('!order_id' => $order->order_id));
    $actions[] = array(
      'name' => t('Refund'),
      'url' => 'admin/store/orders/' . $order->order_id . '/refund',
      'icon' => '<img src="' . $module_path . '/images/refund.gif" alt="' . $title . '" />',
      'title' => $title,
    );
    return $actions;
  }
}