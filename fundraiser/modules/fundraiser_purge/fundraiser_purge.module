<?php

/**
 * @file
 *
 * This module is used to delete old donations from the system.
 */

/**
 * Implementation of hook_menu().
 */
function fundraiser_purge_menu() {
  $items['admin/settings/fundraiser/purge'] = array(
    'title' => t('Purge settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_purge_settings_form'),
    'access arguments' => array('configure fundraiser purge'),
    'file' => 'fundraiser_purge.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function fundraiser_purge_perm() {
  return array('configure fundraiser purge');
}

/**
 * Implementation of hook_cron().
 */
function fundraiser_purge_cron() {
  // get the purge age
  $age = variable_get('fundraiser_purge_age', 0);
  $limit = variable_get('fundraiser_purge_limit', 40);
  $loop = variable_get('fundraiser_purge_loop', 5);
  $webform_types = variable_get('fundraiser_purge_webform_types', array());

  // no purge, return
  if ($age == 0 || !isset($webform_types)) {
    return;
  }

  // Set up the batch operation here.
  $batch = array();
  $batch_args = array(
    $age,
    $limit,
    $webform_types
  );
  for ($i = 0; $i < $loop; $i++) {
    $batch['operations'][] = array(
      'fundraiser_purge_batch',
      $batch_args
    );
  }

  // Initialize the batch.
  batch_set($batch);
  $batch['progressive'] = FALSE;

  // Process the batch.
  drush_backend_batch_process();
}

/**
 * Batch function to process each group of order purges
 *
 * @param $age
 *   The number of days that orders are allowed to remain in the system.
 * @param $limit
 *   Limit the search to this many results
 * @param $webform_types
 *   We want to clear the submissions from these webform content types.
 */
function fundraiser_purge_batch($age, $limit, $webform_types = array()) {
  // get the ids of all the orders being purged
  $time_start = microtime(true);
  $orders = fundraiser_purge_order_ids($age, $limit);
  $sids = fundraiser_purge_submission_ids($age, $limit, $webform_types);
  $debug = variable_get('fundraiser_purge_debug', 0);
  $total_count = _fundraiser_purge_order_ids_count();

  if ($debug) {
    // Log the debug
    watchdog('fundraiser_purge', 'DEBUG MODE : Fundraiser purge has deleted 
      @order donations and @sid webform submissions that have been in the system longer then @age days. There are @total total orders left in the current purge queue.', array(
      '@order' => count($orders),
      '@sid' => count($sids),
      '@age' => $age,
      '@total' => $total_count - count($orders),
    ), WATCHDOG_INFO);
    return;
  }
  // Process the orders
  foreach ($orders as $order_id) {
    // Get the submission
    $sids[] = db_result(db_query("SELECT sid FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id));
    // Delete this order.
    db_query("DELETE FROM {fundraiser_webform_order} WHERE order_id = %d", $order_id);
    uc_order_delete($order_id);
  }
  // Process the webform submissions
  foreach ($sids as $sid) {
    db_query("DELETE FROM {webform_submitted_data} WHERE sid = %d", $sid);
    db_query("DELETE FROM {webform_submissions} WHERE sid = %d", $sid);
  }

  // log the purge
  $time_end = microtime(true);
  $time = round($time_end - $time_start, 3);
  watchdog('fundraiser_purge', 'Fundraiser purge has deleted @order donations and @sid webform submissions that have been in the system longer then @age days. This process took @time seconds, and there are @total total orders left in the current purge queue.', array(
    '@order' => count($orders),
    '@sid' => count($sids),
    '@age' => $age,
    '@time' => $time,
    '@total' => $total_count - count($orders),
  ), WATCHDOG_INFO);

  // invoke hook_fundraiser_purge that other modules can use for clean up
  module_invoke_all('fundraiser_purge', $orders);
}

/**
 * Returns an array of order ids that were purged.
 *
 * @param $age
 *   The number of days that orders are allowed to remain in the system.
 * @param $limit
 *   Limit the search to this many results
 */
function fundraiser_purge_order_ids($age, $limit) {
  $order_ids = array();
  $result = db_query("
    SELECT uo.order_id FROM {uc_orders} uo
    JOIN {fundraiser_webform_order} fwo ON uo.order_id = fwo.order_id
    WHERE datediff(utc_timestamp(), from_unixtime(uo.created)) > %d
    AND uo.order_status IN ('payment_received', 'refunded', 'partially_refunded', 'failed')
    AND fwo.recurring_status = 0
    ORDER BY uo.created ASC
    LIMIT 0, " . $limit, $age);

  while ($data = db_fetch_array($result)) {
    $order_ids[] = $data['order_id'];
  }

  return $order_ids;
}

/**
 * Returns an array of webform submission ids that need to be cleared
 *
 * @param $age
 *   The number of days that orders are allowed to remain in the system.
 * @param $limit
 *   Limit the search to this many results
 * @param $webform_types
 *   We want to clear the submissions from these webform content types.
 */
function fundraiser_purge_submission_ids($age, $limit, $webform_types) {
  $sids = array();
  foreach ($webform_types as $type) {
    $result = db_query("
      SELECT ws.sid FROM {webform_submissions} ws JOIN {node} n
      WHERE datediff(utc_timestamp(), from_unixtime(ws.submitted)) > %d
      AND n.type = '%s' AND ws.nid = n.nid
      ORDER BY ws.submitted ASC
      LIMIT 0, " . $limit, $age, $type);
    while ($data = db_fetch_array($result)) {
      $sids[] = $data['sid'];
    }
  }
  return $sids;
}

/**
 * Helper function to count the current number of orders in the purge window
 */
function _fundraiser_purge_order_ids_count() {
  $age = variable_get('fundraiser_purge_age', 0);
  $count = db_result(db_query("SELECT count(order_id) FROM uc_orders WHERE datediff(utc_timestamp(), from_unixtime(created)) > %d", $age));
  return $count;
}
