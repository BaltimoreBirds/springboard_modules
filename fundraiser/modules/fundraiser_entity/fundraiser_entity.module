<?php

/**
 * Implements hook_entity_info().
 */
function fundraiser_entity_entity_info() {
  return array(
    'fundraiser_donation' => array(
      'label' => t('Fundraiser Donation'),
      'controller class' => 'FundraiserDonationEntityController',
      'base table' => 'fundraiser_donation',
      'load hook' => 'fundraiser_entity_donation_load',
      'module' => 'fundraiser_entity',
      'label callback' => 'fundraiser_entity_donation_label',
      'uri callback' => 'fundraiser_entity_donation_uri',
      'entity keys' => array(
        'id' => 'did',
      ),
      'fieldable' => TRUE,
      'bundles' => array(
        'fundraiser_donation' => array(
          'label' => 'Fundraiser Donation',
          'admin' => array(
            'path' => 'admin/springboard/settings/donation-entity',
            'real path' => 'admin/springboard/settings/donation-entity',
            'bundle argument' => 'fundraiser_donation',
            'access arguments' => array('access administration pages'),
          ),
        ),
      ),
    ),
  );
}

/**
 * Entity uri callback
 */
function fundraiser_entity_donation_uri($donation) {
  return 'springboard/donations/' . $donation->did;
}

/**
 * Entity label callback
 */
function fundraiser_entity_donation_label($donation) {
  return t('@name Donation', array('@name' => $donation->donation['first_name'] . '-' . $donation->donation['last_name']));
}

/**
 * Implements hook_menu().
 */
function fundraiser_entity_menu() {
  $items = array();

  // Note: springboard/donations is defined by a default View.
  $items['admin/springboard/donations/%fundraiser_donation'] = array(
    'title callback' => 'fundraiser_entity_label',
    'title arguments' => array(2),
    'page callback' => 'fundraiser_entity_donation_view',
    'page arguments' => array(2),
    'access callback' => 'fundraiser_entity_admin_donation_view_access',
    'access arguments' => array(2),
  );
  $items['admin/springboard/donations/%fundraiser_donation/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // Donation Entity admin
  $items['admin/springboard/settings/donation-entity'] = array(
    'title' => 'Donation Entity settings',
    'description' => 'Configure general donation entity settings, fields, and displays.',
    'page callback' => 'fundraiser_entity_donation_settings_overview',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/springboard/settings/donation-entity/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  if (module_exists('fundraiser_webform')) {
    $items['node/%node/webform/donation_mapping'] = array(
      'title' => 'Donation map',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fundraiser_entity_webform_mapping_form', 1),
      'access callback' => '_fundraiser_entity_mapping_access',
      'access arguments' => array(1),
      'file' => 'includes/fundraiser_entity.webform.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_entity_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['admin/springboard/settings/donation_entity/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['admin/springboard/settings/donation_entity/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Callback for the Donation Settings page
 */
function fundraiser_entity_donation_settings_overview() {
  return t('This Donation Entity is implemented by the Fundraiser Entity module.');
}

/**
 * Menu item access callback: prevent view access to the admin order display
 * for customers who have 'view' access to the order but not administration pages.
 *
 * @param $donation
 *   The donation object as loaded via the menu item wildcard.
 *
 * @return
 *   Boolean indicating the user's access to view the page.
 */
function fundraiser_entity_admin_donation_view_access($donation) {
  return user_access('administer site configuration');
}

/**
 * Menu item access callback: prevent access to the node mapping form
 *
 * @param $node
 *   The node object as loaded via the menu item wildcard.
 *
 * @return
 *   Boolean indicating the user's access to view the page.
 */
function _fundraiser_entity_mapping_access($node) {
  if (!fundraiser_is_donation_type($node->type)) {
    return FALSE;
  }

  return user_access('administer site configuration');
}

/**
 * Create donation entity type when the donation is created
 */
function fundraiser_entity_fundraiser_donation_create($donation) {
  $values = (array) $donation;
  $values['gateway'] = $donation->gateway['id'];
  $entity = entity_create('fundraiser_donation', $values);
  entity_save('fundraiser_donation', $entity);
  debug($entity, '$entity');
}

/**
 * Loads a donation by ID.
 */
function fundraiser_entity_donation_load($donation_id) {
  $donations = undraiser_entity_donation_entity_load_multiple(array($donation_id), array());
  return $donations ? reset($donations) : FALSE;
}

/**
 * Loads multiple orders by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $order_ids
 *   An array of order IDs.
 * @param $conditions
 *   An array of conditions to filter loaded orders by on the {commerce_order}
 *   table in the form 'field' => $value. Specifying a revision_id will load the
 *   requested revision of the order identified either by a similar condition or
 *   the $order_ids array assuming the revision_id is valid for the order_id.
 * @param $reset
 *   Whether to reset the internal donation loading cache.
 *
 * @return
 *   An array of order objects indexed by order_id.
 */
function fundraiser_entity_donation_entity_load_multiple($donation_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('fundraiser_donation', $donation_ids, $conditions, $reset);
}

/**
 * Generate an array for rendering the given order.
 *
 * @param $donation
 *   A fully loaded order object.
 * @param $view_mode
 *   The view mode for displaying the order: 'administrator'
 *
 * @return
 *   An array as expected by drupal_render().
 */
function fundraiser_entity_donation_view($donation, $view_mode = 'administrator') {
  return entity_view('fundriaser_donation', array($donation->did => $donation), $view_mode, NULL, TRUE);
}

/**
 * Implements hook_field_extra_fields().
 */
function fundraiser_entity_field_extra_fields() {
  $extra['fundraiser_donation']['fundraiser_donation'] = array(
    'form' => array(
      'amount' => array(
        'label' => t('Amount'),
        'description' => t('Donation amount.'),
        'weight' => -10,
      ),
      'currency' => array(
        'label' => t('Currency'),
        'description' => t('Donation currency.'),
        'weight' => -9,
      ),
      'uid' => array(
        'label' => t('User'),
        'description' => t('Account associated with this donation.'),
        'weight' => -8,
      ),
      'nid' => array(
        'label' => t('Node'),
        'description' => t('Node associated with this donation.'),
        'weight' => -7,
      ),
      'sid' => array(
        'label' => t('Submission'),
        'description' => t('Submission associated with this donation.'),
        'weight' => -6,
      ),
      'status' => array(
        'label' => t('Status'),
        'description' => t('Payment status of the donation.'),
        'weight' => -5,
      ),
      'gateway' => array(
        'label' => t('Gateway'),
        'description' => t('Payment gateway used to process this donation.'),
        'weight' => -5,
      ),
      'txn_id' => array(
        'label' => t('Transaction ID'),
        'description' => t('Remote transaction id from the gateway.'),
        'weight' => -5,
      ),
      'form_url' => array(
        'label' => t('Form URL'),
        'description' => t('URL of the form which created this donation.'),
        'weight' => -5,
      ),
    ),
  );

  return $extra;
}

/**
 * Return a simple array of donation entity field names and labels
 */
function _fundraiser_entity_get_donation_fields($type = 'fundraiser_donation') {
  $info = entity_get_property_info('fundraiser_donation');
  $properties = $info['properties'];
  if (isset($info['bundles'][$type])) {
    $properties += $info['bundles']['fundraiser_donation']['properties'];
  }
debug($properties);

  $entity_fields = field_info_instances('fundraiser_donation', $type);
  $fields = array();
debug($entity_fields, '$entity_fields');
  foreach ($entity_fields as $field) {
    $fields[ $field['field_name'] ] = $field['label'];
  }

  return $fields;
}
