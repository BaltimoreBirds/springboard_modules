<?php
/**
 * @file
 * Allows users to check an opt-in checkbox during donation submission to allow
 * their donation to be displayed publicly in a recent donations view block that
 * is automatically appended to the donation form.
 *
 * This also adds a setting to the node->edit->display settings vertical tab
 * which enables or disables this module on a node-specific basis and allows a
 * a minimum donation amount to be set before a donation will be displayed within
 * the recent donations block.
 */

/**
 * Implements hook_form_alter().
 *
 * Insert setting to toggle whether donors can opt-in to having their
 * donation displayed in the block of recent donors.
 *
 * Also adds the opt-in checkbox to donation forms where it has been enabled.
 */
function fundraiser_recent_donors_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']->type) || !fundraiser_is_donation_type($form['#node']->type)) {
    return;
  }

  $opt_in_enabled = FALSE;
  if (isset($form['#node']->nid)) {
    $opt_in_enabled = _fundraiser_recent_donors_opt_in_enabled($form['#node']->nid);
  }

  if (strpos($form_id, '_node_form') !== FALSE) {
    $form['springboard_display']['recent_donors_list'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recent Donors List'),
      '#description' => t('Choose whether donors can opt-in to having their name display on this donation form.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['springboard_display']['recent_donors_list']['allow_recent_donations_opt_in'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow donors to opt-in and show the recent, opt-in donors list.'),
      '#default_value' => $opt_in_enabled,
      '#weight' => -4,
    );
    $form['springboard_display']['recent_donors_list']['show_recent_donation_greater_than'] = array(
      '#type' => 'textfield',
      '#title' => t('Only show donations greater than'),
      '#default_value' => _fundraiser_recent_donors_get_min_opt_in_donation_amount($form['#node']->nid),
      '#weight' => -3,
      '#states' => array(
        'disabled' => array(
          ':input[name="allow_recent_donations_opt_in"]' => array('checked' => FALSE),
        ),
        'enabled' => array(
          ':input[name="allow_recent_donations_opt_in"]' => array('checked' => TRUE),
        ),
      ),
    ); 
    $form['#validate'][] = '_fundraiser_recent_donors_node_edit_validate';
    $form['#submit'][] = '_fundraiser_recent_donors_node_edit_submit';
    return;
  } // End node edit form changes.

  // Add the user-facing op-in checkbox, if enabled:
  if ($opt_in_enabled && strpos($form_id, 'webform_client_form_') !== FALSE) {
    $form['recent_donors_list_opt_in'] = array(
      '#title' => 'Show my name and donation amount in a list of recent donors.',
      '#type' => 'checkbox',
    );
    $form['#submit'][] = '_fundraiser_recent_donors_donation_form_submit';
  }

  // Insert the recent donations block directly into the form if a one-column layout is in use,
  // as the one-column layout does not use a template:
  $arg2 = arg(2);
  if (empty($arg2) && $form['#node']->form_layouts == 'one_column') {
    $form['recent_donations_block'] = array(
      '#type' => 'fieldset',
      '#description' => _fundraiser_recent_donors_render_donation_block(),
      '#weight' => 99999,
    );
  }
}

/**
 * Form submission for the donation form's op-in checkbox:
 */
function _fundraiser_recent_donors_donation_form_submit($form, &$form_state) {
  if (isset($form['#node']->nid) && isset($form_state['values']['recent_donors_list_opt_in'])) {
    // Get the donation ID:
    $did_query = db_query("SELECT did FROM {fundraiser_donation} WHERE sid = :sid AND nid = :nid AND uid = :uid",
      array(
        ':sid' => $form_state['values']['details']['sid'],
        ':nid' => $form_state['values']['details']['nid'],
        ':uid' => $form_state['values']['details']['uid'],
      )
    );
    foreach ($did_query as $did_data) {
      db_query("INSERT INTO {fundraiser_donor_opt_in} VALUES (:sid, :nid, :did, :created)",
        array(
          ':sid' => $form_state['values']['details']['sid'],
          ':nid' => $form_state['values']['details']['nid'],
          ':did' => $did_data->did,
          ':created' => time(),
        )
      );
      return;
    }
  }
}

/**
 * Form validation for the "Recent Donors List" node edit form fields:
 */
function _fundraiser_recent_donors_node_edit_validate($form, &$form_state) {
  if (isset($form_state['values']['show_recent_donation_greater_than'])) {
    $min_amount = $form_state['values']['show_recent_donation_greater_than'];
    if (!is_numeric($min_amount)) {
      form_set_error('show_recent_donation_greater_than',
        t('Please enter a numeric value within the "Only show donations greater than" field.'));
    }
  }
}

/**
 * Form submission for the "Recent Donors List" node edit form fields:
 */
function _fundraiser_recent_donors_node_edit_submit($form, &$form_state) {
  if (isset($form['#node']->nid) && isset($form_state['values']['allow_recent_donations_opt_in'])) {
    $min_donation_amount = 0;
    if (isset($form_state['values']['show_recent_donation_greater_than'])) {
      $min_donation_amount = $form_state['values']['show_recent_donation_greater_than'];
    }
    
    $exists_query = db_query("SELECT * FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
      array(':nid' => $form['#node']->nid));
    foreach ($exists_query as $exists) {
      db_query("UPDATE fundraiser_donation_opt_in_block " .
        "SET visibility = :visibility, min_donation_amount = :min_donation_amount " .
        "WHERE nid = :nid",
        array(
          ':nid' => $form['#node']->nid,
          ':min_donation_amount' => $min_donation_amount,
          ':visibility' => $form_state['values']['allow_recent_donations_opt_in'],
        )
      );      
      return;
    }
    db_query("INSERT INTO {fundraiser_donation_opt_in_block} (nid, min_donation_amount, visibility) " .
      "VALUES (:nid, :min_donation_amount, :visibility)",
      array(
        ':nid' => $form['#node']->nid,
        ':min_donation_amount' => $min_donation_amount,
        ':visibility' => $form_state['values']['allow_recent_donations_opt_in'],
      )
    );
  }
}

/**
 * Implements hook_webform_submission_delete().
 *
 * Removes a fundraiser_donor_opt_in record on submission deletion.
 */
function fundraiser_recent_donors_webform_submission_delete($node, $submission) {
  $webform_types = webform_variable_get('webform_node_types');
  if (!in_array($node->type, $webform_types)) {
    return;
  }
  db_query("DELETE FROM {fundraiser_donor_opt_in} WHERE sid = :sid AND nid = :nid",
    array(
      ':sid' => $submission->sid,
      ':nid' => $node->nid,
    )
  );
}

/**
 * Implements hook_node_delete().
 *
 * Removes all related fundraiser_donor_opt_in and fundraiser_donation_opt_in_block
 * records upon donation webform deletion.
 */
function fundraiser_recent_donors_node_delete($node) {
  $webform_types = webform_variable_get('webform_node_types');
  if (!in_array($node->type, $webform_types)) {
    return;
  }
  db_query("DELETE FROM {fundraiser_donor_opt_in} WHERE nid = :nid",
    array(':nid' => $node->nid));
  db_query("DELETE FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
    array(':nid' => $node->nid));
}

/**
 * These functions implement hook_proprocess_HOOK() to include the
 * recent donors block's HTML as a variable within these templates:
 */
function fundraiser_recent_donors_preprocess_two_column_donation(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}
function fundraiser_recent_donors_preprocess_two_column_hybrid_donation(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}
function fundraiser_recent_donors_preprocess_two_column_left_right(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}

// Views integration:

/**
 * Implements hook_views_api().
 *
 * This allows views listing opt-in donations.
 */
function fundraiser_recent_donors_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fundraiser_recent_donors') . '/includes',
  );
}

/**
 * Implements hook_views_query_alter().
 *
 * Enforce the minimum donation amount specific to the current node
 * on which the recent opt-in donations view is displayed.
 */
function fundraiser_recent_donors_views_query_alter(&$view, &$query) {
  if ($view->name != 'recent_opt_in_donations' || !isset($view->args[0])) {
    return;
  }
  
  $minimum_value = 0;
  $min_amount = 0;
  $node = node_load($view->args[0]);
  if (!$node) {
    return;
  }

  $currency = fundraiser_get_currency_from_node($node);
  $min_amount = _fundraiser_recent_donors_get_min_opt_in_donation_amount($node->nid);
  $minimum_value = commerce_currency_decimal_to_amount($min_amount, $currency['code']);

  $join = new views_join();
  $join->table = 'field_data_commerce_order_total';
  $join->field = 'entity_id';
  $join->left_table = 'fundraiser_donor_opt_in';
  $join->left_field = 'did';
  $join->type = 'left';
  $query->add_relationship('field_data_commerce_order_total', $join, 'fundraiser_donor_opt_in');
  $query->add_where(1, 'field_data_commerce_order_total.commerce_order_total_amount', $minimum_value, '>');
}


// Helper functions:

/**
 * Helper function to check whether a given form has recent donation opt-in enabled:
 *
 * @param $nid
 *   Node ID of the donation form in question.
 */
function _fundraiser_recent_donors_opt_in_enabled($nid) {
  $opt_in_query = db_query("SELECT visibility FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
    array(':nid' => $nid));
  foreach ($opt_in_query as $result) {
    return (!$result->visibility ? FALSE : TRUE);
  }
  return FALSE;
}

/**
 * Helper function to return the minimum opt-in donation amount for results to be displayed
 * in the associated view.
 *
 * @param $nid
 *   The node ID of the donation form from which opt-in donations will be displayed.
 */
function _fundraiser_recent_donors_get_min_opt_in_donation_amount($nid) {
  $min_donation_amount = 0;
  $min_donation_query = db_query("SELECT min_donation_amount min FROM {fundraiser_donation_opt_in_block} " .
    "WHERE nid = :nid", array(':nid' => $nid));
  foreach ($min_donation_query as $result) {
    $min_donation_amount = $result->min;
  }
  return $min_donation_amount;
}

/**
 * Helper function to display the rendered HTML of the recent op-in donations block.
 */
function _fundraiser_recent_donors_render_donation_block() {
  // Display nothing if the opt-in feature is not enabled for the current node:
  $arg1 = arg(1);
  if (!is_numeric($arg1) || !_fundraiser_recent_donors_opt_in_enabled($arg1)) {
    return '';
  }

  $block = block_load('views', 'recent_opt_in_donations-block');
  $block_data = _block_get_renderable_array(_block_render_blocks(array($block)));
  $block_html = drupal_render($block_data);
  return $block_html;
}

