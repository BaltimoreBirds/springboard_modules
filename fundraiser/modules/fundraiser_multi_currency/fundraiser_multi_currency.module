<?php

/**
 * @file
 * Adds multiple currency support to donation forms.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_multi_currency_menu() {
  $items = array();
  $items['admin/config/system/currencies'] = array(
    'title' => 'Manage currencies',
    'description' => 'Define the default currencies that will be added to new donation forms.',
    'page callback' => 'fundraiser_multi_currency_admin',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/list'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'List currencies',
    'page callback' => 'fundraiser_multi_currency_admin',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/add'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Add currency',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_multi_currency_add'),
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Edit currency',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_multi_currency_edit'),
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  $items['admin/config/system/currencies/delete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete currency',
    'page callback' => 'fundraiser_multi_currency_delete',
    'file' => 'fundraiser_multi_currency.admin.inc',
    'access arguments' => array('manage currencies'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_multi_currency_permission() {
  return array(
    'manage currencies' => array(
      'title' => t('manage currencies'),
      'description' => t('Manage available currancies for donation forms.'),
    ),
  );
}

/**
 * Implements hook_fundraiser_field_info().
 */
function fundraiser_multi_currency_fundraiser_field_info() {
  $fields = array();
  $fields['donation']['currency'] = array(
    '#title' => 'Currency',
    '#type' => 'hidden',
    '#required' => 1,
    '#create_callback' => '_fundraiser_multi_currency_field_create',
  );
  return $fields;
}

/**
 * Creation callback for the currency field.
 *
 * Set the value to the setting in the donation form.
 */
function _fundraiser_multi_currency_field_create($fundraiser, $field) {
  // Set a default currancy per the fundraiser settings.
  if (isset($fundraiser->default_currency)) {
    $field['#value'] = $fundraiser->default_currency;
  }
  // If they chose to allow users to pick their currency,
  // add a dropdown for currencies.
  if (isset($fundraiser->multiple_currency_support) && ($fundraiser->multiple_currency_support == 'show')) {
    // Get a list of currencies to use as defaults.
    $currencies = fundraiser_multi_currency_get_currencies();
    $default_currencies = '';
    foreach ($currencies as $code => $row) {
      $default_currencies .= $code . '|' . $row['name'] . "\n";
    }
    $default_currencies = trim($default_currencies);
    $field['#type'] = 'select';
    $field['#extra']['items'] = $default_currencies;
    $field['#extra']['multiple'] = 0;
    $field['#extra']['aslist'] = 'Y';
  }
  return $field;
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_multi_currency_fundraiser_donation_create($donation) {
  // Add the currency information to the data for donation processing.
  if (isset($donation->donation['currency'])) {
    $donation->data['currency'] = $donation->donation['currency'];
  }
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 *
 * Add the currency information to the donation array.
 */
function fundraiser_multi_currency_fundraiser_donation_get_donation($donation) {
  if (isset($donation->data['currency'])) {
    $donation->donation['currency'] = $donation->data['currency'];
  }
  elseif (isset($donation->currency)) {
    $donation->donation['currency'] = $donation->data['currency'] = $donation->currency;
  }
}

/**
 * Retrieves and formats the currencies for a form select element.
 *
 * @return array
 *   The options array for a select form element.
 */
function fundraiser_multi_currency_get_currency_options() {
  $options = array();

  foreach (fundraiser_multi_currency_get_currencies() as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array('@code' => $currency['code'], '!name' => $currency['name']));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }

  return $options;
}

/**
 * Database function, get an array of the available currencies.
 *
 * @return array
 *   An array of associative arrays, one per currency, keyed by
 *   the currency code.
 */
function fundraiser_multi_currency_get_currencies() {
  // Cache the currency list locally.
  static $currencies = array();
  if (empty($currencies)) {
    // @todo Consider integrating with commerce_currencies.
    $currencies = db_query("SELECT currency_id, symbol, code, name FROM {fundraiser_currencies}")
      ->fetchAllAssoc('code', PDO::FETCH_ASSOC);
  }
  return $currencies;
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_create_currancy($record) {
  $record = (array) $record;
  $record_data = FALSE;
  if (isset($record['currency_id'])) {
    $record_data = fundraiser_multi_currency_get_currancy($record['currency_id']);
  }
  if (!$record_data) {
    drupal_write_record('fundraiser_currencies', $record);
  }
  else {
    fundraiser_multi_currency_update_currancy($record);
  }
}

/**
 * Retrieve a currency by its code into an array.
 *
 * @param string $currency_code
 *   The code that represents the currency. For example, 'USD'.
 *
 * @return mixed
 *   An associative array with currency data.
 */
function fundraiser_multi_currency_load_currancy_by_code($currency_code) {
  return db_query('SELECT * FROM {fundraiser_currencies} WHERE code = :currency_code',
    array(':currency_code' => $currency_code))->fetchAssoc();
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_get_currancy($currency_id) {
  return db_query('SELECT * FROM {fundraiser_currencies} WHERE currency_id = :currency_id',
    array(':currency_id' => $currency_id))->fetchObject();
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_update_currancy($record) {
  $record = (array) $record;
  $record_data = FALSE;
  if (isset($record['currency_id'])) {
    $record_data = fundraiser_multi_currency_get_currancy($record['currency_id']);
  }
  if (!$record_data) {
    fundraiser_multi_currency_create_currancy($record);
  }
  else {
    $record = array_merge((array) $record_data, $record);
    drupal_write_record('fundraiser_currencies', $record, 'currency_id');
  }
}

/**
 * CRUD style database function.
 */
function fundraiser_multi_currency_delete_currancy($currency_id) {
  db_delete('fundraiser_currencies')->condition('currency_id', $currency_id)->execute();
}

/**
 * Implements hook_node_type_insert().
 *
 * Adds the currency field if the new content type is a donation type.
 */
function fundraiser_multi_currency_node_type_insert($type) {
  if (fundraiser_is_donation_type($type->type)) {
    fundraiser_multi_currency_add_currency_field($type->type);
  }
}

/**
 * Implements hook_node_type_update().
 *
 * Adds the currency field if the updated content type is a donation type.
 */
function fundraiser_multi_currency_node_type_update($type) {
  if (fundraiser_is_donation_type($type->type)) {
    fundraiser_multi_currency_add_currency_field($type->type);
  }
}

/**
 * Adds the currency field and instance to the given content type.
 *
 * Checks if the field and instance already exists and leaves them alone if so.
 *
 * @param string $bundle_name
 *   The content type name to add the field to.
 */
function fundraiser_multi_currency_add_currency_field($bundle_name) {
  $config = fundraiser_multi_currency_currency_field_definition();
  $field_name = $config['field_name'];
  $entity_type = 'node';

  if (!field_info_field($field_name)) {
    field_create_field($config);
  }

  if (!field_info_instance($entity_type, $field_name, $bundle_name)) {
    $instance = fundraiser_multi_currency_currency_field_instance($bundle_name);
    field_create_instance($instance);
  }

}

/**
 * The currency field definition.
 *
 * @return array
 *   The field definition for the currency fundraiser field.
 */
function fundraiser_multi_currency_currency_field_definition() {
  return array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'allowed_values_function' => 'fundraiser_multi_currency_get_currency_options',
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_field_default_currency' => array(
              'value' => 'field_fundraiser_currency_value',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_field_default_currency' => array(
              'value' => 'field_fundraiser_currency_value',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'code' => array(
        'table' => 'fundraiser_currencies',
        'columns' => array('code' => 'value'),
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
    ),
    'field_name' => 'field_fundraiser_currency',
    'type' => 'list_text',
    'module' => 'list',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
  );
}

/**
 * Provides the currency field instance configuration.
 *
 * @param string $bundle_name
 *   The name of the bundle to add the instance to.
 *
 * @return array
 *   The currency field instance array with included bundle name.
 */
function fundraiser_multi_currency_currency_field_instance($bundle_name) {
  return array(
    'label' => 'Default Currency',
    'widget' => array(
      'weight' => '2',
      'type' => 'options_select',
      'module' => 'options',
      'active' => 1,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 4,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => 'The default currency.',
    'default_value' => array(
      array('value' => 'USD'),
    ),
    'field_name' => 'field_fundraiser_currency',
    'entity_type' => 'node',
    'bundle' => $bundle_name,
    'deleted' => '0',
  );
}

/**
 * Implements hook_fundraiser_donation_form().
 *
 * Alters the display of known currency symbols.
 */
function fundraiser_multi_currency_fundraiser_donation_form($form, $form_state) {
  $node = $form['#node'];
  if (fundraiser_is_donation_type($node->type)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $currency_code = $wrapper->field_fundraiser_currency->value();

    if (!empty($currency_code)) {

      $currency = commerce_currency_load($currency_code);
      if (!empty($currency)) {
        $symbol = $currency['symbol'];

        // Edit the other amount field directly using its reference.
        $other_amount_field = &$form['submitted']['donation']['other_amount'];
        if (isset($other_amount_field) && !empty($other_amount_field)) {
          $other_amount_field['#field_prefix'] = $symbol;
          if (isset($other_amount_field['#description'])) {
            $other_amount_field['#description'] = str_replace('Minimum payment $',
              'Minimum payment ' . $symbol,
              $other_amount_field['#description']);
          }
        }

        // Edit the ask amount field directly using its reference.
        $amount_field = &$form['submitted']['donation']['amount'];
        if (isset($amount_field) && !empty($amount_field)) {
          if (isset($amount_field['#options'])) {
            foreach ($amount_field['#options'] as $val => $label) {
              $amount_field['#options'][$val] = str_replace('$', $symbol, $label);
            }
          }
          else {
            $amount_field['#field_prefix'] = $symbol;
          }
        }

        // Change the currency.
        $form['#attached']['js'][] = array(
          'data' => array('fundraiser' => array('currency' => $currency)),
          'type' => 'setting',
        );

      }
    }
  }

  return $form;
}
