<?php

// Commerce does not automatically come with a UI for orders, we'll handle that later
// Since all orders are Views based, we can add some default views here to replicate the interface
// we want, and map data back to webform nodes via Donation.

// Commerce mail rules can / should be turned off, so no need to implement hook_mail_alter().

// TODO locate equilv. of hook_uc_order.
// To delete the donation on order delete
// To add any additional bits as needed on order load.

/**
 * Implements hook_commerce_line_item_type_info().
 */
function fundraiser_commerce_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['donation'] = array(
    'type' => 'donation', 
    'name' => t('Donation'), 
    'description' => t('A donation charge, no product referenced here just the amount.'), 
    'product' => FALSE, 
    'add_form_submit_value' => t('Add donation'), 
    'base' => 'fundraiser_commerce_line_item',
  );
  return $line_item_types;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function fundraiser_commerce_commerce_order_status_info() {
  $fundraiser_statuses = array(
    'pending_future_payment' => array(
      'name' => 'pending_future_payment',
      'title' => 'Pending Future Payment',
      'state' => 'pending',
    ),
    'failed' => array(
      'name' => 'failed',
      'title' => 'Failed',
      'state' => 'canceled',
    ),
    'refunded' => array(
      'name' => 'refunded',
      'title' => 'Refunded',
      'state' => 'completed',
    ),
    'partially_refunded' => array(
      'name' => 'partially_refunded',
      'title' => 'Partially Refunded',
      'state' => 'completed',
    ),
  );
  return $fundraiser_statuses;
}

/**
 * Implements hook_fundraiser_gateway_info().
 */
function fundraiser_commerce_fundraiser_gateway_info() {
  /// Load all the methods available.
  $methods->payment_methods = array();
  rules_invoke_all('commerce_payment_methods', $methods);
  $fundraiser_gateways = array();
  foreach ($methods->payment_methods as $id => $info) {
    $method_instance = commerce_payment_method_instance_load($id); // From commerce_payment.module.
    $this_gateway['id'] = $method_instance['instance_id']; // Had to increase size of gateway columns to 255
    $this_gateway['module'] = 'fundraiser_commerce';
    $this_gateway['module_name'] = t('Commerce');
    $this_gateway['title'] = $method_instance['title'];
    $this_gateway['description'] = $method_instance['description'];
    $this_gateway['charge_function'] = $method_instance['callbacks']['submit_form_submit'];
    $this_gateway['refund_function'] = $method_instance['callbacks']['submit_form_submit'];
    $this_gateway['gateway_details'] = $method_instance;
    $fundraiser_gateways[] = $this_gateway; 
  }
  return $fundraiser_gateways;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 */
function fundraiser_commerce_fundraiser_field_info_alter(&$fields) {
  // Add overrides to country and zone information, derived from uc values.
  // From commerce defaults. 840 = US, 124 = CA.
  // TODO review this code, perhaps we can push it further up into fundraiser proper.
  // That would also avoid the wierd ajaxy stuff we have to do to get refernece back working.
  $countries = fundraiser_commerce_get_countries();
  $include_all_countries = 1;//variable_get('fundraiser_all_countries', 0);
  $default_available = array('US', 'CA');
  $options = '';
  if ($include_all_countries) {
    foreach ($countries->countries as $country_id => $country) {
      $options .= $country->iso . '|' . $country->country_name . "\n";
    }
  }
  else {
    foreach ($countries->countries as $country_id => $country) {
      if (in_array($country->iso, $default_available)) {
        $options .= $country->iso . '|' . $country->country_name . "\n";
      }
    }
  }
  $fields['billing_information']['country'] = array(
    '#title' => t('Country'),
    '#type' => 'select',
    '#required' => 1,
    '#extra' => array(
      'description' => '',
      'items' => $options,
      'multiple' => 0,
      'aslist' => 1,
    ),
    '#display_callback' => '_fundraiser_commerce_country_field_display',
  );
  $options = '';
  foreach ($countries->zones as $zone_id => $zone) {
    $options .= $zone->iso . '|' . $zone->zone_name . "\n";
  }
  $fields['billing_information']['state'] = array(
    '#title' => t('State/Province'),
    '#type' => 'select',
    '#required' => 1,
    '#extra' => array(
      'description' => '',
      'items' => $options,
      'multiple' => 0,
      'aslist' => 1,
    ),
    '#display_callback' => '_fundraiser_commerce_zone_field_display',
  );
  // Add our own validation routines to the billing fields for credit cards.
  $fields['credit_card_information']['card_number']['#validate_callback'] = '_fundraiser_commerce_card_number_field_validate';
  $fields['credit_card_information']['card_cvv']['#validate_callback'] = '_fundraiser_commerce_card_cvv_field_validate';
  $fields['credit_card_information']['card_expiration_year']['#validate_callback'] = '_fundraiser_commerce_card_expiration_year_field_validate';
  return $fields;
}

/**
 * Validation callback for field card_number.
 */
function _fundraiser_commerce_card_number_field_validate($form, $form_state, $submission_fields, $value) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card'); // Include the file with the validation info.
  $valid = commerce_payment_validate_credit_card_number($value);
  if (!$valid || !ctype_digit($value) || drupal_strlen($value) < 10) {
    return t('You have entered an invalid credit card number.');
  }
}

/**
 * Validation callback for field card_cvv.
 */
function _fundraiser_commerce_card_cvv_field_validate($form, $form_state, $submission_fields, $value) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card'); // Include the file with the validation info.
  $number = $submission_fields['card_number'];
  $valid = commerce_payment_validate_credit_card_security_code($number, $value);
  if (!$valid && !empty($value)) {
    return t('You have entered an invalid CVV number.');
  }
}

/**
 * Validation callback for field card_expiration_month, card_expiration_year.
 */
function _fundraiser_commerce_card_expiration_year_field_validate($form, $form_state, $submission_fields, $value) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card'); // Include the file with the validation info.
  $cc_expiration_month = $submission_fields['card_expiration_month'];
  $cc_expiration_year = $submission_fields['card_expiration_year'];
  $valid = commerce_payment_validate_credit_card_exp_date($cc_expiration_month, $cc_expiration_year);
  if (!$valid && !empty($cc_expiration_month) && !empty($cc_expiration_year)) {
    return t('The credit card you entered has expired.');
  }
}

/**
 * Display callback for field country. Set the defaults if the country has it.
 */
function _fundraiser_commerce_country_field_display($form, $form_state, $field) {
  // Flatten form state array so we can get the user selection easier.
  $fields = _fundraiser_commerce_submission_flatten($form_state);
  // Set the default country if form_state has it.
  if (array_key_exists('country', $fields)) {
    $field['#default_value'] = $fields['country'];
  }
  $field['#ajax'] = array(
    'callback' => '_fundraiser_commerce_client_state_ajax_submit',
    'wrapper' => 'zone-select-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
  return $field;
}

/**
 * Helper function, flatten webforms submitted tree into an array mapping fields to values.
 */
function _fundraiser_commerce_submission_flatten($submit_tree) {
  $flat_array = array();
  foreach ($submit_tree as $key => $value) {
    if (!is_array($submit_tree[$key])) {
      $flat_array[$key] = $value;
    }
    else {
      $flat_array = array_merge($flat_array, _fundraiser_commerce_submission_flatten($value));
    }
  }
  return $flat_array;
}

/**
 * AJAX callback for dealing with changes to the donation form.
 */
function _fundraiser_commerce_client_state_ajax_submit($form, $form_state, &$mess = '') {
  // Get the form item we want to render.
  return fundraiser_get_form_field($form['#calling_module'], $form, 'state');
}

/**
 * Display callback for field zone, to set the default based on the country given.
 */
function _fundraiser_commerce_zone_field_display($form, $form_state, $field) {
  // Get countries.
  $countries = fundraiser_commerce_get_countries();
  // Flatten form state array so we can get the user selection easier.
  $fields = _fundraiser_commerce_submission_flatten($form_state);
  // Country/state dependant drop down code
  $available_zones = isset($countries->zones) ? $countries->zones : array();
  // Filter the available zones by the set country.
  if (array_key_exists('country', $fields)) {
    $country_id = $fields['country'];
    // Filter options down to just the zones available for this country.
    if (isset($countries->countries[ $country_id ])) {
      $available_zones = $countries->countries[ $country_id ]->zones;
    }
  }
  else {
    // Provide a default based on the form values.
    $country_field = fundraiser_get_form_field($form['#calling_module'], $form, 'country');
    // Filter options down to just the zones available for this country.
    if (isset($country_field['#default_value'])) {
      $default = $country_field['#default_value'];
      $default = $default;
      if (isset($countries->countries[ $default ])) {
        $available_zones = $countries->countries[ $default ]->zones;
      }
    }
  }
  // Given available zones, filter the dropdown to match.
  if (!empty($available_zones)) {
    $new_zone_options = array();
    foreach ($available_zones as $zone_id => $zone) {
      $new_zone_options[ $zone->iso ] = $zone->zone_name;
    }
    $field['#options'] = $new_zone_options;
  }
  else {
    // If there are no zones to match, then fall back on a non-select solution.
    $field['#type'] = 'textfield';
  }
  $field['#prefix'] = '<div id="zone-select-wrapper">';
  $field['#suffix'] = '</div>';
  return $field;
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 */
function fundraiser_commerce_fundraiser_donation_get_donation($donation) {
  // Load the order object, line items and profile.
  $order = commerce_order_load($donation->did);
  // Data from order.
  $donation->donation['mail'] = isset($order->mail) ? $order->mail : '';
  $donation->donation['amount'] = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];

  // Data from profile.
  if (isset($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'])) {
    $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
    $map = array(
      'first_name' => 'first_name',
      'last_name' => 'last_name',
      'address' => 'thoroughfare',
      'address_line_2' => 'premise',
      'city' => 'locality',
      'country' => 'country',
      'state' => 'administrative_area',
      'zip' => 'postal_code',
    );
    $field_info = _fundraiser_get_field_keys();
    foreach ($field_info as $field_name) {
      if (isset($map[$field_name])) {
        $order_name = $map[$field_name];
        $donation->donation[$field_name] = isset($profile->commerce_customer_address[LANGUAGE_NONE][0][$order_name]) ?
          $profile->commerce_customer_address[LANGUAGE_NONE][0][$order_name] : '';
      }
    }
  }

  // Time of last update / charge.
  $donation->last_changed = $order->changed;

  // Add the order status data.
  $donation->status = $donation->status_label = isset($order->status) ? $order->status : 'unknown';
  if (!empty($order->status)) {
    $donation->status_label = _fundraiser_commerce_get_label_by_status($order->status);
    $donation->status_charged = _fundraiser_commerce_get_charged_by_status($order->status) ? 1 : 0;
  }

  // Gather CC information. NOT CURRENTLY AVAILABLE. This data is not stored anywhere in Commerce.
  $donation->donation['card_number'] = ''; // $order->payment_details['cc_number'];
  $donation->donation['card_expiration_month'] = ''; // $order->payment_details['cc_exp_month'];
  $donation->donation['card_expiration_year'] = ''; // $order->payment_details['cc_exp_year'];
  $donation->donation['card_cvv'] =''; // isset($order->payment_details['card_cvv']) ? $order->payment_details['card_cvv'] : '';
  $donation->donation['cc_type'] =''; // $order->payment_details['cc_type'];

  // Add specific order data. NOT CURRENTLY AVAILABLE. This data is not stored anywhere in Commerce.
  $donation->data = isset($order->data) ? $order->data : array();
  $data['txn_type'] = 'auth_capture'; // Auth capture if no transaction reference exists.
  //if (isset($order->data['cc_txns']['references'])) {
  //  $ref_id = array_shift(array_keys($order->data['cc_txns']['references']));
  //  $donation->donation['reference_id'] = $ref_id;
  //  $data = array(
  //    'txn_type' => 'reference_txn', // Reference if it does.
  //    'ref_id' => $ref_id,
  //  );
  //}
  $donation->data = array_merge($donation->data, $data);
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_commerce_fundraiser_donation_create($donation) {
  // Get basic information from the donation node.
  $user = $donation->user;
  $node = $donation->node;
  // Pick out the values we need to generate an order.
  if ($donation->donation['amount'] == 'other') {
    $donation->donation['amount'] = preg_replace('/[^\d\.]/i', '', $donation->donation['other_amount']);
  }
  // Determine quantity and data from donation values.
  $quantity = isset($donation->donation['quantity']) && !empty($donation->donation['quantity']) ? $donation->donation['quantity'] : 1;

  // Create new order.
  $order = commerce_order_new($user->uid, 'pending', 'commerce_order');
  commerce_order_save($order);
  $order->email = $donation->donation['mail'];

  // Create a line item for this order. Contains order amount info.
  $line_item = commerce_line_item_new('donation', $order->order_id);
  $line_item->line_item_label = t('Donation');
  $line_item->quantity = $quantity;
  $line_item->commerce_unit_price[LANGUAGE_NONE][0] = array(
    'amount' => $donation->donation['amount'] * 100, // Values are stored as int, so add 00 for decimal places.
    'currency_code' => 'USD', // TODO make this changable later.
  );
  // Make sure the line item will be included in the update for order total.
  $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data'] = commerce_price_component_add(
    $line_item->commerce_unit_price[LANGUAGE_NONE][0],
    'base_price',
    array(
      'amount' => $donation->donation['amount'] * 100,
      'currency_code' => 'USD',
      'data' => array(),
    ),
    TRUE
  );
  commerce_line_item_save($line_item);
  $order->commerce_line_items[LANGUAGE_NONE][0] = array(
    'line_item_id' => array($line_item->line_item_id),
  );

  // Save the customer information. Contains billing info.
  // Look up the profile by user id or email, then if not found make a new profile.
  $found = commerce_customer_profile_load_multiple(array(), array('uid' => $user->uid));
  //TODO if found, then use this profile, else use the other.
  $profile = commerce_customer_profile_new('billing', $user->uid); // Billing type comes with Commerce by default.
  $profile->commerce_customer_address[LANGUAGE_NONE][0] = addressfield_default_values();
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['country'] = $donation->donation['country'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'] = $donation->donation['first_name'] . ' ' . $donation->donation['last_name'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['first_name'] = $donation->donation['first_name'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['last_name'] = $donation->donation['last_name'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'] = $donation->donation['state'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'] = $donation->donation['address'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['premise'] = $donation->donation['address_line_2'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['locality'] = $donation->donation['city'];
  $profile->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'] = $donation->donation['zip'];
  commerce_customer_profile_save($profile);
  $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $profile->profile_id;

  // Transactions only record interactions, card data is explicitly not saved. (what in fundraiser is a txn_id)
  // So the card data and information gets used during donation processing only.
  // Then transactions added / updated, and card data may be stored in scrubbed format for _get() elsewhere.
  // We will need to wrap or tweak form submissions in each implemented auth.

  // Save the order again to update its line item reference field.
  commerce_order_save($order);
  // Set the order id to the donation to carry forward.
  $donation->did = $order->order_id;
}

/**
 * Implements hook_fundraiser_donation_process().
 * Could be called immediately after creation, or recurring months later.
 * So could use auth_capture, or could use a reference_txn.
 */
function fundraiser_commerce_fundraiser_donation_process($donation) {
  /**
    Drupal Commerce doesn’t maintain Ubercart’s separation of payment methods from payment gateways but rather
    defines payment methods as any single way of collecting payment from a customer per payment provider. This
    means there will not be a single Credit Card payment method with plugin modules for CyberSource, Authorize.Net,
    etc. but a separate CC payment method for each payment provider with a common base set of code for building
    credit card forms and handling the data securely.
    See: http://dcorgdev.devcloud.acquia-sites.com/developer-guide/core-architecture/info-hooks/payment-info-hooks
    Looking over this, it looks like the expectation is that all payment processors execute through a callback
    into a form submission from a Commerce pane. This will need to be mirrored in our code.
   */

  /*
  // We may need to use http://drupal.org/project/commerce_cardonfile
  // commerce_cardonfile_data_save

  // TODO:
  // All transactions do is record events and interactions on this order during charging.
  // So we don't actually create orders here in prep for charging later.
  // Though we need to to support recurring and sustainers. Hm.
  // Transaction stuff WIIL need to be wrapped.
  $transaction = commerce_payment_transaction_new($node->gateway, $order->order_id);
  $transaction->amount = $donation->donation['amount'] * 100;
  $transaction->currency_code = 'USD';
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);
  commerce_payment_commerce_payment_transaction_insert($transaction)


      // Check the order balance and invoke the event.
      $balance = commerce_payment_order_balance($order);

      if ($balance['amount'] <= 0) {
        // Invoke the event including a hook of the same name.
        rules_invoke_all('commerce_payment_order_paid_in_full', $order, $transaction);

        // Update the order's data array to indicate this just happened.
        $order->data['commerce_payment_order_paid_in_full_invoked'] = TRUE;

        // Save the updated order.
        commerce_order_save($order);
      }
  Set card propertiers.
  // Card properties.
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_type' => _fundraiser_commerce_get_cc_type($donation->donation['card_number']),
    'cc_owner' => '',
    'cc_number' => $donation->donation['card_number'],
    'cc_start_month' => '',
    'cc_start_year' => '',
    'cc_exp_month' => $donation->donation['card_expiration_month'],
    'cc_exp_year' => $donation->donation['card_expiration_year'],
    'cc_issue' => '',
    'cc_cvv' => isset($donation->donation['card_cvv']) ? $donation->donation['card_cvv'] : '',
    // cc_cvv is unset on order save for PCI compliance.
    'cc_bank' => '',
  );


   */
/*
  if (!isset($available_countries)) {
    $available_countries = _addressfield_country_options_list();
  }
*/
  // Grab the gateway configuration from fundraisers data.
  $info = _fundraiser_get_donation_gateway($donation->did);
  // Check for the charge function to be defined.
  //dpm($donation, 'donation');
  //dpm($info, 'info');
  //$charge_function = isset($info['charge_function']) ? $info['charge_function'] : '';

  /*
  see commerce_payment_commerce_payment_transaction_insert($transaction)
      // Check the order balance and invoke the event.
      $balance = commerce_payment_order_balance($order);*/
}

/**
 * Implements hook_fundraiser_donation_update().
 */
function fundraiser_commerce_fundraiser_donation_update($donation) {
  // Get the original order.
  $order = commerce_order_load($donation->did);
  // Updte some things based on the new data submitted with the donation.
  // This means updating customer profile for the most part.
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_commerce_fundraiser_donation_success($donation) {
  // Mark as complete.
  _fundraiser_commerce_update_order_status('payment_received', $donation->did);
  $donation->status_label = _fundraiser_commerce_get_label_by_status('payment_received');
  $donation->status_charged = _fundraiser_commerce_get_charged_by_status('payment_received');
}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_commerce_fundraiser_donation_decline($donation) {
  // Mark the sale in commerce as failed.
  _fundraiser_commerce_update_order_status('failed', $donation->did);
  $donation->status_label = _fundraiser_commerce_get_label_by_status('failed');
  $donation->status_charged = _fundraiser_commerce_get_charged_by_status('failed');
}

/**
 * Implements hook_fundraiser_donation_exception().
 */
function fundraiser_commerce_fundraiser_donation_exception($donation) {
  return fundraiser_commerce_fundraiser_donation_decline($donation);
}

/**
 * Implements hook_fundraiser_donation_cancel().
 */
function fundraiser_commerce_fundraiser_donation_cancel($donation) {
  // Mark the sale in commerce as canceled.
  _fundraiser_commerce_update_order_status('canceled', $donation->did);
  $donation->status_label = _fundraiser_commerce_get_label_by_status('canceled');
  $donation->status_charged = _fundraiser_commerce_get_charged_by_status('canceled');
}

/**
 * Implements hook_fundraiser_donation_delete().
 */
function fundraiser_commerce_fundraiser_donation_delete($donation) {
  // Mark the sale in commerce as canceled.
  _fundraiser_commerce_update_order_status('canceled', $donation->did);
  $donation->status_label = _fundraiser_commerce_get_label_by_status('canceled');
  $donation->status_charged = _fundraiser_commerce_get_charged_by_status('canceled');
}

/**
 * Implements hook_fundraiser_donation_refund().
 */
function fundraiser_commerce_fundraiser_donation_refund($donation) {
  fundraiser_commerce_fundraiser_donation_process($donation);
}

/**
 * Helper function, given a card number return likely type.
 */
function _fundraiser_commerce_get_cc_type($cardnumber) {
  $cardtype = 'UNKNOWN';
  $len = drupal_strlen($cardnumber);
  if ( $len == 15 && drupal_substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = 'amex';
  }
  elseif ( $len == 16 && drupal_substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = 'discover';
  }
  elseif ( $len == 16 && drupal_substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = 'mc';
  }
  elseif ( ($len == 16 || $len == 13) && drupal_substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = 'visa';
  }
  return ( $cardtype );
}

/**
 * Helper function, gather commerces country information into a central location.
 */
function fundraiser_commerce_get_countries() {
  $countries = array();
  $zones = array();
  // Gather an array of countries.
  $found_countries = _fundraiser_commerce_get_countries();
  foreach ($found_countries as $found_country) {
    // First load up id, name, iso code 2, iso code 3, and version from commerce.
    $countries[$found_country->country_id] = $found_country;
    $countries[$found_country->country_id]->zones = array();
    $found_zones = _fundraiser_commerce_get_zone_by_country($found_country->country_id);
    foreach ($found_zones as $found_zone) {
      // For each zone load up, zone_id, zone country_id, zone, code, zone_name.
      // Store in the country and zone arrays.
      $countries[$found_country->country_id]->zones[$found_zone->zone_id] = $found_zone;
      $zones[$found_zone->zone_id] = $found_zone;
    }
  }
  $return_data->countries = $countries;
  $return_data->zones = $zones;
  return $return_data;
}

/**
 * Helper function, update order status on a order.
 */
function _fundraiser_commerce_update_order_status($status, $order_id) {
  // Commerce order provides four statuses: canceled, pending, processing, completed.
  // We provide (or alter the names of) more: pending_future_payment, failed, refunded, partially_refunded
  $order = commerce_order_load($order_id);
  commerce_order_status_update($order, $status, TRUE);
}

/**
 * Helper function, look in country table for country info.
 */
function _fundraiser_commerce_get_countries() {
  // Commerce does not store countries in a database, it relies instead on locale.inc
  $countries = array();
  // Necessary for country_get_list().
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  $drupal_countries = country_get_list();
  foreach ($drupal_countries as $iso => $human_name) {
    $country['country_id'] = $iso;
    $country['country_name'] = $human_name;
    $country['iso'] = $iso;
    $countries[] = (object) $country;
  }
  return $countries;
}

/**
 * DB function, look in zone table for zone info.
 */
function _fundraiser_commerce_get_zone_by_country($country_id) {
  // Commerce does not store countries in a database, it relies instead on locale.inc
  // And a hard coded addressfield form widget for zone level information.
  // In order to retrieve this information from Commerce, we need to call the addressfield widget
  // And pull it from the form. The results will be different for each zone, and we can't grab them
  // all at once. So thankfully we don't need to the way the rest of the system is designed.
  // Some countries will have states, and do NOT have them listed here. UC has a more complete list.
  // So we will need to leave those available for users to fill in as blanks.
  module_load_include('inc', 'addressfield', 'plugins/format/address');
  $address['country'] = $country_id;
  addressfield_format_address_generate($form, $address, array('mode' => '')); // Data is loaded into $form
  $zones = array();
  if (isset($form['locality_block']['administrative_area']['#options'])) {
    foreach ($form['locality_block']['administrative_area']['#options'] as $iso => $human_name) {
      $zone['zone_id'] = $iso;
      $zone['country_id'] = $country_id;
      $zone['zone_name'] = $human_name;
      $zone['iso'] = $iso;
      $zones[] = (object) $zone;
    }
  }
  return $zones;
}

/**
 * Helper function. Translate status to status label.
 */
function _fundraiser_commerce_get_label_by_status($status) {
  // Grab the human readable label for the status.
  commerce_order_status_get_title($status); // The machine name of the declares state, we need the human readable label.
}

/**
 * Helper function, determine if given this status the donation has been charged already.
 */
function _fundraiser_commerce_get_charged_by_status($status) {
  $chargable_states = array('pending'); // Commerce order provides three states: canceled, pending, completed.
  $status = commerce_order_status_load($status);
  if (in_array($status['state'], $chargable_states)) {
    return FALSE; // If the donation is still able to be charged, say it hasn't been.
  }
  return TRUE;
}

/**
 * Implements hook_fundraiser_get_credit_encryption_path().
 * This is called by modules that need to check for processing availablity outside of normal.
 * Such as sustainer.

function fundraiser_commerce_fundraiser_get_credit_encryption_path() {
  return variable_get('uc_credit_encryption_path', t('Not configured, see below.'));
}
 */