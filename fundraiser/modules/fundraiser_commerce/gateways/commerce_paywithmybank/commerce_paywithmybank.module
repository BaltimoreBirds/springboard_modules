<?php

/**
 * Implements hook_menu()
 */
function commerce_paywithmybank_menu() {
  $items = array();
  $items['paywithmybank/return'] = array(
    'title' => 'PayWithMyBank Payment Callback',
    'page callback' => 'commerce_paywithmybank_return',
    'access callback' => 'commerce_paywithmybank_return_access',
    'type' => MENU_CALLBACK,
  );

  $items['paywithmybank/notify'] = array(
    'title' => 'PayWithMyBank Notify Callback',
    'page callback' => 'commerce_paywithmybank_notify',
    'access callback' => 'commerce_paywithmybank_notify_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paywithmybank_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_paywithmybank_bank'] = array(
    'base' => 'commerce_paywithmybank_bank',
    'title' => t('PayWithMyBank Bank Account'),
    'short_title' => t('PayWithMyBank'),
    'display_title' => t('Bank Account'),
    'description' => t('Integrates PayWithMyBank for Commerce transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_paywithmybank_bank_cardonfile_charge',
      'update callback' => 'commerce_paywithmybank_bank_cardonfile_update',
      'delete callback' => 'commerce_paywithmybank_bank_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_paywithmybank_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  // Remove any payment form fields; payment is handled by PayWithMyBank modal.
  if (isset($form_state['values']['commerce_payment']['payment_method'])) {
    $payment_method_id = $form_state['values']['commerce_payment']['payment_method'];
  }
  elseif (isset($form['commerce_payment']['payment_method'])) {
    $payment_method_id = $form['commerce_payment']['payment_method']['#default_value'];
  }

  if (substr($payment_method_id, 0, 27) == 'commerce_paywithmybank_bank') {
    unset($form['commerce_payment']['payment_details']['credit_card']);
    unset($form['commerce_payment']['payment_details']['cardonfile_instance_default']);
  }
}

/**
 * Implements hook_fundraiser_gateway_info_alter()
 */
function commerce_paywithmybank_fundraiser_gateway_info_alter(&$gateways) {
  foreach ($gateways as $id => $info) {
    $id_parts = explode('|', $id);

    if ($id_parts[0] == 'commerce_paywithmybank_bank') {
      // Allow off-site processing for PayWithMyBank gateway only when the
      // gateway is loaded during the initial donation form submission.
      // Disable off-site processing in all other instances.
      // This is because PayWithMyBank is technically an on-site gateway that
      // requires an initial off-site setup.
      $backtrace = debug_backtrace();
      foreach ($backtrace as $trace) {
        if ($trace['function'] == 'fundraiser_webform_fundraiser_donation_validate') {
          return;
        }
      }

      $gateways[$id]['offsite_processing'] = array();
    }
  }
}

/**
 * Payment method callback: settings form.
 */
function commerce_paywithmybank_bank_settings_form($settings = NULL) {
  $form = array();
  $form['commerce_paywithmybank_settings_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_merchant_id']) ? $settings['commerce_paywithmybank_settings_merchant_id'] : '',
  );

  $form['commerce_paywithmybank_settings_access_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Access ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_access_id']) ? $settings['commerce_paywithmybank_settings_access_id'] : '',
  );

  $form['commerce_paywithmybank_settings_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Access Key'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_access_key']) ? $settings['commerce_paywithmybank_settings_access_key'] : '',
  );

  $form['commerce_paywithmybank_settings_sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable sandbox mode',
    '#default_value' => isset($settings['commerce_paywithmybank_settings_sandbox']) ? $settings['commerce_paywithmybank_settings_sandbox'] : FALSE,
  );

  $form['commerce_paywithmybank_settings_log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => isset($settings['commerce_paywithmybank_settings_log']) ? $settings['commerce_paywithmybank_settings_log'] : array('request' => '0', 'response' => '0'),
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_paywithmybank_bank_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_paywithmybank', 'includes/commerce_paywithmybank.forms');

  $form = commerce_paywithmybank_checkout_form($payment_method, $order);
  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_paywithmybank_bank_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_paywithmybank_bank_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  
}

function commerce_paywithmybank_bank_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  
}

function commerce_paywithmybank_bank_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  
}

function commerce_paywithmybank_bank_cardonfile_delete() {
  
}

/**
 * Callback for processing payment information sent by PayWithMyBank.
 */
function commerce_paywithmybank_return() {
  $transaction_id = filter_input(INPUT_GET, 'transactionId');

  $payment_method = commerce_payment_method_instance_load('commerce_paywithmybank_bank|commerce_payment_commerce_paywithmybank_bank');

  $api = commerce_paywithmybank_get_api($payment_method);
  $api_transaction = $api->getTransaction($transaction_id);

  $order = commerce_order_load($api_transaction->merchantReference);

  $success = ($api_transaction->status == PayWithMyBank::TRANSACTION_STATUS_AUTHORIZED);

  if ($success) {
    commerce_checkout_complete($order);
  }
  else {
    commerce_order_save($order);
  }

  // Forward user to the appropriate step in the order process.
  $target_path = 'checkout/' . $order->order_id;
  $target_path .= ($success) ? '/complete' : '/review';

  drupal_goto($target_path);
}

/**
 * Access callback for processing payment information sent by PayWithMyBank.
 */
function commerce_paywithmybank_return_access() {
  // Reject access if request from PayWithMyBank is invalid.
  $transaction_id = filter_input(INPUT_GET, 'transactionId');
  $request_signature = filter_input(INPUT_GET, 'requestSignature');

  return commerce_paywithmybank_validate_request($transaction_id, $request_signature);
}

/**
 * Callback for processing notification information sent by PayWithMyBank.
 *
 * @see https://paywithmybank.com/docs/api-ref.html#notification
 */
function commerce_paywithmybank_notify() {
  // Process notification and add a new transaction to the donation order.
  $merchant_reference = filter_input(INPUT_POST, 'merchantReference');

  $object_type = filter_input(INPUT_POST, 'objectType');
  $object_id = filter_input(INPUT_POST, 'objectId');

  if ($object_type == 'Transaction') {
    $payment_method = commerce_payment_method_instance_load('commerce_paywithmybank_bank|commerce_payment_commerce_paywithmybank_bank');

    $api = commerce_paywithmybank_get_api($payment_method);
    $api_transaction = $api->getTransaction($object_id);

    // Log the notification and transaction.
    if (!empty($payment_method['settings']['commerce_paywithmybank_settings_log']['response'])) {
      commerce_paywithmybank_log_notification($object_type, $object_id, $api_transaction);
    }

    $order = commerce_order_load($merchant_reference);

    if (empty($order)) {
      echo 'Fail';
      return;
    }
    else {
      commerce_paywithmybank_create_payment_transaction($api_transaction, $payment_method, $order);
    }
  }
  else {
    // Log the notification.
    if (!empty($payment_method['settings']['commerce_paywithmybank_settings_log']['response'])) {
      commerce_paywithmybank_log_notification($object_type, $object_id, NULL);
    }
  }

  echo 'OK';
}

/**
 * Access callback for processing notification information sent by PayWithMyBank.
 */
function commerce_paywithmybank_notify_access() {
  // Get the authorization header.
  $auth_header = filter_input(INPUT_SERVER, 'HTTP_AUTHORIZATION');
  $auth_header_parts = explode(' ', $auth_header);

  // Stop here if the authorization header is obviously not valid.
  if ($auth_header_parts[0] != 'Basic') {
    return FALSE;
  }

  // Get the entire POST body.
  $post_body = file_get_contents('php://input');
  $decoded_post_body = urldecode($post_body);

  watchdog('commerce_paywithmybank', 'Notification: ' . $auth_header . ' / ' . $post_body, array(), WATCHDOG_DEBUG);

  $payment_method = commerce_payment_method_instance_load('commerce_paywithmybank_bank|commerce_payment_commerce_paywithmybank_bank');
  $access_id = (isset($payment_method['settings']['commerce_paywithmybank_settings_access_id'])) ? $payment_method['settings']['commerce_paywithmybank_settings_access_id'] : NULL;
  $access_key = isset($payment_method['settings']['commerce_paywithmybank_settings_access_key']) ? $payment_method['settings']['commerce_paywithmybank_settings_access_key'] : NULL;

  return commerce_paywithmybank_validate_notification($access_id, $access_key, $auth_header_parts[1], $decoded_post_body);
}

/**
 * Gets a new instance of the PayWithMyBank REST API library.
 *
 * @param array @payment_method
 *   The payment method, used to populate library settings.
 *
 * @return PayWithMyBank
 */
function commerce_paywithmybank_get_api($payment_method) {
  $settings = $payment_method['settings'];

  $accessId = (isset($settings['commerce_paywithmybank_settings_access_id'])) ? $settings['commerce_paywithmybank_settings_access_id'] : NULL;
  $accessKey = (isset($settings['commerce_paywithmybank_settings_access_key'])) ? $settings['commerce_paywithmybank_settings_access_key'] : NULL;
  $sandbox = !empty($settings['commerce_paywithmybank_settings_sandbox']);

  return new PayWithMyBank($accessId, $accessKey, $sandbox);
}

/**
 * Generates a request signature for use with the PayWithMyBank JavaScript API.
 *
 * @see https://paywithmybank.com/docs/fe-ref.html#calculate-a-signature
 *
 * @param string $access_key
 *   The PayWithMyBank API access key.
 *
 * @param array $parameters
 *   Associative array of parameter names to values.
 *
 * @return string
 *   The generated request signature.
 */
function commerce_paywithmybank_get_request_signature($access_key, $parameters) {
  $data = '';
  foreach ($parameters as $key => $value) {
    if (is_object($value)) {
      // Objects in request parameters should be formatted as
      // $key.$object_property=$object_property_value.
      // Example: recurrence.recurringAmount=10.00
      foreach ($value as $obj_key => $obj_value) {
        $data .= "{$key}.{$obj_key}={$obj_value}&";
      }
    }
    else {
      $data .= "{$key}={$value}&";
    }
  }

  $data = substr($data, 0, -1);

  $hash = hash_hmac('sha1', $data, $access_key, TRUE);

  $signature = base64_encode($hash);

  return $signature;
}

/**
 * Validates a request from PayWithMyBank using the provided transaction ID
 * and request signature.
 *
 * @param string $transaction_id
 *   The request transaction ID to validate.
 *
 * @param string $request_signature
 *   The request signature to validate.
 *
 * @return boolean
 *   True if request is valid.
 */
function commerce_paywithmybank_validate_request($transaction_id, $request_signature) {
  if (empty($transaction_id) || empty($request_signature)) {
    return FALSE;
  }

  $payment_method = commerce_payment_method_instance_load('commerce_paywithmybank_bank|commerce_payment_commerce_paywithmybank_bank');

  if (empty($payment_method) || empty($payment_method['settings'])) {
    return FALSE;
  }

  $settings = $payment_method['settings'];
  $access_key = (isset($settings['commerce_paywithmybank_settings_access_key'])) ? $settings['commerce_paywithmybank_settings_access_key'] : NULL;

  if (!commerce_paywithmybank_validate_request_signature($access_key, $transaction_id, $request_signature)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Validates a request signature with a transaction returned by the
 * PayWithMyBank JavaScript API.
 *
 * @see https://paywithmybank.com/docs/fe-ref.html#validate-a-signature
 *
 * @param string $access_key
 *   The PayWithMyBank API access key.
 *
 * @param string $transaction_id
 *   The ID of the transaction to validate.
 *
 * @param string $request_signature
 *   The request signature to validate.
 *
 * @return bool
 *   TRUE if the request signature is valid.
 */
function commerce_paywithmybank_validate_request_signature($access_key, $transaction_id, $request_signature) {
  $data = 'transactionId=' . $transaction_id;

  $hash = hash_hmac('sha1', $data, $access_key, TRUE);

  $calculated_signature = base64_encode($hash);

  return ($request_signature == $calculated_signature);
}

/**
 * Validates a notification sent by PayWithMyBank.
 *
 * @see https://paywithmybank.com/docs/api-ref.html#notification
 *
 * @param string $access_id
 *   The PayWithMyBank API access ID.
 *
 * @param string $access_key
 *   The PayWithMyBank API access key.
 *
 * @param string $auth_string
 *   The authorization string received in the headers of the POST request.
 *
 * @param string $request_string
 *   The full body of the POST request received from PayWithMyBank.
 *
 * @return bool
 *   TRUE if the notification is valid.
 */
function commerce_paywithmybank_validate_notification($access_id, $access_key, $auth_string, $request_string) {
  $hash = base64_encode(hash_hmac('sha1', $request_string, $access_key, TRUE));

  $calculated_auth_string = base64_encode($access_id . ':' . $hash);

  if ($auth_string != $calculated_auth_string) {
    $log_message = 'Notification auth string mismatch. Original: ' . $auth_string
        . ' Calculated: ' . $calculated_auth_string
        . ' Body: ' . $request_string;
    watchdog('commerce_paywithmybank', $log_message, array(), WATCHDOG_DEBUG);
    return FALSE;
  }

  return TRUE;
}

/**
 * Creates a Commerce payment transaction for a PayWithMyBank transaction.
 *
 * @param object $transaction
 *   The PayWithMyBank transaction.
 * @param array $payment_method
 *   The payment method information.
 * @param object $order
 *   The Commerce order object.
 *
 * @return object
 *   The Commerce payment transaction object.
 */
function commerce_paywithmybank_create_payment_transaction($api_transaction, $payment_method, $order) {
  $amount = commerce_currency_decimal_to_amount($api_transaction->amount, $api_transaction->currency);

  // Create a Commerce transaction for this PayWithMyBank transaction.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->uid = $order->uid;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $api_transaction->transactionId;
  $transaction->amount = $amount;
  $transaction->currency_code = $api_transaction->currency;
  $transaction->message = $api_transaction->statusMessage;

  // Set the transaction status.
  switch ($api_transaction->status) {
    case PayWithMyBank::TRANSACTION_STATUS_NEW:
    case PayWithMyBank::TRANSACTION_STATUS_PENDING:
    case PayWithMyBank::TRANSACTION_STATUS_AUTHORIZED:
    case PayWithMyBank::TRANSACTION_STATUS_PROCESSED:
    case PayWithMyBank::TRANSACTION_STATUS_ON_HOLD:
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      break;

    case PayWithMyBank::TRANSACTION_STATUS_REVERSED:
    case PayWithMyBank::TRANSACTION_STATUS_PARTIALLY_REFUNDED:
    case PayWithMyBank::TRANSACTION_STATUS_REFUNDED:
    case PayWithMyBank::TRANSACTION_STATUS_COMPLETED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    case PayWithMyBank::TRANSACTION_STATUS_FAILED:
    case PayWithMyBank::TRANSACTION_STATUS_EXPIRED:
    case PayWithMyBank::TRANSACTION_STATUS_CANCELED:
    case PayWithMyBank::TRANSACTION_STATUS_DENIED:
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;
  }

  // Save the transaction.
  commerce_payment_transaction_save($transaction);

  // Update order and donation status for PayWithMyBank-specific states.
  $updated_donation_status = NULL;

  switch ($api_transaction->status) {
    case PayWithMyBank::TRANSACTION_STATUS_AUTHORIZED:
      $updated_donation_status = 'authorized';
      break;
    case PayWithMyBank::TRANSACTION_STATUS_COMPLETED:
      $updated_donation_status = 'payment_received';
      break;
  }

  if ($updated_donation_status != NULL)
  {
    // Update the order status.
    _fundraiser_commerce_update_order_status($updated_donation_status, $order->order_id);

    $donation = fundraiser_donation_get_donation($order->order_id);

    $donation->status = $updated_donation_status;
    $donation->status_label = _fundraiser_commerce_get_label_by_status($updated_donation_status);
    $donation->status_charged = _fundraiser_commerce_get_charged_by_status($updated_donation_status);

    fundraiser_donation_update($donation);
  }

  return $transaction;
}

/**
 * Determines if a transaction originated from the PayWithMyBank sandbox API.
 *
 * @param object $transaction
 *   The PayWithMyBank transaction.
 *
 * @return bool
 *   True if the transaction is a sandbox transaction.
 */
function commerce_paywithmybank_transaction_is_sandbox($transaction) {
  return ($transaction->payment->paymentProvider->name == 'Demo Bank');
}

/**
 * Logs errors from the PayWithMyBank API.
 *
 * @param string $transaction_id
 *   The ID of the PayWithMyBank transaction that failed.
 * @param array $errors
 *   Array of error objects.
 *   @see https://paywithmybank.com/docs/api-ref.html#errors
 */
function commerce_paywithmybank_log_errors($transaction_id, array $errors) {
  foreach ($errors as $error) {
    watchdog('commerce_paywithmybank', 'Transaction ID %transaction_id failed with message: %message', array(
      '%transaction_id' => $transaction_id,
      '%message' => $error->message,
        ), WATCHDOG_ERROR);
  }
}

/**
 * Logs a request to the PayWithMyBank API.
 *
 * @param string $action
 *   The API action being logged.
 * @param string $transaction_id
 *   The ID of the existing PayWithMyBank transaction, if it exists.
 * @param int $merchant_reference
 *   The PayWithMyBank merchant reference (Drupal order ID.)
 * @param string $amount
 *   The formatted currency amount used in this request.
 */
function commerce_paywithmybank_log_request($action, $transaction_id, $merchant_reference, $amount) {
  $log = array(
    'action' => $action,
    'transactionId' => $transaction_id,
    'merchantReference' => $merchant_reference,
    'amount' => $amount,
  );

  watchdog('commerce_paywithmybank', 'PayWithMyBank request: !param', array('!param' => '<pre>' . check_plain(print_r($log, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
}

/**
 * Logs a notification from the PayWithMyBank API.
 *
 * @param string $object_type
 *   The PayWithMyBank notification object type.
 * @param string $object_id
 *   The PayWithMyBank ID of the notification object.
 * @param int $transaction
 *   The PayWithMyBank transaction if the object is a transaction object.
 */
function commerce_paywithmybank_log_notification($object_type, $object_id, $transaction) {
  $log = array(
    'objectType' => $object_type,
    'objectId' => $object_id,
    'transaction' => $transaction,
  );

  watchdog('commerce_paywithmybank', 'PayWithMyBank notification: !param', array('!param' => '<pre>' . check_plain(print_r($log, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
}
