<?php

/**
 * Implements hook_menu()
 */
function commerce_paywithmybank_menu_info() {
  $items = array();
  $items['paywithmybank/return'] = array(
    'title' => 'PayWithMyBank Payment Callback',
    'page callback' => 'commerce_paywithmybank_return',
    'access callback' => 'commerce_paywithmybank_return_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paywithmybank_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_paywithmybank_bank'] = array(
    'base' => 'commerce_paywithmybank_bank',
    'title' => t('PayWithMyBank Bank Account'),
    'short_title' => t('PayWithMyBank'),
    'display_title' => t('Bank Account'),
    'description' => t('Integrates PayWithMyBank for Commerce transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_paywithmybank_bank_cardonfile_charge',
      'update callback' => 'commerce_paywithmybank_bank_cardonfile_update',
      'delete callback' => 'commerce_paywithmybank_bank_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_paywithmybank_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  // Remove any payment form fields; payment is handled by PayWithMyBank modal.
  unset($form['commerce_payment']['payment_details']['credit_card']);
  unset($form['commerce_payment']['payment_details']['cardonfile_instance_default']);

  // Remove continue button; payment is handled outside of the Commerce flow.
  unset($form['buttons']['continue']);
  unset($form['buttons']['back']['#prefix']);
}

/**
 * Payment method callback: settings form.
 */
function commerce_paywithmybank_bank_settings_form($settings = NULL) {
  $form = array();
  $form['commerce_paywithmybank_settings_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_merchant_id']) ? $settings['commerce_paywithmybank_settings_merchant_id'] : '',
  );

  $form['commerce_paywithmybank_settings_access_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Access ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_access_id']) ? $settings['commerce_paywithmybank_settings_access_id'] : '',
  );

  $form['commerce_paywithmybank_settings_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Access Key'),
    '#required' => TRUE,
    '#default_value' => isset($settings['commerce_paywithmybank_settings_access_key']) ? $settings['commerce_paywithmybank_settings_access_key'] : '',
  );

  $form['commerce_paywithmybank_settings_sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable sandbox mode',
    '#default_value' => isset($settings['commerce_paywithmybank_settings_sandbox']) ? $settings['commerce_paywithmybank_settings_sandbox'] : FALSE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_paywithmybank_bank_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  global $base_url;

  $settings = $payment_method['settings'];

  $merchantId = (isset($settings['commerce_paywithmybank_settings_merchant_id'])) ? $settings['commerce_paywithmybank_settings_merchant_id'] : NULL;
  $accessId = (isset($settings['commerce_paywithmybank_settings_access_id'])) ? $settings['commerce_paywithmybank_settings_access_id'] : NULL;
  $accessKey = (isset($settings['commerce_paywithmybank_settings_access_key'])) ? $settings['commerce_paywithmybank_settings_access_key'] : NULL;

  $api = commerce_paywithmybank_get_api($payment_method);
  $api_endpoint = $api->getEndpoint();

  $order_total = $order->commerce_order_total[LANGUAGE_NONE][0];
  $order_amount = substr(commerce_currency_format($order_total['amount'], $order_total['currency_code']), 1);

  $payment_parameters = array(
    'accessId' => $accessId,
    'merchantId' => $merchantId,
    'description' => 'Order from' . variable_get('site_name'),
    'currency' => $order_total['currency_code'],
    'amount' => $order_amount,
    'merchantReference' => $order->order_id,
  );

  $request_signature = commerce_paywithmybank_get_request_signature($accessKey, $payment_parameters);

  $establish_data = '{';

  foreach ($payment_parameters as $key => $value) {
    $establish_data .= "'{$key}' : '{$value}',";
  }

  $establish_data .= "'returnUrl' : '{$base_url}/checkout/{$order->order_id}/review',"
      . "'cancelUrl' : '{$base_url}/checkout/{$order->order_id}/review',"
      . "'requestSignature' : '{$request_signature}'"
      . '}';

  $form = array();
  $form['widget'] = array(
    '#type' => 'container',
    '#id' => 'paywithmybank-widget',
    '#attributes' => array(
      'class' => array(
        'paywithmybank-compact',
      ),
    ),
  );

  $form['widget']['image'] = array(
    '#type' => 'markup',
    '#markup' => '<img src="https://paywithmybank.com/start/images/paywithmybanklogo.jpg" />',
  );

  $form['#attached'] = array(
    'js' => array(
      array(
        'data' => $api_endpoint . '/start/scripts/paywithmybank.js?accessId=' . $accessId,
        'type' => 'external',
      ),
      array(
        'data' => 'try { PayWithMyBank.widget( "paywithmybank-widget" ,{\'showBenefits\' : true, \'showInstructions\' : false, \'actionButtonLabel\' : \'Continue\' , \'eventType\' : \'click\'}); } catch(e){}',
        'type' => 'inline',
      ),
      array(
        'data' => 'PayWithMyBank.establish(' . $establish_data . ');',
        'type' => 'inline',
      )
    ),
    'css' => array(
      array(
        'data' => $api_endpoint . '/start/styles/paywithmybank.css?accessId=' . $accessId,
        'type' => 'external',
      ),
    ),
  );

  echo '.';

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_paywithmybank_bank_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_paywithmybank_bank_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  
}

function commerce_paywithmybank_bank_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  
}

function commerce_paywithmybank_bank_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  
}

function commerce_paywithmybank_bank_cardonfile_delete() {
  
}

/**
 * Callback for processing payment information sent by PayWithMyBank.
 */
function commerce_paywithmybank_return() {
  // TODO: Process transaction and complete order.
}

/**
 * Access callback for processing payment information sent by PayWithMyBank.
 */
function commerce_paywithmybank_return_access() {
  // TODO: Validate request from PayWithMyBank.
  return TRUE;
}

/**
 * Gets a new instance of the PayWithMyBank REST API library.
 *
 * @param array @payment_method
 *   The payment method, used to populate library settings.
 *
 * @return PayWithMyBank
 */
function commerce_paywithmybank_get_api($payment_method) {
  $settings = $payment_method['settings'];

  $accessId = (isset($settings['commerce_paywithmybank_settings_access_id'])) ? $settings['commerce_paywithmybank_settings_access_id'] : NULL;
  $accessKey = (isset($settings['commerce_paywithmybank_settings_access_key'])) ? $settings['commerce_paywithmybank_settings_access_key'] : NULL;
  $sandbox = !empty($settings['commerce_paywithmybank_settings_sandbox']);

  return new PayWithMyBank($accessId, $accessKey, $sandbox);
}

/**
 * Generates a request signature for use with the PayWithMyBank JavaScript API.
 *
 * @see https://paywithmybank.com/docs/fe-ref.html#calculate-a-signature
 *
 * @param string $accessKey
 *   The PayWithMyBank API access key.
 *
 * @param array $parameters
 *   Associative array of parameter names to values.
 *
 * @return string
 *   The generated request signature.
 */
function commerce_paywithmybank_get_request_signature($accessKey, $parameters) {
  $data = '';
  foreach ($parameters as $key => $value) {
    $data .= "{$key}=$value&";
  }

  $data = substr($data, 0, -1);

  $hash = hash_hmac('sha1', $data, $accessKey, TRUE);

  $signature = base64_encode($hash);

  return $signature;
}
