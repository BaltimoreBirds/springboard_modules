<?php

/**
 * @file
 * Fundraiser module tests. Unit style tests (not actual unit, database required).
 */

/**
 * Setup and tear down web class. Does nothing else.
 */
class FundraiserCommerceUnitTestSetup extends DrupalWebTestCase {

  /**
   * Implemenation of setUp().
   */
  function setUp() {
    // Call the parent to set all of the base modules up.
    parent::setUp( array(
        'fundraiser_commerce',
      )
    );
  }
}

/**
 * Fundraiser testing class.
 */
class FundraiserCommerceUnitTestCase extends FundraiserCommerceUnitTestSetup {

  /**
   * Implements getInfo(). Declares this test class to fundraiser testing.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fundraiser commerce unit tests',
      'description' => 'Tests fundraiser commerce functions as unit tests.',
      'group' => 'Fundraiser',
    );
  }

  /**
   * Unit test DB functions for fundraiser_donation.
   */
  function testcommerceDBFunctions() {
    // Check countries created.
    $countries = _fundraiser_commerce_get_countries();
    $this->assertEqual(count($countries), 243, '_fundraiser_commerce_get_countries() got correct default number of countries.', 'testcommerceDBFunctions');

    // Check zones.
    $zones = _fundraiser_commerce_get_zone_by_country(840); // For US.
    $this->assertEqual(count($zones), 65, '_fundraiser_commerce_get_zone_by_country() got correct default number of zones for US.', 'testcommerceDBFunctions');

    // Check the higher level related array construction of this data.
    $countries_to_zones = fundraiser_commerce_get_countries();
    $this->assertEqual(count($countries_to_zones->countries), 243, 'fundraiser_commerce_get_countries() got correct default number of countries.', 'testcommerceDBFunctions');
    $this->assertEqual($countries_to_zones->countries[124]->country_name, 'Canada', '_fundraiser_commerce_get_countries() got correct name for US.', 'testcommerceDBFunctions');
    $this->assertEqual($countries_to_zones->countries[840]->country_name, 'United States', '_fundraiser_commerce_get_countries() got correct name for US.', 'testcommerceDBFunctions');
    $this->assertEqual(count($countries_to_zones->countries[840]->zones), 65, 'fundraiser_commerce_get_countries() got correct default number of zones for US.', 'testcommerceDBFunctions');
    $this->assertEqual($countries_to_zones->countries[840]->zones[2]->zone_name, 'Alaska', '_fundraiser_commerce_get_countries() got correct name for Alaska.', 'testcommerceDBFunctions');
    $this->assertEqual(count($countries_to_zones->zones), 78, 'fundraiser_commerce_get_countries() got correct default number of zones for countries.', 'testcommerceDBFunctions');
    $this->assertEqual($countries_to_zones->zones[2]->zone_name, 'Alaska', '_fundraiser_commerce_get_countries() got correct name for Alaska.', 'testcommerceDBFunctions');

    // Test updating default order status.
    $defaults = array(
      'order_id' => 1,
      'uid' => 1,
      'order_status' => 'created',
      'order_total' => 1,
      'product_count' => 1,
      'primary_email' => 'example@example.com',
    );
    drupal_write_record('uc_orders', $defaults);
    _fundraiser_commerce_update_order_status('updated', 1);
    $status = db_query('SELECT order_status FROM {uc_orders} WHERE order_id = 1')->fetchColumn();
    $this->assertEqual($status, 'updated', '_fundraiser_commerce_update_order_status() correctly updated status.', 'testcommerceDBFunctions');
  }

  /**
   * Unit test DB functions for fundraiser_donation.
   */
  function testcommerceCardFunctions() {
    // Check path for encryption path.
    $path = fundraiser_commerce_fundraiser_get_credit_encryption_path();
    $expected = t('Not configured, see below.');
    $this->assertEqual($path, $expected, 'fundraiser_commerce_fundraiser_get_credit_encryption_path() got correct path value.', 'testcommerceCardFunctions');
    variable_set('uc_credit_encryption_path', 'set_path');
    $path = fundraiser_commerce_fundraiser_get_credit_encryption_path();
    $expected = t('set_path');
    $this->assertEqual($path, $expected, 'fundraiser_commerce_fundraiser_get_credit_encryption_path() got correct path value.', 'testcommerceCardFunctions');

    // Check that card identification is correct based on card number.
    $card_type = _fundraiser_commerce_get_cc_type('');
    $expected = 'UNKNOWN';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('1234567890');
    $expected = 'UNKNOWN';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('323456789012345');
    $expected = 'amex';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('6011567890123456');
    $expected = 'discover';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('5234567890123456');
    $expected = 'mc';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('4234567890123456');
    $expected = 'visa';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
    $card_type = _fundraiser_commerce_get_cc_type('4234567890123');
    $expected = 'visa';
    $this->assertEqual($card_type, $expected, '_fundraiser_commerce_get_cc_type() got correct path value.', 'testcommerceCardFunctions');
  }

  /**
   * Unit test DB functions for fundraiser_donation.
   */
  function testcommerceDonationFunctions() {

    // An example form to flatten for value.
    $form_state['donation']['amount'] = 'Please select your tax-deductible gift amount below';
    $form_state['mail'] = 'Email';
    $flattened = _fundraiser_commerce_submission_flatten($form_state);
    $this->assertEqual($flattened['amount'], 'Please select your tax-deductible gift amount below', print_r($flattened,1).'_fundraiser_commerce_submission_flatten() got correct field.', 'testcommerceCardFunctions');
    $this->assertEqual($flattened['mail'], 'Email', '_fundraiser_commerce_submission_flatten() got correct field.', 'testcommerceCardFunctions');

    /**
     * test creation and execution of an order by donation_process stages.
fundraiser_commerce_fundraiser_donation_create
fundraiser_commerce_fundraiser_donation_process
fundraiser_commerce_fundraiser_donation_update
fundraiser_commerce_fundraiser_donation_success
fundraiser_commerce_fundraiser_donation_decline
fundraiser_commerce_fundraiser_donation_cancel
fundraiser_commerce_fundraiser_donation_refund
fundraiser_commerce_fundraiser_donation_get_donation

     */
  }

}
