<?php
/**
 * @file
 * Provides an upsell modal for creating recurring donations.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_upsell_menu() {
  $items = array();
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell'] = array(
    'title' => 'Fundraiser sustainer upsell settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell/general'] = array(
    'title' => 'General settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell/thank-you'] = array(
    'title' => 'Thank you settings',
    'description' => 'Administer fundraiser upsell "thank you" settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_thank_you_settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.mail.inc',
  );
  // Give admins an easy way to preview the upsell & thank you content.
  $items['node/%node/upsell'] = array(
    'title' => 'Upsell preview',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'fundraiser_upsell_content_preview',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_upsell_preview_access',
    'access arguments' => array(1),
  );
  // Callback to process the POSTed modal upsell form.
  $items['node/%node/upsell/process'] = array(
    'title' => 'Process upsell form',
    'description' => 'Ajax callback to process the fundraiser upsell donation form',
    'type' => MENU_CALLBACK,
    'page callback' => 'fundraiser_upsell_ajax_process',
    'page arguments' => array(),
    'access callback' => 'fundraiser_upsell_access',
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_upsell_permission() {
  return array(
    'administer fundraiser upsells' => array(
      'title' => t('Administer fundraiser upsell feature'),
      'description' => t('Perform administration tasks for fundraiser upsell.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Inject the upsell settings form into donation edit forms and modify the
 * donation forms to process the upsell if necessary.
 */
function fundraiser_upsell_form_alter(&$form, &$form_state, $form_id) {
  // Edit form - inject the Upsell settings into the node form.
  if (!empty($form['#node_edit_form']) && fundraiser_upsell_is_available($form['#node'])) {
    fundraiser_upsell_add_node_settings($form);
  }
  // View form - add the upsell submit function unless blocked by cookies.
  elseif (!empty($form['#node'])
    && fundraiser_upsell_is_enabled($form['#node'])
    && fundraiser_upsell_should_display_modal()) {
    $form['#submit'][] = 'fundraiser_upsell_webform_submit';
  }
}

/**
 * Form for injecting into the node edit page.
 *
 * @param array $form
 *   The form to modify.
 */
function fundraiser_upsell_add_node_settings(&$form) {
  $node = $form['#node'];
  $form['fundraiser_upsell'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upsell settings'),
    '#weight' => -4,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  $form['fundraiser_upsell']['upsell_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Upsell enabled'),
    '#default_value' => !empty($node->upsell['enabled']) ? $node->upsell['enabled'] : '',
  );
  $form['fundraiser_upsell']['upsell_content'] = array(
    '#title' => t('Form specific Upsell Content'),
    '#type' => 'textarea',
    '#default_value' => !empty($node->upsell['content']) ? $node->upsell['content'] : '',
    '#description' => t('If no content is given the default will be used.'),
  );
  $form['fundraiser_upsell']['modal_theming'] = array(
    '#type' => 'fieldset',
    '#title' => t('Modal theming'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fundraiser_upsell']['modal_theming']['upsell_class'] = array(
    '#title' => t('CSS class(es)'),
    '#type' => 'textfield',
    '#default_value' => !empty($node->upsell['class']) ? $node->upsell['class'] : '',
    '#description' => t('Separate multiple classes with a space.'),
  );
  $form['fundraiser_upsell']['modal_theming']['upsell_modal_width'] = array(
    '#title' => t('Modal window width (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->upsell['modal_width']) ? $node->upsell['modal_width'] : 400,
    '#description' => t('This will override the site default.'),
  );
  $form['fundraiser_upsell']['modal_theming']['upsell_modal_height'] = array(
    '#title' => t('Modal window height (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->upsell['modal_height']) ? $node->upsell['modal_height'] : 300,
    '#description' => t('This will override the site default.'),
  );

  // @todo Fix the salesforce campaign listing stuff.
  if (module_exists('salesforce_upsell')) {

    $form['fundraiser_upsell']['additional_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Additional options'),
      '#weight' => 10,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $salesforce_campaign_options = array_merge(
      array('' => '(blank)'),
      salesforce_upsell_api_get_campaigns()
    );

    $form['fundraiser_upsell']['additional_options']['upsell_campaign_id'] = array(
      '#title' => t('Sustainer Salesforce Campaign ID'),
      '#type' => 'select',
      '#options' => $salesforce_campaign_options,
      '#default_value' => !empty($node->upsell['campaign_id']) ? $node->upsell['campaign_id'] : variable_get('fundraiser_upsell_sf_campaign_id', ''),
      '#description' => t('Set the campaign id to be used for the upsell form. Please note that if the decouple option above is selected, and this field is left blank, then all recurring donations will have blank campaign ids.'),
    );
  }

  $form['#validate'][] = 'fundraiser_upsell_node_form_validate';
  $form['#submit'][] = 'fundraiser_upsell_node_form_submit';
}

/**
 * Additional validation for the fundraiser_upsell node settings.
 */
function fundraiser_upsell_node_form_validate($form, &$form_state) {
  $modal_width = $form_state['values']['upsell_modal_width'];
  $modal_height = $form_state['values']['upsell_modal_height'];
  if (empty($modal_width) || !is_numeric($modal_width)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_width',
      t('The fundraiser upsell modal width must be a number.'));
  }
  if (empty($modal_height) || !is_numeric($modal_height)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_height',
      t('The fundraiser upsell modal height must be a number.'));
  }
}

/**
 * Additional submit handler to move the upsell settings into an array.
 *
 * The node will then be saved with this data in $node->upsell.
 * Example: $node->upsell['enabled']
 */
function fundraiser_upsell_node_form_submit($form, &$form_state) {
  $form_state['values']['upsell'] = array(
    'enabled' => $form_state['values']['upsell_enabled'],
    'content' => $form_state['values']['upsell_content'],
    'class' => $form_state['values']['upsell_class'],
    'modal_width' => $form_state['values']['upsell_modal_width'],
    'modal_height' => $form_state['values']['upsell_modal_height'],
  );

  if (!empty($form_state['values']['upsell_campaign_id'])) {
    $form_state['values']['upsell']['campaign_id'] = $form_state['values']['upsell_campaign_id'];
  }
}

/**
 * Extra donation form submit function to attach the upsell process.
 */
function fundraiser_upsell_webform_submit($form, &$form_state) {
  // If it's not successful (no submission ID), don't show upsell and skip
  // checking for the recurring setting.
  if (empty($form_state['values']['details']['sid'])) {
    return;
  }

  // Don't show upsell if the donor is already recurring.
  $recurring = FALSE;
  $recurs_string = 'recurs';
  $form_key = 'recurs_monthly';
  $recurring_cid = FALSE;

  foreach ($form['#node']->webform['components'] as $cid => $component) {
    if ($component['form_key'] == $form_key) {
      $recurring_cid = $cid;
      break;
    }
  }

  // !== because a cid could be 0.
  if ($recurring_cid !== FALSE) {
    $recurring_value = $form_state['values']['submitted'][$recurring_cid];
    // The component is usually a select or checkbox.
    // So $recurring_value would be an array.
    if (is_array($recurring_value) && in_array($recurs_string, $recurring_value)) {
      $recurring = TRUE;
    }
    // If recurring is required, the component will be hidden.
    // And $recurring_value will be a string.
    elseif (is_string($recurring_value) && $recurring_value == $recurs_string) {
      $recurring = TRUE;
    }
  }

  if (!$recurring) {
    // Add the upsell nid, sid, & uid to the session data.
    $_SESSION['upsell'] = array(
      'nid' => $form_state['values']['details']['nid'],
      'sid' => $form_state['values']['details']['sid'],
      'uid' => $form_state['values']['details']['uid'],
    );
  }
}

/**
 * Implements hook_page_alter().
 *
 * Adds the modal to the page.
 */
function fundraiser_upsell_page_alter(&$page) {
  // Check for upsell trigger.
  if (!empty($_SESSION['upsell'])) {
    // Add the upsell to the page.
    $node = node_load($_SESSION['upsell']['nid']);
    $upsell = fundraiser_upsell_content($node, $_SESSION['upsell']['sid']);
    $page['page_bottom']['message'] = $upsell;
    // Remove the upsell session data.
    unset($_SESSION['upsell']);
  }
}

/**
 * Upsell donation form for the modal.
 *
 * @param int $sid
 *   Submission ID
 *
 * @return array
 *   Form API array.
 */
function fundraiser_upsell_donation_form($form, &$form_state, $sid = 0) {
  // Get the default suggested amount based on submitted order.
  $order = _fundraiser_upsell_get_order($sid);

  if (!empty($sid) && !empty($order) && is_object($order)) {
    $order_total = round($order->commerce_order_total['und'][0]['amount'] / 100);
    $suggested_amount = _fundraiser_upsell_find_suggested_amount($order_total);
  }
  // Set default values.
  $suggested_amount = !empty($suggested_amount) ? $suggested_amount : 10;
  $order_id = !empty($order->order_id) ? $order->order_id : 0;
  $campaign_id = !empty($order->upsell['campaign_id']) ? $order->upsell['campaign_id'] : variable_get('fundraiser_upsell_sf_campaign_id', '');
  $nid = !empty($order->upsell['nid']) ? $order->upsell['nid'] : arg(1);
  // Build the form.
  $form = array();
  $form['amount'] = array(
    '#title' => t('Monthly donation'),
    '#type' => 'textfield',
    '#size' => 5,
    // The description will hold the currency symbol - maybe a function later?
    '#description' => t('$'),
    '#default_value' => $suggested_amount,
    '#weight' => -10,
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['campaign_id'] = array(
    '#type' => 'hidden',
    '#value' => $campaign_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Sign Me Up!'),
    '#attributes' => array('id' => 'edit-submit'),
  );
  $form['close'] = array(
    '#type' => 'button',
    '#value' => t('No Thanks'),
    '#weight' => 1,
    '#attributes' => array('id' => 'edit-close'),
  );

  $form['#action'] = url('node/' . $nid . '/upsell/process');
  return $form;
}

/**
 * Submission callback function for the modal upsell form.
 *
 * @param array $data
 *   The submitted upsell form data.
 *
 * @return array
 *   Thank you content.
 */
function fundraiser_upsell_upsell_ajax_submit($data) {
  // Set the default values.
  global $user;
  $amount = $data['amount'];
  $campaign_id = $data['campaign_id'];
  $order = commerce_order_load($data['order_id']);
  $is_recurring = _fundraiser_upsell_check_recurring($order->order_id);
  $different_user = ($user->uid != $order->uid) ? TRUE : FALSE;
  // If the donation is already recurring, then stop.
  if ($is_recurring) {
    watchdog('fundraiser_upsell', 'Upsell failed - order %oid is already recurring.', array('%oid' => $order->order_id), WATCHDOG_NOTICE);
    return 'This is already a recurring donation. Thank you.';
  }
  // If the user is different then stop - skip anon users because we don't know.
  if ($different_user && $user->uid != 0) {
    watchdog('fundraiser_upsell', 'Upsell user doesn\'t match the order %oid user.', array('%oid' => $order->order_id), WATCHDOG_NOTICE);
    return 'There was a problem processing your order. Please try again.';
  }

  // Decouple by cloning the order and creating recurring orders
  // from the new order.
  // This part isn't creating the donation object.
  $new_order = _fundraiser_upsell_clone_order($order, array(
    'amount' => $amount,
    'status' => 'pending_future_payment',
  ));

  // Create the recurring donation series.
  $success = fundraiser_upsell_create_recurring($new_order, $amount);
  // Grab and process the thank you content if successful.
  if ($success) {
    // Add the campaign id to all recurring orders.
    if (!empty($campaign_id)) {
      _fundraiser_upsell_set_recurring_campaigns($new_order->order_id, $campaign_id);
      $new_order->data['campaign_id'] = $campaign_id;
    }

    // Mark this order as an upsell.
    $new_order->data['upsell'] = TRUE;
    commerce_order_save($new_order);

    $donation = fundraiser_donation_get_donation($new_order->order_id);
    // Generate the thank you content.
    $raw_content = variable_get('fundraiser_upsell_thank_you_content', 'Thank you for your recurring donation!');
    $content = token_replace($raw_content, array('donation' => $donation), array('clear' => TRUE));

  }
  else {
    watchdog('fundraiser_upsell', 'Upsell failed for order %oid.', array('%oid' => $new_order->order_id), WATCHDOG_NOTICE);
    $content = 'There was a problem processing your order. Please try again.';
  }
  return $content;
}

/**
 * Convert the single donation into a recurring donation.
 *
 * @param object $order
 *   The master order.
 * @param float $amount
 *   The decimal amount for recurring donations.
 *
 * @return bool
 *   Always returns TRUE.  Should return a bool based on success.
 *
 * @todo Fix the return value.
 */
function fundraiser_upsell_create_recurring($order, $amount) {
  // Since this is decoupled, we need to set the start date to ensure that we
  // advance the future orders by one month.
  $date_to_start = $order->data['date_to_start'];
  unset($order->data['date_to_start']);
  // Create the recurring orders.
  // @todo This function doesn't exist. Refactor.
  fundraiser_create_future_orders($order->order_id, NULL, $amount, $date_to_start);
  // Set the master id to show it's recurring.
  db_query("UPDATE {fundraiser_webform_order} SET recurring_status = 1 WHERE order_id = %d", $order->order_id);

  // @todo Revisit this whole section.
  // Check to see if the order is in the queue.
  // If so delete it so we can put it back in as a recurring donation.
  // Only do this for non-decoupled upsells.
  // Decoupled upsells need the original one-time donation to export
  // as an independent opportunity.
  if (module_exists('queue_api') && empty($order->data['decoupled'])) {
    if (_in_queue($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE)) {
      sf_queue_delete($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE);
    }

    // Put in queue as recurring donation.
    sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'create');
  }

  // Set the fundraiser recurring acceptance cookie.
  $cookie_lifetime = variable_get('fundraiser_upsell_acceptance_lifetime', 0);
  setcookie('fundraiser_upsell_acceptance', 1, REQUEST_TIME + 3600 * 24 * $cookie_lifetime, "/");
  // Send the thank you message.
  if (_fundraiser_upsell_check_recurring($order->order_id)) {
    // Get the first recurring order for token replacement.
    // @todo Fix this query.
    $recurring_order_id = db_result(db_query("
      SELECT order_id FROM {fundraiser_recurring} WHERE master_order_id = %d LIMIT 0,1
    ", $order->order_id));

    $recurring_order = commerce_order_load($recurring_order_id);

    module_load_include('inc', 'fundraiser_upsell', 'includes/fundraiser_upsell.mail');
    fundraiser_upsell_send_thank_you($recurring_order);
  }

  return TRUE;
}

/**
 * Implements hook_queue_batch_item_alter().
 *
 * Add the upsell campaign id & initial upsell donation id.
 *
 * @todo I don't think this hook exists any more.
 */
function fundraiser_upsell_queue_batch_item_alter(&$object, $type, $action, $oid) {
  // Process single donations.
  if ($type == FUNDRAISER_SINGLE_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Set the campaign id if its been added.
    if (isset($order->data['campaign_id'])) {
      $object['CampaignId'] = $order->data['campaign_id'];
    }
    // Limit to update operations because that's when opportunities
    // that are part of a recurring series get updated.
    if ($action == 'update') {
      // Make sure the SF field exists.
      if (_fundraiser_upsell_check_sf_field('Opportunity', 'Initial_Upsell_Donation__c')) {
        // Get the master order id & its sfid.
        $master_order_id = db_result(db_query("SELECT master_order_id FROM {fundraiser_recurring} WHERE order_id = %d", $oid));
        // Load the master order id and pop out the initial_donation.
        // @todo Maybe query directly to avoid overhead of uc_order_load
        $master_order = uc_order_load($master_order_id);

        // If cloned_from is set, this is a donation that is part of a
        // decoupled upsell.
        // In this case we want the SFID of the original,
        // which is the order id stored in cloned_from.
        if ($master_order->data['cloned_from']) {
          $sfid = salesforce_management_api_id_load('donation', $master_order->data['cloned_from']);
          $object['Upsell_Order_ID__c'] = $master_order->data['cloned_from'];
        }
        // Normal upsell. Master order id is the original.
        elseif ($master_order->data['upsell']) {
          $object['Upsell_Order_ID__c'] = $master_order->order_id;
          $sfid = salesforce_management_api_id_load('donation', $master_order->order_id);
        }

        // Set the original order SFID.
        if (!empty($sfid)) {
          $object['Initial_Upsell_Donation__c'] = $sfid['sfid'];
        }
      }
    }
  }
  // Process recurring donations.
  if ($type == FUNDRAISER_RECURRING_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Make sure the SF field exists & we have the sfid.
    // This should really only process on an update
    // and after the postprocess hook below.
    $field_exists = _fundraiser_upsell_check_sf_field('npe03__Recurring_Donation__c', 'Initial_Upsell_Donation__c');

    // If cloned_from is set,
    // this is a donation that is part of a decoupled upsell.
    if ($field_exists && isset($order->data['cloned_from'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->data['cloned_from'];
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }
    // Normal upsell.
    elseif ($field_exists && isset($order->data['upsell'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->order_id;
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }

  }
}

/**
 * Implements hook_queue_postprocess_batch().
 *
 * Add the initial upsell sfid to the master order.
 *
 * @todo I don't think this hook exists any more.
 */
function fundraiser_upsell_queue_postprocess_batch($batch, $responses, $items_in_batch) {
  // Only process single donation batches that are successful and recurring.
  $is_recurring = _fundraiser_upsell_check_recurring($batch['records'][0]->oid);
  if ($batch['type'] == FUNDRAISER_SINGLE_DONATION_TYPE && $responses[0]->success && $is_recurring) {
    // The first item is the master order.
    $order = uc_order_load($batch['records'][0]->oid);
    // Get the initial order and its sfid.
    $initial_order_id = (isset($order->data['cloned_from'])) ? $order->data['cloned_from'] : $order->order_id;
    $sfid = salesforce_management_api_id_load('donation', $initial_order_id);
    // Add the sfid to the order object.
    $order->data['initial_donation'] = $sfid['sfid'];
    uc_order_save($order);
    // Put in queue as recurring donation.
    sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'update');
  }
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_node_record($node);
    drupal_write_record('fundraiser_upsell', $record);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_node_record($node);
    // If upsell is enabled and the record doesn't exist then insert new row.
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell', $record, 'nid');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $upsell = db_query('
        SELECT * FROM {fundraiser_upsell} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      // Merge data from upsell settings with node.
      unset($upsell['nid']);
      $nodes[$node->nid]->upsell = $upsell;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_node_delete(&$node) {
  db_query('DELETE FROM {fundraiser_upsell} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_node_record($node) {
  return array(
    'nid' => $node->nid,
    'enabled' => $node->upsell['enabled'],
    'content' => $node->upsell['content'],
    'class' => $node->upsell['class'],
    'modal_width' => $node->upsell['modal_width'],
    'modal_height' => $node->upsell['modal_height'],
    'campaign_id' => $node->upsell['campaign_id'],
  );
}

/**
 * Generate the render array for the upsell form and thank you response.
 *
 * @param object $node
 *   The webform donation node object.
 * @param int $sid
 *   The user's specific submission ID for the donation node.
 *
 * @return array
 *   A render array for generating the content.
 */
function fundraiser_upsell_content($node, $sid) {
  // Add the css & js.
  $path = drupal_get_path('module', 'fundraiser_upsell');
  drupal_add_css($path . '/css/fundraiser_upsell.css');
  drupal_add_js($path . '/js/fundraiser_upsell.js');
  drupal_add_js($path . '/js/jquery.blockUI.js');
  // Get the size and class for the modal.
  $width = (!empty($node->upsell['modal_width'])) ? $node->upsell['modal_width'] : 400;
  $height = (!empty($node->upsell['modal_height'])) ? $node->upsell['modal_height'] : 300;
  $upsell_size = 'width:' . $width . 'px;height:' . $height . 'px;';
  // Pass values to javascript.
  $rejection_days = variable_get('fundraiser_upsell_rejection_lifetime', '180');
  $settings = array(
    'width' => $width,
    'height' => $height,
    'rejectionDays' => $rejection_days,
  );
  drupal_add_js(array('fundraiser_upsell' => $settings), 'setting');
  // Get the content for the form.
  $upsell_class = (!empty($node->upsell['class'])) ? $node->upsell['class'] : '';
  $upsell_content = (!empty($node->upsell['content'])) ? $node->upsell['content'] : variable_get('fundraiser_upsell_default_content', '');
  $upsell_disclaimer = variable_get('fundraiser_upsell_default_content_disclaimer', '');
  // Build the output.
  $content = '<div id="message-wrapper" class="hidden">';
  $content .= '<div id="message-modal" class="live-modal ' . $upsell_class;
  $content .= '" style="' . $upsell_size . '">';
  $content .= '<div class="message-content">' . $upsell_content . '</div>';
  $content .= drupal_get_form('fundraiser_upsell_donation_form', $sid);
  $content .= '<div id="message-disclaimer">' . $upsell_disclaimer . '</div>';
  $content .= '</div></div>';

  return $content;
}

/**
 * Generate the upsell and thank you content for preview.
 *
 * @param object $node
 *   The webform donation node object.
 *
 * @return array
 *   A render array for generating the content.
 */
function fundraiser_upsell_content_preview($node) {
  // Add the css & js.
  $path = drupal_get_path('module', 'fundraiser_upsell');
  drupal_add_css($path . '/css/fundraiser_upsell.css');
  drupal_add_js($path . '/js/fundraiser_upsell.js');
  drupal_add_js($path . '/js/jquery.blockUI.js');
  // Get the size and class for the modal.
  $width = (!empty($node->upsell['modal_width'])) ? $node->upsell['modal_width'] : 400;
  $height = (!empty($node->upsell['modal_height'])) ? $node->upsell['modal_height'] : 300;
  $upsell_size = 'width:' . $width . 'px;height:' . $height . 'px;';
  // Pass values to javascript.
  $rejection_days = variable_get('fundraiser_upsell_rejection_lifetime', '180');
  $settings = array(
    'width' => $width,
    'height' => $height,
    'rejectionDays' => $rejection_days,
  );
  drupal_add_js(array('fundraiser_upsell' => $settings), 'setting');
  // Get the content for the form.
  $upsell_class = (!empty($node->upsell['class'])) ? $node->upsell['class'] : '';
  $upsell_content = (!empty($node->upsell['content'])) ? $node->upsell['content'] : variable_get('fundraiser_upsell_default_content', '');
  $upsell_disclaimer = variable_get('fundraiser_upsell_default_content_disclaimer', '');
  $upsell_thankyou_text = variable_get('fundraiser_upsell_thank_you_content', 'Thank you for your recurring donation!');
  $upsell_thankyou = token_replace_multiple($upsell_thankyou_text, array(
      'global' => NULL,
      'order' => NULL,
      'domain' => NULL,
    ));
  // Build the output.
  $content = '<div id="upsell-preview">This is a preview of the upsell and thank you content for this form.</div>';
  $content .= '<div id="message-wrapper" class="hidden">';
  $content .= '<div id="message-modal" class="preview-modal ' . $upsell_class;
  $content .= '" style="' . $upsell_size . '">';
  $content .= '<div class="message-content">' . $upsell_content . '</div>';
  $content .= drupal_get_form('fundraiser_upsell_donation_form', 0);
  $content .= '<div id="message-disclaimer">' . $upsell_disclaimer . '</div>';
  $content .= '</div></div>';
  // Add the thank you message for the preview.
  $content .= '<div id="message-return" class="hidden preview-modal thank-you ' . $upsell_class;
  $content .= '" style="' . $upsell_size . '"><div class="message-content">' . $upsell_thankyou . '</div></div>';

  return $content;
}

/**
 * Process the upsell donation form from the POSTed ajax callback.
 */
function fundraiser_upsell_ajax_process() {
  $data = $_POST;
  // Check the form token to be sure this is a valid callback.
  if (!drupal_valid_token($data['form_token'], $data['form_id'], TRUE)) {
    watchdog('fundraiser_upsell', 'Upsell order %oid failed because of an invalid form token.', array('%oid' => $order->order_id), WATCHDOG_NOTICE);
    $content = t('There was a problem with your order. Please try again');
  }
  else {
    $content = fundraiser_upsell_upsell_ajax_submit($data);
  }
  drupal_json_output($content);
}

/**
 * Determine if we should display the upsell preview for a node.
 *
 * Upsell must be enabled for the node and the user must have
 * the upsell permission.
 */
function fundraiser_upsell_preview_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('administer fundraiser upsells');
}

/**
 * Access check that the user can use the upsell ajax callback for the node.
 *
 * This makes sure the upsell process call won't happen if the node doesn't
 * have upsell enabled.
 */
function fundraiser_upsell_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('access content');
}

/**
 * Check the cookies and settings to see if upsell modal should be displayed.
 *
 * @return bool
 *   TRUE if the modal should be displayed.
 */
function fundraiser_upsell_should_display_modal() {
  $rejection = (!empty($_COOKIE['fundraiser_upsell_rejection'])) ? $_COOKIE['fundraiser_upsell_rejection'] : FALSE;
  $acceptance = (!empty($_COOKIE['fundraiser_upsell_acceptance'])) ? $_COOKIE['fundraiser_upsell_acceptance'] : FALSE;
  $debug = variable_get('fundraiser_upsell_debug', FALSE);

  // No cookies OR debug is on, then we should display the upsell.
  return ((!$rejection && !$acceptance) || $debug);
}

/**
 * Generate the order object from the sid.
 *
 * @param int $sid
 *   Submission ID.
 *
 * @return object
 *   The order.
 */
function _fundraiser_upsell_get_order($sid = NULL) {
  // Return empty object if no sid.
  if (empty($sid)) {
    return new stdClass();
  }
  // Otherwise look up and load the order object.
  $donation = db_query("
    SELECT *
    FROM {fundraiser_donation} AS fd, {fundraiser_upsell} AS fu
    WHERE fd.sid = :sid
    AND fd.nid = fu.nid", array(':sid' => $sid))->fetchAssoc();
  $order = commerce_order_load($donation['did']);
  // Add the donation & upsell info.
  $order->upsell = $donation;
  return $order;
}

/**
 * Determine if the node has upsell enabled.
 *
 * @return bool
 *   TRUE is upsell is enabled on this node.
 */
function fundraiser_upsell_is_enabled($node) {
  return (
    !empty($node)
    && fundraiser_is_donation_type($node->type)
    && !empty($node->upsell['enabled'])
    && $node->upsell['enabled']
  );
}

/**
 * Get the suggested amount from the admin bracket settings.
 *
 * @param int $amount
 *   The given amount.
 *
 * @todo Is amount an int or float?
 *
 * @return int
 *   The suggested amount to upsell to.
 *
 * @todo Is the return value an int or float?
 */
function _fundraiser_upsell_find_suggested_amount($amount) {
  $default_upsell = 10;
  $brackets = variable_get('fundraiser_upsell_brackets', array());
  if (count($brackets) < 1) {
    return $default_upsell;
  }

  foreach ($brackets as $i => $bracket) {
    // If the amount is within the brackets, then use this upsell setting.
    if (($amount >= $bracket['low']) && ($amount <= $bracket['high'])) {
      return $bracket['upsell'];
    }
    // If this is the last loop and we don't have an upsell yet,
    // set it for the highest bracket.
    if ($i == count($brackets) - 1) {
      return $bracket['upsell'];
    }
  }
  return $default_upsell;
}

/**
 * Clone the order for decoupling.
 *
 * If we need to decouple the original order,
 * clone it to a new order_id and set the value to $0.
 * Much of this comes from fundraiser_create_future_orders().
 *
 * @param object $order
 *   The order to clone.
 *
 * @return object
 *   The new order object.
 *
 * @todo Review and refactor.
 */
function _fundraiser_upsell_clone_order($order, $options = NULL) {
  // Create new order.
  $new_order = commerce_order_new($order->uid);
  // Copy all values to new order.
  $new_id = $new_order->order_id;
  $new_order = clone $order;
  $new_order->order_id = $new_id;
  // Make sure we know this is decoupled.
  $new_order->data['cloned_from'] = $order->order_id;
  // Set the proper status.
  $status = (isset($options['status'])) ? $options['status'] : $order->order_status;
  $new_order->order_status = $status;
  // Get the amount and set it.
  $amount = (isset($options['amount'])) ? $options['amount'] : $order->order_total;
  $new_order->products[0]->price = $amount;
  $new_order->order_total = $amount;
  // Calculate and set the start date.
  $date = new DateTime('NOW');
  // Make sure the payment is next month.
  $date->modify('next month');
  $date_to_start = strtotime($date->format('Y-m-d'));
  // Add this to the order data for later processing.
  $new_order->data['date_to_start'] = $date_to_start;
  // Remove the response from the original order.
  if (!empty($new_order->data['response'])) {
    unset($new_order->data['response']);
  }
  // Remove the old product id and save.
  unset($new_order->products[0]->order_product_id);
  commerce_order_save($new_order);
  // Add a comment to the order stating when it will be charged.
  // @todo This function doesn't exist.  Refactor.
  uc_order_comment_save($new_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $date_to_start))), 'admin');
  // Add the new order to the fundraiser_recurring table
  // so it will be processed in the future.
  $gateway = $order->data['gateway'];
  $nid = $order->products[0]->nid;
  $sid = ($_GET['sid']) ? $_GET['sid'] : 0;
  // @todo This function doesn't exist.  Refactor.
  $donation_form_url = _fundraiser_donation_form_path($nid);
  db_query("
    INSERT INTO {fundraiser_recurring}
    (master_order_id, order_id, next_charge, gateway, form_url)
    VALUES (%d, %d, '%s', '%s', '%s')
    ", $new_id, $new_id, $date_to_start, $gateway, $donation_form_url);

  // Now add it to the fundraiser_webform_order table.
  db_query("
    INSERT INTO {fundraiser_webform_order}
    (webform_nid, order_id, sid, recurring_status, user_agent, form_url)
    VALUES (%d, %d, %d, %d, '%s', '%s')
    ", $nid, $new_id, $sid, $order->data['recurring_status'], $_SERVER['HTTP_USER_AGENT'], $donation_form_url);

  return $new_order;
}

/**
 * Check to see if a donation was successfully added as a recurring.
 *
 * @param int $did
 *   The order/donation id.
 *
 * @return bool
 *   Whether the donation is recurring.
 */
function _fundraiser_upsell_check_recurring($did) {
  $is_recurring = db_query('
    SELECT count(*)
    FROM {fundraiser_sustainers}
    WHERE master_did = :mid', array(':mid' => $did))->fetchField();
  return ($is_recurring > 0) ? TRUE : FALSE;
}

/**
 * Add a custom campaign ID to the recurring donations.
 *
 * Add a custom campaign id to the recurring donations in the data array for
 * each order. This will later be used to alter the batch hook and set
 * this campaign id for salesforce.
 *
 * @param int $master_order_id
 *   The order id for the master order.
 * @param string $campaign_id
 *   The campaign id to add to each order.
 */
function _fundraiser_upsell_set_recurring_campaigns($master_order_id, $campaign_id) {
  // Grab the list of orders that are recurring in the series.
  $recurring = array();
  $result = db_query("SELECT * FROM {fundraiser_recurring} WHERE master_order_id = %d", $master_order_id);
  while ($row = db_fetch_array($result)) {
    $recurring[] = $row['order_id'];
  }
  // Loop through the list.
  foreach ($recurring as $order_id) {
    // Load the order, add the campaign id, and save the order again.
    $order = commerce_order_load($order_id);
    $order->data['campaign_id'] = $campaign_id;
    commerce_order_save($order);
  }
}

/**
 * Check that a field exists in Salesforce.
 *
 * @param string $type
 *   The Salesforce object type.
 * @param string $field_name
 *   The Salesforce field name to check.
 *
 * @return bool
 *   Whether the field exists.
 */
function _fundraiser_upsell_check_sf_field($type = 'Opportunity', $field_name = '') {
  // @todo This function doesn't exist.  Refactor.
  $objects = salesforce_management_api_fieldmap_objects('salesforce');
  return (isset($objects[$type]) && isset($objects[$type]['fields'][$field_name])) ? TRUE : FALSE;
}

/**
 * Determines if upsell should be available on this node.
 */
function fundraiser_upsell_is_available($node) {
  return (!empty($node) && fundraiser_is_donation_type($node->type));
}
