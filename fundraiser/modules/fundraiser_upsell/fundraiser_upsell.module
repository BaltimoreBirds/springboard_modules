<?php
/**
 * @file
 * Provides an upsell modal for creating recurring donations.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_upsell_menu() {
  $items = array();
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell'] = array(
    'title' => 'Fundraiser sustainer upsell settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell/general'] = array(
    'title' => 'General settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/settings/fundraiser/fundraiser_upsell/thank-you'] = array(
    'title' => 'Thank you settings',
    'description' => 'Administer fundraiser upsell "thank you" settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_thank_you_settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.mail.inc',
  );
  // Give admins an easy way to preview the upsell & thank you content.
  $items['node/%node/upsell'] = array(
    'title' => 'Upsell preview',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'fundraiser_upsell_content_preview',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_upsell_preview_access',
    'access arguments' => array(1),
  );
  // Callback to process the POSTed modal upsell form.
  $items['node/%node/upsell/process'] = array(
    'title' => 'Process upsell form',
    'description' => 'Ajax callback to process the fundraiser upsell donation form',
    'type' => MENU_CALLBACK,
    'page callback' => 'fundraiser_upsell_ajax_process',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_upsell_access',
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_upsell_permission() {
  return array(
    'administer fundraiser upsells' => array(
      'title' => t('Administer fundraiser upsell feature'),
      'description' => t('Perform administration tasks for fundraiser upsell.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Inject the upsell settings form into donation edit forms and modify the
 * donation forms to process the upsell if necessary.
 */
function fundraiser_upsell_form_alter(&$form, &$form_state, $form_id) {
  // Edit form - inject the Upsell settings into the node form.
  if (!empty($form['#node_edit_form']) && fundraiser_upsell_is_available($form['#node'])) {
    fundraiser_upsell_add_node_settings($form);
  }
  // View form - add the upsell submit function unless blocked by cookies.
  elseif (!empty($form['#node'])
    && fundraiser_upsell_is_enabled($form['#node'])
    && fundraiser_upsell_should_display_modal()) {
    $form['#submit'][] = 'fundraiser_upsell_webform_submit';
  }
}

/**
 * Form for injecting into the node edit page.
 *
 * @param array $form
 *   The form to modify.
 */
function fundraiser_upsell_add_node_settings(&$form) {
  $node = $form['#node'];
  $form['fundraiser_upsell'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upsell settings'),
    '#weight' => -4,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  );
  $form['fundraiser_upsell']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Upsell enabled'),
    '#default_value' => !empty($node->fundraiser_upsell['enabled']) ? $node->fundraiser_upsell['enabled'] : '',
  );
  $form['fundraiser_upsell']['content'] = array(
    '#title' => t('Form specific Upsell Content'),
    '#type' => 'textarea',
    '#default_value' => !empty($node->fundraiser_upsell['content']) ? $node->fundraiser_upsell['content'] : '',
    '#description' => t('If no content is given the default will be used.'),
  );

  $form['fundraiser_upsell']['footer'] = array(
    '#title' => t('Form specific Upsell Footer'),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => !empty($node->fundraiser_upsell['footer']) ? $node->fundraiser_upsell['footer'] : '',
    '#description' => t('Content that goes below the upsell form.  It can be used for a disclaimer.'),
  );

  $form['fundraiser_upsell']['thankyou'] = array(
    '#title' => t('Thank you content'),
    '#type' => 'textarea',
    '#default_value' => !empty($node->fundraiser_upsell['thankyou']) ? $node->fundraiser_upsell['thankyou'] : '',
    '#description' => t('The content in the modal after the sustainer is processed.'),
  );

  $form['fundraiser_upsell']['modal_theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Modal theming'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fundraiser_upsell']['modal_theme']['class'] = array(
    '#title' => t('Custom CSS class(es)'),
    '#type' => 'textfield',
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['class']) ? $node->fundraiser_upsell['modal_theme']['class'] : '',
    '#description' => t('Separate multiple classes with a space.'),
  );
  $form['fundraiser_upsell']['modal_theme']['width'] = array(
    '#title' => t('Modal window width (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['width']) ? $node->fundraiser_upsell['modal_theme']['width'] : 400,
    '#description' => t('This will override the site default.'),
    '#field_suffix' => 'px',
  );
  $form['fundraiser_upsell']['modal_theme']['height'] = array(
    '#title' => t('Modal window height (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['height']) ? $node->fundraiser_upsell['modal_theme']['height'] : 300,
    '#description' => t('This will override the site default.'),
    '#field_suffix' => 'px',
  );

  if (module_exists('market_source')) {
    $salesforce_campaign_options = market_source_get_campaigns();

    if (!empty($salesforce_campaign_options)) {
      $salesforce_campaign_options = array_merge(
        array('' => '(blank)'),
        $salesforce_campaign_options
      );

      $form['fundraiser_upsell']['campaign_id'] = array(
        '#title' => t('Sustainer Salesforce Campaign ID'),
        '#type' => 'select',
        '#options' => $salesforce_campaign_options,
        '#default_value' => !empty($node->fundraiser_upsell['campaign_id']) ? $node->fundraiser_upsell['campaign_id'] : variable_get('fundraiser_upsell_sf_campaign_id', ''),
        '#description' => t('Set the campaign id to be used for the upsell form. Please note that if this field is left blank, then all recurring donations will have blank campaign ids.'),
      );
    }
  }

  $form['#validate'][] = 'fundraiser_upsell_node_form_validate';
}

/**
 * Additional validation for the fundraiser_upsell node settings.
 */
function fundraiser_upsell_node_form_validate($form, &$form_state) {
  $modal_width = $form_state['values']['fundraiser_upsell']['modal_theme']['width'];
  $modal_height = $form_state['values']['fundraiser_upsell']['modal_theme']['height'];
  if (empty($modal_width) || !is_numeric($modal_width)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_width',
      t('The fundraiser upsell modal width must be a number.'));
  }
  if (empty($modal_height) || !is_numeric($modal_height)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_height',
      t('The fundraiser upsell modal height must be a number.'));
  }
}

/**
 * Extra donation form submit function to attach the upsell process.
 */
function fundraiser_upsell_webform_submit($form, &$form_state) {
  // If it's not successful (no submission ID), don't show upsell and skip
  // checking for the recurring setting.
  if (empty($form_state['values']['details']['sid'])) {
    return;
  }

  // Don't show upsell if the donor is already recurring.
  $recurring = FALSE;

  // First get the component ID of the recurring component.
  $recurring_cid = fundraiser_sustainers_get_recurring_cid_by_node($form['#node']);

  // Then determine if that component value is recurring.
  // !== because a cid could be 0.
  if ($recurring_cid !== FALSE) {
    $recurring_value = $form_state['values']['submitted'][$recurring_cid];
    $recurring = fundraiser_sustainers_component_value_is_recurring($recurring_value);
  }

  if (!$recurring) {
    // Add the upsell nid, sid, & uid to the session data so the modal can
    // be added to the page later in another hook.
    $_SESSION['upsell'] = array(
      'nid' => $form_state['values']['details']['nid'],
      'sid' => $form_state['values']['details']['sid'],
      'uid' => $form_state['values']['details']['uid'],
    );
  }
}

/**
 * Implements hook_page_alter().
 *
 * Adds the modal to the page.
 */
function fundraiser_upsell_page_alter(&$page) {
  // Check for upsell trigger.
  // Added by upsell's webform submit handler.
  if (!empty($_SESSION['upsell'])) {
    // Add the upsell to the page.
    $modal = array();
    $did = fundraiser_donation_get_did_by_sid($_SESSION['upsell']['sid']);
    // !== because we could get a did of 0.
    if ($did !== FALSE) {
      $donation = fundraiser_donation_get_donation($did);

      $modal = fundraiser_upsell_create_modal_variables($donation->node);
      $modal['#did'] = $did;
    }

    // Add the modal to the bottom of the page.
    $page['footer']['message-modal'] = $modal;

    // Remove the upsell session data.
    $_SESSION['upsell'] = NULL;
  }
}

/**
 * Upsell donation form for the modal.
 *
 * @param int $did
 *   Donation ID.
 * @param bool $preview
 *   Whether this is the preview form.
 *
 * @return array
 *   Form API array.
 */
function fundraiser_upsell_donation_form($form, &$form_state, $did = NULL, $preview = FALSE) {

  if (!is_null($did) && $donation = fundraiser_donation_get_donation($did)) {
    $suggested_amount = fundraiser_upsell_find_suggested_amount($donation->amount);

    $campaign_id = !empty($donation->node->fundraiser_upsell['campaign_id']) ?
      $donation->node->fundraiser_upsell['campaign_id'] :
      variable_get('fundraiser_upsell_sf_campaign_id', '');

    $nid = $donation->nid;
  }
  else {
    $suggested_amount = '10';
    $campaign_id = '';
    $did = '';

    // In preview the nid will be arg(1).
    $nid = arg(1);
  }

  // Build the form.
  $form = array();

  $form['amount'] = array(
    '#title' => t('Monthly donation'),
    '#type' => 'textfield',
    '#size' => 5,
    '#field_prefix' => '$',
    '#default_value' => $suggested_amount,
    '#weight' => -10,
  );

  // These have to be hidden instead of value since we're submitting this form
  // in a weird way.  It's a custom form action submitted via ajax() in
  // the upsell JS.
  $form['did'] = array(
    '#type' => 'hidden',
    '#value' => $did,
  );
  $form['campaign_id'] = array(
    '#type' => 'hidden',
    '#value' => $campaign_id,
  );
  $form['preview'] = array(
    '#type' => 'hidden',
    '#value' => $preview,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Sign Me Up!'),
    '#attributes' => array('id' => 'edit-submit'),
  );
  $form['close'] = array(
    '#type' => 'button',
    '#value' => t('No Thanks'),
    '#weight' => 1,
    '#attributes' => array('id' => 'edit-close'),
  );

  // I think we're using a custom action since this form doesn't have a
  // specific page callback.
  $form['#action'] = url('node/' . $nid . '/upsell/process');
  return $form;
}

/**
 * Submission callback function for the modal upsell form.
 *
 * Does some error checking, clones the original donation, uses the cloned
 * donation to create a sustainer series, sets acceptance cookie,
 * sends thankyou email, and returns the content for the thankyou modal.
 *
 * @param array $data
 *   The submitted upsell form data.
 *
 * @return string
 *   Thank you content.
 */
function fundraiser_upsell_upsell_ajax_submit($data) {
  // Set the default values.
  global $user;
  $amount = $data['amount'];
  $campaign_id = $data['campaign_id'];
  $donation = fundraiser_donation_get_donation($data['did']);
  $is_recurring = fundraiser_upsell_check_recurring($donation->did);
  $different_user = ($user->uid != $donation->uid) ? TRUE : FALSE;
  // If the donation is already recurring, then stop.
  if ($is_recurring) {
    watchdog('fundraiser_upsell', 'Upsell failed - Donation %did is already part of a recurring series.', array('%did' => $donation->did), WATCHDOG_NOTICE);
    return 'This is already a recurring donation. Thank you.';
  }
  // If the user is different then stop - skip anon users because we don't know.
  if ($different_user && $user->uid != 0) {
    $replacements = array(
      '%did' => $donation->did,
      '%upsell_uid' => $user->uid,
      '%donation_uid' => $donation->uid,
    );
    watchdog('fundraiser_upsell', 'Upsell user doesn\'t match the donation %did user. Upsell uid is %upsell_uid and Donation uid is %donation_uid', $replacements, WATCHDOG_NOTICE);
    return 'There was a problem processing your Donation. Please try again.';
  }

  // Here we need to clone the original donation but with a future next_charge
  // date and a different amount.
  // Then use that as the master donation to create a recurring series.
  $master_donation = fundraiser_upsell_copy_donation($donation, 'pending_future_payment', $amount);

  // Create the recurring donation series.
  $success = fundraiser_upsell_create_recurring_series($master_donation);

  // Mark this donation as an upsell.
  $master_donation->data['upsell'] = TRUE;

  // Grab and process the thank you content if successful.
  if ($success) {
    // Add the campaign id to all recurring donations.
    if (!empty($campaign_id)) {
      // @todo Fix this.
      // fundraiser_upsell_set_recurring_campaigns($master_donation->did, $campaign_id);
      $master_donation->data['campaign_id'] = $campaign_id;
    }
    fundraiser_upsell_set_acceptance_cookie();

    // Send the thank you message.
    module_load_include('inc', 'fundraiser_upsell', 'includes/fundraiser_upsell.mail');

    fundraiser_upsell_send_thank_you($master_donation);

    // Generate the thank you content.
    $raw_content = $master_donation->node->fundraiser_upsell['thankyou'];
    $content = token_replace($raw_content, array('donation' => $master_donation), array('clear' => TRUE));

  }
  else {
    watchdog('fundraiser_upsell', 'Upsell failed for the original donation %did.', array('%did' => $donation->did), WATCHDOG_NOTICE);
    return 'There was a problem processing your donation. Please try again.';
  }

  return $content;
}

/**
 * Convert the single donation into a recurring donation.
 *
 * @param object $donation
 *   The donation that will become the master donation in the sustainer series.
 *
 * @return bool
 *   TRUE on successful creation of sustainers in the series.
 *
 */
function fundraiser_upsell_create_recurring_series($donation) {
  // Since this is decoupled, we need to set the start date to ensure that we
  // advance the future donations by one month.
  $date_to_start = $donation->data['date_to_start'];

  // Create the recurring donations.
  // Get the expiration month and year out of the payment gateway.
  $expires = fundraiser_commerce_get_payment_method_expiration_date_from_donation($donation);
  if (!empty($expires)) {
    _fundraiser_sustainers_create_future_orders($donation, $expires['month'], $expires['year'], $date_to_start);

    if (fundraiser_upsell_check_recurring($donation->did)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_queue_batch_item_alter().
 *
 * Add the upsell campaign id & initial upsell donation id.
 *
 * @todo Refactor after everything else is working.
 *
function fundraiser_upsell_queue_batch_item_alter(&$object, $type, $action, $oid) {
  // Process single donations.
  if ($type == FUNDRAISER_SINGLE_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Set the campaign id if its been added.
    if (isset($order->data['campaign_id'])) {
      $object['CampaignId'] = $order->data['campaign_id'];
    }
    // Limit to update operations because that's when opportunities
    // that are part of a recurring series get updated.
    if ($action == 'update') {
      // Make sure the SF field exists.
      if (_fundraiser_upsell_check_sf_field('Opportunity', 'Initial_Upsell_Donation__c')) {
        // Get the master order id & its sfid.
        $master_order_id = db_result(db_query("SELECT master_order_id FROM {fundraiser_recurring} WHERE order_id = %d", $oid));
        // Load the master order id and pop out the initial_donation.
        // @todo Maybe query directly to avoid overhead of uc_order_load
        $master_order = uc_order_load($master_order_id);

        // If cloned_from is set, this is a donation that is part of a
        // decoupled upsell.
        // In this case we want the SFID of the original,
        // which is the order id stored in cloned_from.
        if ($master_order->data['cloned_from']) {
          $sfid = salesforce_management_api_id_load('donation', $master_order->data['cloned_from']);
          $object['Upsell_Order_ID__c'] = $master_order->data['cloned_from'];
        }
        // Normal upsell. Master order id is the original.
        elseif ($master_order->data['upsell']) {
          $object['Upsell_Order_ID__c'] = $master_order->order_id;
          $sfid = salesforce_management_api_id_load('donation', $master_order->order_id);
        }

        // Set the original order SFID.
        if (!empty($sfid)) {
          $object['Initial_Upsell_Donation__c'] = $sfid['sfid'];
        }
      }
    }
  }
  // Process recurring donations.
  if ($type == FUNDRAISER_RECURRING_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Make sure the SF field exists & we have the sfid.
    // This should really only process on an update
    // and after the postprocess hook below.
    $field_exists = _fundraiser_upsell_check_sf_field('npe03__Recurring_Donation__c', 'Initial_Upsell_Donation__c');

    // If cloned_from is set,
    // this is a donation that is part of a decoupled upsell.
    if ($field_exists && isset($order->data['cloned_from'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->data['cloned_from'];
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }
    // Normal upsell.
    elseif ($field_exists && isset($order->data['upsell'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->order_id;
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }

  }
}
*/

/**
 * Implements hook_queue_postprocess_batch().
 *
 * Add the initial upsell sfid to the master order.
 *
 * @todo Refactor after everything else is working.
 *
function fundraiser_upsell_queue_postprocess_batch($batch, $responses, $items_in_batch) {
  // Only process single donation batches that are successful and recurring.
  $is_recurring = fundraiser_upsell_check_recurring($batch['records'][0]->oid);
  if ($batch['type'] == FUNDRAISER_SINGLE_DONATION_TYPE && $responses[0]->success && $is_recurring) {
    // The first item is the master order.
    $order = uc_order_load($batch['records'][0]->oid);
    // Get the initial order and its sfid.
    $initial_order_id = (isset($order->data['cloned_from'])) ? $order->data['cloned_from'] : $order->order_id;
    $sfid = salesforce_management_api_id_load('donation', $initial_order_id);
    // Add the sfid to the order object.
    $order->data['initial_donation'] = $sfid['sfid'];
    uc_order_save($order);
    // Put in queue as recurring donation.
    sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'update');
  }
}
*/

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_node_record($node);
    drupal_write_record('fundraiser_upsell', $record);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_node_record($node);
    // If upsell is enabled and the record doesn't exist then insert new row.
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell', $record, 'nid');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $upsell = db_query('
        SELECT * FROM {fundraiser_upsell} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      // Merge data from upsell settings with node.
      $upsell = fundraiser_upsell_unflatten_record($upsell);
      $nodes[$node->nid]->fundraiser_upsell = $upsell;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_node_delete(&$node) {
  db_query('DELETE FROM {fundraiser_upsell} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_node_record($node) {

  $campaign_id = !empty($node->fundraiser_upsell['campaign_id']) ? $node->fundraiser_upsell['campaign_id'] : '';

  return array(
    'nid' => $node->nid,
    'enabled' => $node->fundraiser_upsell['enabled'],
    'content' => $node->fundraiser_upsell['content'],
    'footer' => $node->fundraiser_upsell['footer'],
    'thankyou' => $node->fundraiser_upsell['thankyou'],
    'class' => $node->fundraiser_upsell['modal_theme']['class'],
    'modal_width' => $node->fundraiser_upsell['modal_theme']['width'],
    'modal_height' => $node->fundraiser_upsell['modal_theme']['height'],
    'campaign_id' => $campaign_id,
  );
}

/**
 * Takes the result from the upsell DB query and turns it into a tree.
 *
 * @param array $upsell
 *   Associative array from a db_query result.
 *
 * @return array
 *   Associative array with modal_theme as a sub array.
 */
function fundraiser_upsell_unflatten_record($upsell) {
  $unflat = array(
    'enabled' => $upsell['enabled'],
    'content' => $upsell['content'],
    'footer' => $upsell['footer'],
    'thankyou' => $upsell['thankyou'],
    'modal_theme' => array(
      'class' => $upsell['class'],
      'width' => $upsell['modal_width'],
      'height' => $upsell['modal_height'],
    ),
    'campaign_id' => $upsell['campaign_id'],
  );

  return $unflat;
}

/**
 * Implements hook_theme().
 */
function fundraiser_upsell_theme() {
  $theme = array(
    'fundraiser_upsell_modal' => array(
      'variables' => array(
        'width' => 400,
        'height' => 300,
        'class' => '',
        'rejection_days' => '180',
        'content' => '',
        'footer' => '',
        'did' => NULL,
        'preview' => FALSE,
      ),
    ),
  );

  return $theme;
}

/**
 * Theme callback for the upsell modal.
 *
 * @param array $variables
 *
 * @return string
 *   The HTML for the modal.
 */
function theme_fundraiser_upsell_modal($variables) {
  // Add the css & js.
  $path = drupal_get_path('module', 'fundraiser_upsell');
  drupal_add_css($path . '/css/fundraiser_upsell.css');
  drupal_add_js($path . '/js/fundraiser_upsell.js');
  drupal_add_js($path . '/js/jquery.blockUI.js');

  $settings = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
    'rejectionDays' => $variables['rejection_days'],
  );
  drupal_add_js(array('fundraiser_upsell' => $settings), 'setting');

  $upsell_size = 'width:' . $variables['width'] . 'px;height:' . $variables['height'] . 'px;';

  $content = '<div id="message-wrapper" class="hidden">';

  $content .= '<div id="message-modal" class="live-modal ' . $variables['class'];
  $content .= '" style="' . $upsell_size . '">';

  if ($variables['preview']) {
    $content .= '<p><strong>' . t('Preview.  Accepting this upsell will not create any donations.') . '</strong></p>';
  }

  $content .= '<div class="message-content">' . $variables['content'] . '</div>';

  $form = drupal_get_form('fundraiser_upsell_donation_form', $variables['did'], $variables['preview']);
  $content .= drupal_render($form);

  $content .= '<div id="message-footer">' . $variables['footer'] . '</div>';
  $content .= '</div></div>';

  return $content;
}

/**
 * Page callback for the upsell preview.
 *
 * @param object $node
 *   The webform donation node object.
 *
 * @return array
 *   A render array for generating the content.
 */
function fundraiser_upsell_content_preview($node) {

  $modal = fundraiser_upsell_create_modal_variables($node);

  // No donation ID in preview.
  $modal['#did'] = '';
  $modal['#preview'] = TRUE;

  return $modal;
}

/**
 * Creates a default render array for an upsell modal.
 *
 * @param object $node
 *   The node object with the upsell settings.
 *
 * @return array
 *   The modal render array with sane default values.
 */
function fundraiser_upsell_create_modal_variables($node) {
  $modal = array(
    '#theme' => 'fundraiser_upsell_modal',
    '#rejection_days' => variable_get('fundraiser_upsell_rejection_lifetime', '180'),
    '#preview' => FALSE,
  );

  // Override defaults.
  if (!empty($node->fundraiser_upsell['modal_theme']['width'])) {
    $modal['#width'] = $node->fundraiser_upsell['modal_theme']['width'];
  }
  if (!empty($node->fundraiser_upsell['modal_theme']['height'])) {
    $modal['#height'] = $node->fundraiser_upsell['modal_theme']['height'];
  }
  if (!empty($node->fundraiser_upsell['modal_theme']['class'])) {
    $modal['#class'] = $node->fundraiser_upsell['modal_theme']['class'];
  }
  if (!empty($node->fundraiser_upsell['content'])) {
    $modal['#content'] = $node->fundraiser_upsell['content'];
  }
  else {
    $modal['#content'] = variable_get('fundraiser_upsell_default_content', '');
  }
  if (!empty($node->fundraiser_upsell['footer'])) {
    $modal['#footer'] = $node->fundraiser_upsell['footer'];
  }
  else {
    $modal['#footer'] = variable_get('fundraiser_upsell_default_content_disclaimer', '');
  }

  return $modal;
}

/**
 * Process the upsell donation form from the POSTed ajax callback.
 */
function fundraiser_upsell_ajax_process($node) {
  $data = $_POST;
  if (isset($data['preview']) && $data['preview']) {
    // Generate the thank you content.
    // Note that token replacement doesn't happen on a preview since we don't have a donation.
    $content = $node->fundraiser_upsell['thankyou'];
  }
  // Check the form token to be sure this is a valid callback.
  elseif (!drupal_valid_token($data['form_token'], $data['form_id'], TRUE)) {
    watchdog('fundraiser_upsell', 'Upsell donation %did failed because of an invalid form token.', array('%did' => $data['did']), WATCHDOG_NOTICE);
    $content = t('There was a problem with your donation. Please try again');
  }
  else {
    $content = fundraiser_upsell_upsell_ajax_submit($data);
  }
  drupal_json_output($content);
}

/**
 * Determine if we should display the upsell preview for a node.
 *
 * Upsell must be enabled for the node and the user must have
 * the upsell permission.
 */
function fundraiser_upsell_preview_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('administer fundraiser upsells');
}

/**
 * Access check that the user can use the upsell ajax callback for the node.
 *
 * This makes sure the upsell process call won't happen if the node doesn't
 * have upsell enabled.
 */
function fundraiser_upsell_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('access content');
}

/**
 * Check the cookies and settings to see if upsell modal should be displayed.
 *
 * @return bool
 *   TRUE if the modal should be displayed.
 */
function fundraiser_upsell_should_display_modal() {
  $rejection = (!empty($_COOKIE['fundraiser_upsell_rejection'])) ? $_COOKIE['fundraiser_upsell_rejection'] : FALSE;
  $acceptance = (!empty($_COOKIE['fundraiser_upsell_acceptance'])) ? $_COOKIE['fundraiser_upsell_acceptance'] : FALSE;
  $debug = variable_get('fundraiser_upsell_debug', FALSE);

  // No cookies OR debug is on, then we should display the upsell.
  return ((!$rejection && !$acceptance) || $debug);
}

/**
 * Determine if the node has upsell enabled.
 *
 * @return bool
 *   TRUE is upsell is enabled on this node.
 */
function fundraiser_upsell_is_enabled($node) {
  return (
    !empty($node)
    && fundraiser_is_donation_type($node->type)
    && !empty($node->fundraiser_upsell['enabled'])
    && $node->fundraiser_upsell['enabled']
  );
}

/**
 * Get the suggested amount from the admin bracket settings.
 *
 * @param int $amount
 *   The given amount.
 *
 * @todo Is amount an int or float?
 *
 * @return int
 *   The suggested amount to upsell to.
 *
 * @todo Is the return value an int or float?
 */
function fundraiser_upsell_find_suggested_amount($amount) {
  $default_upsell = 10;
  $brackets = variable_get('fundraiser_upsell_brackets', array());
  if (count($brackets) < 1) {
    return $default_upsell;
  }

  foreach ($brackets as $i => $bracket) {
    // If the amount is within the brackets, then use this upsell setting.
    if (($amount >= $bracket['low']) && ($amount <= $bracket['high'])) {
      return $bracket['upsell'];
    }
    // If this is the last loop and we don't have an upsell yet,
    // set it for the highest bracket.
    if ($i == count($brackets) - 1) {
      return $bracket['upsell'];
    }
  }
  return $default_upsell;
}

/**
 * Copy the donation for decoupling from the original donation.
 *
 * Copy the original donation to a new did and update the status and amount..
 *
 * @param object $donation
 *   The donation to copy.
 * @param string $new_status
 *   The status of the new donation.
 * @param float $amount
 *   The amount for the new donation.
 *
 * @return object
 *   The new donation object.
 *
 * @todo Review and refactor.
 */
function fundraiser_upsell_copy_donation($donation, $new_status = 'pending_future_payment', $new_amount = '') {

  $new_donation = clone $donation;

  // Create the new donation object, but do not process it.
  // New donation has all of the old donation information already loaded.
  // Also creates a new order to along with the donation.
  fundraiser_donation_create($new_donation);

  $next_charge = strtotime('+1 month');
  fundraiser_donation_comment($new_donation, 'Upsell donation scheduled to be charged at @next_charge',
    array('@next_charge' => format_date($next_charge)));

  // After this, the donation did and donation data is set.
  // The new donation object, with new did, needs to be saved to recurring so we can grab it later.
  $recurring_donation_record = array(
    'master_did' => $new_donation->did,
    'did' => $new_donation->did,
    'next_charge' => $next_charge,
    'sustainer_key' => fundraiser_sustainers_get_sustainer_key_value(),
  );
  // Update the recurring table.
  _fundraiser_sustainers_create_recurring($recurring_donation_record);

  // Load the newly created individual donation into salesforce_donation.
  // @todo This came from sustainers, do I need to do something here?
//  if (module_exists('salesforce_genmap')) {
//    $sf_donation = fundraiser_donation_get_donation($new_donation->did, TRUE);
//    salesforce_genmap_send_object_to_queue('salesforce_donation', 'insert',
//      $sf_donation->node, $sf_donation->did, $sf_donation, 'donation');
//  }

  // Make sure we know this is cloned from an original donation
  // so we can link the two..
  $new_donation->data['cloned_from'] = $donation->did;

  // Set the proper order status and amount.
  $new_donation->status = $new_status;
  $new_donation->donation['amount'] = $new_amount;

  // Calculate and set the start date.
  $date = new DateTime('NOW');
  // Make sure the payment is next month.
  $date->modify('next month');
  $date_to_start = strtotime($date->format('Y-m-d'));
  // Add this to the donation data for later processing.
  $new_donation->data['date_to_start'] = $date_to_start;

  // @todo Remove old response and other gateway stuff from donation?

  watchdog('upsell', var_export($donation, TRUE));

  fundraiser_donation_update($new_donation);
  return $new_donation;
}

/**
 * Check to see if a donation was successfully added as a recurring.
 *
 * @param int $did
 *   The donation ID of the master donation..
 *
 * @return bool
 *   Whether the donation has sustainer records (is recurring).
 */
function fundraiser_upsell_check_recurring($did) {
  return (fundraiser_sustainers_count_donations_in_series($did) > 0);
}

/**
 * Add a custom campaign ID to the recurring donations.
 *
 * Add a custom campaign id to the recurring donations in the data array for
 * each order. This will later be used to alter the batch hook and set
 * this campaign id for salesforce.
 *
 * @param int $master_order_id
 *   The order id for the master order.
 * @param string $campaign_id
 *   The campaign id to add to each order.
 *
 * @todo Change this to donation.
 */
function fundraiser_upsell_set_recurring_campaigns($master_order_id, $campaign_id) {
  // Grab the list of orders that are recurring in the series.
  $recurring = array();
  $result = db_query("SELECT * FROM {fundraiser_recurring} WHERE master_order_id = %d", $master_order_id);
  while ($row = db_fetch_array($result)) {
    $recurring[] = $row['order_id'];
  }
  // Loop through the list.
  foreach ($recurring as $order_id) {
    // Load the order, add the campaign id, and save the order again.
    $order = commerce_order_load($order_id);
    $order->data['campaign_id'] = $campaign_id;
    commerce_order_save($order);
  }
}

/**
 * Check that a field exists in Salesforce.
 *
 * @param string $type
 *   The Salesforce object type.
 * @param string $field_name
 *   The Salesforce field name to check.
 *
 * @return bool
 *   Whether the field exists.
 */
function _fundraiser_upsell_check_sf_field($type = 'Opportunity', $field_name = '') {
  // @todo This function doesn't exist.  Refactor.
  $objects = salesforce_management_api_fieldmap_objects('salesforce');
  return (isset($objects[$type]) && isset($objects[$type]['fields'][$field_name])) ? TRUE : FALSE;
}

/**
 * Determines if upsell should be available on this node.
 */
function fundraiser_upsell_is_available($node) {
  return (!empty($node) && fundraiser_is_donation_type($node->type));
}

/**
 * Set the fundraiser recurring acceptance cookie.
 */
function fundraiser_upsell_set_acceptance_cookie() {
  $cookie_lifetime = variable_get('fundraiser_upsell_acceptance_lifetime', 0);
  setcookie('fundraiser_upsell_acceptance', 1, REQUEST_TIME + 3600 * 24 * $cookie_lifetime, "/");
}
