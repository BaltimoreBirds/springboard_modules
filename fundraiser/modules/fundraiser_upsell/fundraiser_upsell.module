<?php
/**
 * @file
 * Provides an upsell modal for creating recurring donations.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_upsell_menu() {
  $items = array();
  $items['admin/springboard/options/fundraiser/fundraiser_upsell'] = array(
    'title' => 'Sustainer upsell settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/options/fundraiser/fundraiser_upsell/general'] = array(
    'title' => 'General settings',
    'description' => 'Administer fundraiser upsell settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_settings_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.admin.inc',
  );
  $items['admin/springboard/options/fundraiser/fundraiser_upsell/thank-you'] = array(
    'title' => 'Thank you settings',
    'description' => 'Administer fundraiser upsell "thank you" settings.',
    'access arguments' => array('administer fundraiser upsells'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_upsell_admin_thank_you_settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/fundraiser_upsell.mail.inc',
  );
  // Give admins an easy way to preview the upsell & thank you content.
  $items['node/%node/upsell'] = array(
    'title' => 'Upsell preview',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'fundraiser_upsell_content_preview',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_upsell_preview_access',
    'access arguments' => array(1),
  );
  // Callback to process the POSTed modal upsell form.
  $items['node/%node/upsell/process'] = array(
    'title' => 'Process upsell form',
    'description' => 'Ajax callback to process the fundraiser upsell donation form',
    'type' => MENU_CALLBACK,
    'page callback' => 'fundraiser_upsell_ajax_process',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_upsell_access',
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_upsell_permission() {
  return array(
    'administer fundraiser upsells' => array(
      'title' => t('Administer fundraiser upsell feature'),
      'description' => t('Perform administration tasks for fundraiser upsell.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Inject the upsell settings form into donation edit forms and modify the
 * donation forms to process the upsell if necessary.
 */
function fundraiser_upsell_form_alter(&$form, &$form_state, $form_id) {
  // Edit form - inject the Upsell settings into the node form.
  if (!empty($form['#node_edit_form']) && fundraiser_upsell_is_available($form['#node'])) {
    fundraiser_upsell_add_node_settings($form);
  }
  // View form - add the upsell submit function unless blocked by cookies.
  elseif (!empty($form['#node'])
    && fundraiser_upsell_is_enabled($form['#node'])
    && fundraiser_upsell_should_display_modal()) {
    $form['#submit'][] = 'fundraiser_upsell_webform_submit';
  }
}

/**
 * Form for injecting into the node edit page.
 *
 * @param array $form
 *   The form to modify.
 */
function fundraiser_upsell_add_node_settings(&$form) {
  $node = $form['#node'];
  $form['fundraiser_upsell'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upsell settings'),
    '#weight' => -4,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  );
  $form['fundraiser_upsell']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Upsell enabled'),
    '#default_value' => !empty($node->fundraiser_upsell['enabled']) ? $node->fundraiser_upsell['enabled'] : '',
  );
  $form['fundraiser_upsell']['content'] = array(
    '#title' => t('Form specific Upsell Content'),
    '#type' => 'textarea',
    '#default_value' => !empty($node->fundraiser_upsell['content']) ? $node->fundraiser_upsell['content'] : '',
    '#description' => t('If no content is given the default will be used.'),
  );

  $form['fundraiser_upsell']['footer'] = array(
    '#title' => t('Form specific Upsell Footer'),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => !empty($node->fundraiser_upsell['footer']) ? $node->fundraiser_upsell['footer'] : '',
    '#description' => t('Content that goes below the upsell form.  It can be used for a disclaimer.'),
  );

  $form['fundraiser_upsell']['thankyou'] = array(
    '#title' => t('Thank you content'),
    '#type' => 'textarea',
    '#default_value' => !empty($node->fundraiser_upsell['thankyou']) ? $node->fundraiser_upsell['thankyou'] : '',
    '#description' => t('The content in the modal after the sustainer is processed.'),
  );

  $form['fundraiser_upsell']['modal_theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Modal theming'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fundraiser_upsell']['modal_theme']['class'] = array(
    '#title' => t('Custom CSS class(es)'),
    '#type' => 'textfield',
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['class']) ? $node->fundraiser_upsell['modal_theme']['class'] : '',
    '#description' => t('Separate multiple classes with a space.'),
  );
  $form['fundraiser_upsell']['modal_theme']['width'] = array(
    '#title' => t('Modal window width (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['width']) ? $node->fundraiser_upsell['modal_theme']['width'] : 400,
    '#description' => t('This will override the site default.'),
    '#field_suffix' => 'px',
  );
  $form['fundraiser_upsell']['modal_theme']['height'] = array(
    '#title' => t('Modal window height (in pixels)'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => !empty($node->fundraiser_upsell['modal_theme']['height']) ? $node->fundraiser_upsell['modal_theme']['height'] : 300,
    '#description' => t('This will override the site default.'),
    '#field_suffix' => 'px',
  );

  if (module_exists('email_wrappers')) {
    // If this is an edit form, use the node's email wrapper settings.
    if (!empty($form['#node']->nid)) {
      $email_wrapper_delta = 'nid_' . $form['#node']->nid;
    }
    // Otherwise, start with the default global settings.
    else {
      $email_wrapper_delta = 'thank_you_settings';
    }
    module_load_include('inc', 'email_wrappers', 'email_wrappers.api');
    $params = array(
      'name' => 'fundraiser_upsell',
      'module' => 'fundraiser_upsell',
      'delta' => $email_wrapper_delta,
    );

    // Generate the mail configuration form.
    $form['fundraiser_upsell']['email_wrappers'] = email_wrappers_mail_form(array(), $params);
    $form['fundraiser_upsell']['email_wrappers']['#type'] = 'fieldset';
    $form['fundraiser_upsell']['email_wrappers']['#title'] = t('Confirmation email settings');

    $form['fundraiser_upsell']['email_wrappers']['headers']['from_name']['#required'] = FALSE;
    $form['fundraiser_upsell']['email_wrappers']['headers']['from_mail']['#required'] = FALSE;
    $form['fundraiser_upsell']['email_wrappers']['message']['subject']['#required'] = FALSE;

    unset($form['fundraiser_upsell']['email_wrappers']['headers']['recipients']);
    unset($form['fundraiser_upsell']['email_wrappers']['headers']['cc']);
    unset($form['fundraiser_upsell']['email_wrappers']['headers']['bcc']);
    unset($form['fundraiser_upsell']['email_wrappers']['save']);
    unset($form['fundraiser_upsell']['email_wrappers']['#validate']);
    unset($form['fundraiser_upsell']['email_wrappers']['#submit']);
  }

  // Let submodules add settings.
  drupal_alter('upsell_node_settings', $form);

  $form['#validate'][] = 'fundraiser_upsell_node_form_validate';
}

/**
 * Additional validation for the fundraiser_upsell node settings.
 */
function fundraiser_upsell_node_form_validate($form, &$form_state) {
  $modal_width = $form_state['values']['fundraiser_upsell']['modal_theme']['width'];
  $modal_height = $form_state['values']['fundraiser_upsell']['modal_theme']['height'];
  if (empty($modal_width) || !is_numeric($modal_width)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_width',
      t('The fundraiser upsell modal width must be a number.'));
  }
  if (empty($modal_height) || !is_numeric($modal_height)) {
    form_set_error('fundraiser_upsell][modal_theming][upsell_modal_height',
      t('The fundraiser upsell modal height must be a number.'));
  }

  // @todo Maybe get email wrappers validate happening.
  // Validate email wrappers won't work because they're conditional on
  // upsell being enabled.
//  if (module_exists('email_wrappers')) {
//    $email_wrappers_form_state = array(
//      'values' => $form_state['values']['fundraiser_upsell']['email_wrappers'],
//    );
//    module_load_include('inc', 'email_wrappers', 'email_wrappers.api');
//    email_wrappers_mail_form_validate($form, $email_wrappers_form_state);
//  }
}

/**
 * Save the email wrapper settings for a node.
 *
 * @param int $nid
 *   Node ID.
 * @param array $values
 *   The values from
 *   $form_state['values']['fundraiser_upsell']['email_wrappers'].
 */
function fundraiser_upsell_save_email_wrapper_settings($nid, $values) {
  $form = array();
  $delta = 'nid_' . $nid;

  // Need to fake a form state in order to save the mail settings.
  $email_wrappers_form_state = array(
    'values' => $values,
  );
  $email_wrappers_form_state['values']['delta'] = $delta;
  $headers = $values['headers'];
  $message = $values['message'];
  $email_wrappers_form_state['values']['from_name'] = $headers['from_name'];
  $email_wrappers_form_state['values']['from_mail'] = $headers['from_mail'];
  $email_wrappers_form_state['values']['recipients'] = '';
  $email_wrappers_form_state['values']['cc'] = '';
  $email_wrappers_form_state['values']['bcc'] = '';
  $email_wrappers_form_state['values']['subject'] = $message['subject'];
  $email_wrappers_form_state['values']['html_body'] = $message['html_body'];
  $email_wrappers_form_state['values']['text_body'] = $message['text_body'];

  module_load_include('inc', 'email_wrappers', 'email_wrappers.api');
  email_wrappers_mail_form_submit($form, $email_wrappers_form_state);
}

/**
 * Extra donation form submit function to attach the upsell process.
 */
function fundraiser_upsell_webform_submit($form, &$form_state) {
  // If it's not successful (no submission ID), don't show upsell and skip
  // checking for the recurring setting.
  if (empty($form_state['values']['details']['sid'])) {
    return;
  }

  // Don't show upsell if the donor is already recurring.
  $recurring = FALSE;

  // First get the component ID of the recurring component.
  $recurring_cid = fundraiser_sustainers_get_recurring_cid_by_node($form['#node']);

  // Then determine if that component value is recurring.
  // !== because a cid could be 0.
  if ($recurring_cid !== FALSE) {
    $recurring_value = $form_state['values']['submitted'][$recurring_cid];
    $recurring = fundraiser_sustainers_component_value_is_recurring($recurring_value);
  }

  if (!$recurring) {
    // Add the upsell nid, sid, & uid to the session data so the modal can
    // be added to the page later in another hook.
    $_SESSION['upsell'] = array(
      'sid' => $form_state['values']['details']['sid'],
    );
  }
}

/**
 * Implements hook_page_alter().
 *
 * Adds the modal to the page if needed.
 */
function fundraiser_upsell_page_alter(&$page) {
  // Check for upsell trigger.
  // Added by upsell's webform submit handler.
  if (!empty($_SESSION['upsell'])) {
    // Add the upsell to the page.
    $did = fundraiser_donation_get_did_by_sid($_SESSION['upsell']['sid']);
    // !== because we could get a did of 0.
    if ($did !== FALSE) {
      $donation = fundraiser_donation_get_donation($did);

      $modal = fundraiser_upsell_create_modal_variables($donation->node);
      $modal['#did'] = $did;

      // Replace tokens in the content.
      $modal['#content'] = token_replace($modal['#content'], array('donation' => $donation));

      // Add the modal to the bottom of the page.
      $page['footer']['message-modal'] = $modal;

    }

    // Remove the upsell session data.
    $_SESSION['upsell'] = NULL;
  }
}

/**
 * Upsell donation form for the modal.
 *
 * @param array $form
 *   Forms API array.
 * @param array $form_state
 *   The form state.
 * @param int $did
 *   Donation ID.
 * @param bool $preview
 *   Whether this is the preview form.
 *
 * @return array
 *   Form API array.
 */
function fundraiser_upsell_donation_form($form, &$form_state, $did = NULL, $preview = FALSE) {
  if (!is_null($did) && $donation = fundraiser_donation_get_donation($did)) {
    $suggested_amount = fundraiser_upsell_find_suggested_amount($donation->amount);
    $nid = $donation->nid;
  }
  else {
    $suggested_amount = '10';
    $did = '';

    // In preview the nid will be arg(1).
    $nid = arg(1);
  }

  // Build the form.
  $form = array();

  $form['amount'] = array(
    '#title' => t('Monthly donation'),
    '#type' => 'textfield',
    '#size' => 5,
    '#field_prefix' => '$',
    '#default_value' => $suggested_amount,
    '#weight' => -10,
  );

  // These have to be hidden instead of value since we're submitting this form
  // in a weird way.  It's a custom form action submitted via ajax() in
  // the upsell JS.
  $form['did'] = array(
    '#type' => 'hidden',
    '#value' => $did,
  );
  $form['preview'] = array(
    '#type' => 'hidden',
    '#value' => $preview,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Sign Me Up!'),
    '#attributes' => array('id' => 'edit-submit'),
  );
  $form['close'] = array(
    '#type' => 'button',
    '#value' => t('No Thanks'),
    '#weight' => 1,
    '#attributes' => array('id' => 'edit-close'),
  );

  // I think we're using a custom action since this form doesn't have a
  // specific page callback.
  $form['#action'] = url('node/' . $nid . '/upsell/process');
  return $form;
}

/**
 * Submission callback function for the modal upsell form.
 *
 * Does some error checking, clones the original donation, uses the cloned
 * donation to create a sustainer series, sets acceptance cookie,
 * sends thankyou email, and returns the content for the thankyou modal.
 *
 * @param array $data
 *   The submitted upsell form data.
 *
 * @return string
 *   Thank you content.
 */
function fundraiser_upsell_upsell_ajax_submit($data) {
  // Set the default values.
  global $user;
  $amount = $data['amount'];
  $upsold_donation = fundraiser_donation_get_donation($data['did']);
  $is_recurring = fundraiser_upsell_check_recurring($upsold_donation->did);
  $different_user = ($user->uid != $upsold_donation->uid) ? TRUE : FALSE;
  // If the donation is already recurring, then stop.
  if ($is_recurring) {
    watchdog('fundraiser_upsell', 'Upsell failed - Donation %did is already part of a recurring series.', array('%did' => $upsold_donation->did), WATCHDOG_NOTICE);
    return 'This is already a recurring donation. Thank you.';
  }
  // If the user is different then stop - skip anon users because we don't know.
  if ($different_user && $user->uid != 0) {
    $replacements = array(
      '%did' => $upsold_donation->did,
      '%upsell_uid' => $user->uid,
      '%donation_uid' => $upsold_donation->uid,
    );
    watchdog('fundraiser_upsell', 'Upsell user doesn\'t match the donation %did user. Upsell uid is %upsell_uid and Donation uid is %donation_uid', $replacements, WATCHDOG_NOTICE);
    return 'There was a problem processing your Donation. Please try again.';
  }

  // Here we need to copy the original donation but with a future next_charge
  // date and a different amount.
  // Then use that as the master donation to create a recurring series.
  $master_donation = fundraiser_upsell_create_master_donation($upsold_donation, $amount);

  // Add info about the master donation to the upsold donation.
  $upsold_donation->fundraiser_upsell = new stdClass();
  $upsold_donation->fundraiser_upsell->type = 'upsold_donation';
  $upsold_donation->fundraiser_upsell->related_did = $master_donation->did;
  fundraiser_donation_update($upsold_donation);

  // Allow modules to modify the original upsold donation.
  drupal_alter('upsold_donation', $upsold_donation);

  // Create the recurring donation series.
  $success = fundraiser_upsell_create_recurring_series($master_donation);

  // Grab and process the thank you content if successful.
  if ($success) {
    fundraiser_upsell_set_acceptance_cookie();

    // Send the thank you message.
    module_load_include('inc', 'fundraiser_upsell', 'includes/fundraiser_upsell.mail');

    fundraiser_upsell_send_thank_you($master_donation);

    // Generate the thank you content.
    $raw_content = $master_donation->node->fundraiser_upsell['thankyou'];
    $content = token_replace($raw_content, array('donation' => $master_donation), array('clear' => TRUE));

  }
  else {
    watchdog('fundraiser_upsell', 'Upsell failed for the original donation %did.', array('%did' => $upsold_donation->did), WATCHDOG_NOTICE);
    return 'There was a problem processing your donation. Please try again.';
  }

  return $content;
}

/**
 * Implements hook_fundraiser_donation_create().
 *
 * Saves fundraiser_upsell donation information.
 */
function fundraiser_upsell_fundraiser_donation_create($donation) {
  if (isset($donation->fundraiser_upsell)) {
    $record = $donation->fundraiser_upsell;
    $record->did = $donation->did;
    fundraiser_upsell_donation_record_save($record);
  }
}

/**
 * Implements hook_fundraiser_donation_update().
 *
 * Saves fundraiser_upsell donation information.
 */
function fundraiser_upsell_fundraiser_donation_update($donation) {
  if (isset($donation->fundraiser_upsell)) {
    $record = $donation->fundraiser_upsell;
    $record->did = $donation->did;
    fundraiser_upsell_donation_record_save($record);
  }
}

/**
 * Inserts or updates the fundraiser_upsell data into the DB.
 *
 * Adds missing values to the $record on insert.
 *
 * @param object $record
 *   The donation->fundraiser_upsell object.
 *
 * @return bool|int
 *   SAVED_NEW, SAVED_UPDATED, or FALSE.
 */
function fundraiser_upsell_donation_record_save(&$record) {
  if (fundraiser_upsell_donation_record_exists($record->did)) {
    return drupal_write_record('fundraiser_upsell_donation', $record, 'did');
  }
  else {
    return drupal_write_record('fundraiser_upsell_donation', $record);
  }
}

/**
 * Determine if an upsell donation record with the given donation ID exists.
 *
 * @param int $did
 *   Donation ID we're looking for.
 *
 * @return bool
 *   TRUE if the record exists.
 */
function fundraiser_upsell_donation_record_exists($did) {
  $count = db_query("SELECT count(did) from {fundraiser_upsell_donation} WHERE did = :did", array(':did' => $did))->fetchField();
  return ($count > 0);
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 *
 * Adds fundraiser_upsell information to the donation object.
 */
function fundraiser_upsell_fundraiser_donation_get_donation($donation) {
  $query = db_query("SELECT * FROM {fundraiser_upsell_donation} WHERE did = :did", array(':did' => $donation->did));
  $record = $query->fetchObject();
  unset($record->did);
  $donation->fundraiser_upsell = $record;
}

/**
 * Convert the single donation into a recurring donation.
 *
 * @param object $donation
 *   The donation that will become the master donation in the sustainer series.
 *
 * @return bool
 *   TRUE on successful creation of sustainers in the series.
 */
function fundraiser_upsell_create_recurring_series($donation) {
  $gateway_info = _fundraiser_get_donation_gateway($donation->did);
  // Allows recurring.
  if (_fundraiser_sustainers_supports_recurring($gateway_info['allow_recurring'], $donation->donation['payment_method'])) {
    // Is not an offline recurring.
    if (!_fundraiser_sustainers_offsite_recurring($gateway_info['offsite_recurring'], $donation->donation['payment_method'])) {
      if (isset($gateway_info['expire callback'])) {
        $expiration_func = $gateway_info['expire callback'];
        if (function_exists($expiration_func)) {
          $expires = $expiration_func($donation->donation);
          if (isset($expires['month']) && isset($expires['year'])) {
            // Need to temporarily change this while the series is being
            // created.
            $old_type = $donation->fundraiser_upsell->type;
            $donation->fundraiser_upsell->type = 'slave_donation';

            // We need to set the start date to ensure that we
            // advance the future donations by one month.
            $date_to_start = $donation->recurring->next_charge;

            _fundraiser_sustainers_create_future_orders($donation, $expires['month'], $expires['year'], $date_to_start);

            // Set the old type back.
            $donation->fundraiser_upsell->type = $old_type;

            if (fundraiser_upsell_check_recurring($donation->did)) {
              return TRUE;
            }
          }
        }
      }
    }
    else {
      // ALERT: This gateway does its own recurring stuff, so we skipped it
      // here. But we should probably tell someone this was attempted.
      watchdog('fundraiser_upsell', 'An offsite recurring donation was created, for master donation id @did',
        array('@did' => $donation->did));

      return TRUE;
    }
  }
  else {
    // ALERT: This gateway does not support recurring stuff, so we skipped it
    // here. But we should probably tell someone this was attempted.
    watchdog('fundraiser_upsell', 'A recurring donation for a non-recurring gateway was attempted, for master donation id @did',
      array('@did' => $donation->did));
  }

  return FALSE;
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_node_record($node);
    drupal_write_record('fundraiser_upsell', $record);

    fundraiser_upsell_save_email_wrapper_settings($node->nid, $node->fundraiser_upsell['email_wrappers']);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_node_record($node);
    // If upsell is enabled and the record doesn't exist then insert new row.
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell', $record, 'nid');
    }

    fundraiser_upsell_save_email_wrapper_settings($node->nid, $node->fundraiser_upsell['email_wrappers']);
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $upsell = db_query('
        SELECT * FROM {fundraiser_upsell} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      // Merge data from upsell settings with node.
      $upsell = fundraiser_upsell_unflatten_record($upsell);
      $nodes[$node->nid]->fundraiser_upsell = $upsell;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_node_delete($node) {
  // Delete the email wrapper settings.
  $params = array(
    'module' => 'fundraiser_upsell',
    'delta' => 'nid_' . $node->nid,
  );
  email_wrappers_mail_delete($params);

  db_query('DELETE FROM {fundraiser_upsell} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_node_record($node) {
  return array(
    'nid' => $node->nid,
    'enabled' => $node->fundraiser_upsell['enabled'],
    'content' => $node->fundraiser_upsell['content'],
    'footer' => $node->fundraiser_upsell['footer'],
    'thankyou' => $node->fundraiser_upsell['thankyou'],
    'class' => $node->fundraiser_upsell['modal_theme']['class'],
    'modal_width' => $node->fundraiser_upsell['modal_theme']['width'],
    'modal_height' => $node->fundraiser_upsell['modal_theme']['height'],
  );
}

/**
 * Takes the result from the upsell DB query and turns it into a tree.
 *
 * @param array $upsell
 *   Associative array from a db_query result.
 *
 * @return array
 *   Associative array with modal_theme as a sub array.
 */
function fundraiser_upsell_unflatten_record($upsell) {
  $unflat = array(
    'enabled' => $upsell['enabled'],
    'content' => $upsell['content'],
    'footer' => $upsell['footer'],
    'thankyou' => $upsell['thankyou'],
    'modal_theme' => array(
      'class' => $upsell['class'],
      'width' => $upsell['modal_width'],
      'height' => $upsell['modal_height'],
    ),
  );

  return $unflat;
}

/**
 * Implements hook_theme().
 */
function fundraiser_upsell_theme() {
  $theme = array(
    'fundraiser_upsell_modal' => array(
      'variables' => array(
        'width' => 400,
        'height' => 300,
        'class' => '',
        'rejection_days' => '180',
        'content' => '',
        'footer' => '',
        'did' => NULL,
        'preview' => FALSE,
      ),
    ),
  );

  return $theme;
}

/**
 * Theme callback for the upsell modal.
 *
 * @param array $variables
 *
 * @return string
 *   The HTML for the modal.
 */
function theme_fundraiser_upsell_modal($variables) {
  // Add the css & js.
  $path = drupal_get_path('module', 'fundraiser_upsell');
  drupal_add_css($path . '/css/fundraiser_upsell.css');
  drupal_add_js($path . '/js/fundraiser_upsell.js');
  drupal_add_js($path . '/js/jquery.blockUI.js');

  $settings = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
    'rejectionDays' => $variables['rejection_days'],
  );
  drupal_add_js(array('fundraiser_upsell' => $settings), 'setting');

  $upsell_size = 'width:' . $variables['width'] . 'px;height:' . $variables['height'] . 'px;';

  $content = '<div id="message-wrapper" class="hidden">';

  $content .= '<div id="message-modal" class="live-modal ' . $variables['class'];
  $content .= '" style="' . $upsell_size . '">';

  if ($variables['preview']) {
    $content .= '<p><strong>' . t('Preview.  Accepting this upsell will not create any donations.') . '</strong></p>';
  }

  $content .= '<div class="message-content">' . $variables['content'] . '</div>';

  $form = drupal_get_form('fundraiser_upsell_donation_form', $variables['did'], $variables['preview']);
  $content .= drupal_render($form);

  $content .= '<div id="message-footer">' . $variables['footer'] . '</div>';
  $content .= '</div></div>';

  return $content;
}

/**
 * Page callback for the upsell preview.
 *
 * @param object $node
 *   The webform donation node object.
 *
 * @return array
 *   A render array for generating the content.
 */
function fundraiser_upsell_content_preview($node) {
  $modal = fundraiser_upsell_create_modal_variables($node);

  // No donation ID in preview.
  $modal['#did'] = '';
  $modal['#preview'] = TRUE;

  return $modal;
}

/**
 * Creates a default render array for an upsell modal.
 *
 * @param object $node
 *   The node object with the upsell settings.
 *
 * @return array
 *   The modal render array with sane default values.
 */
function fundraiser_upsell_create_modal_variables($node) {
  $modal = array(
    '#theme' => 'fundraiser_upsell_modal',
    '#rejection_days' => variable_get('fundraiser_upsell_rejection_lifetime', '180'),
    '#preview' => FALSE,
  );

  // Override defaults.
  if (!empty($node->fundraiser_upsell['modal_theme']['width'])) {
    $modal['#width'] = $node->fundraiser_upsell['modal_theme']['width'];
  }
  if (!empty($node->fundraiser_upsell['modal_theme']['height'])) {
    $modal['#height'] = $node->fundraiser_upsell['modal_theme']['height'];
  }
  if (!empty($node->fundraiser_upsell['modal_theme']['class'])) {
    $modal['#class'] = $node->fundraiser_upsell['modal_theme']['class'];
  }

  // Using isset instead of !empty so the content can be blank.
  if (isset($node->fundraiser_upsell['content'])) {
    $modal['#content'] = $node->fundraiser_upsell['content'];
  }
  else {
    $modal['#content'] = variable_get('fundraiser_upsell_default_content', '');
  }

  // Using isset instead of !empty so the footer can be blank.
  if (isset($node->fundraiser_upsell['footer'])) {
    $modal['#footer'] = $node->fundraiser_upsell['footer'];
  }
  else {
    $modal['#footer'] = variable_get('fundraiser_upsell_default_content_disclaimer', '');
  }

  return $modal;
}

/**
 * Process the upsell donation form from the POSTed ajax callback.
 */
function fundraiser_upsell_ajax_process($node) {
  // @todo Do something safer with this.
  $data = $_POST;
  if (isset($data['preview']) && $data['preview']) {
    // Generate the thank you content.
    // Note that token replacement doesn't happen on a preview
    // since we don't have a donation.
    $content = $node->fundraiser_upsell['thankyou'];
  }
  // If we have a form token and it's invalid, don't let anything happen.
  // We normally won't have a form token for anonymous users.
  elseif (isset($data['form_token']) && !drupal_valid_token($data['form_token'], $data['form_id'], TRUE)) {
    watchdog('fundraiser_upsell', 'Upsell donation %did failed because of an invalid form token.', array('%did' => $data['did']), WATCHDOG_NOTICE);
    $content = t('There was a problem with your donation. Please try again');
  }
  else {
    $content = fundraiser_upsell_upsell_ajax_submit($data);
  }
  drupal_json_output($content);
}

/**
 * Determine if we should display the upsell preview for a node.
 *
 * Upsell must be enabled for the node and the user must have
 * the upsell permission.
 */
function fundraiser_upsell_preview_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('administer fundraiser upsells');
}

/**
 * Access check that the user can use the upsell ajax callback for the node.
 *
 * This makes sure the upsell process call won't happen if the node doesn't
 * have upsell enabled.
 */
function fundraiser_upsell_access($node) {
  return fundraiser_upsell_is_enabled($node) && user_access('access content');
}

/**
 * Check the cookies and settings to see if upsell modal should be displayed.
 *
 * @return bool
 *   TRUE if the modal should be displayed.
 */
function fundraiser_upsell_should_display_modal() {
  $rejection = (!empty($_COOKIE['fundraiser_upsell_rejection'])) ? $_COOKIE['fundraiser_upsell_rejection'] : FALSE;
  $acceptance = (!empty($_COOKIE['fundraiser_upsell_acceptance'])) ? $_COOKIE['fundraiser_upsell_acceptance'] : FALSE;
  $debug = variable_get('fundraiser_upsell_debug', FALSE);

  // No cookies OR debug is on, then we should display the upsell.
  return ((!$rejection && !$acceptance) || $debug);
}

/**
 * Determine if the node has upsell enabled.
 *
 * @return bool
 *   TRUE is upsell is enabled on this node.
 */
function fundraiser_upsell_is_enabled($node) {
  return (
    !empty($node)
    && fundraiser_is_donation_type($node->type)
    && !empty($node->fundraiser_upsell['enabled'])
    && $node->fundraiser_upsell['enabled']
  );
}

/**
 * Get the suggested amount from the admin bracket settings.
 *
 * @param int $amount
 *   The given amount.
 *
 * @todo Is amount an int or float?
 *
 * @return int
 *   The suggested amount to upsell to.
 *
 * @todo Is the return value an int or float?
 */
function fundraiser_upsell_find_suggested_amount($amount) {
  $default_upsell = 10;
  $brackets = variable_get('fundraiser_upsell_brackets', array());
  if (count($brackets) < 1) {
    return $default_upsell;
  }

  foreach ($brackets as $i => $bracket) {
    // If the amount is within the brackets, then use this upsell setting.
    if (($amount >= $bracket['low']) && ($amount <= $bracket['high'])) {
      return $bracket['upsell'];
    }
    // If this is the last loop and we don't have an upsell yet,
    // set it for the highest bracket.
    if ($i == count($brackets) - 1) {
      return $bracket['upsell'];
    }
  }
  return $default_upsell;
}

/**
 * Creates a master donation from the original upsold donation.
 *
 * Copy the original donation to a new did and update the status and amount..
 *
 * @param object $upsold_donation
 *   The original one time donation to use as the basis for the master.
 * @param string $new_amount
 *   The amount for the master donation.
 *
 * @return object
 *   The new donation object.
 */
function fundraiser_upsell_create_master_donation($upsold_donation, $new_amount) {

  // Remember clone is a shallow copy.
  $master_donation = clone $upsold_donation;

  // Reset transaction info.
  $master_donation->data['txn_id'] = '';
  $master_donation->data['remote_id'] = '';
  $master_donation->data['transaction_id'] = '';
  $master_donation->data['status'] = '';
  $master_donation->data['remote_status'] = '';

  // Set the proper order status and amount.
  $master_donation->status = 'pending_future_payment';
  $master_donation->donation['amount'] = $new_amount;

  // Add the upsold did and upsell type.
  $master_donation->fundraiser_upsell = new stdClass();
  $master_donation->fundraiser_upsell->type = 'master_donation';
  $master_donation->fundraiser_upsell->related_did = $upsold_donation->did;

  // Create the new donation object, but do not process it.
  // New donation has all of the old donation information already loaded.
  // Also creates a new order to go along with the donation.
  fundraiser_donation_create($master_donation);

  $next_charge = strtotime('+1 month');
  fundraiser_donation_comment($master_donation, 'Initial Upsell donation scheduled to be charged at @next_charge',
    array('@next_charge' => format_date($next_charge)));

  // At this point, the donation did and donation data is set.
  // Now we need to create a recurring record for it as the master donation.
  $recurring_donation_record = array(
    'master_did' => $master_donation->did,
    'did' => $master_donation->did,
    'next_charge' => $next_charge,
    'sustainer_key' => fundraiser_sustainers_get_sustainer_key_value(),
  );
  // Update the recurring table.
  _fundraiser_sustainers_create_recurring($recurring_donation_record);

  // Reload the donation so the amount and other donation stuff gets refreshed.
  // Also this will cause it to get the recurring record.
  $master_donation = fundraiser_donation_get_donation($master_donation->did, TRUE);

  // Allow modules to modify the upsell master donation.
  drupal_alter('upsell_master_donation', $master_donation);

  // Reload the donation one more time so altered stuff will get updated.
  return fundraiser_donation_get_donation($master_donation->did, TRUE);
}

/**
 * Check to see if a donation was successfully added as a recurring.
 *
 * This means we should have a record for the master donation and then one
 *   or more sustainer donations.
 *
 * @param int $did
 *   The donation ID of the master donation.
 *
 * @return bool
 *   Whether the donation has sustainer records (is recurring).
 */
function fundraiser_upsell_check_recurring($did) {
  return (fundraiser_sustainers_count_donations_in_series($did) > 1);
}

/**
 * Determines if upsell should be available on this node.
 */
function fundraiser_upsell_is_available($node) {
  return (!empty($node) && fundraiser_is_donation_type($node->type));
}

/**
 * Set the fundraiser recurring acceptance cookie.
 */
function fundraiser_upsell_set_acceptance_cookie() {
  $cookie_lifetime = variable_get('fundraiser_upsell_acceptance_lifetime', 0);
  setcookie('fundraiser_upsell_acceptance', 1, REQUEST_TIME + 3600 * 24 * $cookie_lifetime, "/");
}

/**
 * Get the donation ID of the upsold donation given the master donation ID.
 *
 * @param $upsell_did
 *   The donation ID of the master donation in the upsell sustainer series.
 *
 * @return int|bool
 *   The donation ID of the original upsold donation, or FALSE.
 */
function fundraiser_upsell_get_upsold_did($upsell_did) {
  return db_query("SELECT related_did FROM fundraiser_upsell_donation WHERE did = :upsell_did", array(':upsell_did' => $upsell_did))
    ->fetchField();
}
