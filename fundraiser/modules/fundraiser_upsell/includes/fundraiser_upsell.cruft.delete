<?php


function _fundraiser_upsell_submit($form, &$form_state) {
  global $user;
  $order = _fundraiser_upsell_get_order($form_state['values']['sid']);
  $sid = $form_state['values']['sid'];
  // @TODO: Get real month & year
  $month = 12;
  $year = 13;
  // Create the recurring orders
  _fundraiser_fundraisers_create_future_orders($donation, $month, $year);
  // Check to see if the order is in the queue. If so delete it so we can put it back in as a recurring donation.
  if (module_exists('queue_api')) {
    if (_in_queue($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE)) {
      sf_queue_delete($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE);
    }
    else {
      // Put in queue as delete.
      sf_queue_insert($order->order_id, FUNDRAISER_SINGLE_DONATION_TYPE, 'delete');
    }
    // Put in queue as recurring donation.
    sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'create');
  }

  // Record a list of upsell generated orders and their parent form
  while ($o = db_fetch_array($orders)) {
    db_query(
      "INSERT INTO {fundraiser_upsell_future_orders} (nid, master_did, did)
      VALUES (:nid, :master_did, :did)",
      array(
        ':nid' => arg(1),
        ':master_did' => $order->order_id,
        ':did' => $o['order_id']
      )
    );
  }

  // Set the fundraiser recurring acceptance cookie
  setcookie('fundraiser_upsell_acceptance', 1, REQUEST_TIME + 3600 * 24 * variable_get('fundraiser_upsell_acceptance_lifetime', 0), "/");
  watchdog('fundraiser_upsell', 'Upsell notice sent to @mail', array('@mail' => $user->mail), NULL, WATCHDOG_INFO);

  // Prepare and send the fundraiser upsell success email
  $site_mail = variable_get('site_mail', '');
  $from = variable_get('fundraiser_upsell_email_from', $site_mail);
  $to = $order->primary_email;
  $params['order'] = $order;
  $params['body_html'] = token_replace(variable_get('fundraiser_upsell_thank_you_email_html', ''), 'upsell', $order);
  $params['body_text'] = token_replace(variable_get('fundraiser_upsell_thank_you_email_text', ''), 'upsell', $order);
  $params['subject'] = variable_get('fundraiser_upsell_email_subject', 'Thank You!');
  drupal_mail('fundraiser_upsell', 'fundraiser_upsell_notification', $to, user_preferred_language($user), $params, $from);
}


function fundraiser_upsell_confirmation_message($message, $sid) {
  $order_id = db_query(
    "SELECT did FROM {fundraiser_donation} WHERE sid = :sid",
    array(':sid' => $sid)
    )->fetchField();
  $order = uc_order_load($order_id);
  $message = token_replace($message, array('upsell' => $order));
  return $message;
}

function fundraiser_upsell_queue_batch_item_alter(&$object, $type, $action, $oid) {
  if ($type == 'donation' && ($action == 'create' || $action == 'update')) {
    $master = db_query(
      "SELECT master_did FROM {fundraiser_upsell_future_orders} WHERE order_id = :did",
      array(':did' => $oid)
      )->fetchField();
    if ($master > 0) {
      $object['CampaignId'] = variable_get('fundraiser_upsell_sf_campaign_id', '');
    }
  }
}





/**
 * Implements hook_page_build().
 */
function fundraiser_upsell_page_build(&$page) {
  if ((arg(0)=='node') && (arg(2) == 'confirmation')) {
    $sid = $_GET['sid'];
    $node = node_load(arg(1));
    $order = _fundraiser_upsell_get_order($sid);
    $counter = min(_fundraiser_months_between_dates($order->payment_details['cc_exp_month'], $order->payment_details['cc_exp_year']), 49);

    // First, make sure amount is lower than higest bracket amount
    if (_fundraiser_upsell_amount_less_than_highest_bracket($order->order_total)) {
      if ((fundraiser_uspell_confirmation_view_secure($sid)) && ($node->fundraiser_upsell_enabled == 1) && ($order->data['recurring_status'] != 1) && ($counter > 0)) {
        if (_fundraiser_upsell_authentic_user_check($order) && _fundraiser_upsell_check_cookies()) {
          drupal_add_js("
            $(function() {
              $('#upsell-box-open').click();
            })
          ", 'inline', 'footer');
          db_query(
            "INSERT INTO {fundraiser_upsell_secure} (sid) VALUES (:sid)",
            array(':sid' => $sid));
          // Grab the modal height and width overrides if they exist
          $tb_modal_width = $tb_modal_height = "";
          $lb_modal_width = $lb_modal_height = "";
          if (!empty($node->modal_width)) {
            $tb_modal_width = "&width=" . $node->modal_width;
            $lb_modal_width = " width:" . $node->modal_width . "px;";
          }
          if (!empty($node->modal_height)) {
            $tb_modal_height = "&height=" . $node->modal_height;
            $lb_modal_height = " height:" . $node->modal_height . "px;";
          }
          // Inject the modal popup link into the footer
          if (variable_get('fundraiser_upsell_box_type', 'thickbox') == 'thickbox') {
            $output = "<a id='upsell-box-open' style='display: none;' href='/node/" . $node->nid . "/upsell/" . $sid . "#TB_iframe" . $tb_modal_height . $tb_modal_width . "&KeepThis=TRUE' class='thickbox' id='upsell-click'>Open Thickbox</a>";
          }
          elseif (variable_get('fundraiser_upsell_box_type', 'thickbox') == 'lightbox2') {
            $output = "<a id='upsell-box-open' style='display: none;' href='/node/" . $node->nid . "/upsell/" . $sid . "' rel='lightframe[|scrolling:no;" . $lb_modal_height . $lb_modal_width . "]'>Open Lightbox</a>";
          }
          $page['page_bottom']['upsell_link']= array(
            '#type' => 'markup',
            '#markup' => $output,
          );
        }
      }
    }
  }
}



function fundraiser_upsell_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'upsell') {
    $order = $object;
    $order_extras = _fundraiser_upsell_get_order_extras($order->order_id);
    $tokens['upsell-name']            = $order->billing_first_name . " " . $order->billing_last_name;
    $tokens['upsell-email']           = $order->primary_email;
    $tokens['upsell-number-payments'] = $order_extras['number-payments'];
    $tokens['upsell-payment-amount']  = '$' . number_format($order_extras['payment-amount'], 2);
    $tokens['upsell-total-amount']    = '$' . number_format($order_extras['total-amount'], 2);
    return $tokens;
  }
}







function _fundraiser_upsell_get_order_extras($master_did) {
  // Build a list of all orders and order totals under this master order
  $all_orders = db_query(
    "SELECT fs.did, uo.order_total, uo.order_status
    FROM fundraiser_fundraisers fs JOIN uc_orders uo
    WHERE fs.master_did = :master_did
    AND fs.did=uo.order_id",
    array(':master_did' => $master_did)
    )->fetchAll();
  $total_amount = 0;
  $total_payments = 0;
  foreach ($all_orders as $order) {
    $did_totals[$order->did] = $order->order_total;
    $total_amount += $order->order_total;
    $total_payments ++;
  }
  $order_extras = array(
    'number-payments' => $total_payments,
    'payment-amount' => $did_totals[$master_did],
    'total-amount' => $total_amount,
  );
  return $order_extras;
}

function fundraiser_upsell_token_list($type = 'all') {
  if ($type == 'upsell') {
    $tokens['upsell']['upsell-name']            = t("Donor's Name");
    $tokens['upsell']['upsell-email']           = t("Donor's Email");
    $tokens['upsell']['upsell-number-payments'] = t("Sustainer number of payments");
    $tokens['upsell']['upsell-payment-amount']  = t("Sustainer payment amount");
    $tokens['upsell']['upsell-total-amount']    = t("Sustainer total gift amount");
    return $tokens;
  }
}


/**
 * Checks if a confirmation page has been viewed. Copied from
 * funderaiser_secure_confirmation but added a count as it will expect the count
 * to be 1 in order to view the upsell
 *
 * @param $sid - webform submission id *
 * @return TRUE if the confirmation page has been viewed, otherwise FALSE.
 */
function fundraiser_uspell_confirmation_view_secure($sid) {
  $view_count = db_query(
    'SELECT count(sid) FROM {fundraiser_upsell_secure} WHERE sid=:sid',
    array(':sid' => $sid)
    )->fetchField();
  if ($view_count == 0) {
    return TRUE;
  }
  return FALSE;
}






/**
 * Implemenation of hook_mail().
 */
function fundraiser_upsell_mail($key, &$message, &$params) {
  switch ($key) {
    case 'fundraiser_upsell_notification':
      $site_mail = variable_get('site_mail', '');
      $from = variable_get('fundraiser_upsell_email_from', $site_mail);
      $order = $params['order'];
      $boundary = '----=_NextPart_' . md5(uniqid());
      $body_text = $params['body_text'];
      $body_html = $params['body_html'];
      $message['from'] = $from;
      $message['subject'] = $params['subject'];
      $message['headers'] = array(
       'MIME-Version' => '1.0',
       'Content-Type' => 'multipart/alternative; boundary="' . $boundary . '"',
       'Content-Transfer-Encoding' => '8Bit',
       'X-Mailer' => "Drupal Mailer",
       'From' => $message['from'],
       'Sender' => $message['from'],
       'Return-Path' => $message['from'],
       'Errors-To' => $message['from'],
      );
      $message['body']  = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed;
Content-Transfer-Encoding: 8bit

$body_text

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed;
Content-Transfer-Encoding: 8bit

$body_html

";
      break;
  }
}
