<?php
/**
 * @file
 * Provides Salesforce fields that need to be customized for upsold donations.
 */

/**
 * Implements hook_upsell_node_settings_alter().
 *
 * Adds the Salesforce campaign ID to the form.
 */
function fundraiser_upsell_salesforce_upsell_node_settings_alter(&$form) {
  $node = $form['#node'];

  $campaigns = market_source_get_campaigns();

  if (!empty($campaigns)) {
    $campaign_options = array(
      '' => '(blank)',
    );

    foreach ($campaigns as $id => $campaign) {
      $campaign_options[$id] = $campaign['name'];
    }

    $form['fundraiser_upsell']['salesforce'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Salesforce values for upsold donations.'),
    );
    $form['fundraiser_upsell']['salesforce']['campaign_id'] = array(
      '#title' => t('Sustainer Salesforce Campaign ID'),
      '#type' => 'select',
      '#options' => $campaign_options,
      '#default_value' => !empty($node->fundraiser_upsell_salesforce['campaign_id']) ? $node->fundraiser_upsell_salesforce['campaign_id'] : '',
      '#description' => t('Set the campaign to be used for upsold donations from this form. Please note that if this field is set to (blank), then all recurring donations will have blank campaign ids.'),
    );
  }

  $form['#submit'][] = 'fundraiser_upsell_salesforce_node_settings_submit';
}

/**
 * Submit callback.
 *
 * Moves the values around so the nodeapi functions can find them.
 */
function fundraiser_upsell_salesforce_node_settings_submit($form, &$form_state) {
  $form_state['values']['fundraiser_upsell_salesforce'] = $form_state['values']['fundraiser_upsell']['salesforce'];
  $form_state['values']['fundraiser_upsell']['salesforce'] = NULL;
}

/**
 * Implements hook_upsold_donation_alter().
 *
 * Adds salesforce campaign ID to the order data.
 *
 * @todo Check that the recurring donations have campaign ID set in data.
 */
function fundraiser_upsell_salesforce_upsold_donation_alter(&$donation) {
  // Add the campaign ID to the master upsold donation.
  if (!empty($donation->node->fundraiser_upsell['salesforce']['campaign_id'])) {
    // @todo Need this now because donation doesn't save order data on update.
    $order = commerce_order_load($donation->did);
    $order->data['campaign_id'] = $donation->node->fundraiser_upsell['salesforce']['campaign_id'];
    commerce_order_save($order);
  }
}

/**
 * Implements hook_salesforce_queue_create_item_alter().
 *
 * Set the campaign ID if it's supposed to be different.
 */
function fundraiser_upsell_salesforce_salesforce_queue_create_item_alter(&$item) {
  dpm($item);
  if ($item->delta == 'donation') {
    $donation = fundraiser_donation_get_donation($item->drupal_id);
    if (isset($donation->data['campaign_id'])) {
      $item['sobject']->fields['CampaignId'] = $donation->data['campaign_id'];
    }
  }
}

/**
 * Implements hook_queue_batch_item_alter().
 *
 * Add the upsell campaign id & initial upsell donation id.
 *
 * @todo Refactor after everything else is working.
 *
function fundraiser_upsell_queue_batch_item_alter(&$object, $type, $action, $oid) {
  // Process single donations.
  if ($type == FUNDRAISER_SINGLE_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Set the campaign id if its been added.
    if (isset($order->data['campaign_id'])) {
      $object['CampaignId'] = $order->data['campaign_id'];
    }
    // Limit to update operations because that's when opportunities
    // that are part of a recurring series get updated.
    if ($action == 'update') {
      // Make sure the SF field exists.
      if (_fundraiser_upsell_check_sf_field('Opportunity', 'Initial_Upsell_Donation__c')) {
        // Get the master order id & its sfid.
        $master_order_id = db_result(db_query("SELECT master_order_id FROM {fundraiser_recurring} WHERE order_id = %d", $oid));
        // Load the master order id and pop out the initial_donation.
        // @todo Maybe query directly to avoid overhead of uc_order_load
        $master_order = uc_order_load($master_order_id);

        // If cloned_from is set, this is a donation that is part of a
        // decoupled upsell.
        // In this case we want the SFID of the original,
        // which is the order id stored in cloned_from.
        if ($master_order->data['cloned_from']) {
          $sfid = salesforce_management_api_id_load('donation', $master_order->data['cloned_from']);
          $object['Upsell_Order_ID__c'] = $master_order->data['cloned_from'];
        }
        // Normal upsell. Master order id is the original.
        elseif ($master_order->data['upsell']) {
          $object['Upsell_Order_ID__c'] = $master_order->order_id;
          $sfid = salesforce_management_api_id_load('donation', $master_order->order_id);
        }

        // Set the original order SFID.
        if (!empty($sfid)) {
          $object['Initial_Upsell_Donation__c'] = $sfid['sfid'];
        }
      }
    }
  }
  // Process recurring donations.
  if ($type == FUNDRAISER_RECURRING_DONATION_TYPE) {
    $order = uc_order_load($oid);
    // Make sure the SF field exists & we have the sfid.
    // This should really only process on an update
    // and after the postprocess hook below.
    $field_exists = _fundraiser_upsell_check_sf_field('npe03__Recurring_Donation__c', 'Initial_Upsell_Donation__c');

    // If cloned_from is set,
    // this is a donation that is part of a decoupled upsell.
    if ($field_exists && isset($order->data['cloned_from'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->data['cloned_from'];
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }
    // Normal upsell.
    elseif ($field_exists && isset($order->data['upsell'])) {
      switch ($action) {
        case 'create':
          $object['Initial_Upsell_Order_Id__c'] = $order->order_id;
          break;

        case 'update':
          // Get SFID stored on the original order
          // after the recurring donation is exported.
          $object['Initial_Upsell_Donation__c'] = $order->data['initial_donation'];
          break;
      }
    }

  }
}
*/

/**
 * Implements hook_queue_postprocess_batch().
 *
 * Add the initial upsell sfid to the master order.
 *
 * @todo Refactor after everything else is working.
 *
function fundraiser_upsell_queue_postprocess_batch($batch, $responses, $items_in_batch) {
  // Only process single donation batches that are successful and recurring.
  $is_recurring = fundraiser_upsell_check_recurring($batch['records'][0]->oid);
  if ($batch['type'] == FUNDRAISER_SINGLE_DONATION_TYPE && $responses[0]->success && $is_recurring) {
    // The first item is the master order.
    $order = uc_order_load($batch['records'][0]->oid);
    // Get the initial order and its sfid.
    $initial_order_id = (isset($order->data['cloned_from'])) ? $order->data['cloned_from'] : $order->order_id;
    $sfid = salesforce_management_api_id_load('donation', $initial_order_id);
    // Add the sfid to the order object.
    $order->data['initial_donation'] = $sfid['sfid'];
    uc_order_save($order);
    // Put in queue as recurring donation.
    sf_queue_insert($order->order_id, FUNDRAISER_RECURRING_DONATION_TYPE, 'update');
  }
}
*/

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_salesforce_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_node_record($node);
    drupal_write_record('fundraiser_upsell', $record);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_salesforce_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_salesforce_node_record($node);
    // Don't bother inserting a new record if upsell isn't enabled..
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record, 'nid');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_salesforce_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $data = db_query('
        SELECT * FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      $nodes[$node->nid]->fundraiser_upsell_salesforce = $data;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_salesforce_node_delete($node) {
  db_query('DELETE FROM {fundraiser_upsell_salesforce} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_salesforce_node_record($node) {
  return array(
    'nid' => $node->nid,
    'campaign_id' => $node->fundraiser_upsell_salesforce['campaign_id'],
  );
}

/**
 * Check that a field exists in Salesforce.
 *
 * @param string $type
 *   The Salesforce object type.
 * @param string $field_name
 *   The Salesforce field name to check.
 *
 * @return bool
 *   Whether the field exists.
 */
function fundraiser_upsell_salesforce_check_sf_field($type = 'Opportunity', $field_name = '') {
  // @todo This function doesn't exist.  Refactor.
  $objects = salesforce_management_api_fieldmap_objects('salesforce');
  return (isset($objects[$type]) && isset($objects[$type]['fields'][$field_name])) ? TRUE : FALSE;
}
