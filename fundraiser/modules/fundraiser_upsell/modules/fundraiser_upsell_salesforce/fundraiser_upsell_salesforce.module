<?php
/**
 * @file
 * Provides Salesforce fields that need to be customized for upsell donations.
 */

/**
 * Implements hook_upsell_node_settings_alter().
 *
 * Adds the Salesforce campaign ID to the form.
 */
function fundraiser_upsell_salesforce_upsell_node_settings_alter(&$form) {
  $campaigns = market_source_get_campaigns();

  if (!empty($campaigns)) {
    $node = $form['#node'];
    $campaign_options = array(
      '' => '(blank)',
    );

    foreach ($campaigns as $id => $campaign) {
      $campaign_options[$id] = $campaign['name'];
    }

    $form['fundraiser_upsell']['salesforce'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Salesforce values for upsold donations.'),
    );
    $form['fundraiser_upsell']['salesforce']['campaign_id'] = array(
      '#title' => t('Sustainer Salesforce Campaign ID'),
      '#type' => 'select',
      '#options' => $campaign_options,
      '#default_value' => !empty($node->fundraiser_upsell_salesforce['campaign_id']) ? $node->fundraiser_upsell_salesforce['campaign_id'] : '',
      '#description' => t('Set the campaign to be used for upsold donations from this form. Please note that if this field is set to (blank), then all recurring donations will have blank campaign ids.'),
    );

    // Only add the submit handler if there are campaigns to choose from.
    $form['#submit'][] = 'fundraiser_upsell_salesforce_node_settings_submit';
  }
}

/**
 * Submit handler for the node add/edit forms.
 *
 * Moves the values around so the nodeapi functions can find them.
 */
function fundraiser_upsell_salesforce_node_settings_submit($form, &$form_state) {
  $form_state['values']['fundraiser_upsell_salesforce'] = $form_state['values']['fundraiser_upsell']['salesforce'];
  $form_state['values']['fundraiser_upsell']['salesforce'] = NULL;
}

/**
 * Implements hook_fundraiser_donation_create().
 *
 * Gets the donation ID for the master upsell donation and stores it
 *   with the Salesforce campaign ID from the node.
 */
function fundraiser_upsell_salesforce_fundraiser_donation_create($donation) {
  if (isset($donation->fundraiser_upsell->type) && $donation->fundraiser_upsell->type == 'master_donation') {
    // Insert a record for the recurring series and its campaign ID.
    $record = array(
      'master_did' => $donation->did,
      'campaign_id' => $donation->node->fundraiser_upsell_salesforce['campaign_id'],
    );
    drupal_write_record('fundraiser_upsell_salesforce_donation', $record);
  }
}

/**
 * Gets the campaign ID for a recurring donation series.
 *
 * @param int $master_did
 *   Donation ID of the master donation.
 *
 * @return int|bool
 *   Campaign ID or FALSE;
 */
function fundraiser_upsell_salesforce_get_campaign_id($master_did) {
  return db_query("SELECT campaign_id FROM {fundraiser_upsell_salesforce_donation} WHERE master_did = :master_did", array(':master_did' => $master_did))
    ->fetchField();
}

/**
 * Implements hook_upsell_master_donation_alter().
 *
 * Queue up the recurring donation object and master donation object
 *   before creating the recurring series.
 */
function fundraiser_upsell_salesforce_upsell_master_donation_alter(&$donation) {

  // If the donation's payment method uses offsite recurring,
  // then there is no recurring_donation object in Salesforce
  // and the donation object will be queued on donation success,
  // which should happen immediately.
  if (fundraiser_upsell_salesforce_donation_is_offsite_recurring($donation)) {
    return;
  }

  // Queue the recurring_donation object.
  salesforce_genmap_send_object_to_queue(
    'fundraiser_sustainers',
    'insert',
    $donation->node,
    $donation->did,
    $donation,
    'recurring_donation'
  );

  // Queue the donation object.
  salesforce_genmap_send_object_to_queue(
    'salesforce_donation',
    'insert',
    $donation->node,
    $donation->did,
    $donation,
    'donation'
  );
}

/**
 * Implements hook_salesforce_queue_create_item_alter().
 *
 * Set the campaign ID if it's supposed to be different.
 */
function fundraiser_upsell_salesforce_salesforce_queue_create_item_alter(&$item) {
  if ($item['delta'] == 'donation') {
    $donation = fundraiser_donation_get_donation($item['drupal_id']);
    if (isset($donation->fundraiser_upsell->type)) {
      if ($donation->fundraiser_upsell->type == 'upsold_donation') {
        // @todo This case probably never runs.
        // The upsold donation doesn't get its type until an update.
        // Don't need to mess with the upsold donation.
        return;
      }
      elseif ($donation->fundraiser_upsell->type == 'master_donation') {
        $master_did = $donation->did;
      }
      else {
        $master_did = $donation->master_did;
      }
      $campaign_id = fundraiser_upsell_salesforce_get_campaign_id($master_did);
      if ($campaign_id !== FALSE) {
        $item['sobject']->fields['CampaignId'] = $campaign_id;
      }

    }
  }
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_salesforce_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_salesforce_node_record($node);
    drupal_write_record('fundraiser_upsell_salesforce', $record);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_salesforce_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_salesforce_node_record($node);
    // Don't bother inserting a new record if upsell isn't enabled..
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record, 'nid');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_salesforce_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $data = db_query('
        SELECT * FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      $nodes[$node->nid]->fundraiser_upsell_salesforce = $data;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_salesforce_node_delete($node) {
  db_query('DELETE FROM {fundraiser_upsell_salesforce} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_salesforce_node_record($node) {
  return array(
    'nid' => $node->nid,
    'campaign_id' => $node->fundraiser_upsell_salesforce['campaign_id'],
  );
}

/**
 * Implements hook_salesforce_sync_pass_item().
 *
 * If we have all the data we need, we will create an Upsell sobject and send it
 *   to the Salesforce queue.
 *
 * There are three cases to take care of here.
 *
 * First case, we have a recurring donation object related to upsell.
 *   In this case, look up the upsold donation ID and see if it has an SFID.
 *   If we're doing offsite recurring then this won't happen because there is
 *   no recurring donation object.
 *
 * Second case, we have a donation that is a master donation
 *   (AKA upsell donation). If we're doing offsite recurring, then we look
 *   for the related upsold donation's SFID.
 *   If we're not doing offsite recurring, then we don't need to do anything
 *    here.
 *
 * Third case, we have a donation that is the upsold donation.
 *   If we're doing offsite recurring, look up the upsell donation's SFID.
 *   If we're not doing offsite recurring, look up the recurring donation's
 *   SFID.
 *
 * If both objects have SFIDs and DIDs then we know the prerequisites are met.
 *   Create an Upsell sobject and queue it up.
 */
function fundraiser_upsell_salesforce_salesforce_sync_pass_item($item, $result) {
  $sobject = NULL;

  if ($item->delta == 'recurring_donation' && fundraiser_upsell_donation_record_exists($item->drupal_id)) {
    $upsell_did = $item->drupal_id;
    $upsell_recurring_donation_sfid = $result->id;
    $upsold_did = fundraiser_upsell_get_upsold_did($upsell_did);

    // Lookup an sfid for the upsold donation.
    $upsold_sfid = fundraiser_upsell_salesforce_get_donation_sfid($upsold_did);

    if ($upsold_sfid === FALSE) {
      return;
    }

    // Need to load the donation to get the name.
    $name = fundraiser_upsell_salesforce_format_sobject_name(fundraiser_donation_get_donation($upsold_did));
    $sobject = fundraiser_upsell_salesforce_create_upsell_sobject($name, $upsold_did, $upsold_sfid, $upsell_did, $upsell_recurring_donation_sfid);
  }
  elseif ($item->delta == 'donation') {
    $donation = fundraiser_donation_get_donation($item->drupal_id);
    if (isset($donation->fundraiser_upsell->type)) {
      $offsite = fundraiser_upsell_salesforce_donation_is_offsite_recurring($donation);

      // This donation object is the master donation.
      if ($donation->fundraiser_upsell->type == 'master_donation') {
        // If we're doing offsite recurring, then we need to send its sfid
        // and the upsold donation's sfid in the upsell object.
        if ($offsite) {
          // See if the upsold donation has synced.
          $upsold_did = $donation->fundraiser_upsell->related_did;
          $upsold_sfid = fundraiser_upsell_salesforce_get_donation_sfid($upsold_did);

          if ($upsold_sfid === FALSE) {
            return;
          }

          $upsell_did = $donation->did;
          $upsell_sfid = $result->id;

          $name = fundraiser_upsell_salesforce_format_sobject_name($donation);
          $sobject = fundraiser_upsell_salesforce_create_upsell_sobject($name, $upsold_did, $upsold_sfid, $upsell_did, $upsell_sfid, TRUE);
        }
        else {
          // Else don't do anything here because we need the recurring
          // donation object to be synced instead.
          return;
        }
      }
      // This object is an upsold donation.
      elseif ($donation->fundraiser_upsell->type == 'upsold_donation') {
        $upsold_did = $donation->did;
        $upsold_sfid = $result->id;

        // If we are doing offsite recurring, see if the master donation
        // has already been synced and get its sfid.
        if ($offsite) {
          // See if the upsell donation has synced.
          $upsell_did = $donation->fundraiser_upsell->related_did;
          $upsell_sfid = fundraiser_upsell_salesforce_get_donation_sfid($upsell_did);

          if ($upsell_sfid === FALSE) {
            return;
          }
        }
        else {
          // See if the recurring donation object is synced and get its sfid.
          $upsell_did = $donation->fundraiser_upsell->related_did;
          $upsell_sfid = fundraiser_upsell_salesforce_get_recurring_donation_sfid($upsell_did);

          if ($upsell_sfid === FALSE) {
            return;
          }
        }

        $name = fundraiser_upsell_salesforce_format_sobject_name($donation);
        $sobject = fundraiser_upsell_salesforce_create_upsell_sobject($name, $upsold_did, $upsold_sfid, $upsell_did, $upsell_sfid, $offsite);

        // End upsold donation.
      }

      // End isset upsell type.
    }

    // End item is donation.
  }

  // Add to the queue.
  if (is_object($sobject)) {
    fundraiser_upsell_salesforce_queue_upsell($sobject);
  }
}

/**
 * Determine if a given donation is using an offiste recurring payment gateway.
 *
 * @param object $donation
 *   The donation to check.
 *
 * @return bool
 *   Whether this donation's payment method supports offsite recurring.
 */
function fundraiser_upsell_salesforce_donation_is_offsite_recurring($donation) {
  $info = _fundraiser_get_donation_gateway($donation->did);
  if (_fundraiser_sustainers_offsite_recurring($info['offsite_recurring'], $donation->donation['payment_method'])) {

    return TRUE;
  }

  return FALSE;
}

/**
 * Find the SFID for the given donation if it has been synced to Salesforce.
 *
 * @param int $did
 *   Donation ID.
 *
 * @return string|bool
 *   The SFID, or FALSE if one can't be found.
 */
function fundraiser_upsell_salesforce_get_donation_sfid($did) {
  $map = salesforce_sync_load_map(array(
      'module' => 'salesforce_donation',
      'delta' => 'donation',
      'drupal_id' => $did,
      'object_type' => 'Opportunity',
    ));

  return isset($map->sfid) ? $map->sfid : FALSE;
}

/**
 * Find the SFID for the recurring donation object in Salesforce if it exists.
 *
 * @param int $did
 *   Donation ID of the master donation, which will be the same as the order ID
 *   of the recurring donation object.
 *
 * @return string|bool
 *   The SFID, or FALSE if one can't be found.
 */
function fundraiser_upsell_salesforce_get_recurring_donation_sfid($did) {
  $map = salesforce_sync_load_map(array(
      'module' => 'fundraiser_sustainers',
      'delta' => 'recurring_donation',
      'drupal_id' => $did,
      'object_type' => 'npe03__Recurring_Donation__c',
    ));

  return isset($map->sfid) ? $map->sfid : FALSE;
}

/**
 * Returns a string to use as the upsell sobject name.
 *
 * @param object $donation
 *   The donation to get the name from.
 *
 * @return null|string
 *   The name to be used with the upsell sobject.
 */
function fundraiser_upsell_salesforce_format_sobject_name($donation) {
  return t('Donation Upsell - !first !last',
    array(
      '!first' => $donation->donation['first_name'],
      '!last' => $donation->donation['last_name'],
    ));
}

/**
 * Formats an Upsell Salesforce object.
 *
 * @param string $name
 *   The name of the object.
 * @param int $upsold_did
 *   The donation ID of the original single donation.
 * @param string $upsold_sfid
 *   The Salesforce ID of the original single donation.
 * @param int $upsell_did
 *   The donation ID of the recurring_donation object in the sustainer series.
 *   Same as the master Donation ID.
 * @param string $upsell_sfid
 *   The Salesforce ID of recurring_donation object, if we're not using
 *   offsite recurring.  If we are using offsite recurring, this should be
 *   the sfid of the master donation object.
 * @param bool $offsite
 *   Whether offsite recurring is used.
 *
 * @return object
 *   The Salesforce object.
 */
function fundraiser_upsell_salesforce_create_upsell_sobject($name, $upsold_did, $upsold_sfid, $upsell_did, $upsell_sfid, $offsite = FALSE) {
  $key = $offsite ? 'Upsell_Donation__c' : 'Upsell_Recurring_Donation__c';

  $sobject = new stdClass();
  $sobject->type = 'Donation_Upsell__c';
  $sobject->fields = array(
    'Name' => $name,
    'Upsell_Order_Id__c' => $upsell_did,
    $key => $upsell_sfid,
    'Upsold_Donation__c' => $upsold_sfid,
    'Upsold_Order_Id__c' => $upsold_did,
  );

  return $sobject;
}

/**
 * Adds the Upsell Salesforce object to the salesforce queue.
 *
 * @param object $sobject
 *   The Upsell Salesforce object.
 *
 * @return bool|int
 *   SAVED_NEW or SAVED_UPDATED or FALSE on failure.
 */
function fundraiser_upsell_salesforce_queue_upsell($sobject) {
  $item = array(
    'drupal_id' => $sobject->fields['Upsold_Order_Id__c'],
    'module' => 'fundraiser_upsell_salesforce',
    'delta' => 'upsell',
    'object_type' => $sobject->type,
    'operation' => 'CREATE',
    'sobject' => $sobject,
  );

  $queue = salesforce_queue_load();
  return $queue->createItem($item);
}
