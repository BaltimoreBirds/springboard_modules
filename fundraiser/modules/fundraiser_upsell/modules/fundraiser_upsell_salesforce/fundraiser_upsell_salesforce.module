<?php
/**
 * @file
 * Provides Salesforce fields that need to be customized for upsell donations.
 */

/**
 * Implements hook_upsell_node_settings_alter().
 *
 * Adds the Salesforce campaign ID to the form.
 */
function fundraiser_upsell_salesforce_upsell_node_settings_alter(&$form) {
  $node = $form['#node'];

  $campaigns = market_source_get_campaigns();

  if (!empty($campaigns)) {
    $campaign_options = array(
      '' => '(blank)',
    );

    foreach ($campaigns as $id => $campaign) {
      $campaign_options[$id] = $campaign['name'];
    }

    $form['fundraiser_upsell']['salesforce'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Salesforce values for upsold donations.'),
    );
    $form['fundraiser_upsell']['salesforce']['campaign_id'] = array(
      '#title' => t('Sustainer Salesforce Campaign ID'),
      '#type' => 'select',
      '#options' => $campaign_options,
      '#default_value' => !empty($node->fundraiser_upsell_salesforce['campaign_id']) ? $node->fundraiser_upsell_salesforce['campaign_id'] : '',
      '#description' => t('Set the campaign to be used for upsold donations from this form. Please note that if this field is set to (blank), then all recurring donations will have blank campaign ids.'),
    );
  }

  $form['#submit'][] = 'fundraiser_upsell_salesforce_node_settings_submit';
}

/**
 * Submit handler for the node add/edit forms.
 *
 * Moves the values around so the nodeapi functions can find them.
 */
function fundraiser_upsell_salesforce_node_settings_submit($form, &$form_state) {
  $form_state['values']['fundraiser_upsell_salesforce'] = $form_state['values']['fundraiser_upsell']['salesforce'];
  $form_state['values']['fundraiser_upsell']['salesforce'] = NULL;
}

/**
 * Implements hook_fundraiser_donation_create().
 *
 * Gets the donation ID for the master upsell donation and stores it
 *   with the Salesforce campaign ID from the node.
 */
function fundraiser_upsell_salesforce_fundraiser_donation_create($donation) {
  if (isset($donation->fundraiser_upsell->type) && $donation->fundraiser_upsell->type == 'master_donation') {
    // Insert a record for the recurring series and its campaign ID.
    $record = array(
      'master_did' => $donation->did,
      'campaign_id' => $donation->node->fundraiser_upsell_salesforce['campaign_id'],
    );
    drupal_write_record('fundraiser_upsell_salesforce_donation', $record);
  }
}

/**
 * Gets the campaign ID for a recurring donation series.
 *
 * @param int $master_did
 *   Donation ID of the master donation.
 *
 * @return int|bool
 *   Campaign ID or FALSE;
 */
function fundraiser_upsell_salesforce_get_campaign_id($master_did) {
  return db_query("SELECT campaign_id FROM {fundraiser_upsell_salesforce_donation} WHERE master_did = :master_did", array(':master_did' => $master_did))
    ->fetchField();
}

/**
 * Implements hook_upsell_master_donation_alter().
 *
 * Queue up the recurring donation object and master donation object
 *   before creating the recurring series.
 */
function fundraiser_upsell_salesforce_upsell_master_donation_alter(&$donation) {
  // Queue the recurring_donation object.
  salesforce_genmap_send_object_to_queue(
    'fundraiser_sustainers',
    'insert',
    $donation->node,
    $donation->did,
    $donation,
    'recurring_donation'
  );

  // Queue the donation object.
  salesforce_genmap_send_object_to_queue(
    'salesforce_donation',
    'insert',
    $donation->node,
    $donation->did,
    $donation,
    'donation'
  );
}

/**
 * Implements hook_salesforce_queue_create_item_alter().
 *
 * Set the campaign ID if it's supposed to be different.
 */
function fundraiser_upsell_salesforce_salesforce_queue_create_item_alter(&$item) {
  if ($item['delta'] == 'donation') {
    $donation = fundraiser_donation_get_donation($item['drupal_id']);
    if (isset($donation->fundraiser_upsell->type)) {
      if ($donation->fundraiser_upsell->type == 'upsold_donation') {
        // @todo This case probably never runs.
        // The upsold donation doesn't get its type until an update.
        // Don't need to mess with the upsold donation.
        return;
      }
      elseif ($donation->fundraiser_upsell->type == 'master_donation') {
        $master_did = $donation->did;
      }
      else {
        $master_did = $donation->master_did;
      }
      $campaign_id = fundraiser_upsell_salesforce_get_campaign_id($master_did);
      if ($campaign_id !== FALSE) {
        $item['sobject']->fields['CampaignId'] = $campaign_id;
      }

    }
  }
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_upsell_salesforce_node_insert($node) {
  // Only process if upsell is enabled.
  if (fundraiser_upsell_is_enabled($node)) {
    // Insert the record.
    $record = fundraiser_upsell_salesforce_node_record($node);
    drupal_write_record('fundraiser_upsell_salesforce', $record);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_upsell_salesforce_node_update($node) {
  // If this isn't a fundraiser type, ignore it.
  if (fundraiser_is_donation_type($node->type)) {
    // Check if the upsell data already exists.
    $exists = db_query('SELECT nid FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
      array(':nid' => $node->nid)
    )->fetchField();
    $record = fundraiser_upsell_salesforce_node_record($node);
    // Don't bother inserting a new record if upsell isn't enabled..
    if (empty($exists) && fundraiser_upsell_is_enabled($node)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record);
    }
    // If the record does exist, then update it.
    elseif (!empty($exists)) {
      drupal_write_record('fundraiser_upsell_salesforce', $record, 'nid');
    }
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_upsell_salesforce_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    // If this isn't a fundraiser type, ignore it.
    if (fundraiser_is_donation_type($node->type)) {
      $data = db_query('
        SELECT * FROM {fundraiser_upsell_salesforce} WHERE nid = :nid',
        array(':nid' => $node->nid)
      )->fetchAssoc();
      $nodes[$node->nid]->fundraiser_upsell_salesforce = $data;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_upsell_salesforce_node_delete($node) {
  db_query('DELETE FROM {fundraiser_upsell_salesforce} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Output an array of the DB structure mapped to the $node object.
 */
function fundraiser_upsell_salesforce_node_record($node) {
  return array(
    'nid' => $node->nid,
    'campaign_id' => $node->fundraiser_upsell_salesforce['campaign_id'],
  );
}
