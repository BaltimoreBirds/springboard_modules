<?php

/**
 * @file
 * This module provides functionality for creating multiple versions of the same payment gateway with different settings.
 */

/**
 * Implements hook_menu().
 */
function gateway_manager_menu() {
  $items['admin/config/system/fundraiser/gateways'] = array(
    'title' => 'Payment gateways',
    'page callback' => 'gateway_manager_list',
    'access callback' => 'user_access',
    'access arguments' => array('view payment gateway list'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gateway_manager.admin.inc',
  );
  $items['admin/config/system/fundraiser/gateways/list'] = array(
    'title' => 'List',
    'access callback' => 'user_access',
    'access arguments' => array('view payment gateway list'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/system/fundraiser/gateways/add'] = array(
    'title' => 'Add payment gateway',
    'page callback' => 'gateway_manager_gateway_add',
    'access callback' => 'user_access',
    'access arguments' => array('create payment gateway'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gateway_manager.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/system/fundraiser/gateways/%gateway_manager_gateway/edit'] = array(
    'title' => 'Edit payment gateway',
    'page callback' => 'gateway_manager_gateway_edit',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('edit any payment gateway'),
    'file' => 'gateway_manager.admin.inc',
  );
  $items['admin/config/system/fundraiser/gateways/%gateway_manager_gateway/delete'] = array(
    'title' => 'Delete payment gateway',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gateway_managed_gateway_delete_form', 5),
    'type' => MENU_CALLBACK,
    'access callback' => 'gateway_manager_is_deleteable',
    'access arguments' => array(5),
    'file' => 'gateway_manager.admin.inc',
  );
  return $items;
}

/**
 * Implemenation of hook_permission().
 */
function gateway_manager_permission() {
  return array(
    'view payment gateway list' => array(
      'title' => t('view payment gateway list'),
      'description' => t('View the list of available gatways.'),
    ),
    'create payment gateway' => array(
      'title' => t('create payment gateway'),
      'description' => t('Create a new payment gateway configuration.'),
    ),
    'edit any payment gateway' => array(
      'title' => t('edit any payment gateway'),
      'description' => t('Edit any existing payment gateway configurations.'),
    ),
    'delete any payment gateway' => array(
      'title' => t('delete any payment gateway'),
      'description' => t('Delete any existing payment gateway configurations.'),
    ),
  );
}

/**
 * Implements hook_node_insert().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_insert($node) {
  if (fundraiser_is_donation_type($node->type)) {
    $cid = 'gateway_manager_form_count';
    cache_clear_all($cid, 'cache');
  }
}

/**
 * Implements hook_node_update().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_update($node) {
  if (fundraiser_is_donation_type($node->type)) {
    $cid = 'gateway_manager_form_count';
    cache_clear_all($cid, 'cache');
  }
}

/**
 * Implements hook_node_delete().
 * Clear out the gateway cache when donation forms are created, updated or deleted.
 */
function gateway_manager_node_delete($node) {
  if (fundraiser_is_donation_type($node->type)) {
    $cid = 'gateway_manager_form_count';
    cache_clear_all($cid, 'cache');
  }
}

/**
 * Implemenation of donation_transaction_details(). SF donation hook. SHOULD BE NAMESPACED.
 */
function gateway_manager_donation_transaction_details_alter(&$details) {
  $gateway = gateway_manager_load_gateway($details['gateway']);
  $details['gateway'] = $gateway->name;
}

/**
 * Implements hook_fundraiser_ubercart_gateway_info().
 */
function gateway_manager_fundraiser_ubercart_gateway_info() {
  /**
   * For the purposes of our hook we want to return:
   * Array(
   *   [test_gateway] =&gt; Array(
   *     [id] =&gt; test_gateway
   *     [title] =&gt; Test Gateway
   *     [description] =&gt; Process credit card payments through the Test Gateway.
   *     [charge_function] =&gt; charge_function
   *     [refund_function] =&gt; refund_function
   *     [gateway_details] => Array(Previous gateway details)
   *   )
   * )
   */
  $gateway_info = array();
  // Grab type information from all. This will include the relevant charge type data.
  $gateway_types = module_invoke_all('gateway_manager_gateway_info');
  // Grab configured gateways.
  $gateways = gateway_manager_load_gateways();
  foreach ($gateways as $id => $gateway) {
    if ($gateway['status'] == 1) {
      // Merge type data with the gateway.
      $gateway = array_merge($gateway, $gateway_types[ $gateway['type'] ]);
      $this_gateway['id'] = $id; // The array_merge probably overwrote the id.
      $this_gateway['module'] = 'gateway_manager';
      $this_gateway['module_name'] = t('Managed Gateways');
      $this_gateway['title'] = isset($gateway['name']) ? $gateway['name'] : $gateway['title'] . ' (Gateway managed)';
      $this_gateway['description'] = isset($gateway['description']) ? $gateway['description'] : '';
      $this_gateway['charge_function'] = isset($gateway['credit']) ? $gateway['credit'] : '';
      $this_gateway['refund_function'] = isset($gateway['credit_refund']) ? $gateway['credit_refund'] : $this_gateway['charge_function'];
      $this_gateway['billing_update_function'] = isset($gateway['billing_update']) ? $gateway['billing_update'] : '';
      $this_gateway['gateway_details'] = isset($gateway) ? $gateway : array();
      // ALL currently supported ubercart systems are Credit Card Only.
      $this_gateway['payment_method'] = array('credit');
      // If the gateway doesn't explicitly support recurring, then return FALSE.
      $this_gateway['allow_recurring'] = isset($gateway['allow_recurring']) ? $gateway['allow_recurring'] : FALSE;
      if ($this_gateway['allow_recurring'] == TRUE) {
        $this_gateway['allow_recurring'] = array('credit');
      }
      // No offline processing for this system.
      $this_gateway['offsite_processing'] = array();
      // ALL currently supported ubercart gateways use the same field set.
      $this_gateway['form callback'] = 'fundraiser_ubercart_credit_card_form';
      $this_gateway['form validate callback'] = 'fundraiser_ubercart_credit_card_submit_form';
      $this_gateway['form submit callback'] = 'fundraiser_ubercart_credit_card_submit_form';
      $this_gateway['form expiration callback'] = 'fundraiser_ubercart_credit_card_expiration_form';
      $gateway_info[$id] = $this_gateway;
    }
  }
  return $gateway_info;
}

/**
 * Helper functions.
 */

/**
 * Helper function. Determines whether or not a payment gateway is currently assigned to
 * any donation forms or recurring orders.
 */
function gateway_manager_is_deleteable($gateway) {
  $id = is_object($gateway) ? $gateway->id : $gateway;
  $has_access = user_access('delete any payment gateway');
  $donation_count = _gateway_manager_pending_donation_count($id);
  // If either count is greater than 0, the gateway is in use.
  $in_use = FALSE;
  if ($donation_count > 0) {
    $in_use = TRUE;
  }
  // Check that the user has the correct permission, and that the gateway is not in use.
  return $has_access && !$in_use;
}

/**
 * Helper function, so menu object loading will work.
 */
function gateway_manager_gateway_load($id) {
  return gateway_manager_load_gateway($id);
}

/**
 * Database functions.
 */

/**
 * CRUD DB function. Creates a new payment gateway record.
 */
function gateway_manager_settings_insert($record) {
  if (!empty($record['id'])) {
    return gateway_manager_settings_update($record);
  }
  global $user;
  $record['uid'] = $user->uid;
  $record['created'] = REQUEST_TIME;
  $record['updated'] = REQUEST_TIME;
  $result = drupal_write_record('gateway_manager_gateways', $record);
  if ($result) {
    gateway_manager_settings_save_terms($record['id'], $record['terms']); // If successful, id will be populated by save.
    module_invoke_all('gateway_manager_gateway_create', $record, $record['config']);
    drupal_set_message(t('Payment gateway @name created successfully.', array('@name' => $record['name'])));
    drupal_goto('admin/config/system/fundraiser/gateways');
  }
}

/**
 * CRUD DB function. Loads a payment gateway configuration by id.
 */
function gateway_manager_load_gateway($id) { // Called by gateway_manager_ref.
  static $gateways = array();
  if (!isset($gateways[$id])) {
    $gateways[$id] = db_query('SELECT * FROM {gateway_manager_gateways} WHERE id = :id',
      array(':id' => $id))->fetchObject();
    $results = db_query('SELECT tid FROM {term_gateway} WHERE gid = :gid', array(':gid' => $id));
    foreach ($results as $result) {
      $gateways[$id]->terms[] = $data['tid'];
    }
    drupal_alter('gateway_manager_load_gateway', $gateways[$id]);
  }
  return $gateways[$id];
}

/**
 * CRUD DB function. Updates an existing payment gateway record.
 */
function gateway_manager_settings_update($record) {
  if (empty($record['id'])) {
    return gateway_manager_settings_insert($record);
  }
  global $user;
  $record['uid'] = $user->uid;
  $record['created'] = REQUEST_TIME;
  $record['updated'] = REQUEST_TIME;
  $result = drupal_write_record('gateway_manager_gateways', $record, array('id'));
  if ($result) {
    gateway_manager_settings_save_terms($record['id'], $record['terms']);
    module_invoke_all('gateway_manager_gateway_update', $record, $record['config']);
    drupal_set_message(t('Payment gateway @name updated successfully.', array('@name' => $record['name'])));
    drupal_goto('admin/config/system/fundraiser/gateways');
  }
}

/**
 * CRUD DB function. Deletes an existing payment gateway record.
 */
function gateway_manager_delete_gateway($id) {
  db_delete('gateway_manager_gateways')
  ->condition('id', $id)
  ->execute();
  module_invoke_all('gateway_manager_gateway_delete', $id);
  drupal_set_message(t('Payment gateway successfully deleted.'));
  drupal_goto('admin/config/system/fundraiser/gateways');
}

/**
 * DB function. Saves terms associated with a managed gateway.
 */
function gateway_manager_settings_save_terms($id, $terms) {
  if (!empty($terms)) {
    // Delete previous terms.
    db_delete('term_gateway')
    ->condition('gid', $id)
    ->execute();
    // Add new ones.
    foreach ($terms as $term) {
      $record = array('gid' => $id, 'tid' => $term);
      $result = drupal_write_record('term_gateway', $record);
    }
  }
}

/**
 * DB function. Builds an array of gateways that can be selected when creating a payment gateway.
 */
function gateway_manager_load_gateways($status = 1) {
  static $gateways;
  if (empty($gateways)) {
    $results = db_query('SELECT g.* FROM {gateway_manager_gateways} g ORDER BY g.name');
    $gateways = array();
    foreach ($results as $result) {
      $gateways[$result->id] = (array) $result;
    }
  }
  return $gateways;
}

/**
 * Database function, count how many orders are left to go.
 */
function _gateway_manager_pending_donation_count($id) {
  if (module_exists('fundraiser_sustainers')) {
    return db_query('SELECT COUNT(1) FROM {fundraiser_sustainers} fs ' .
      'LEFT JOIN {fundraiser_donation} fd ON fs.did = fd.did ' .
      'WHERE fd.gateway = :gateway AND fd.txn_id IS NULL',
      array(':gateway' => $id))->fetchField();
  }
  return 0;
}
