<?php

/**
 * @file
 * Ubercart based hook implementations for the fundraiser module donations.
 */

/**
 * Implemenation of hook_mail_alter().
 */
function fundraiser_ubercart_mail_alter(&$message) {
  // Catch for mail coming out of UC.
  if ($message['id'] == 'uc_order_action-mail') {
    // Gather data.
    $parts = explode("/", $_GET['q']);
    $nid = $parts[1];
    $node = node_load($nid);
    // Make changes.
    $message['headers']['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $node->receipt_email_from .
      ' <' . $node->receipt_email_address . '>';
    $bcc = variable_get('fundraiser_receipt_bcc', '');
    if (!empty($bcc)) {
      $message['headers']['Bcc'] = $bcc;
    }
    $message['from'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
    $message['subject'] = $node->receipt_email_subject;
  }
}

/**
 * Implementation of hook_order_actions() from Ubercart.
 * Add a refund option to the Order list.
 * From http://drupalcontrib.org/api/drupal/contributions!ubercart!docs!hooks.php/function/hook_order_actions/6
 */
function fundraiser_order_actions($order) {
  $gateway = _fundraiser_get_donation_gateway($order->order_id);
  $can_refund = isset($gateway['credit_refund']) ? $gateway['credit_refund'] : NULL;
  if (user_access('edit orders') && 
    (in_array($order->order_status, array('payment_received', 'partially_refunded')) || empty($order->order_status)) && $can_refund) {  
    $module_path = base_path() . drupal_get_path('module', 'fundraiser');
    $title = t('Issue refund on order !order_id.', array('!order_id' => $order->order_id));
    $actions[] = array(
      'name' => t('Refund'),
      'url' => 'admin/store/orders/' . $order->order_id . '/refund',
      'icon' => '<img src="' . $module_path . '/images/refund.gif" alt="' . $title . '" />',
      'title' => $title,
    );
    return $actions;
  }
}

/**
 * Implementation of hook_preprocess_uc_order().
 * From: http://www.ubercart.org/forum/development/18047/inserting_variables_invoices_ubercart_23_and_above
 * Adds additional variables for use in donation receipt emails sent by UC.
 */
function fundraiser_preprocess_uc_order(&$variables) {
  switch ($variables['op']) {
    case 'checkout-mail':
      $nid = $variables['order']->products[0]->nid;
      $fundraiser = _fundraiser_get_fundraiser_by_nid($nid);
      $variables['fundraiser_message'] = $fundraiser->receipt_email_message;
      break;
  }
}

/**
 * Implements hook_fundraiser_gateway_info().
 */
function fundraiser_ubercart_fundraiser_gateway_info() {
  // If no gateways are enabled, this returns an empty array.
  // TODO - make sure where this is accounted for an emtpy is noted, and flagged as a thing to fix. - SeH
  // From Ubercart http://api.lullabot.com/_uc_payment_gateway_list/7
  // Is ultimately configured by http://api.lullabot.com/hook_uc_payment_gateway
  // Returns in the format:
  // $gateway = array('id', 'title', 'credit', 'credit_refund', 'etc');
  return _uc_payment_gateway_list('', TRUE);
}

/**
 * Implements hook_fundraiser_donation_form_context().
 *
 * Returns context information to fundraiser to be used in other modules as needed for
 * form generation. In this case an array of information about countries and zones.
 */
function fundraiser_ubercart_fundraiser_donation_form_context($context) {
  $countries = array();
  $zones = array();
  // Gather an array of countries.
  $found_countries = _fundraiser_ubercart_get_countries();
  foreach ($found_countries as $found_country) {
    // First load up id, name, iso code 2, iso code 3, and version from Ubercart.
    $countries[$found_country->country_id] = $result;
    $countries[$found_country->country_id]->zones = array();
    $found_zones = _fundraiser_ubercart_get_zone_by_country($result->country_id);
    foreach ($found_zones as $found_zone) {
      // For each zone load up, zone_id, zone country_id, zone, code, zone_name.
      // Store in the country and zone arrays.
      $countries[$found_country->country_id]->zones[$found_zone->zone_id] = $found_zone;
      $zones[$found_zone->zone_id] = $found_zone;
    }
  }
  $context->countries = $countries;
  $context->zones = $zones;
  return $context;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 */
function fundraiser_ubercart_fundraiser_field_info_alter($fields) {
  // Add our own validation routines to the billing fields for credit cards.
  $fields['credit_card_information']['card_number']['#validate_callback'] = '_fundraiser_ubercart_card_number_field_validate';
  $fields['credit_card_information']['card_cvv']['#validate_callback'] = '_fundraiser_ubercart_card_cvv_field_validate';
  $fields['credit_card_information']['card_expiration_month']['#validate_callback'] = '_fundraiser_ubercart_card_expiration_year_field_validate';
  $fields['credit_card_information']['card_expiration_year']['#validate_callback'] = '_fundraiser_ubercart_card_expiration_year_field_validate';
}

/**
 * Validation callback for field card_number.
 */
function _fundraiser_ubercart_card_number_field_validate($form, $form_state, $submission_fields, $value) {
  $valid = _uc_credit_valid_card_number($value);
  if (!empty($cc_number) && (!$valid || !ctype_digit($value) )) {
    return t('You have entered an invalid credit card number.');
  }
}

/**
 * Validation callback for field card_cvv.
 */
function _fundraiser_ubercart_card_cvv_field_validate($form, $form_state, $submission_fields, $value) {
  $valid =_uc_credit_valid_cvv($value);
  if (!empty($cc_cvv) && !$valid) {
    return t('You have entered an invalid CVV number.');
  }
}

/**
 * Validation callback for field card_expiration_month, card_expiration_year.
 */
function _fundraiser_ubercart_card_expiration_year_field_validate($form, $form_state, $submission_fields, $value) {
  $cc_expiration_month = $fundraiser_fields['card_expiration_month'];
  $cc_expiration_year = $fundraiser_fields['card_expiration_year'];
  $valid = _uc_credit_valid_card_expiration($cc_expiration_month, $cc_expiration_year);
  if (!empty($cc_expiration_month) && !empty($cc_expiration_year) && !$valid) {
    return t('The credit card you entered has expired.');
  }
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_ubercart_fundraiser_donation_create($donation) {
  // Get basic information from the donation node.
  $user = $donation->user;
  $node = $donation->node;
  $fundraiser_fields = $donation->submission; // Fields are keyed as per field_info in fundraiser.

  // Pick out the values we need to generate an order.
  $donation_amount = $fundraiser_fields['amount'];
  if ($donation_amount == "other") {
    $donation_amount = preg_replace("/[^\d\.]/i", "", $fundraiser_fields['other_amount']);
  }

  $cc_number = $fundraiser_fields['card_number'];
  $cc_cvv = $fundraiser_fields['card_cvv'];
  $cc_expiration_month = $fundraiser_fields['card_expiration_month'];
  $cc_expiration_year = $fundraiser_fields['card_expiration_year'];
  $first_name = $fundraiser_fields['first_name'];
  $last_name = $fundraiser_fields['last_name'];
  $email = $fundraiser_fields['email'];
  $billing_address = $fundraiser_fields['address'];
  $billing_address_2 = $fundraiser_fields['address_line_2'];
  $billing_city = $fundraiser_fields['city'];
  $billing_country = $fundraiser_fields['country'];
  $billing_state = $fundraiser_fields['state'];
  $billing_zipcode = $fundraiser_fields['zip'];
  $quantity = isset($fundraiser_fields['quantity']) && !empty($fundraiser_fields['quantity']) ? $fundraiser_fields['quantity'] : 1;
  $data = isset($fundraiser_fields['data']) ? $fundraiser_fields['data'] : '';

  // Create a UC order.
  $order = uc_order_new($user->uid);
  $product = uc_product_load(array($node->nid => $node));
  $order->products[0] = $product;
  $order->products[0]->price = $donation_amount;
  $order->products[0]->qty = $quantity;
  $order->products[0]->title = $node->title;
  $order->products[0]->nid = $node->nid;
  $order->products[0]->data = array(
    'shippable' => isset($order->products[0]->shippable) ? $order->products[0]->shippable : FALSE,
    'model' => isset($order->products[0]->model) ? $order->products[0]->model : '',
    'varprice' => $donation_amount,
    'module' => 'uc_product',
  );

  // Multiply amount by quantity if available.
  if (!empty($quantity)) {
    $donation_amount = $donation_amount * $quantity;
  }

  // Set order properties.
  $order->primary_email = $email;
  $order->order_total = $donation_amount;
  $order->billing_first_name = $first_name;
  $order->billing_last_name = $last_name;
  $order->billing_city = $billing_city;
  $order->billing_street1 = $billing_address;
  $order->billing_street2 = $billing_address_2;
  $order->billing_postal_code = $billing_zipcode;
  $order->billing_zone = $billing_state;
  $order->billing_country = $billing_country;
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_type' => _fundraiser_ubercart_get_cc_type($cc_number),
    'cc_owner' => '',
    'cc_number' => $cc_number,
    'cc_start_month' => '',
    'cc_start_year' => '',
    'cc_exp_month' => $cc_expiration_month,
    'cc_exp_year' => $cc_expiration_year,
    'cc_issue' => '',
    'cc_cvv' => $cc_cvv,
    'cc_bank' => '',
  );
  $order->line_items = array();

  // If using the gateway manager, store the gateway that was used to make the payment
  if (module_exists('gateway_manager')) {
    $order->data['gateway'] = $node->gateway;
  }

  // Lastly add order data field information.
  foreach ($data as $field => $value) {
    $order->data[$field] = $value;
  }

  // Cache the cc details stored by the handler.
  uc_credit_cache('save', $order->payment_details, FALSE);

  // Save the order.
  uc_order_save($order);
  uc_order_comment_save($donation->did, $user->uid, t('Donation created by :user.', array(':user' => $user->name)), 'admin');

  // We only need to return the did at this point.
  // When we charge later, this is the only value that the glue module will need.
  // No one outside of the glue module should need the order data otherwise.
  $donation->did = $order->order_id;
  $donation->donation_amount = $donation_amount; // Total cost * quantity.
  $donation->data = $order->data; // TODO check if we actually need this for submission later.
}

/**
 * Implements hook_fundraiser_donation_process().
 */
function fundraiser_donation_process($donation, $charge_function) {
  // Execute the charge as per the given gateway.
  $data = array('txn_type' => 'auth_capture'); // Set the data for what we're trying to do.
  $donation->data = array_merge($data, $donation->data);
  $result = $charge_function($donation->did, $donation->donation_amount, $donation->data);
  // Have to pass up to the system.
  $donation->result['success'] = $result['success'];
  $donation->result['comment'] = $result['comment'];
  $donation->result['message'] = $result['message'];
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 */
function fundraiser_ubercart_fundraiser_donation_get_donation($donation) {
  // Load order specific information for donation.
  $order = uc_order_load($donation->did);
  $donation->donation = $order;
  $donation->donation->donation_amount = $order->order_total;
  $ref_id = '';
  if (isset($order->data['cc_txns']['references'])) {
    $ref_id = array_shift(array_keys($order->data['cc_txns']['references']));
  }
  $data = array(
    'txn_type' => 'reference_txn',
    'ref_id' => $ref_id,
  );
  $donation->donation->data = array_merge($donation->donation->data, $data);
}

/**
 * Implements hook_fundraiser_donation_update().
 */
function fundraiser_ubercart_fundraiser_donation_update($donation) {
  $old_amount = $donation->donation->order_total;
  $donation->donation->order_total = $donation->donation->donation_amount;
  $donation->donation->products[0]->price = $donation->donation->donation_amount;
  // Update the card type based on given card number.
  $donation->donation->payment_details['cc_type'] = _fundraiser_ubercart_get_cc_type($donation->donation->payment_details['cc_number']);
  uc_credit_cache('save', $donation->donation->payment_details, FALSE);
  uc_order_save($donation->donation);
  uc_credit_cache('clear');
  global $user;
  uc_order_comment_save($donation->did, $user->uid, t('Donation updated by :user.', array(':user' => $user->name)), 'admin');
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_ubercart_fundraiser_donation_success($donation) {
  // Mark as complete. Complete the sale in Ubercart.
  $order = uc_order_load($donation->did);
  uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  uc_payment_enter($order->order_id, 'fundraiser', $order->order_total, 0, NULL, 
    t('Payment processed by the fundraiser module.'));
  _fundraiser_ubercart_update_order_status('payment_received', $donation->did);
  global $user; // Completing user is NOT ALWAYS the same as the given submission user.
  uc_order_comment_save($donation->did, $user->uid, t('Donation successfully completed by :user.', array(':user' => $user->name)), 'admin');
}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_ubercart_fundraiser_donation_decline($donation) {
  // Mark the sale in Ubercart as failed.
  _fundraiser_ubercart_update_order_status('failed', $donation->did);
  // Clear the credit card cache between orders
  uc_credit_cache('clear');
  global $user; // Completing user is NOT ALWAYS the same as the given submission user.
  uc_order_comment_save($donation->did, $user->uid, t('Donation declined at gateway by :user.', array(':user' => $user->name)), 'admin');
}

/**
 * Implements hook_fundraiser_donation_exception().
 */
function fundraiser_ubercart_fundraiser_donation_exception($donation) {
  return fundraiser_ubercart_fundraiser_donation_decline($donation);
}

/**
 * Implements hook_fundraiser_donation_cancel().
 */
function fundraiser_ubercart_fundraiser_donation_cancel($donation) {
  // Mark the sale in Ubercart as cancelled.
  _fundraiser_ubercart_update_order_status('canceled', $donation->did);
  // Make a comment on the order.
  global $user;
  uc_order_comment_save($donation->did, $user->uid, t('Donation cancelled by :user.', array(':user' => $user->name)), 'admin');
}

/** 
 * Helper function, given a card number return likely type.
 */
function _fundraiser_ubercart_get_cc_type($cardnumber) {
  $cardtype = "UNKNOWN";
  $len = strlen($cardnumber);
  if ( $len == 15 && substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = "amex";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = "discover";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = "mc";
  }
  elseif ( ($len == 16 || $len == 13) && substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = "visa";
  }
  return ( $cardtype );
}

/**
 * DB function, update order status on a order.
 */
function _fundraiser_ubercart_update_order_status($status, $order_id) {
  db_query('UPDATE {uc_orders} SET order_status = :status ' .
    'WHERE order_id = :order_id',
    array(':status' => $status, ':order_id' => $order_id));
}

/**
 * DB function, look in country table for country info.
 */
function _fundraiser_ubercart_get_countries() {
  return db_query('SELECT * FROM {uc_countries}')->fetchAll();
}

/**
 * DB function, look in zone table for zone info.
 */
function _fundraiser_ubercart_get_zone_by_country($country_id) {
  return db_query('SELECT * FROM {uc_zones} ' .
    'WHERE zone_country_id = :zone_country_id',
    array(':zone_country_id' => $country_id)->fetchAll();
}

/**
 * Below here are orphan or unknown origin functions. To be reviewed later.
 */

/**
 * Implements hook_fundraiser_get_credit_encryption_path(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_credit_encryption_path() {
  return variable_get('uc_credit_encryption_path', t('Not configured, see below.'));
}

/**
 * Implements hook_fundraiser_decrypt_credit(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_decrypt_credit($data) {
  $key = uc_credit_encryption_key();
  $crypt = new uc_encryption_class;
  $cc = unserialize($data);
  $cc_data = unserialize($crypt->decrypt($key, $cc['cc_data']));
  $cc_data['cc_number'] = substr($cc_data['cc_number'], -4);
  return $cc_data;
}

// Theme / formaty code, really should get refactored at some point. -SeH

/**
 * Implements hook_fundraiser_format_price(). //tODO where is this called?
 */
function fundraiser_ubercart_fundraiser_format_price($price) {
  return theme('uc_price', array('price' => $price));
}
