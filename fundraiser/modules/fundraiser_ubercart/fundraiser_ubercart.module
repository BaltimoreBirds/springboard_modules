<?php

/**
 * @file
 * Ubercart based hook implementations for the fundraiser module donations.
 */

/**
 * Implemenation of hook_mail_alter().
 */
function fundraiser_ubercart_mail_alter(&$message) {
  // Catch for mail coming out of UC.
  if ($message['id'] == 'uc_order_action-mail') {
    // Gather data.
    $parts = explode("/", $_GET['q']);
    $nid = $parts[1];
    $node = node_load($nid);
    // Make changes.
    $message['headers']['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
    $bcc = variable_get('fundraiser_receipt_bcc', '');
    if (!empty($bcc)) {
      $message['headers']['Bcc'] = $bcc;
    }
    $message['from'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
    $message['subject'] = $node->receipt_email_subject;
  }
}

/**
 * Implementation of hook_order_actions() from Ubercart.
 * Add a refund option to the Order list
 * From http://drupalcontrib.org/api/drupal/contributions!ubercart!docs!hooks.php/function/hook_order_actions/6
 */
function fundraiser_order_actions($order) {
  $gateway = _fundraiser_get_donation_gateway($order->order_id);
  $can_refund = isset($gateway['credit_refund']) ? $gateway['credit_refund'] : NULL;
  if (user_access('edit orders') && 
    (in_array($order->order_status, array('payment_received', 'partially_refunded')) || empty($order->order_status)) && $can_refund) {  
    $module_path = base_path() . drupal_get_path('module', 'fundraiser');
    $title = t('Issue refund on order !order_id.', array('!order_id' => $order->order_id));
    $actions[] = array(
      'name' => t('Refund'),
      'url' => 'admin/store/orders/' . $order->order_id . '/refund',
      'icon' => '<img src="' . $module_path . '/images/refund.gif" alt="' . $title . '" />',
      'title' => $title,
    );
    return $actions;
  }
}

/**
 * Implementation of hook_order().
 * From http://www.ubercart.org/docs/api/hook_order
 * When an order is deleted, keep fundraiser tables in sync.
 */
function fundraiser_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'delete':
      _fundraiser_delete_recurring($arg1->order_id);
      break;
  }
}

/**
 * Implementation of hook_preprocess_uc_order().
 * From: http://www.ubercart.org/forum/development/18047/inserting_variables_invoices_ubercart_23_and_above
 * Adds additional variables for use in donation receipt emails sent by UC.
 */
function fundraiser_preprocess_uc_order(&$variables) {
  switch ($variables['op']) {
    case 'checkout-mail':
      $nid = $variables['order']->products[0]->nid;
      $fundraiser = _fundraiser_get_fundraiser_by_nid($nid);
      $variables['fundraiser_message'] = $fundraiser->receipt_email_message;
      break;
  }
}

/**
 * Implements hook_fundraiser_gateway_info().
 */
function fundraiser_ubercart_fundraiser_gateway_info() {
  // If no gateways are enabled, this returns an empty array.
  // TODO - make sure where this is accounted for an emtpy is noted, and flagged as a thing to fix. - SeH
  // From Ubsercart http://api.lullabot.com/_uc_payment_gateway_list/7
  // Is ultimately configured by http://api.lullabot.com/hook_uc_payment_gateway
  // Returns in the format:
  // $gateway = array('id', 'title', 'credit', 'credit_refund', 'etc');
  // TODO check that this is the format we want and we don't want to transform it to something else.
  return _uc_payment_gateway_list('', TRUE);
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_ubercart_fundraiser_donation_create($donation) {
  $user = $donation->user;
  $node = $donation->node;
  $recurs = $donation->donation->recurs;
  $fundraiser_fields = $donation->submission;
  $additional_fields = isset($donation->additional) ? $donation->additional : array();

  // Generate an order given the values submitted, and return an order_id.
  // Fundraiser uses the concept of an order (as per ubercart).
  // So any hook creating an order should keep that in mind.

  // Pick out the values we need to generate an order.
  $donation_amount = $fundraiser_fields['amount'];
  $cc_number = $fundraiser_fields['card_number'];
  $cc_cvv = $fundraiser_fields['card_cvv'];
  $cc_expiration_month = $fundraiser_fields['card_expiration_month'];
  $cc_expiration_year = $fundraiser_fields['card_expiration_year'];
  $first_name = $fundraiser_fields['first_name'];
  $last_name = $fundraiser_fields['last_name'];
  $email = $fundraiser_fields['email'];
  $billing_address = $fundraiser_fields['address'];
  $billing_address_2 = $fundraiser_fields['address_line_2'];
  $billing_city = $fundraiser_fields['city'];
  $billing_country = $fundraiser_fields['country'];
  $billing_state = $fundraiser_fields['state'];
  $billing_zipcode = $fundraiser_fields['zip'];
  $quantity = isset($fundraiser_fields['quantity']) && !empty($fundraiser_fields['quantity']) ? $fundraiser_fields['quantity'] : 1;

  // Look for other amount if set.
  if ($donation_amount == "other") {
    $donation_amount = preg_replace("/[^\d\.]/i", "", $fundraiser_fields['other_amount']);
  }

  // Create a UC order.
  $order = uc_order_new($user->uid);
  $product = uc_product_load(array($node->nid => $node));
  $order->products[0] = $product;
  $order->products[0]->price = $donation_amount;
  $order->products[0]->qty = $quantity;
  $order->products[0]->title = $node->title;
  $order->products[0]->nid = $node->nid;
  $order->products[0]->data = array(
    'shippable' => isset($order->products[0]->shippable) ? $order->products[0]->shippable : FALSE,
    'model' => isset($order->products[0]->model) ? $order->products[0]->model : '',
    'varprice' => $donation_amount,
    'module' => 'uc_product',
  );

  // Multiply amount by quantity if available.
  if (!empty($quantity)) {
    $donation_amount = $donation_amount * $quantity;
  }

  // Set order properties.
  $order->primary_email = $email;
  $order->order_total = $donation_amount;
  $order->billing_first_name = $first_name;
  $order->billing_last_name = $last_name;
  $order->billing_city = $billing_city;
  $order->billing_street1 = $billing_address;
  $order->billing_street2 = $billing_address_2;
  $order->billing_postal_code = $billing_zipcode;
  $order->billing_zone = $billing_state;
  $order->billing_country = $billing_country;
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_type' => _fundraiser_ubercart_get_cc_type($cc_number),
    'cc_owner' => '',
    'cc_number' => $cc_number,
    'cc_start_month' => '',
    'cc_start_year' => '',
    'cc_exp_month' => $cc_expiration_month,
    'cc_exp_year' => $cc_expiration_year,
    'cc_issue' => '',
    'cc_cvv' => $cc_cvv,
    'cc_bank' => '',
  );
  $order->line_items = array();
  $order->data['recurring_status'] = $recurs;
  foreach ($additional_fields as $field => $value) {
    $order->data[$field] = $value;
  }
  // If using the gateway manager, store the gateway that was used to make the payment
  if (module_exists('gateway_manager')) {
    $order->data['gateway'] = $node->gateway;
  }
  // Cache the cc details stored by the handler.
  uc_credit_cache('save', $order->payment_details, FALSE);
  // Save the order.
  uc_order_save($order);
  // And add the data to the donation form to return it.
  $donation->donation = $order;
  $donation->donation->did = $order->order_id;
  $donation->donation->recurs = $recurs;
  $donation->donation->donation_amount = $order->order_total;
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 */
function fundraiser_ubercart_fundraiser_donation_get_donation($donation) {
  $order = uc_order_load($donation->donation->did);
// TODO I would really like to move some of this out into an additional table.
// To allow us to track did - nid - user etc outside of ubercart's tables.
// This would allow us to more cleanly handle the glue modules.
// As it is, ubercart is the only record of node, user for a donation.
// Since this is called with other glue modules in effectively random order,
// it means other modules cannot rely on having node or user info on hand.
// This is a pretty huge flaw in the design that needs to be addressed, but
// would take tweaking tables. So it'll wait until after the port.
  $donation->nid = $order->products[0]->nid;
  $donation->node = node_load($order->products[0]->nid);
  $donation->uid = $order->uid;
  $donation->user = user_load($order->uid);
  
  // Load order specific information for donation.
  $donation->donation = $order;
  $donation->donation->did = $order->order_id;
  $donation->donation->donation_amount = $order->order_total;

  $ref_id = '';
  if (isset($order->data['cc_txns']['references'])) {
    $ref_id = array_shift(array_keys($order->data['cc_txns']['references']));
  }
  $data = array(
    'txn_type' => 'reference_txn',
    'ref_id' => $ref_id,
  );
  $donation->donation->data = array_merge($donation->donation->data, $data);
  $gateway = _fundraiser_get_donation_gateway($order->order_id);
  $gateway = $gateway->gateway;
  $donation->node->nid = $gateway;
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_ubercart_fundraiser_donation_success($donation) {
  // Complete the sale in Ubercart.
  $order = uc_order_load($donation->donation->did);
  uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  uc_payment_enter($order->order_id, 'fundraiser', $donation->donation->order_total, 0, NULL, 
    t('Payment processed by the fundraiser module.'));
// TODO move this to a db func.
  db_query("UPDATE {uc_orders} SET order_status = 'payment_received' WHERE order_id = :order_id",
    array(':order_id' => $donation->donation->did));
  // And done.
}

/**
 * Implements hook_fundraiser_donation_success_recurring().
 */
function fundraiser_ubercart_fundraiser_donation_success_recurring($donation) {
  // Complete the sale in Ubercart.
  $order = uc_order_load($donation->donation->did);
  uc_payment_enter($order_id, 'fundraiser_recurring', $total, 0, NULL, 'Submitted for payment via cron run.');
  uc_order_comment_save($order_id, 0, t('Submitted for payment via cron run. Transaction Id: @txn_id',
    array('@txn_id' => $result['data']['txn_id'])), 'admin');
//TODO move this to a DB func
  db_query("UPDATE {uc_orders} SET order_status = 'payment_received' WHERE order_id = :order_id",
    array(':order_id' => $order_id));
// TODO move this to update func.
  db_query("UPDATE {fundraiser_recurring} SET gateway_resp = 'success', txn_id = :txn_id WHERE order_id = :order_id",
    array(':txn_id' => $result['data']['txn_id'], ':order_id' => $order_id));
  // And done.
}
      
/**
 * Implements hook_fundraiser_donation_create_future().
 */
function fundraiser_ubercart_fundraiser_donation_create_future($donation) {
  $user = $donation->user;
  $order_id = $donation->donation->did;
  $order = uc_order_load($donation->donation->did);
  $gateway = $donation->node->gateway;
  $orders = array();
  // Determine the number of future donations (Salesforce hard limit is 50. Set as 49 because original order is 1)
  $counter = min(_fundraiser_months_between_dates($order->payment_details['cc_exp_month'], $order->payment_details['cc_exp_year']), 49);
  for ($i = 1; $i <= $counter; $i++) {
    $next_order = uc_order_new($user->uid);
    $new_id = $next_order->order_id;
    $next_charge = strtotime("+$i months");
    $orders[] = array(
      'order_id' => $order_id,
      'new_id' => $new_id,
      'next_charge' => $next_charge,
      'gateway' => $gateway,
    );
    // Copy all values to new order
    $next_order = clone $order;
    $next_order->order_id = $new_id;
    $next_order->order_status = 'pending_future_payment';
    unset($next_order->products[0]->order_product_id);
    uc_order_save($next_order);
    // Add a comment to the order stating when it will be charged.
    uc_order_comment_save($new_id, 0, t('Payment will be processed on !date.', array('!date' => date('n/j/Y', $next_charge))), 'admin');
  }
  // Return newly created order set to fundraiser.
  return $orders;
}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_ubercart_fundraiser_donation_decline($donation) {
  // Mark the sale in Ubercart as failed.
//TODO move to db func.
  db_query("UPDATE {uc_orders} SET order_status = 'failed' WHERE order_id = :order_id", array(':order_id' => $donation->donation->did));
  // Clear the credit card cache between orders
  uc_credit_cache('clear');
}

/**
 * Implements hook_fundraiser_donation_exception().
 */
function fundraiser_ubercart_fundraiser_donation_exception($donation) {
  return fundraiser_ubercart_fundraiser_donation_decline($donation);
}

/**
 * Implements hook_fundraiser_donation_cancel().
 */
function fundraiser_ubercart_fundraiser_donation_cancel($donation) {
  // Mark the sale in Ubercart as cencelled.
//TODO move to db func.
  db_query("UPDATE {uc_orders} SET order_status = 'canceled' WHERE order_id = :order_id", array(':order_id' => $donation->donation->did));
  // Make a comment on the order.
  uc_order_comment_save($donation->donation->did, 0, t('Payment was canceled during checkout by the user.'));
}

/** 
 * Helper function, given a card number return likely type.
 */
function _fundraiser_ubercart_get_cc_type($cardnumber) {
  $cardtype = "UNKNOWN";
  $len = strlen($cardnumber);
  if ( $len == 15 && substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = "amex";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = "discover";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = "mc";
  }
  elseif ( ($len == 16 || $len == 13) && substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = "visa";
  }
  return ( $cardtype );
}

/**
 * Below here are orphan or unknown origin functions. To be reviewed later.
 */

/**
 * Sage billing information update function.
 */
// TODO shouldn't this move elsewhere?
function sage_update_billing_information($reference_id, $billing_info) {
  // TODO hook here to load up order info. - SeH 
  $vault_id = db_query("SELECT vault_id from {uc_sage_vault} WHERE guid = :guid", array(':guid' => $reference_id))->fetchColumn();
  $data = array(
    'billing_name' => $billing_info['first_name'] . ' ' . $billing_info['last_name'],
    'billing_street1' => $billing_info['address_1'],
    'billing_street2' => $billing_info['address_2'],
    'billing_city' => $billing_info['city'],
    'billing_zone' => $billing_info['state'],
    'billing_postal_code' => $billing_info['zipcode'],
    'billing_country' => $billing_info['country'],
    'cc_number' => $billing_info['card_num'],
    'cc_exp_month' => sprintf("%02d", $billing_info['card_exp_date']['month']),
    'cc_exp_year' => $billing_info['card_exp_date']['year'],
  );
  $response = uc_sage_vault_update($vault_id, $data);
  // TODO: Need to add some better returns to the uc_sage module
  return TRUE;
}

/**
 * Implements hook_fundraiser_user_has_recurring_orders(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_user_has_recurring_orders($uid) {
  $count = db_query('SELECT COUNT(u.order_id) FROM uc_orders u '.
    'INNER JOIN fundraiser_recurring f ON f.master_order_id = u.order_id '.
    'WHERE u.uid = :uid ',
    array(':uid' => $uid))->fetchColumn();
  if ($count > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_fundraiser_user_get_recurring_orders(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_user_get_recurring_orders($uid) {
  return db_query('SELECT f.order_id, f.recurring_status FROM {fundraiser_webform_order} f '.
    'INNER JOIN {uc_orders} u ON u.order_id = f.order_id '.
    'WHERE f.recurring_status != :status AND u.uid = :uid',
    array(':status' => DONATION_NON_RECURRING, ':uid' => $uid));
}

/**
 * Implements hook_fundraiser_user_get_recurring_order_schedule(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_user_get_recurring_order_schedule($master_order_id) {
  return db_query('SELECT u.order_total AS amount, f.next_charge AS charge_date, f.gateway_resp AS status FROM {fundraiser_recurring} f '.
    'INNER JOIN {uc_orders} u ON u.order_id = f.order_id '.
    'WHERE f.master_order_id = :order_id ' .
    'ORDER BY f.next_charge ASC',
    array(':order_id' => $master_order_id));
}

/**
 * Implements hook_fundraiser_get_current_donation_amount(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_current_donation_amount($master_order_id) {
  return db_query('SELECT u.order_total FROM {uc_orders} u '. 
    'INNER JOIN {fundraiser_recurring} f ON f.order_id = u.order_id '.
    'WHERE (f.gateway_resp IS NULL OR f.gateway_resp = \'canceled\') AND f.master_order_id = :order_id '.
    'ORDER BY next_charge LIMIT 1',
    array(':order_id' => $order_id))->fetchColumn();
}

/**
 * Implements hook_fundraiser_get_order_start(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_order_start($order_id) {
  return db_query('SELECT created FROM {uc_orders} WHERE order_id = :order_id',
    array(':order_id' => $order_id))->fetchColumn();
}

/**
 * Implements hook_fundraiser_get_credit_encryption_path(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_credit_encryption_path() {
  return variable_get('uc_credit_encryption_path', t('Not configured, see below.'));
}

/**
 * Implements hook_fundraiser_decrypt_credit(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_decrypt_credit($data) {
  $key = uc_credit_encryption_key();
  $crypt = new uc_encryption_class;
  $cc = unserialize($data);
  $cc_data = unserialize($crypt->decrypt($key, $cc['cc_data']));
  $cc_data['cc_number'] = substr($cc_data['cc_number'], -4);
  return $cc_data;
}

/**
 * Implements hook_fundraiser_validate_card(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_validate_card($cc_number){
  if(variable_get('uc_credit_validate_numbers', TRUE)) {
    return _uc_credit_valid_card_number($cc_number);
  }
  return FALSE;
}

/**
 * Implements hook_fundraiser_validate_card_expiration(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_validate_card_expiration($cc_expiration_month, $cc_expiration_year){
  return _uc_credit_valid_card_expiration($cc_expiration_month, $cc_expiration_year);
}


/**
 * Implements hook_fundraiser_validate_card_cvv(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_validate_card_cvv($cc_cvv){
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    return _uc_credit_valid_cvv($cc_cvv);
  }
  return FALSE;
}

/**
 * Implements hook_fundraiser_update_order_amount().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_update_order_amount($order_id, $amount, $uid) {
  $order = uc_order_load($order_id);
  $old_amount = $order->order_total;
  $order->order_total = $amount;
  $order->products[0]->price = $amount;
  uc_order_save($order);
  uc_order_comment_save($order->order_id, $uid, "Donation amount changed from
    $old_amount to $amount by an administrator.", 'admin');
}

/**
 * Implements hook_fundraiser_update_order_comment().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_update_order_comment($order_id, $message, $uid) {
  uc_order_comment_save($order_id, 0, $message, 'admin');
}

/**
 * Implements hook_fundraiser_update_order_billing().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_update_order_billing($order_id, $form_state) {
  global $user;
  $order = uc_order_load($order_id);
  $order->primary_email = $form_state['values']['email'];
  $order->billing_first_name =  $form_state['values']['first_name'];
  $order->billing_last_name = $form_state['values']['last_name'];
  $order->billing_city = $form_state['values']['city'];
  $order->billing_street1 = $form_state['values']['address_1'];
  $order->billing_street2 = $form_state['values']['address_2'];
  $order->billing_postal_code = $form_state['values']['zipcode'];
  $order->billing_zone = $form_state['values']['state'];
  $order->billing_country = $form_state['values']['country'];
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_type' => _fundraiser_ubercart_get_cc_type($form_state['values']['card_num']),
    'cc_owner' => '',
    'cc_number' => $form_state['values']['card_num'],
    'cc_start_month' => '',
    'cc_start_year' => '',
    'cc_exp_month' => $form_state['values']['card_exp_date']['month'],
    'cc_exp_year' => $form_state['values']['card_exp_date']['year'],
    'cc_issue' => '',
    'cc_cvv' => $form_state['values']['card_cvv'],
    'cc_bank' => '',
  );
  uc_credit_cache('save', $order->payment_details, FALSE);
  uc_order_save($order);
  uc_credit_cache('clear');
  uc_order_comment_save($order->order_id, $user->uid, "Billing information updated.");
  return $order;
}

/**
 * Implements hook_fundraiser_get_order_paid().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_order_paid($order_id) {
  return db_query('SELECT SUM(amount) FROM {uc_payment_receipts} WHERE order_id = :order_id',
    array(':order_id' => $order_id))->fetchColumn();
}

/**
 * Implements hook_fundraiser_get_order_payment_info().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_order_payment_info($order_id) {
  $payment_info = db_query('SELECT u.receipt_id, u.amount, u.received, f.txn_id FROM {uc_payment_receipts} u ' .
    'LEFT JOIN {fundraiser_webform_order} f ON u.order_id = f.order_id ' .
    'WHERE u.amount > 0 AND u.order_id = :order_id', array(':order_id' => $order_id))->fetchAssoc();

  // If not payment info was found, check if it was a recurring order
  if (!$payment_info) {
    $payment_info = db_query('SELECT u.receipt_id, u.amount, u.received, f.txn_id FROM {uc_payment_receipts} u ' .
      'LEFT JOIN {fundraiser_recurring} f ON u.order_id = f.order_id ' .
      'WHERE u.amount > 0 AND u.order_id = :order_id', array(':order_id' => $order_id))->fetchAssoc();
  }
  return $payment_info;
}

/**
 * Implements hook_fundraiser_get_order_refund_info().. //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_get_order_refund_info($order_id) {
  return db_query('SELECT SUM(amount) FROM {uc_payment_receipts} '.
    'WHERE order_id = :order_id AND amount < 0', array(':order_id' => $order_id))->fetchColumn();
}

/**
 * Implements hook_fundraiser_cancel_future_orders(). //TODO where is this called?
 */
function fundraiser_ubercart_fundraiser_cancel_future_orders($master_order_id, $reason, $user) {
  // get the ids of the child orders
  $orders = _get_pending_recurring_orders($master_order_id);
  db_query('UPDATE {uc_orders} u ' .
    'INNER JOIN {fundraiser_recurring} f ON f.order_id = u.order_id '.
    'SET u.order_status = \'canceled\' ' .
    'WHERE f.master_order_id = :order_id and u.order_status = \'pending_future_payment\'',
    array(':order_id' => $master_order_id));

  $order_ids = array();
  // add a comment to the canceled orders
  foreach ($orders as $data) {
    $order_ids[] = $data->order_id;
    uc_order_comment_save($data->order_id, $user->uid, 'Order canceled by an administrator. Reason: ' . $reason, 'order', 'canceled', FALSE);
  }
  return $order_ids;
}

/**
 * Implements hook_fundraiser_order_refund(). //tODO where is this called?
 */
function fundraiser_ubercart_fundraiser_order_refund($order_id, $amount, $new_status, $transaction_id, $reason) {
  $data = array('txn_type' => UC_CREDIT_CREDIT, 'txn_id' => $transaction_id);
  uc_payment_enter($order_id, 'fundraiser', $amount, 0, $data, 'Refund processed by the fundraiser module.');
  // Make the charge amount positive again, for nice display in the admin comment
  $amount = abs($payment_info['amount']);
  $reason = check_plain($reason);
  // TODO remove this.
  $amount_formatted = module_invoke_all('fundraiser_format_price', $amount);
  global $user;
  uc_order_comment_save($payment_info['order_id'], 
    $user->uid,
    t('%amount refund issued by %user. Refund notes: %reason',
      array('%amount' => $amount_formatted, '%user' => $user->name, '%reason' => $reason)),
    'admin');
  // Set order status to Refunded or Partially Refunded
  db_query("UPDATE {uc_orders} SET order_status= :order_status where order_id = :order_id",
    array(':order_status' => $new_status, ':order_id' => $order_id));

  // get the receipt_id that belongs to this refund
  $receipt_id = NULL;
  $payments = uc_payment_load_payments($order_id);
  foreach ($payments as $payment) {
    $data = unserialize($payment->data);
    if ($data['txn_id'] == $result['data']['txn_id']) {
      $receipt_id = $payment->receipt_id;
    }
  }
  return $receipt_id;
}

/**
 * Implements fundraiser_donation_form_context().
 *
 * Returns context information to fundraiser to be used in other modules as needed for
 * form generation. In this case an array of information about countries and zones.
 */
function fundraiser_ubercart_fundraiser_donation_form_context($context) {
  $countries = array();
  $zones = array();
  // Gather an array of countries.
  $results = db_query('SELECT * FROM {uc_countries}');
  foreach ($results as $result) {
    // First load up id, name, iso code 2, iso code 3, and version from Ubercart.
    $countries[$result->country_id] = $result;
    $countries[$result->country_id]->zones = array();
    $zone_results = db_query('SELECT * FROM {uc_zones} WHERE zone_country_id = :zone_country_id',
      array(':zone_country_id' => $result->country_id));
    foreach ($zone_results as $zone_result) {
      // For each zone load up, zone_id, zone country_id, zone, code, zone_name.
      // Both in the country and zone arrays.
      $countries[$result->country_id]->zones[$zone_result->zone_id] = $zone_result;
      $zones[$zone_result->zone_id] = $zone_result;
    }
  }
  $context->countries = $countries;
  $context->zones = $zones;
  return $context;
}

// Theme / formaty code, really should get refactored at some point. -SeH

/**
 * Implements hook_fundraiser_format_price().//tODO where is this called?
 */
function fundraiser_ubercart_fundraiser_format_price($price) {
  return theme('uc_price', array('price' => $price));
}
