<?php

/**
 * @file
 * Ubercart based hook implementations for the fundraiser module donations.
 */

/**
 * Implements hook_menu().
 */
function fundraiser_ubercart_menu() {
  // Add donation management for admins to store menus.
  $items['admin/store/orders/%/refund'] = array(
    'title' => 'Refund',
    'page callback' => 'fundraiser_show_refund_form',
    'page arguments' => array(3),
    'access arguments' => array('edit orders'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implemnts hook_menu_alter().
 */
function fundraiser_ubercart_menu_alter(&$items) {
  // Disable the donation pages that normally list donations.
  // Instead we're going to use Ubercart's internal store displays.
  unset($items['admin/config/system/fundraiser/donations']);
  unset($items['admin/config/system/fundraiser/donations/%']);
}

/**
 * Implemenation of hook_mail_alter().
 */
function fundraiser_ubercart_mail_alter(&$message) {
  // Catch for mail coming out of UC.
  if ($message['id'] == 'uc_order_action-mail') {
    // Gather data.
    $parts = explode("/", $_GET['q']);
    if (isset($parts[1])) {
      $node = node_load($parts[1]);
      // Make changes.
      $message['headers']['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $node->receipt_email_from .
        ' <' . $node->receipt_email_address . '>';
      $bcc = variable_get('fundraiser_receipt_bcc', '');
      if (!empty($bcc)) {
        $message['headers']['Bcc'] = $bcc;
      }
      $message['from'] = $node->receipt_email_from . ' <' . $node->receipt_email_address . '>';
      $message['subject'] = $node->receipt_email_subject;
    }
    else {
      // Else, this is coming from a cron job, we should intercept it entirely.
      $message['send'] = FALSE;
    }
  }
}

/**
 * Implements hook_uc_order().
 */
function fundraiser_ubercart_uc_order($op, $order, $arg2) {
  if ($op == 'delete') {
    $donation = fundraiser_donation_get_donation($order->order_id); // Get the donation object.
    if (isset($donation->nid)) { // This is a fundraiser donation order.
      fundraiser_donation_delete($donation); // Delete it.
    }
  }
  // cc_cvv is unset on order save for PCI compliance.
  // Since we can't rely on all UC modules to handle the empty cc_cvv index correctly (Test Gateway)
  // We set the value if it is not already set.
  if ($op == 'load') {
    if (!isset($order->payment_details['cc_cvv'])) {
      $order->payment_details['cc_cvv'] = '';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function fundraiser_ubercart_form_alter(&$form, &$form_state, $form_id) {
  // Add a setting to the fundraiser administation page to run on SF exports.
  if ($form_id == 'fundraiser_admin_settings') {
    $form['fundraiser']['fundraiser_all_countries'] = array(
      '#type' => 'checkbox',
      '#title' => t('Insert full list of countries into new donation forms'),
      '#default_value' => variable_get('fundraiser_all_countries', 0),
      '#description' => t('When checked, all countries will be inserted into the billing country field on new donations forms. ' .
        'When unchecked, only U.S and Canda will be inserted.'),
    );
  }
}

/**
 * Implements hook_uc_order_actions() from Ubercart.
 * Add a refund option to the Order list.
 * From http://api.drupalize.me/api/drupal/function/hook_uc_order_actions/7
 */
function fundraiser_uc_order_actions($order) {
  $gateway = _fundraiser_get_donation_gateway($order->order_id);
  $can_refund = isset($gateway['credit_refund']) ? $gateway['credit_refund'] : NULL;
  if (user_access('edit orders') &&
    (in_array($order->order_status, array('payment_received', 'partially_refunded')) || empty($order->order_status)) && $can_refund) {
    $module_path = base_path() . drupal_get_path('module', 'fundraiser');
    $title = t('Issue refund on order !order_id.', array('!order_id' => $order->order_id));
    $actions[] = array(
      'name' => t('Refund'),
      'url' => 'admin/store/orders/' . $order->order_id . '/refund',
      'icon' => '<img src="' . $module_path . '/images/refund.gif" alt="' . $title . '" />',
      'title' => $title,
    );
    return $actions;
  }
}

/**
 * Implements hook_uc_order_pane() from Ubercart.
 * Add a display of donation information to the order display.
 * From http://api.drupalize.me/api/drupal/function/hook_uc_order_pane/7
 */
function fundraiser_ubercart_uc_order_pane() {
  // Wrap pane interface around drupal information output.
  $panes['fundraiser'] = array(
    'callback' => 'fundraiser_ubercart_donation_pane', 
    'title' => t('Fundraiser information'), 
    'desc' => t('View Fundraiser information given a specific order.'), 
    'class' => 'abs-left',
    'weight' => 10,
    'show' => array('view', 'edit'),
  );
  return $panes;
}

/**
 * Callback for donation pane display.
 */
function fundraiser_ubercart_donation_pane($op, $order, &$form = NULL, &$form_state = NULL) {
  $table = fundraiser_donation_information_table($order->order_id);
  if ($op == 'view') {
    return array(
      '#markup' => $table,
    );
  }
  return $table;
}

/**
 * Implements hook_fundraiser_gateway_info().
 */
function fundraiser_ubercart_fundraiser_gateway_info() {
  /**
   * From Ubercart http://api.lullabot.com/_uc_payment_gateway_list/7
   * Is ultimately configured by http://api.lullabot.com/hook_uc_payment_gateway
   * _uc_payment_gateway_list() returns in the format:
   * Array(
   *   [test_gateway] =&gt; Array(
   *     [title] =&gt; Test Gateway
   *     [description] =&gt; Process credit card payments through the Test Gateway.
   *     [credit] =&gt; test_gateway_charge
   *     [id] =&gt; test_gateway
   *     [enabled] =&gt; 1
   *   )
   * )
   * If no gateways are enabled, this returns an empty array.
   *
   * For the purposes of our hook we want to return:
   * Array(
   *   [test_gateway] =&gt; Array(
   *     [id] =&gt; test_gateway
   *     [title] =&gt; Test Gateway
   *     [description] =&gt; Process credit card payments through the Test Gateway.
   *     [charge_function] =&gt; charge_function
   *     [refund_function] =&gt; refund_function
   *     [gateway_details] => Array(Previous gateway details)
   *   )
   * )
   */ 
  $uc_gateways = _uc_payment_gateway_list('', TRUE);
  $fundraiser_gateways = array();
  foreach ($uc_gateways as $uc_gateway) {
    if ($uc_gateway['enabled'] == 1) {
      $this_gateway['id'] = $uc_gateway['id'];
      $this_gateway['module'] = 'fundraiser_ubercart';
      $this_gateway['module_name'] = t('Ubercart');
      $this_gateway['title'] = $uc_gateway['title'];
      $this_gateway['description'] = $uc_gateway['description'];
      $this_gateway['charge_function'] = isset($uc_gateway['credit']) ? $uc_gateway['credit'] : '';
      $this_gateway['refund_function'] = isset($uc_gateway['credit_refund']) ? $uc_gateway['credit_refund'] : $uc_gateway['credit'];
      $this_gateway['gateway_details'] = $uc_gateway;
      $fundraiser_gateways[] = $this_gateway;
    }
  }
  // Grab additional gateways designed to go through Ubercart.
  // See Gateway Manager.
  $additional_gateways = module_invoke_all('fundraiser_ubercart_gateway_info');
  $fundraiser_gateways = array_merge($fundraiser_gateways, $additional_gateways);
  return $fundraiser_gateways;
}

/**
 * Implements hook_preprocess_uc_order().
 * From: http://www.ubercart.org/forum/development/18047/inserting_variables_invoices_ubercart_23_and_above
 * Adds additional variables for use in donation receipt emails sent by UC.
 */
function fundraiser_preprocess_uc_order(&$variables) {
  switch ($variables['op']) {
    case 'checkout-mail':
      if (isset($variables['order']->products[0]->nid)) {
        $nid = $variables['order']->products[0]->nid;
        $fundraiser = _fundraiser_get_fundraiser_by_nid($nid);
        $variables['fundraiser_message'] = $fundraiser->receipt_email_message;
      }
      break;
  }
}

/**
 * Implements hook_fundraiser_field_info_alter().
 */
function fundraiser_ubercart_fundraiser_field_info_alter(&$fields) {
  // Add overrides to country and zone information, derived from uc values.
  // From ubercart defaults. 840 = US, 124 = CA.

  $countries = fundraiser_ubercart_get_countries();
  $include_all_countries = variable_get('fundraiser_all_countries', 0);
  $default_available = array('US', 'CA');
  $options = '';
  if ($include_all_countries) {
    foreach ($countries->countries as $country_id => $country) {
      $options .= $country->country_iso_code_2 . '|' . $country->country_name . "\n";
    }
  }
  else {
    foreach ($countries->countries as $country_id => $country) {
      if (in_array($country->country_iso_code_2, $default_available)) {
        $options .= $country->country_iso_code_2 . '|' . $country->country_name . "\n";
      }
    }
  }
  $fields['billing_information']['country'] = array(
    '#title' => t('Country'),
    '#type' => 'select',
    '#required' => 1,
    '#extra' => array(
      'description' => '',
      'items' => $options,
      'multiple' => 0,
      'aslist' => 1,
    ),
    '#display_callback' => '_fundraiser_ubercart_country_field_display',
  );
  $options = '';
  foreach ($countries->zones as $zone_id => $zone) {
    $options .= $zone->zone_code . '|' . $zone->zone_name . "\n";
  }
  $fields['billing_information']['state'] = array(
    '#title' => t('State/Province'),
    '#type' => 'select',
    '#required' => 1,
    '#extra' => array(
      'description' => '',
      'items' => $options,
      'multiple' => 0,
      'aslist' => 1,
    ),
    '#display_callback' => '_fundraiser_ubercart_zone_field_display',
  );

  // Add our own validation routines to the billing fields for credit cards.
  $fields['credit_card_information']['card_number']['#validate_callback'] = '_fundraiser_ubercart_card_number_field_validate';
  $fields['credit_card_information']['card_cvv']['#validate_callback'] = '_fundraiser_ubercart_card_cvv_field_validate';
  $fields['credit_card_information']['card_expiration_year']['#validate_callback'] = '_fundraiser_ubercart_card_expiration_year_field_validate';
  return $fields;
}

/**
 * Validation callback for field card_number.
 */
function _fundraiser_ubercart_card_number_field_validate($form, $form_state, $submission_fields, $value) {
  $valid = _uc_credit_valid_card_number($value);
  if (!$valid || !ctype_digit($value) || drupal_strlen($value) < 10) {
    return t('You have entered an invalid credit card number.');
  }
}

/**
 * Validation callback for field card_cvv.
 */
function _fundraiser_ubercart_card_cvv_field_validate($form, $form_state, $submission_fields, $value) {
  $valid =_uc_credit_valid_cvv($value);
  if (!$valid && !empty($value)) {
    return t('You have entered an invalid CVV number.');
  }
}

/**
 * Validation callback for field card_expiration_month, card_expiration_year.
 */
function _fundraiser_ubercart_card_expiration_year_field_validate($form, $form_state, $submission_fields, $value) {
  $cc_expiration_month = $submission_fields['card_expiration_month'];
  $cc_expiration_year = $submission_fields['card_expiration_year'];
  $valid = _uc_credit_valid_card_expiration($cc_expiration_month, $cc_expiration_year);
  if (!$valid && !empty($cc_expiration_month) && !empty($cc_expiration_year)) {
    return t('The credit card you entered has expired.');
  }
}

/**
 * Display callback for field country. Set the defaults if the country has it.
 */
function _fundraiser_ubercart_country_field_display($form, $form_state, $field) {
  // Flatten form state array so we can get the user selection easier.
  $fields = _fundraiser_ubercart_submission_flatten($form_state);
  // Set the default country if form_state has it.
  if (array_key_exists('country', $fields)) {
    $field['#default_value'] = $fields['country'];
  }
  $field['#ajax'] = array(
    'callback' => '_fundraiser_ubercart_client_state_ajax_submit',
    'wrapper' => 'zone-select-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );
  return $field;
}

/**
 * Helper function, flatten webforms submitted tree into an array mapping fields to values.
 */
function _fundraiser_ubercart_submission_flatten($submit_tree) {
  $flat_array = array();
  foreach ($submit_tree as $key => $value) {
    if (!is_array($submit_tree[$key])) {
      $flat_array[$key] = $value;
    }
    else {
      $flat_array = array_merge($flat_array, _fundraiser_ubercart_submission_flatten($value));
    }
  }
  return $flat_array;
}

/**
 * AJAX callback for dealing with changes to the donation form.
 */
function _fundraiser_ubercart_client_state_ajax_submit($form, $form_state, &$mess = '') {
  // Get the form item we want to render.
  return fundraiser_get_form_field($form['#calling_module'], $form, 'state');
}

/**
 * Display callback for field zone, to set the default based on the country given.
 */
function _fundraiser_ubercart_zone_field_display($form, $form_state, $field) {
  // Get countries.
  $countries = fundraiser_ubercart_get_countries();
  // Flatten form state array so we can get the user selection easier.
  $fields = _fundraiser_ubercart_submission_flatten($form_state);
  // Country/state dependant drop down code
  $available_zones = isset($countries->zones) ? $countries->zones : array();
  // Filter the available zones by the set country.
  if (array_key_exists('country', $fields)) {
    $country_id = fundraiser_ubercart_get_country_id_by_iso2($fields['country']);
    // Filter options down to just the zones available for this country.
    if (isset($countries->countries[ $country_id ])) {
      $available_zones = $countries->countries[ $country_id ]->zones;
    }
  }
  else {
    // Provide a default based on the form values.
    $country_field = fundraiser_get_form_field($form['#calling_module'], $form, 'country');
    // Filter options down to just the zones available for this country.
    if (isset($country_field['#default_value'])) {
      $default = $country_field['#default_value'];
    }
    else {
      $default = array_shift(array_keys($country_field['#options']));
    }
    $default = fundraiser_ubercart_get_country_id_by_iso2($default);
    if (isset($countries->countries[ $default ])) {
      $available_zones = $countries->countries[ $default ]->zones;
    }
  }
  // Given available zones, filter the dropdown to match.
  if (!empty($available_zones)) {
    $new_zone_options = array();
    foreach ($available_zones as $zone_id => $zone) {
      $new_zone_options[ $zone->zone_code ] = $zone->zone_name;
    }
    $field['#options'] = $new_zone_options;
  }
  $field['#prefix'] = '<div id="zone-select-wrapper">';
  $field['#suffix'] = '</div>';
  return $field;
}

/**
 * Implements hook_fundraiser_donation_comment().
 */
function fundraiser_ubercart_fundraiser_donation_comment($donation, $comment, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
  // Given a donation, comment, etc - make a UC comment.
  global $user;
  $status = isset($donation->status) ? $donation->status : 'pending';
  uc_order_comment_save($donation->did, $user->uid, t($comment, $variables), 'admin', $status, FALSE);
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 */
function fundraiser_ubercart_fundraiser_donation_get_donation($donation) {
  // Load order specific information for donation.
  $order = uc_order_load($donation->did);

  // We don't load donation information directly. Map values based on field_info.
  // Yes, this means we don't load all of the order data into this object. That's good.
  // It creates a formalized standard structure.
  $map = array(
    'amount' => 'order_total',
    'other_amount' => '',
    'first_name' => 'billing_first_name',
    'last_name' => 'billing_last_name',
    'mail' => 'primary_email',
    'address' => 'billing_street1',
    'address_line_2' => 'billing_street2',
    'city' => 'billing_city',
    'country' => 'billing_country',
    'state' => 'billing_zone',
    'zip' => 'billing_postal_code',
  );
  $field_info = _fundraiser_get_field_keys();
  foreach ($field_info as $field_name) {
    if (isset($map[$field_name])) {
      $order_name = $map[$field_name];
      $donation->donation[$field_name] = isset($order->$order_name) ? $order->$order_name : '';
    }
  }
  // Override for donation billing country and zone, the correct value (cause it's not the number).
  $donation->donation['country'] = fundraiser_ubercart_get_iso2_by_country_id($donation->donation['country']);
  $donation->donation['state'] = fundraiser_ubercart_get_code_by_zone_id($donation->donation['state']);

  $donation->donation['card_number'] = $order->payment_details['cc_number'];
  $donation->donation['card_expiration_month'] = $order->payment_details['cc_exp_month'];
  $donation->donation['card_expiration_year'] =  $order->payment_details['cc_exp_year'];
  $donation->donation['card_cvv'] = isset($order->payment_details['card_cvv']) ? $order->payment_details['card_cvv'] : '';
  $donation->donation['cc_type'] = $order->payment_details['cc_type'];

  // Add the order status data.
  // Translate the status according to UC label.
  $donation->status = $donation->status_label = isset($order->order_status) ? $order->order_status : 'unknown';
  if (!empty($order->order_status)) {
    $donation->status_label = _fundraiser_ubercart_get_label_by_status($order->order_status);
    $donation->status_charged = _fundraiser_ubercart_get_charged_by_status($order->order_status) ? 1 : 0;
  }

  // Time of charge.
  $donation->last_changed = $order->modified;

  // Add specific order data.
  $donation->data = isset($order->data) ? $order->data : array();
  $ref_id = '';
  if (isset($order->data['cc_txns']['references'])) {
    $ref_id = array_shift(array_keys($order->data['cc_txns']['references']));
  }
  $data = array(
    'txn_type' => 'reference_txn',
    'ref_id' => $ref_id,
  );
  $donation->data = array_merge($donation->data, $data);
}

/**
 * Implements hook_fundraiser_donation_create().
 */
function fundraiser_ubercart_fundraiser_donation_create($donation) {
  // Get basic information from the donation node.
  $user = $donation->user;
  $node = $donation->node;

  // Pick out the values we need to generate an order.
  if ($donation->donation['amount'] == "other") {
    $donation->donation['amount'] = preg_replace("/[^\d\.]/i", "", $donation->donation['other_amount']);
  }

  // Determine quantity and data from donation values.
  $quantity = isset($donation->donation['quantity']) && !empty($donation->donation['quantity']) ? $donation->donation['quantity'] : 1;
  $data = isset($donation->donation['data']) ? $donation->donation['data'] : array();

  // Create a UC order.
  $order = uc_order_new($user->uid);
  $product = uc_product_load(array($node->nid => $node));
  $order->products[0] = $product;
  $order->products[0]->price = $donation->donation['amount'];
  $order->products[0]->qty = $quantity;
  $order->products[0]->title = $node->title;
  $order->products[0]->nid = $node->nid;
  $order->products[0]->data = array(
    'shippable' => isset($order->products[0]->shippable) ? $order->products[0]->shippable : FALSE,
    'model' => isset($order->products[0]->model) ? $order->products[0]->model : '',
    'varprice' => $donation->donation['amount'],
    'module' => 'uc_product',
  );

  // Multiply charge amount by quantity if available.
  if (!empty($quantity)) {
    $donation->donation['amount'] = $donation->donation['amount'] * $quantity;
  }

  // Billing properties.
  $order->primary_email = $donation->donation['mail'];
  $order->order_total = $donation->donation['amount'];
  $order->billing_first_name = $donation->donation['first_name'];
  $order->billing_last_name = $donation->donation['last_name'];
  $order->billing_city = $donation->donation['city'];
  $order->billing_street1 = $donation->donation['address'];
  $order->billing_street2 = $donation->donation['address_line_2'];
  $order->billing_postal_code = $donation->donation['zip'];
  $order->billing_zone = fundraiser_ubercart_get_zone_id_by_code($donation->donation['state']);
  $order->billing_country = fundraiser_ubercart_get_country_id_by_iso2($donation->donation['country']);

  // Card properties.
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_type' => _fundraiser_ubercart_get_cc_type($donation->donation['card_number']),
    'cc_owner' => '',
    'cc_number' => $donation->donation['card_number'],
    'cc_start_month' => '',
    'cc_start_year' => '',
    'cc_exp_month' => $donation->donation['card_expiration_month'],
    'cc_exp_year' => $donation->donation['card_expiration_year'],
    'cc_issue' => '',
    'cc_cvv' => isset($donation->donation['card_cvv']) ? $donation->donation['card_cvv'] : '',
    // cc_cvv is unset on order save for PCI compliance.
    'cc_bank' => '',
  );
  $order->line_items = array();

  // If using the gateway manager, store the gateway that was used to make the payment
  if (module_exists('gateway_manager')) {
    $order->data['gateway'] = $node->gateway;
  }

  // Lastly add order data field information.
  foreach ($data as $field => $value) {
    $order->data[$field] = $value;
  }

  // Cache the cc details stored by the handler.
  uc_credit_cache('save', $order->payment_details, FALSE);

  // Save the order.
  uc_order_save($order);

  // We only need to return the did at this point.
  // When we charge later, this is the only value that the glue module will need.
  // No one outside of the glue module should need the order data otherwise.
  $donation->did = $order->order_id;
  $donation->donation_amount = $donation->donation['amount'];
  if (isset($order->data)) {
    if (isset($donation->data)) {
      $donation->data = (object) array_merge( (array) $donation->data, (array) $order->data);
    }
    else {
      $donation->data = $order->data;
    }
  }
}

/**
 * Implements hook_fundraiser_donation_process().
 */
function fundraiser_ubercart_fundraiser_donation_process($donation) {
  // Grab the gateway configuration from fundriaser's data.
  $info = _fundraiser_gateway_info($donation->node->gateway['id']);
  // Check for the charge function to be defined.
  $charge_function = isset($info['charge_function']) ? $info['charge_function'] : '';
  if (empty($charge_function)) {
    // We can't find the gateway and we should tell someone about it.
    watchdog('fundraiser', 'Cannot determine the payment gateway for donation @id. Node id of donation form is @nid',
      array('@id' => $donation->did, '@nid' => $donation->nid), WATCHDOG_CRITICAL);
    watchdog('fundraiser_ubercart', 'Charge function :function is empty.', array(':function' => $charge_function));
    $donation->result = array('success' => FALSE, 'message' => 'Cannot determine the payment gateway for this donation.');
    return; // Return the failure.
  }
  // Found it, let's try it.
  $charge_function = isset($info['charge_function']) ? $info['charge_function'] : '';
  // Create the charge information.
  $config = isset($info['gateway_details']['config']) ? unserialize($info['gateway_details']['config']) : array();
  $donation->data = (array) $donation->data;
  $donation_config = isset($donation->data['config']) ? $donation->data['config'] : array();
  $donation->data['config'] = array_merge((array) $donation_config, (array) $config);
  // Execute the charge as per the given gateway.
  $data = array('txn_type' => 'auth_capture'); // Set the data for what we're trying to do.
  $donation->data = array_merge($data, $donation->data);
  // Make the charge, the charge functions can handle looking up the order and other data.
  if (function_exists($charge_function)) {
    $result = $charge_function($donation->did, $donation->donation['amount'], $donation->data);
  }
  else {
    watchdog('fundraiser_ubercart', 'Charge function :function does not exist.', array(':function' => $charge_function));
  }
  // Have to pass up to the system.
  $donation->result = $result;
  // If a success set up the order information now, so it's available on success responses.
  if (isset($donation->result['success']) && $donation->result['success']) {
    // New user account is created during uc_cart_complete_sale.
    $order = uc_order_load($donation->did);
    uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
    uc_payment_enter($order->order_id, 'fundraiser', $order->order_total, 0, NULL,
      t('Payment processed by the fundraiser module.'));
    // Look up the created user, and add them to the donation object.
    $donation->uid = $order->uid;
    $donation->user = user_load($order->uid);
    // Add the order status data.
    // Translate the status according to UC label.
    $donation->status = $donation->status_label = isset($order->order_status) ? $order->order_status : 'unknown';
    if (!empty($order->order_status)) {
      $donation->status_label = _fundraiser_ubercart_get_label_by_status($order->order_status);
      $donation->status_charged = _fundraiser_ubercart_get_charged_by_status($order->order_status);
    }
  }
}

/**
 * Implements hook_fundraiser_donation_update().
 */
function fundraiser_ubercart_fundraiser_donation_update($donation) {
  // Get the original order.
  $order = uc_order_load($donation->did);

  // Load the order with new data.
  $old_amount = $order->order_total;
  $order->order_total = $donation->donation['amount'];
  // Update the existing product (by id).
  // Do Not add a new one.
  foreach ($order->products as $delta => $product) {
    $order->products[ $delta ]->price = $donation->donation['amount'];
  }

  // Billing information.
  $order->primary_email = $donation->donation['mail'];
  $order->billing_first_name = $donation->donation['first_name'];
  $order->billing_last_name = $donation->donation['last_name'];
  $order->billing_city = $donation->donation['city'];
  $order->billing_street1 = $donation->donation['address'];
  $order->billing_street2 = $donation->donation['address_line_2'];
  $order->billing_postal_code = $donation->donation['zip'];
  $order->billing_zone = fundraiser_ubercart_get_zone_id_by_code($donation->donation['state']);
  $order->billing_country = fundraiser_ubercart_get_country_id_by_iso2($donation->donation['country']);

  // Card information.
  $order->payment_method = 'credit';
  $order->payment_details = array(
    'cc_owner' => isset($order->payment_details['cc_type']) ? $order->payment_details['cc_type'] : '',
    'cc_number' => $donation->donation['card_number'],
    'cc_start_month' => isset($order->payment_details['cc_start_month']) ? $order->payment_details['cc_start_month'] : '',
    'cc_start_year' => isset($order->payment_details['cc_start_year']) ? $order->payment_details['cc_start_year'] : '',
    'cc_exp_month' => $donation->donation['card_expiration_month'],
    'cc_exp_year' => $donation->donation['card_expiration_year'],
    'cc_issue' => isset($order->payment_details['cc_issue']) ? $order->payment_details['cc_issue'] : '',
    'cc_cvv' => isset($donation->donation['card_cvv']) ? $donation->donation['card_cvv'] : '',
    'cc_bank' => isset($v->payment_details['cc_bank']) ? $order->payment_details['cc_bank'] : '',
  );

  // Update the card type based on given card number.
  $order->payment_details['cc_type'] = _fundraiser_ubercart_get_cc_type($order->payment_details['cc_number']);

  // Update the donation status.
  if (isset($order->status) && isset($donation->status) && $order->status != $donation->status) {
    $order->status = $donation->status;
  }

  // Save the updated order.
  uc_credit_cache('save', $order->payment_details, FALSE);
  uc_order_save($order);
  uc_credit_cache('clear');

  // Add the order status data.
  // Translate the status according to UC label.
  $donation->status = $donation->status_label = isset($order->order_status) ? $order->order_status : 'unknown';
  if (!empty($order->order_status)) {
    $donation->status_label = _fundraiser_ubercart_get_label_by_status($order->order_status);
    $donation->status_charged = _fundraiser_ubercart_get_charged_by_status($order->order_status);
  }
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_ubercart_fundraiser_donation_success($donation) {
  // Mark as complete.
  _fundraiser_ubercart_update_order_status('payment_received', $donation->did);
}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_ubercart_fundraiser_donation_decline($donation) {
  // Mark the sale in Ubercart as failed.
  _fundraiser_ubercart_update_order_status('failed', $donation->did);
  // Clear the credit card cache between orders
  uc_credit_cache('clear');
}

/**
 * Implements hook_fundraiser_donation_exception().
 */
function fundraiser_ubercart_fundraiser_donation_exception($donation) {
  return fundraiser_ubercart_fundraiser_donation_decline($donation);
}

/**
 * Implements hook_fundraiser_donation_cancel().
 */
function fundraiser_ubercart_fundraiser_donation_cancel($donation) {
  // Mark the sale in Ubercart as canceled.
  _fundraiser_ubercart_update_order_status('canceled', $donation->did);
  $order = uc_order_load($donation->did);
  // Add the order status data.
  // Translate the status according to UC label.
  $donation->status = $donation->status_label = isset($order->order_status) ? $order->order_status : 'unknown';
  if (!empty($order->order_status)) {
    $donation->status_label = _fundraiser_ubercart_get_label_by_status($order->order_status);
    $donation->status_charged = _fundraiser_ubercart_get_charged_by_status($order->order_status);
  }
}

/**
 * Implements hook_fundraiser_donation_delete().
 */
function fundraiser_ubercart_fundraiser_donation_delete($donation) {
  // Mark the sale in Ubercart as canceled.
  _fundraiser_ubercart_update_order_status('canceled', $donation->did);
  $order = uc_order_load($donation->did);
  // Add the order status data.
  // Translate the status according to UC label.
  $donation->status = $donation->status_label = isset($order->order_status) ? $order->order_status : 'unknown';
  if (!empty($order->order_status)) {
    $donation->status_label = _fundraiser_ubercart_get_label_by_status($order->order_status);
    $donation->status_charged = _fundraiser_ubercart_get_charged_by_status($order->order_status);
  }
}

/**
 * Implements hook_fundraiser_donation_refund().
 */
function fundraiser_ubercart_fundraiser_donation_refund($donation) {
  fundraiser_ubercart_fundraiser_donation_process($donation);
}

/**
 * Implements hook_fundraiser_get_credit_encryption_path().
 * This is called by modules that need to check for processing availablity outside of normal.
 * Such as sustainer.
 */
function fundraiser_ubercart_fundraiser_get_credit_encryption_path() {
  return variable_get('uc_credit_encryption_path', t('Not configured, see below.'));
}

/**
 * Helper function, given a card number return likely type.
 */
function _fundraiser_ubercart_get_cc_type($cardnumber) {
  $cardtype = 'UNKNOWN';
  $len = drupal_strlen($cardnumber);
  if ( $len == 15 && drupal_substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = 'amex';
  }
  elseif ( $len == 16 && drupal_substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = 'discover';
  }
  elseif ( $len == 16 && drupal_substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = 'mc';
  }
  elseif ( ($len == 16 || $len == 13) && drupal_substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = 'visa';
  }
  return ( $cardtype );
}

/**
 * Helper function, gather ubercarts country information into a central location.
 */
function fundraiser_ubercart_get_countries() {
  $countries = array();
  $zones = array();
  // Gather an array of countries.
  $found_countries = _fundraiser_ubercart_get_countries();
  foreach ($found_countries as $found_country) {
    // First load up id, name, iso code 2, iso code 3, and version from Ubercart.
    $countries[$found_country->country_id] = $found_country;
    $countries[$found_country->country_id]->zones = array();
    $found_zones = _fundraiser_ubercart_get_zone_by_country($found_country->country_id);
    foreach ($found_zones as $found_zone) {
      // For each zone load up, zone_id, zone country_id, zone, code, zone_name.
      // Store in the country and zone arrays.
      $countries[$found_country->country_id]->zones[$found_zone->zone_id] = $found_zone;
      $zones[$found_zone->zone_id] = $found_zone;
    }
  }
  $return_data->countries = $countries;
  $return_data->zones = $zones;
  return $return_data;
}

/**
 * DB function, update order status on a order.
 */
function _fundraiser_ubercart_update_order_status($status, $order_id) {
  db_query('UPDATE {uc_orders} SET order_status = :status ' .
    'WHERE order_id = :order_id',
    array(':status' => $status, ':order_id' => $order_id));
}

/**
 * DB function, look in country table for country info.
 */
function _fundraiser_ubercart_get_countries() {
  return db_query('SELECT * FROM {uc_countries} ORDER BY country_name ASC')->fetchAll();
}

/**
 * DB function, look in zone table for zone info.
 */
function _fundraiser_ubercart_get_zone_by_country($country_id) {
  // Some countries need an override, the zone_code is NOT the correct display for them.
  // Most zone codes are correct by natural order - be that alphabetical or numerical. But some countries are wierd.
  // For those, we add them to the exception list and order by zone_name.
  $alphabetical_exception = array('840');
  // Countries: 840 -> US
  if (in_array($country_id, $alphabetical_exception)) {
    return db_query('SELECT * FROM {uc_zones} ' .
      'WHERE zone_country_id = :zone_country_id ORDER BY zone_name ASC',
      array(':zone_country_id' => $country_id))->fetchAll();
  }
  else {
    return db_query('SELECT * FROM {uc_zones} ' .
      'WHERE zone_country_id = :zone_country_id ORDER BY zone_code ASC',
      array(':zone_country_id' => $country_id))->fetchAll();
  }
}

// TODO add caching for these.
/**
 * DB function. Translate from code to number value.
 */
function fundraiser_ubercart_get_country_id_by_iso2($iso2) {
  return db_query('SELECT country_id FROM {uc_countries} WHERE country_iso_code_2 = :iso2', array(':iso2' => $iso2))->fetchField();
}

/**
 * DB function. Translate from code to number value.
 */
function fundraiser_ubercart_get_zone_id_by_code($code) {
  return db_query('SELECT zone_id FROM {uc_zones} WHERE zone_code = :code', array(':code' => $code))->fetchField();
}

/**
 * DB function. Translate from number value to code.
 */
function fundraiser_ubercart_get_iso2_by_country_id($country_id) {
  return db_query('SELECT country_iso_code_2 FROM {uc_countries} WHERE country_id = :country_id', array(':country_id' => $country_id))->fetchField();
}

/**
 * DB function. Translate from number value to code.
 */
function fundraiser_ubercart_get_code_by_zone_id($zone_id) {
  return db_query('SELECT zone_code FROM {uc_zones} WHERE zone_id = :zone_id', array(':zone_id' => $zone_id))->fetchField();
}

/**
 * DB function. Translate status to status label.
 */
function _fundraiser_ubercart_get_label_by_status($status) {
  return db_query('SELECT title FROM {uc_order_statuses} WHERE order_status_id = :state', array(':state' => $status))->fetchField();
}

/**
 * DB function, determine if given this status the donation has been charged already.
 */
function _fundraiser_ubercart_get_charged_by_status($status) {
  $chargable_states = array('in_checkout', 'post_checkout'); // These are hard set from Ubercart.
  $state = db_query('SELECT state FROM {uc_order_statuses} WHERE order_status_id = :state', array(':state' => $status))->fetchField();
  if (in_array($state, $chargable_states)) {
    return FALSE; // If the donation is still able to be charged, say it hasn't been.
  }
  return TRUE;
}

/**
 * Below here are orphan or unknown origin functions. To be reviewed later. TODO
 */

/**
 * Implements hook_fundraiser_decrypt_credit(). //where is this called?.
 *
function fundraiser_ubercart_fundraiser_decrypt_credit($data) {
  $key = uc_credit_encryption_key();
  $crypt = new UbercartEncryption;
  $cc = unserialize($data);
  $cc_data = unserialize($crypt->decrypt($key, $cc['cc_data']));
  $cc_data['cc_number'] = substr($cc_data['cc_number'], -4);
  return $cc_data;
}
 */