<?php

/**
 * @file
 * Field management functions for the fundraiser module
 */

/**
 * Implements hook_menu_alter().
 */
function fundraiser_webform_menu_alter(&$items) {
  // Move fundraisers confirmation paths to webform menu paths, for UI.
  $items['node/%node/webform/confirmations'] = $items['node/%node/fundraiser/confirmations'];
  $items['node/%node/webform/confirmations']['type'] = MENU_LOCAL_TASK;
  // Remove fundraiser tab, we don't want it if we're using webform.
  unset($items['node/%node/fundraiser']);
  unset($items['node/%node/fundraiser/confirmations']);
  // Alter some built-in webform menu items.
  $items['node/%webform_menu/webform/configure']['access callback'] = 'fundraiser_webform_configure_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array('update', 1);
}

/**
 * Menu access callback. Permission check for donation form settings tab.
 */
function fundraiser_webform_configure_access($perm, $node) {
  // Don't show the 'Form settings' tab on donation forms.
  if (fundraiser_is_donation_type($node->type)) { // From fundraiser.module.
    return FALSE;
  }
  else {
    return node_access($perm, $node);
  }
}

/**
 * Implements hook_webform_submission_presave().
 */
function fundraiser_webform_webform_submission_presave($node, &$submission) {
  // Remove any non-component form fields from the submitted data.
  unset($submission->data['']);
  // Remove senstive form data before the submission is saved to the database.
  if (fundraiser_is_donation_type($node->type)) { // From fundraiser.module.
    $results = _fundraiser_webform_get_components_by_keys($node->nid, array('card_number', 'card_cvv', 'card_expiration_date'));
    foreach ($results as $result) {
      // Set sensitive info to NULL.
      $submission->data[$result->cid]['value'][0] = NULL;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
// Alter the webform component delete form to prevent the deletion of required fundraiser fields
// Why not handle this by removing delete options from the interface? Because edit/delete operations are added at theme layer.
// Unfortunately the theme layer adds the values and immediately renders, negating any chance for us to make changes.
// In order to remove delete properly, we will need a patch in webform addressing this issue.
// TODO look into using preprocess to intercept?
function fundraiser_webform_form_webform_component_delete_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we are dealing with a donation form.
  if (fundraiser_is_donation_type($form['node']['#value']->type)) { // From fundraiser.module.
    // Check vs. required fields to make sure we can't delete them.
    $required_fields = _fundraiser_get_field_keys();
    // TODO Locate each field, and see which one is flagged as required. If required, deny delete.
    $cid = $form['component']['#value']['cid'];
    $component = $form['node']['#value']->webform['components'][$cid];
    // Check to see if the form_key is in our required fields array
    if (in_array($component['form_key'], $required_fields)) {
      $message = t('<strong>!name</strong> is a required fundraiser field and cannot be deleted from this form.',
        array('!name' => $component['name']));
      $form['description']['#markup'] = $message;
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Implements hook_form_alter().
 * Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id varies: webform_client_form_NID.
 */
function fundraiser_webform_form_alter(&$form, &$form_state, $form_id) {

  // Alter the webform client form.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    // Handle donation form edit submission pg.
    if (fundraiser_is_donation_type($form['#node']->type) && arg(2) == 'submission') { // From fundraiser.module.
      fundraiser_webform_submission_display($form, $form_state);
    }
    // Handle the donation form display.
    if (fundraiser_is_donation_type($form['#node']->type)  && arg(2) != 'submission') { // From fundraiser.module.
      // From fundraiser.module, calls hooks to create form and submission paths.
      fundraiser_donation_form($form, $form_state); // From fundraiser.module.
    }
  }

  // Do not allow users to muck with defined form keys in component editting form.
  // They're named what they're named for a reason.
  if ($form_id == 'webform_component_edit_form') {
    $node = node_load($form['nid']['#value']);
    if (fundraiser_is_donation_type($node->type)) {
      // Walk array of defined fields to gather keys.
      $preserved_keys = _fundraiser_get_field_keys();
      $form_key = $form['form_key']['#default_value'];
      if (in_array($form_key, $preserved_keys)) {
        $form['form_key']['#access'] = FALSE;
        $form['form_key']['#value'] = $form['form_key']['#default_value'];
      }
    }
	}
  return $form;
}

/**
 * Form, alters the display of webform submissions to prevent edits / display of confusing info.
 */
function fundraiser_webform_submission_display(&$form, &$form_state) {
  // Set up a view only display of the donation amount.
  if ('other' != $form['submitted']['donation']['amount']['#default_value']) {
    $amount = $form['submitted']['donation']['amount']['#default_value'];
  }
  else {
    $amount = $form['submitted']['donation']['other_amount']['#default_value'];
  }
  // Add new fields.
  $form['submitted']['donation']['display_amount'] = array(
    '#markup' => '<div class="form-item"><label>' . t('Donation Amount') .
      ':</label>' . '$' . number_format($amount, 2) . '</div>', // TODO this should be updated for an international audience.
  );
  // Show whether or not it's a recurring donation
  // TODO In the future we should work out a way to move this administractive UI into fundraiser, to allow the
  // reference to recurssion to move entirely out to sustainers, and abstract the display of field data for the
  // webform user. As it stands, for now this remains here.
  if (isset($form['submitted']['credit_card_information']['recurs_monthly'])) {
    $recurs = t('No');
    if (isset($form['submitted']['credit_card_information']['recurs_monthly']['#default_value'][0])
      && ($form['submitted']['credit_card_information']['recurs_monthly']['#default_value'][0] == 'recurs')) {
      $recurs = t('Yes'); 
    }
    $form['submitted']['donation']['recurring'] = array(
      '#markup' => '<div class="form-item"><label>' . t('Recurring Donation?') .
        ':</label>' . $recurs . '</div>',
    );
  }
  // Clean up the donor info section - replace the form fields with read only info
  $form['submitted']['donor_information']['#title'] = t('Donor Information');
  $form['submitted']['donor_information']['first_name_readonly'] = array(
    '#markup' => '<div class="form-item"><label>' . t('First Name') . ':</label>' .
      $form['submitted']['donor_information']['first_name']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['last_name_readonly'] = array(
    '#markup' => '<div class="form-item"><label>' . t('Last Name') . ':</label>' .
      $form['submitted']['donor_information']['last_name']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['email_readonly'] = array(
    '#markup' => '<div class="form-item"><label>' . t('Email') . ':</label>' .
      $form['submitted']['donor_information']['email']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['first_name']['#prefix'] =
    $form['submitted']['donor_information']['last_name']['#prefix'] =
      $form['submitted']['donor_information']['email']['#prefix'] = '<div style="display:none">';
  $form['submitted']['donor_information']['first_name']['#suffix'] =
    $form['submitted']['donor_information']['last_name']['#suffix'] =
      $form['submitted']['donor_information']['email']['#suffix'] = '</div>';
  // Remove sections no one really needs to see here.
  unset($form['submitted']['donation']['amount']);
  unset($form['submitted']['donation']['other_amount']);
  unset($form['submitted']['credit_card_information']);
}

/**
 * Helper function, validate the results of a webform submission to the defined fields in fundraiser.
 */
function _fundraiser_webform_modify_field_keys(&$form, $form_state, $component_hierarchy, $field_info = NULL) {
  if ($field_info == NULL) {
    $field_info = fundraiser_field_info();
  }
  $children = element_children($field_info);
  foreach ($children as $child) {
    if (isset($field_info[$child]['#display_callback']) && function_exists($field_info[$child]['#display_callback'])) {
      // Locate the field in form to modify if it exists in the components.
      if (isset($component_hierarchy[$child])) {
        $this_field =& _fundraiser_webform_find_field($form, $component_hierarchy[$child]);
        $field = call_user_func($field_info[$child]['#display_callback'], $form, $form_state, $this_field);
        $this_field = $field;
      }
    }
    // Check for any further children.
    _fundraiser_webform_modify_field_keys($form, $form_state, $component_hierarchy, $field_info[$child]);
  }
}

/**
 * Implements hook_fundraiser_donation_form().
 */
function fundraiser_webform_fundraiser_donation_form($form, $form_state) {
  // Grab the node.
  $node = node_load($form['#node']->nid);

  // Create a data structure that will tell us exactly where each webform component lives in the FAPI array.
  $components = $node->webform['components'];
  $component_hierarchy = _fundraiser_webform_parse_components($node->nid, $components);

  // Add js and css as needed.
  $base = drupal_get_path('module', 'fundraiser_webform');
  drupal_add_js( $base . '/js/jquery.alphanumeric.js', 'file');
  drupal_add_js( $base . '/js/fundraiser.js', 'file');
  drupal_add_css( $base . '/css/fundraiser-donation-form.css', 'file');

  // Modify form displays according to callback settings.
  _fundraiser_webform_modify_field_keys($form, $form_state, $component_hierarchy);

  // Combine expiration month and year into a single component.
  $cc_exp_month_field =& _fundraiser_webform_find_field($form, $component_hierarchy['card_expiration_month']);
  $cc_exp_year_field =& _fundraiser_webform_find_field($form, $component_hierarchy['card_expiration_year']);
  $cc_info_field =& _fundraiser_webform_find_field($form, $component_hierarchy['credit_card_information']);
  $cc_exp_month_field['#default_value'] = date('n');
  $cc_exp_year_field['#default_value'] = date('Y');

  // Make sure the year field always has a good range of years.
  $this_year = date('Y');
  $years = array($this_year => $this_year);
  for ($i = 1; $i <= 10; $i++) { // Up to 10 years out.
    $years[$this_year + $i] = $this_year + $i;
  }
  $cc_exp_year_field['#options'] = $years;

  // Check to see if the credit card information fieldset still exists because it may have been removed.
  if (is_array($cc_info_field)) {
    $cc_info_field['expiration_date'] = array();
    $cc_info_field['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
    $cc_info_field['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
    $cc_info_field['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
    $cc_info_field['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
  }
  else {
    // Add the new expiration_date directly to the form with the same weight as the cc_exp_month field.
    $form['expiration_date'] = array();
    $form['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
    $form['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
    $form['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
    $form['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
  }
  // Remove old fields from form layout after moving them to their new location.
  $cc_exp_month_field = NULL;
  $cc_exp_year_field = NULL;

  // And lastly add a user facing message for submit.
  $form['submit']['#suffix'] = '<div class="fundraiser_submit_message">' .
    theme('image', array('path' =>  drupal_get_path('module', 'fundraiser_webform') . '/images/padlock.gif' )) .
    t('By clicking SUBMIT DONATION your credit card will be securely processed.') .
    '</div>';

  // Add a submit handler in advance of the webform_client_form_submit to cleanup after our move.
  // This handler moves the expiration date stuff back where webform expects it to be.
  // Important: It needs to run before webform runs, so it's getting put at the front of the array.
  array_unshift($form['#submit'], '_fundraiser_webform_pre_submit_cleanup');
  return $form;
}

/**
 * Submit callback, this moves the expiration month and year back into the structure where they
 * are expected, and removes 'expiration_date' from the list. If 'expiration_date' remained in the
 * submission, webform will try to look up a cid for it and reference it as if the component exists.
 * (Aka: there's no check to make sure a cid was recieved before acting on it.
 * So: We put everything back after we're done so that webform never knows the difference.
 */
function _fundraiser_webform_pre_submit_cleanup($form, &$form_state) {
  $form_state['values']['submitted']['credit_card_information']['card_expiration_month'] = 
      $form_state['values']['submitted']['credit_card_information']['expiration_date']['card_expiration_month'];
  $form_state['values']['submitted']['credit_card_information']['card_expiration_year'] = 
      $form_state['values']['submitted']['credit_card_information']['expiration_date']['card_expiration_year'];
  // Remove 'expiration_date' so webform doesn't get confused when it tries to process.
  unset($form_state['values']['submitted']['credit_card_information']['expiration_date']);
}


/**
 * Helper function, validate the results of a webform submission to the defined fields in fundraiser.
 */
function _fundraiser_webform_validate_field_keys($form, $form_state, $submission_fields, $field_info = NULL, $errors = FALSE) {
  if ($field_info == NULL) {
    $field_info = fundraiser_field_info();
  }
  $children = element_children($field_info);
  foreach ($children as $child) {
    $keys[$child] = '';
    if (isset($field_info[$child]['#validate_callback']) && function_exists($field_info[$child]['#validate_callback'])) {
      $error_message = call_user_func($field_info[$child]['#validate_callback'], $form, $form_state, $submission_fields, $submission_fields[$child]);
      if (isset($error_message) && !empty($error_message)) {
        form_set_error($child, $error_message);
        $errors = TRUE;
      }
    }
    $errors = _fundraiser_webform_validate_field_keys($form, $form_state, $submission_fields, $field_info[$child], $errors);
  }
  return $errors;
}

/**
 * Implements hook_fundraiser_donation_validate().
 */
function fundraiser_webform_fundraiser_donation_validate($form, $form_state) {
  $submission_fields = _fundraiser_webform_submission_flatten($form['#node']->nid, $form_state['values']['submitted']); // From fundraiser.module.
  $errors = _fundraiser_webform_validate_field_keys($form, $form_state, $submission_fields);

  // Create watchdog entry on validation errors.
  if ($errors) {
    $base = drupal_get_path('module', 'fundraiser_webform');
    $message = "The following donation form fields failed local validation:\n\n";
    $check_errors = form_get_errors();
    $validation_errors = is_array($check_errors) ? array_keys($check_errors) : array();
    foreach ($validation_errors as $field) {
      $keys = explode('][', $field);
      $message .= array_pop($keys) . "\n";
    }

    // SCRUB DATA. We do not want to save these in the error watchdog message.
    // We can be sure these fields are in the set, since they're declared in fundraiser.
    $submission_fields['card_number'] = substr_replace($submission_fields['card_number'],
      str_repeat('*', strlen($submission_fields['card_number'])), 0);
    $submission_fields['card_cvv'] = substr_replace($submission_fields['card_cvv'],
      str_repeat('*', strlen($submission_fields['card_cvv'])), 0);

    $message .= "\n\nSubmitted Values:\n\n";
    foreach ($submission_fields as $key => $value) {
      $message .= $key . ': ' . $value . "\n";
      watchdog('fundraiser_webform', $message, NULL, WATCHDOG_DEBUG, NULL);
    }
    // Provide data to fundraiser about the node that failed to validate.
    $errors = array();
    $errors['nid'] = $form_state['values']['details']['nid'];
    return $errors; // So fundraiser can pick up on the failure.
  }
}


/**
 * Implements hook_fundraiser_donation_submit().
 */
function fundraiser_webform_fundraiser_donation_submit($form, $form_state, $donation) {
  // Retrieve data from the submission.
  $sid = $form_state['values']['details']['sid'];
  $donation->sid = $sid;
  // Given the set of fields defined in fundraiser, gab results here that match those fields.
  // Since we used the fundraiser_field_info keys to generate our webform components with the same form keys
  // And we prevent those values from being overwritten, we can pass the results as a map between the two.
  $submission_fields = _fundraiser_webform_submission_flatten($form['#node']->nid, $form_state['values']['submitted_tree']); // From fundraiser.module.
  $donation->submission = $submission_fields;
}

/**
 * Helper function, flatten webforms submitted tree into an array mapping fields to values.
 * Technically this isn't fully flat, so much as it puts values for all defiend fields at the top level.
 * There is still nesting for field sets going on.
 */
function _fundraiser_webform_submission_flatten($nid, $submit_tree, $submission_keys = NULL, $fieldset_keys = NULL) {
  if ($submission_keys == NULL) {
    $components = _fundraiser_webform_get_components_by_nid($nid);
    foreach ($components as $component) {
      if ($component->type != 'fieldset') {
        $submission_keys[] = $component->form_key;
      }
    } 
  }
  $flat_array = array();
  foreach ($submit_tree as $key => $value) {
    $flat_array[$key] = $value;
    if (is_array($value)) {
      $flat_array = array_merge($flat_array, _fundraiser_webform_submission_flatten($nid, $value, $submission_keys, $fieldset_keys));
    }
  }
  // Filter to only submission key results.
  $flat_array = array_intersect_key($flat_array, array_combine($submission_keys,$submission_keys));
  return $flat_array;
}

/**
 * Implements hook_fundraiser_donation_post_submit().
 */
function fundraiser_webform_fundraiser_donation_post_submit($form, $form_state, $donation) {
  // Relate the donation id to webform before we try to process the payment. //TODO change terminology
  $webform_order = array(
    'webform_nid' => $donation->nid,
    'order_id' => $donation->did,
    'sid' => $donation->sid,
    'recurring_status' => $donation->submission['recurs_monthly'],
    // TODO In the future we should clarify these data fields to clean up the database as a whole.
    // For now this can live here until we clean up the database to remove redundant data like this.
    // This data really should be handled in sustainers ONLY.
  );
  _fundraiser_webform_create_webform_order($webform_order);
  // Handle behavior if it was a failure.
  if (!isset($donation->result['success']) || (isset($donation->result['success']) && $donation->result['success'] == FALSE) ) {
    // Tell webform we're not done and rebuild the form.
    unset($form_state['values']['details']['sid']);
    if (!isset($donation->result['message']) || empty($donation->result['message'])) {
      $donation->result['message'] = 'Your card has been denied. Please try another.';
    }
    form_set_error('card_number', $donation->result['message']);
    $form_state['values']['details']['finished'] = 0;
    $form_state['rebuild'] = TRUE;
  }
  return $form_state;
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_webform_fundraiser_donation_success($donation) {
  // Record that the donation was successful for the webform submission.
  if (isset($donation->data['txn_id'])) {
    $txn_id = $donation->data['txn_id'];
  }
  $webform_order = array(
    'webform_nid' => $donation->nid,
    'order_id' => $donation->did,
    'gateway' => $donation->node->gateway,
    'sid' => $donation->sid,
    'txn_id' => $txn_id,
  );
  _fundraiser_webform_update_webform_order($webform_order);

  // Update the uid on the webform submission table.
  _fundraiser_webform_update_submissions($donation->uid, $donation->sid);

  // Update the recurring status, if it was changed by the payment gateway module
  // TODO This should be moved or removed entirely. We don't need ot know this stuff here!
  if (isset($donation->donation->data['recurring_status']) && ($donation->submission['recurs_monthly'] != $donation->donation->data['recurring_status'])) {
    $webform_order = array(
      'webform_nid' => $donation->nid,
      'order_id' => $donation->did,
      'sid' => $donation->sid,
      'recurring_status' => $donation->donation->data['recurring_status'],
    );
    //TODO In the future we should clarify these data fields to clean up the database as a whole. For now this
    // can live here until we clean up the database to remove redundant data like this.
    _fundraiser_webform_update_webform_order($webform_order);
  }
}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_webform_fundraiser_donation_decline($donation) {
  // Delete the webform order info. // TODO check this, do we realyl want to delete this info?
  // Shouldn't we instead just mark it as failed in case we need it later?
  _fundraiser_webform_delete_webform_order($donation->nid, $donation->did);
}

define('DONATION_CANCELLED', 2); // TODO is this really needed, or should be handled other ways?

/**
 * Implements hook_fundraiser_donation_cancel().
 */
function fundraiser_webform_fundraiser_donation_cancel($donation) {
  db_query('UPDATE {fundraiser_webform_order} ' .
   'SET recurring_status = :recurring_status ' .
   'WHERE order_id = :did',
    array(':recurring_status' => DONATION_CANCELLED, ':did' => $donation->did));
}

/**
 * Implements hook_fundraiser_donation_get_donation().
 */
function fundraiser_webform_fundraiser_donation_get_donation($donation) {
  $submission = _fundraiser_webform_get_webform_order_by_did($donation->did);
  if ($submission) {
    $donation->sid = $submission->sid;
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $donation->submission = webform_get_submission($donation->nid, $donation->sid); // From webform.submissions.inc
  }
}

/**
 * Implements hook_fundraiser_replace_tokens().
 */
function fundraiser_webform_fundraiser_replace_tokens($message, $donation) {
  // Replace the message with webform psuedo-tokens.
  $message = _webform_filter_values($message, $donation->node, $donation->submission, NULL, FALSE); // From webform.module
  return $message;
}

/**
 * Implements hook_fundraiser_get_fundraiser_alter().
 */
function fundraiser_webform_fundraiser_get_fundraiser_alter($fundraiser) {
  // Get the webform data for this node. This overrides the saved amount values in fundraiser itself.
  // Add the amount_values for the fundraiser information on load.
  if (is_numeric($fundraiser->nid)) {
    $amounts = _fundraiser_webform_get_extra_by_key($fundraiser->nid, 'amount');
    if (isset($amounts['items'])) {
      $amounts = preg_split('/\n/', trim($amounts['items']));
      $amounts = array_unique($amounts);
      $donation_amounts = array();
      for ($i = 0; $i < count($amounts); ++$i) {
        $donation_amounts[] = explode('|', $amounts[$i]);
      }
      $fundraiser->donation_amounts = $donation_amounts;
    }
  }
}

/**
 * Implements hook_fundraiser_create_fundraiser_alter().
 */
function fundraiser_webform_fundraiser_create_fundraiser_alter($fundraiser) {
  // Construct an array of donation amounts.
  $donation_amounts = array();
  if (isset($fundraiser->donation_amounts)) {
    $amount_sets = explode(',', $fundraiser->donation_amounts);
    $amount_sets = array_unique($amount_sets);
    foreach ($amount_sets as $amount_set) {
      $amount_set = explode('|', $amount_set);
      if (count($amount_set) == 2) {
        $donation_amounts[$amount_set[0]] = $amount_set[1];
      }
    }
    ksort($donation_amounts, SORT_NUMERIC);
  }
  $fundraiser->donation_amounts = $donation_amounts;
  // Create the components for the fundraiser, amount and otherwise.
  $components = _fundraiser_webform_create_components($fundraiser);
}

/**
 * Implements hook_fundraiser_update_fundraiser_alter().
 */
function fundraiser_webform_fundraiser_update_fundraiser_alter($fundraiser) {
  // Construct an array of donation amounts.
  $donation_amounts = array();
  if (isset($fundraiser->donation_amounts)) {
    $amount_sets = explode(',', $fundraiser->donation_amounts);
    $amount_sets = array_unique($amount_sets);
    foreach ($amount_sets as $amount_set) {
      $amount_set = explode('|', $amount_set);
      if (count($amount_set) == 2) {
        $donation_amounts[$amount_set[0]] = $amount_set[1];
      }
    }
    ksort($donation_amounts, SORT_NUMERIC);
  }
  $fundraiser->donation_amounts = $donation_amounts;
  // Update the webform component table with new data.
  if ($fundraiser->show_other_amount == 1) {
    $other_amount = _fundraiser_webform_get_extra_by_key($fundraiser->nid, 'other_amount');
    $other_amount['description'] = 'Minimum payment $' . $fundraiser->minimum_donation_amount . '.'; // TODO - fix for international audience.
    _fundraiser_webform_update_component($fundraiser->nid, 'other_amount', array('extra' => serialize($other_amount)));
  }
  // Update the amount components for the fundraiser.
  _fundraiser_webform_update_amount_components($fundraiser);
}

/**
 * Implements hook_get_donation_gateway().
 */
function fundraiser_webform_get_donation_gateway($did, $gateway) {
  // Get details on the original payment so we can load the payment gateway details.
  $submission = _fundraiser_webform_get_webform_order_by_did($did);
  if (!$submission) {
    return '';
  }
  return $submission->gateway;
}

/**
 * Implements hookfundraiser_field_info_alter().
 */
function fundraiser_webformfundraiser_field_info_alter($fields) {
  $email_map = array('amount', 'other_amount', 'first_name', 'last_name', 'email', 'address', 'address_line_2',
    'city', 'zip', 'country', 'state');
  foreach(element_children($fields) as $key) {
    $fields[$key] = _fundraiser_webformfundraiser_field_info_alter($key, $fields[$key], $email_map);
  }
  return $fields;
}

/**
 * Handles recursion for fundraiser_sustainersfundraiser_field_info_alter().
 */
function _fundraiser_webformfundraiser_field_info_alter($field_key, $field, $map) {
  if (isset($map[$field_key])) {
    $field['#email'] = 1;
  }
  // Check for children. Recursion occurs here.
  foreach(element_children($field) as $key) {
    $field[$key] = _fundraiser_webformfundraiser_field_info_alter($key, $field[$key], $map);
  }
  return $field;
}

/**
 * Helper functions below.
 */

/**
 * Helper function.
 * Creates a nested array of where a component exists in the FAPI array.
 */
function _fundraiser_webform_parse_component($nid, $form_key) {
  $results = _fundraiser_webform_get_components_by_keys($nid, array($form_key));
  foreach ($results as $result) {
    $cid = $result->cid;
  }
  $component_path = 'submitted[' . implode('][', _fundraiser_webform_walk_component_hierarchy($nid, $cid)) . ']';
  parse_str($component_path, $output); // Convert string to a nested array.
  return $output;
}

/**
 * Helper function.
 * Creates a nested array of where components exist in the FAPI array for all components in a webform.
 * This is needed because the webform module allows the user to move components around. Therefore
 * we must be able to find them if they are not in their usual spot.
 */
function _fundraiser_webform_parse_components($nid, $components) {
  $component_hierarchy = array();
  foreach ($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', _fundraiser_webform_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // Convert string to a nested array.
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Helper function.
 * Builds a path from the webform component to it's topmost parent.
 * Recursion is here. Be careful.
 */
function _fundraiser_webform_walk_component_hierarchy($nid, $cid, &$path = array()) { 
  // Store all the components for this node in a static cache to reduce the number of duplicated database hits.
  static $component_hierarchy = array();
  if (empty($component_hierarchy[$nid])) {
    $component_hierarchy[$nid] = array();
    $results = _fundraiser_webform_get_components_by_nid($nid);
    foreach ($results as $data) {
      $cid = $data->cid;
      $component_hierarchy[$nid][$cid][] = $data;
    }
  }
  // Build a path from the webform component to its topmost parent.
  foreach ($component_hierarchy[$nid][$cid] as $data) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      _fundraiser_webform_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

/**
 * Implements hook_fundraiser_get_form_field().
 */
function fundraiser_webform_fundraiser_get_form_field($form, $field_key) {
  // Walks a given form looking for the given key.
  // Returns it when found.
  return _fundraiser_webform_find_field($form,_fundraiser_webform_parse_component($form['#node']->nid, $field_key));
}

/**
 * Helper function, returns a reference to an element of a FAPI array based on a known path.
 * This returns a reference to the form variable, allowing for manipulation into the form array.
 */
function &_fundraiser_webform_find_field(&$form, $path) {
  foreach (array_keys($path) as $v) {
    if (is_array($path[$v]) && count($path[$v])) {
      // Recurse if there are more keys.
      return _fundraiser_webform_find_field($form[$v], $path[$v]);
    }
    else {
      return $form[$v];
    }
  }
}

/**
 * DB functions.
 */

/**
 * CRUD style DB function for fundraiser_webform_order.
 */
function _fundraiser_webform_create_webform_order($webform_order) {
  // Cast donation just in case.
  $webform_order = (array) $webform_order;
  // Check for old data.
  $webform_order_data = FALSE;
  if (isset($webform_order['webform_nid']) && isset($webform_order['order_id'])) {
    $webform_order_data = _fundraiser_webform_get_webform_order_by_nid_did(
      $webform_order['webform_nid'], $webform_order['order_id']);
  }
  if (!$webform_order_data) {
    $record = $webform_order;
    drupal_write_record('fundraiser_webform_order', $record);
  }
  else {
    _fundraiser_webform_update_webform_order($webform_order);
  }
}

/**
 * CRUD style DB function for fundraiser_webform_order.
 */
function _fundraiser_webform_get_webform_order_by_nid_did($nid, $did) {
  return db_query('SELECT * FROM {fundraiser_webform_order} ' .
    'WHERE webform_nid = :nid ' .
    'AND order_id = :did', // TODO change this terminology.
    array(':nid' => $nid, ':did' => $did))->fetchObject();
}

/**
 * CRUD style DB function for fundraiser_webform_order.
 */
function _fundraiser_webform_update_webform_order($webform_order) {
  // Cast donation just in case.
  $webform_order = (array) $webform_order;
  // Check for old data.
  $webform_order_data = FALSE;
  if (isset($webform_order['webform_nid']) && isset($webform_order['order_id'])) {
    $webform_order_data = _fundraiser_webform_get_webform_order_by_nid_did(
      $webform_order['webform_nid'], $webform_order['order_id']);
  }
  if (!$webform_order_data) {
    _fundraiser_webform_create_webform_order($webform_order);
  }
  else {
    $record = array_merge((array) $webform_order_data, $webform_order); 
    // Merge data together so we get everything in the record.
    drupal_write_record('fundraiser_webform_order', $webform_order, array('webform_nid', 'order_id'));
  }
}

/**
 * CRUD style DB function for fundraiser_webform_order.
 */
function _fundraiser_webform_delete_webform_order($nid, $did) {
  db_delete('fundraiser_webform_order')->condition('webform_nid', $nid)->condition('order_id', $did)->execute();
}

/**
 * DB function, get submission from a donation form.
 */
function _fundraiser_webform_get_webform_order_by_did($did) {
  return db_query('SELECT * FROM {fundraiser_webform_order} ' .
    'WHERE order_id = :did', // TODO change this terminology.
    array(':did' => $did))->fetchObject();
    // For now, there can be only one. TODO change this later.
}

/**
 * DB function, update submissions table with the right uid, sids.
 */
function _fundraiser_webform_update_submissions($uid, $sid) {
  db_query('UPDATE {webform_submissions} SET ' .
    'uid = :uid '.
    'WHERE sid = :sid',
    array(':uid' => $uid, ':sid' => $sid));
}

/**
 * DB function, get webform component form elements.
 */
function _fundraiser_webform_get_amount_count($nid) {
  $results = db_query('SELECT COUNT(nid) as count FROM {webform_component} ' .
    'WHERE nid = :nid ' .
    'AND form_key LIKE \'amount\' ' .
    'AND type = \'select\'',
    array(':nid' => $nid));
  foreach ($results as $result) {
    return $result->count;
  }
}

/**
 * DB function, get webform component form elements.
 */
function _fundraiser_webform_get_components_by_nid($nid) {
  return db_query('SELECT * FROM {webform_component} ' .
    'WHERE nid = :nid',
    array(':nid'=>$nid))->fetchAll();
}

/**
 * DB function, select webform component given node, form key info.
 */
function _fundraiser_webform_get_component_by_nid_key($nid, $form_key) {
  return db_query('SELECT * FROM {webform_component} ' .
    'WHERE nid = :nid ' .
    'AND form_key = :form_key',
    array(':nid' => $nid, ':form_key' => $form_key))->fetchObject();
}

/**
 * DB function, get webform component form elements.
 */
function _fundraiser_webform_get_components_by_keys($nid, $form_keys) {
  if (!is_array($form_keys)) {
    $form_keys = array($form_keys);
  }
  return db_query('SELECT * FROM {webform_component} ' .
    'WHERE nid = :nid ' .
    'AND form_key IN (:form_keys)',
    array(':nid'=>$nid, ':form_keys' => $form_keys))->fetchAll();
}

/**
 * DB function, update webform component given node, form key info.
 */
function _fundraiser_webform_update_component($nid, $form_key, $fields) {
  db_update('webform_component')
    ->fields($fields)
    ->condition('nid', $nid)
    ->condition('form_key', $form_key)
    ->execute();
}

/**
 * DB function, delete webform component given node, form key info.
 */
function _fundraiser_webform_delete_component($nid, $form_key) {
  db_delete('webform_component')
    ->condition('nid', $nid)
    ->condition('form_key', $form_key)
    ->execute();
}

/**
 * Helper function, creates all donation specific webform components
 */
function _fundraiser_webform_create_components($fundraiser) {
  // Poll other modules for the information they would normally provide to the donation form.
  $fields = fundraiser_field_info();
  // Start creating fields based on the component.
  $components = array();
  $child_weight = 0;
  foreach ($fields as $field_key => $field) {
    _fundraiser_webform_create_component($fundraiser, $field_key, $field, 0, $child_weight);
    $child_weight++;
  }
  return $components;
}

/**
 * Helper function, handles recursion for _fundraiser_webform_create_components().
 */
function _fundraiser_webform_create_component($fundraiser, $field_key, $field, $pid = 0, $weight = 0) {
  // Tweak the field with a callback as needed.
  if (isset($field['#create_callback']) && function_exists($field['#create_callback'])) {
    $field = call_user_func($field['#create_callback'], $fundraiser, $field);
  }
  if (empty($field)) {
    // The submit callback has the option of returning nothing to cancel creating the field.
    // If so, return to skip.
    return;
  }
  if (!isset($field['#type'])) {
    drupal_set_message('Error in creating component: '.print_r($field,TRUE));
    return;
  }
  // Check if empty.
  if (!empty($field)) {
    // Donation amount.
    $component = array();
    $component['nid'] = $fundraiser->nid;
    $component['pid'] = $pid;
    $component['form_key'] = $field_key;
    $component['name'] = isset($field['#title']) ? $field['#title'] : '';
    if (isset($field['#value'])) {
      $component['value'] = $field['#value'];
    }
    $component['type'] = isset($field['#type']) ? $field['#type'] : '';
    $component['extra'] = isset($field['#extra']) ? $field['#extra'] : array('description' => '');
    $component['mandatory'] = isset($field['#required']) ? $field['#required'] : '';
    $component['email'] = isset($field['#email']) ? 1 : 0;
    if (isset($field['#profile_map'])) {
      $component['maps_to'] = $field['#profile_map'];
    }
    $component['weight'] = $weight;
    $pid = webform_component_insert($component);
    $components[$pid] = $component;
    // Check for children. Recursion occurs here.
    $child_weight = 0;
    foreach(element_children($field) as $key) {
      _fundraiser_webform_create_component($fundraiser, $key, $field[$key], $pid, $child_weight);
      $child_weight++;
    }
  }
}

/**
 * Helper function, updates ask amount and show other amount webform components.
 */
function _fundraiser_webform_update_amount_components($fundraiser) {
  // Get the donation component for the pid of the two fields we're looking at.
  $donation_components = _fundraiser_webform_get_components_by_keys($fundraiser->nid, array('donation'));
  foreach ($donation_components as $donation_component) {
    $pid = $donation_component->cid;
  }
  // Poll other modules for the information they would normally provide to the donation form.
  $fields = fundraiser_field_info();
  $had_select = _fundraiser_webform_get_amount_count($fundraiser->nid);

  // First handle the amount field changes, we will always have an 'amount' component.
  // If no donation amounts are available, then we have a textfield.
  if (!count($fundraiser->donation_amounts)) {
    // If the amount field used to have select, we're deleteing it and creating a new field.
    if ($had_select) {
      _fundraiser_webform_delete_component($fundraiser->nid, 'amount');
      _fundraiser_webform_create_component($fundraiser, 'amount', $fields['donation']['amount'], $pid);
    }
    // Otherwise, the amount field is already a text field and we can leave it alone safely.
  }
  // Else we are adding (or updating) select fields.
  else {
    // If the current component is already a select, just update with current donation amount values.
    if ($had_select) {
      $extra = isset($fields['donation']['amount']['#extra']) ? $fields['donation']['amount']['#extra'] : array();
      // Construct a set of options based on the configured amounts.
      $formatted_amounts = '';
      foreach ($fundraiser->donation_amounts as $amount => $label) {
        if (!$label) {
          $formatted_amounts .= $amount . '|$' . $amount;
        }
        else {
          $formatted_amounts .= $amount . '|' . $label;
        }
        $formatted_amounts .= "\n";
      }
      if ($fundraiser->show_other_amount && count($fundraiser->donation_amounts)) {
        $formatted_amounts .= 'other|Other';
      }
      $extra['items'] = $formatted_amounts;
      _fundraiser_webform_update_component($fundraiser->nid, 'amount', array('extra' => serialize($extra)));
    }
    // We had a textfield, we need to create a select field instead.
    else {
      _fundraiser_webform_delete_component($fundraiser->nid, 'amount');
      _fundraiser_webform_create_component($fundraiser, 'amount', $fields['donation']['amount'], $pid);
    }
  }
  $message = t('The @node_title donation form has been updated.', array('@node_title' => $fundraiser->title));

  // Then handle the changes for the other_amount component, we may or may not have one of those.
  if ($fundraiser->show_other_amount && $had_select) {
    $result = _fundraiser_webform_get_component_by_nid_key($fundraiser->nid, 'other_amount');
    // Pre-existing entry in the DB for this form component and it's still enabled so we update.
    if ($result) {
      $extra = isset($fields['donation']['other_amount']['#extra']) ? $fields['donation']['amount']['#extra'] : array();
      $extra['description'] = 'Minimum payment $' . $fundraiser->minimum_donation_amount . '.';
      _fundraiser_webform_update_component($fundraiser->nid, 'other_amount', array('extra' => serialize($extra)));
      $message .= t('Other donation amount options have been updated.');
    }
    // Other amount doesn't already exist.
    else {
      _fundraiser_webform_create_component($fundraiser, 'other_amount', $fields['donation']['other_amount'], $pid);
      $message .= t('Other amount options have been added to the form.');
    }
  }
  // Other amount is disabled or there are no select options so the component needs to be removed if it exists.
  else {
    _fundraiser_webform_delete_component($fundraiser->nid, 'other_amount');
    $message .= t('Other amount options have been disabled on the form.');
  }
  watchdog('fundraiser', $message, array(), WATCHDOG_NOTICE, 'node/'.$fundraiser->nid);
}


/**
 * DB function, given a nid and field key, get and *unserialize* the extra field from webform component.
 */
function _fundraiser_webform_get_extra_by_key($nid, $form_key) {
  $extra = _fundraiser_webform_get_component_by_nid_key($nid, $form_key);
  if ($extra) {
    return unserialize($extra->extra);
  }
  return FALSE;
}