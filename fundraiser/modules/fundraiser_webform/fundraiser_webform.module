<?php

/**
 * @file
 * Field management functions for the fundraiser module
 */

/**
 * Implements hook_menu().
 */
function fundraiser_webform_menu() {
  $items['node/%node/webform/mapping'] = array(
    'title' => 'User map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_mapping_form', 1),
    'access callback' => 'fundraiser_mapping_form_access',
    'access arguments' => array(1),
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/webform/confirmations'] = array(
    'title' => 'Confirmations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_confirmation_settings_form', 1),
    'access callback' => 'fundraiser_confirmations_perm',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['node/%webform_menu/confirmation'] = array(
    'title' => 'Webform submission',
    'load arguments' => array(1),
    'page callback' => 'fundraiser_donation_confirmation',
    'page arguments' => array(1),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function fundraiser_webform_menu_alter(&$items) {
  // Alter some built-in webform menu items.
  $items['node/%webform_menu/webform/configure']['access callback'] = 'fundraiser_webform_configure_access';
  $items['node/%webform_menu/webform/configure']['access arguments'] = array('update', 1);
}

/**
 * Menu access callback, returns TRUE if current node is a donation form.
 */
function fundraiser_mapping_form_access($node) {
  return _fundraiser_is_donation_type($node->type);
}

/**
 * Menu access callback, check for donation type and node access.
 */
function fundraiser_confirmations_perm($perm, $node) {
  if (_fundraiser_is_donation_type($node->type) && node_access($perm, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu access callback. Permission check for donation form settings tab.
 */
function fundraiser_webform_configure_access($perm, $node) {
  // Don't show the 'Form settings' tab on donation forms.
  if (_fundraiser_is_donation_type($node->type)) { // From fundraiser.module.
    return FALSE;
  }
  else {
    return node_access($perm, $node);
  }
}

/**
 * Implemenation of hook_webform_select_options_info() from Webform.
 * From http://drupalcontrib.org/api/drupal/contributions!webform!webform_hooks.php/function/hook_webform_select_options_info/7
 */
function fundraiser_webform_webform_select_options_info() {
  $items = array();
  $items['fundraiserstates'] = array(
    'title' => t('Fundraiser defined states'),
    'options callback' => 'fundraiser_options_states', // From fundraiser.module.
  );
  $items['fundraiser_countries'] = array(
    'title' => t('Fundraiser defined countries'),
    'options callback' => 'fundraiser_options_countries', // From fundraiser.module.
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter the webform component delete form to prevent the deletion of required fundraiser fields
 * Why not handle this with the main interface? because edit/delete operations are added at theme layer.
 * Unfortunately the theme layer adds the values and immediately renders, negating any chance for us to make changes.
 * In order to remove delete properly, we will need a patch in webform addressing this issue.
 */
function fundraiser_webform_form_webform_component_delete_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we are dealing with a donation form.
  if ($form['node']['#value']->type == 'donation_form') {
    // Check vs. required fields to make sure we can't delete them.
    $required_fields = fundraiser_required_fields();
    $cid = $form['component']['#value']['cid'];
    $component = $form['node']['#value']->webform['components'][$cid];
    // Check to see if the form_key is in our required fields array
    if (in_array($component['form_key'], $required_fields)) {
      $message = t('<strong>!name</strong> is a required fundraiser field and cannot be deleted from this form.',
        array('!name' => $component['name']));
      $form['description']['#markup'] = $message;
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Implements hook_form_alter().
 * Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id is a subset, as: webform_client_form_NID.
 */
function fundraiser_webform_form_alter(&$form, $form_state, $form_id) {
  // Alter the webform client form.
  if (strstr($form_id, 'webform_client_form')) {
    // Get node information.
    $node = node_load($form['#node']->nid);
    // Handle donation form submissions.
    if (_fundraiser_is_donation_type($node->type) && arg(2) == 'submission') {
      fundraiser_webform_submission_display($form, $form_state);
    }
    // Handle the donation form itself.
    if (_fundraiser_is_donation_type($node->type)  && arg(2) != 'submission') {
      fundraiser_donation_form($form, $form_state);
    }
  }
  return $form;
}

/**
 * Form, alters the display of webform submissions.
 */
function fundraiser_webform_submission_display(&$form, &$form_state) {
  // Set up a view only display of the donation amount.
  if ('other' != $form['submitted']['donation']['amount']['#default_value']) {
    $amount = $form['submitted']['donation']['amount']['#default_value'];
  }
  else {
    $amount = $form['submitted']['donation']['other_amount']['#default_value'];
  }
  $form['submitted']['donation']['display_amount'] = array(
    '#type' => 'markup',
    '#value' => '<div class="form-item"><label>' . t('Donation Amount') .
      ':</label>' . '$' . number_format($amount, 2) . '</div>',
  );
  // Show whether or not it's a recurring donation
  if (isset($form['submitted']['credit_card_information']['recurs_monthly'])) {
    $recurs = $form['submitted']['credit_card_information']['recurs_monthly']['#default_value'][0] == 'recurs' ? t('Yes') : t('No');
    $form['submitted']['donation']['recurring'] = array(
      '#type' => 'markup',
      '#value' => '<div class="form-item"><label>' . t('Recurring Donation?') .
        ':</label>' . $recurs . '</div>',
    );
  }
  unset($form['submitted']['donation']['amount']);
  unset($form['submitted']['donation']['other_amount']);
  unset($form['submitted']['credit_card_information']);

  // Clean up the donor info section - replace the form fields with read only info
  $form['submitted']['donor_information']['#title'] = t('Donor Information');
  $form['submitted']['donor_information']['first_name_readonly'] = array(
    '#type' => 'markup',
    '#value' => '<div class="form-item"><label>' . t('First Name') . ':</label>' .
      $form['submitted']['donor_information']['first_name']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['last_name_readonly'] = array(
    '#type' => 'markup',
    '#value' => '<div class="form-item"><label>' . t('Last Name') . ':</label>' .
      $form['submitted']['donor_information']['last_name']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['email_readonly'] = array(
    '#type' => 'markup',
    '#value' => '<div class="form-item"><label>' . t('Email') . ':</label>' .
      $form['submitted']['donor_information']['email']['#default_value'] . '</div>',
  );
  $form['submitted']['donor_information']['first_name']['#prefix'] =
    $form['submitted']['donor_information']['last_name']['#prefix'] =
      $form['submitted']['donor_information']['email']['#prefix'] = '<div style="display:none">';
  $form['submitted']['donor_information']['first_name']['#suffix'] =
    $form['submitted']['donor_information']['last_name']['#suffix'] =
      $form['submitted']['donor_information']['email']['#suffix'] = '</div>';
}

/**
 * Implements hook_fundraiser_donation_form().
 */
function fundraiser_webform_fundraiser_donation_form(&$form, &$form_state) {
  global $user;
  // Loads profile fields in addition to base user data, and de-couples logged in user object.
  $this_user = user_load($user->uid);

  $base = drupal_get_path('module', 'fundraiser_webform');
  drupal_add_js( $base . '/js/jquery.alphanumeric.js', 'file');
  drupal_add_js( $base . '/js/fundraiser.js', 'file');
  drupal_add_css( $base . '/css/fundraiser-donation-form.css', 'file');

  // Create a data structure that will tell us exactly where each webform component lives in the FAPI array.
  $components = $node->webform['components'];
  $component_hierarchy = fundraiser_parse_components($node->nid, $components);

  // Preload any fields if the user is logged in. //TODO move to another module for fundraiser_profile??
  if (user_is_logged_in()) {
    // Load up any mapped profile fields.
    $map = fundraiser_get_user_map($node->nid);
    foreach ($map as $field_key => $profile_key) {
      $field =& fundraiser_find_field($form, $component_hierarchy[$field_key]);
      if (empty($field['#default_value'])) {
        if (property_exists($this_user, $profile_key)) {
          switch ($field['#type']) {
            case 'checkboxes':
              $field['#default_value'] = array($this_user->$profile_key);
              break;
            default:
              $field['#default_value'] = $this_user->$profile_key;
          }
        }
      }
    }
  }

  // Combine expiration month and year into a single component.
  $cc_exp_month_field =& fundraiser_find_field($form, $component_hierarchy['card_expiration_month']);
  $cc_exp_year_field =& fundraiser_find_field($form, $component_hierarchy['card_expiration_year']);
  $cc_info_field =& fundraiser_find_field($form, $component_hierarchy['credit_card_information']);
  $cc_exp_month_field['#default_value'] = date('n');
  $cc_exp_year_field['#default_value'] = date('Y');

  // Make sure the year field always has a good range of years.
  $this_year = date('Y');
  $years = array($this_year => $this_year);
  for ($i = 1; $i <= 5; $i++) {
    $years[$this_year + $i] = $this_year + $i;
  }
  $cc_exp_year_field['#options'] = $years;

  // Check to see if the credit card information fieldset still exists because it may have been removed.
  if (is_array($cc_info_field)) {
    $cc_info_field['expiration_date'] = array();
    $cc_info_field['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
    $cc_info_field['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
    $cc_info_field['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
    $cc_info_field['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
  }
  else {
    // Add the new expiration_date directly to the form with the same weight as the cc_exp_month field.
    $form['expiration_date'] = array();
    $form['expiration_date']['card_expiration_month'] = $cc_exp_month_field;
    $form['expiration_date']['card_expiration_year'] = $cc_exp_year_field;
    $form['expiration_date']['#weight'] = $cc_exp_month_field['#weight'];
    $form['expiration_date']['#theme'] = 'fundraiser_credit_card_expiration_date';
  }
  // Remove old fields after moving them.
  $cc_exp_month_field = NULL;
  $cc_exp_year_field = NULL;

  // Alter country drop down to populate zone drop down.
  $country_field =& fundraiser_find_field($form, $component_hierarchy['country']);
  $country_field['#ajax'] = array(
    'callback' => '_fundraiser_form_webform_client_state_ajax_submit',
    'wrapper' => 'zone-select-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  // Add default country & state values from user profile
  // Found in fields.inc. - should this be moved elsewhere? TODO
  $fids = _fundraiser_get_profile_location_fields();
  if ($fids['country'] && $this_user->profile_country) {
    $this_country = module_invoke_all('fundraiser_get_user_country', $fids['country'], $this_user->uid);
    $country_field['#default_value'] = $this_country[0];
  }

  // Add a wrapper around the state field so it can be replaced via ajax.
  $state_field =& fundraiser_find_field($form, $component_hierarchy['state']);
  if ($fids['state'] && $this_user->profile_state) {
    $this_state = module_invoke_all('fundraiser_get_user_zone', $fids['state'], $this_user->uid);
    $state_field['#default_value'] = $this_state[0];
  }
  $state_field['#prefix'] = '<div id="zone-select-wrapper">';
  $state_field['#suffix'] = '</div>';

  // Flatten form state array so that it is easier to work with
  $fields = _fundraiser_webform_array_flatten($form_state);
  // Country/state dependant drop down code
  if (array_key_exists('country', $fields)) {
    // User selected country
    $country_field['#default_value'] = $fields['country'];
    $state_field['#options'] = module_invoke_all('fundraiser_get_country_zones', $fields['country']);
  }
  else {
    $state_field['#options'] = module_invoke_all('fundraiser_get_country_zones', $country_field['#default_value']);
  }

  // Add additional submit handlers
  $form['#submit'][] = 'fundraiser_webform_confirm';
  // And lastly add a user facing message for submit.
  $form['submit']['#suffix'] = '<div class="fundraiser_submit_message">' .
    theme('image', array('path' =>  drupal_get_path('module', 'fundraiser') . '/images/padlock.gif' )) .
    t('By clicking SUBMIT DONATION your credit card will be securely processed.') .
    '</div>';
}

/**
 * AJAX callback for dealing with changes to the donation form.
 */
function _fundraiser_form_webform_client_state_ajax_submit($form, $form_state) {
  // Get the form item we want to render.
  $nid = $form['#node']->nid;
  $form_item = fundraiser_find_field($form, fundraiser_parse_component($nid, 'state'));
  return $form_item;
}

/**
 * Implements hook_webform_submission_presave().
 */
function fundraiser_webform_submission_presave($node, &$submission) {
  // Remove any non-component form fields from the submitted data.
  unset($submission->data['']);
  // Remove senstive form data before the submission is saved to the database.
  if ($node->type == 'donation_form') {
    $results = _fundraiser_get_fields_from_table('webform_component',
      array('nid' => $node->nid, 'form_key' => array('card_number', 'card_cvv', 'card_expiration_date')), 'cid');
    foreach ($results as $result) {
      $submission->data[$result->cid]['value'][0] = NULL;
    }
  }
}

/**
 * Implements hook_fundraiser_donation_validate().
 * Validate donation form submissions by donators.
 */
function fundraiser_webform_fundraiser_donation_validate($form, &$form_state) {
  $fundraiser_fields = _fundraiser_webform_array_flatten($form_state['values']['submitted']);
  $node_id = $form_state['values']['details']['nid'];
  $errors = FALSE;
  $donation_amount = $fundraiser_fields['amount'];
  $email = $fundraiser_fields['email'];

  // Look for other amount.
  if ($donation_amount == "other") {
    $donation_amount = preg_replace("/[^\d\.]/i", "", $fundraiser_fields['other_amount']);
    // make sure other amount is numeric
    if (!is_numeric($donation_amount)) {
      form_set_error('other_amount', "You must enter a valid donation amount.");
      $errors = TRUE;
    }
  }

  // Check for minimum amount.
  $minimum_donation_amount = _fundraiser_get_fields_from_table('fundraiser', array('nid' => $node_id), 'minimum_donation_amount');
  $minimum_donation_amount = number_format($minimum_donation_amount, 2);
  if ($donation_amount < $minimum_donation_amount) {
    form_set_error('submitted][donation][other_amount', "Your donation amount must be greater than or equal to $minimum_donation_amount.");
    $errors = TRUE;
  }

  //TODO move cc number stuff to Ubercart. Fundraiser doesn't know this stuff, and neither should webform.
  $cc_number = $fundraiser_fields['card_number'];
  $cc_cvv = $fundraiser_fields['card_cvv'];
  $cc_expiration_month = $fundraiser_fields['card_expiration_month'];
  $cc_expiration_year = $fundraiser_fields['card_expiration_year'];

  // Validate the card number. By Ubercart.
  $valid_card = module_invoke_all('fundraiser_validate_card', $cc_number);
  if (!empty($cc_number) && ( !$valid_card[0]|| !ctype_digit($cc_number) )) {
    form_set_error('submitted][credit_card_information][card_number', "You have entered an invalid credit card number.");
    $errors = TRUE;
  }

  // Validate the card expiration date. By Ubercart.
  $valid_date = module_invoke_all('fundraiser_validate_card_expiration', $cc_expiration_month, $cc_expiration_year);
  if (!empty($cc_expiration_month) && !empty($cc_expiration_year) && !$valid_date[0]) {
    form_set_error('submitted][credit_card_information][expiration_date][card_expiration_month', t('The credit card you entered has expired.'));
    form_set_error('submitted][credit_card_information][expiration_date][card_expiration_year', ' ');
    $errors = TRUE;
  }

  // Validate the CVV Number.  By Ubercart.
  $valid_cvv = module_invoke_all('fundraiser_validate_card_cvv', $cc_cvv);
  if (!empty($cc_cvv) && !$valid_cvv[0]) {
    form_set_error('submitted][credit_card_information][card_cvv', t('You have entered an invalid CVV number.'));
    $errors = TRUE;
  }

  // Validate email address.
  if (!fundraiser_webform_validate_email($email)) {
    form_set_error('email', t('You must enter a valid email address.'));
    $errors = TRUE;
  }

  // Create watchdog entry on validation errors.
  if ($errors) {
    $base = drupal_get_path('module', 'fundraiser');
    drupal_add_js($base . '/js/jquery.alphanumeric.js');
    drupal_add_js($base . '/js/fundraiser.js');
    drupal_add_css($base . '/css/fundraiser-donation-form.css');

    $message = "The following donation form fields failed local validation:\n\n";
    $validation_errors = array_keys(form_get_errors());
    foreach ($validation_errors as $field) {
      $keys = explode('][', $field);
      $message .= array_pop($keys) . "\n";
    }

    $fundraiser_fields['card_number'] = substr_replace($fundraiser_fields['card_number'], str_repeat('*', strlen($fundraiser_fields['card_number'])), 0);
    $fundraiser_fields['card_cvv'] = substr_replace($fundraiser_fields['card_cvv'], str_repeat('*', strlen($fundraiser_fields['card_cvv'])), 0);

    $message .= "\n\nSubmitted Values:\n\n";
    foreach ($fundraiser_fields as $key => $value) {
      $message .= $key . ': ' . $value . "\n";
      watchdog('fundraiser_webform', $message, NULL, WATCHDOG_DEBUG, NULL);
    }
    // Provide data to fundraiser about the node that failed to validate.
    // TODO check if returning the nid is enough or if other context information will be needed.
    $errors = array();
    $errors['nid'] = $form_state['values']['details']['nid'];
    return $errors; // So fundraiser can pick up on the failure.
  }
}

/**
 * Implements hook_fundraiser_donation_submit().
 */
function fundraiser_webform_fundraiser_donation_submit($form, &$form_state) {
  global $user;
  $nid = $form_state['values']['details']['nid'];
  
  // Create the donation object and load it with the submitted information for the donation.
  $donation = array();
  $donation['uid'] => $user->uid;
  $donation['user'] => user_load($user->uid); //Using user load to avoid user object being carried by ref around.
  $donation['nid'] => $nid;
  $donation['node'] => node_load($nid);

  // Retrieve data from the submission.
  $fundraiser_fields = _fundraiser_webform_array_flatten($form_state['values']['submitted_tree']);
/**
 * The values returned here are:
 *  amount, card_number, card_expiration_month, card_expiration_year, first_name, last_name, email, address,
 *  address_line_2, city, state, zip, quantity, other_amount.
 *
 * In the future should this change, a mapping function to map the keywords from one to the other would be good.
 */
  $donation['submission'] = $fundraiser_fields;

  // Set if this was a recurring donation.
  $recurs = FALSE;
  $recurs_cid = _fundraiser_get_fields_from_table('webform_component',
    array('nid' => $node_id, 'form_key' => 'recurs_monthly'), 'cid');
  if (!empty($recurs_cid)) {
    $value = $form_state['values']['submitted'][$recurs_cid];
    if (is_array($value)) {
      // If this is an array, then it is a single item checkbox
      if (isset($value[0])) {
        $recurs = $value[0] == 'recurs' ? TRUE : FALSE;
      }
    }
    else {
      $recurs = $value == 'recurs' ? TRUE : FALSE;
    }
  }
  $donation['donation']['recurs'] = $recurs ? DONATION_RECURRING : DONATION_NON_RECURRING;

  // TODO is there any other information about the submission I can grab at this point for use down the line?

  // Return our donation object.
  return (object) $donation;
}

/**
 * Implements hook_fundraiser_donation_post_submit().
 */
function fundraiser_webform_fundraiser_donation_post_submit(&$form, &$form_state, $donation, $result) {
  // Relate the donation id to webform before we try to process the payment. //TODO change terminology
  $webform_order = array('webform_nid' => $node_id, 'order_id' => $order_id, 'sid' => $form_state['values']['details']['sid'], 'recurring_status' => $recurs);
  drupal_write_record('fundraiser_webform_order', $webform_order);
  // Handle behavior if it was a failure.
  if (!$result['success']) {
    // Tell webform we're not done and rebuild the form.
    unset($form_state['values']['details']['sid']);
    form_set_error('credit_card_information][card_number', $result['message']);
    $form_state['values']['details']['finished'] = 0;
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Submit handler, handles the final destination redirect after donation completed.
 */
function fundraiser_webform_confirm($form, &$form_state) {
  // Everything worked, redirect as the last submit handler.
  $node = $form['#node'];
  $sid = $form_state['values']['details']['sid'];
  $redirect_url = trim($node->redirect_url);
  // Remove the domain name from the redirect.
  $redirect_url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $redirect_url);
  if ($redirect_url == '<confirmation>') {
    $redirect = array('node/' . $node->nid . '/confirmation', 'sid=' . $sid);
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $parts = parse_url($redirect_url);
    $query = $parts['query'] ? ($parts['query'] . '&sid=' . $sid) : ('sid=' . $sid);
    $redirect = array($parts['path'], $query, $parts['fragment']);
  }
  $form_state['redirect'] = $redirect;
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_webform_fundraiser_donation_success(&$donation) {
  // Record that the donation was successful for the webform submission.
  // Get the webform and associated node.
  $webform = _fundraiser_get_fields_from_table('fundraiser_webform_order',
    array('order_id' => $order_id), array('webform_nid', 'sid', 'recurring_status'));
  $node = $donation['node'];

  // Update the order/webform relationship // TODO updatethis to db_update -SeH
  db_query('UPDATE {fundraiser_webform_order} ' .
    'SET gateway = :gateway, txn_id = :txn_id ' .
    'WHERE order_id = :order_id',
    array(
      ':gateway' => $donation['node']->gateway,
      ':txn_id' => $donation['result']['data']['txn_id'],
      ':order_id' => $donation['donation']->did))  //TODO rename terminology here.
    );

  // Update the uid on the webform submission
  db_query('UPDATE {webform_submissions} SET ' .
    'uid = :uid '.
    'WHERE sid = :sid',
    array(':uid' => $order->uid, ':sid' => $webform->sid));

  // Update the recurring status, if it was changed by the payment gateway module
  if ($webform->recurring_status != $order->data['recurring_status']) {
    db_query('UPDATE {fundraiser_webform_order} SET recurring_status = :recurring_status WHERE order_id = :order_id',
    array(':recurring_status' => $order->data['recurring_status'], ':order_id' => $order_id));
  }

}

/**
 * Implements hook_fundraiser_donation_decline().
 */
function fundraiser_webform_fundraiser_donation_decline(&$donation) {
  // Clean up.
  $order_id = $donation['donation']->did;
  $sid = db_query('SELECT sid FROM {fundraiser_webform_order} WHERE order_id = :order_id',
    array(':order_id' => $order_id))->fetchColumn();
  db_delete('fundraiser_webform_order')->condition('order_id', $order_id)->execute();
  db_delete('webform_submitted_data')->condition('sid', $sid)->execute();
  db_delete('webform_submissions')->condition('sid', $sid)->execute();
}

/**
 * Implements hook_fundraiser_get_fundraiser_alter().
 */
function fundraiser_webform_fundraiser_get_fundraiser_alter(&$fundraiser) {
  // Get the user profile map. // TODO move this into another modules
  $results = _fundraiser_get_fields_from_table('fundraiser_component_map', array('nid' => $node->nid), array('cid', 'map_id') );
  foreach($results as $result) {
    $map[$result->cid] = $result->map_id;
  }
  // Get the webform data for this node. This overrides the saved amount values in fundraiser itself.
  // Protection vs node_save() for donation amounts. TODO - check if this is actually needed.
  $extra = _fundraiser_get_webform_extra_by_key($node->nid, 'amount');
  $items = preg_split('/\s/', $extra['items']);
  $count = 0;
  for ($i = 0; $i < count($items); ++$i) {
    $item = explode('|', $items[$i]);
    if ($item[0] != 'other') {
      $amount = 'amount_' . $i;
      $label = 'label_' . $i;
      $fundraiser->$amount = $item[0];
      $fundraiser->$label = $item[1];
      ++$count;
    }
  }
  $fundraiser->amount_delta = $count;
  $fundraiser->map = $map;
  // Add the amount_values for the fundraiser information on load.
  $amount_values = array();
  if (is_numeric($node->nid)) {
    $amount_values = _fundraiser_get_webform_extra_by_key($node->nid, 'amount');
    $amount_values = preg_split('/\n/', trim($amount_values['items']));
    // This includes 'Other' as an option which is dropped on the display end.
  }
}

/**
 * Implements hook_fundraiser_update_fundraiser_alter().
 */
function fundraiser_webform_fundraiser_update_fundraiser_alter(&$fundraiser) {
  $donation_amounts = array();
  for ($i = 0; $i < $node->amount_delta; ++$i) {
    $amount = 'amount_' . $i;
    $label = 'label_' . $i;
    if ($node->$amount) {
      $donation_amounts[$node->$amount] = $node->$label;
    }
  }
  ksort($donation_amounts, SORT_NUMERIC);
  $keys = array_keys($donation_amounts);
  _fundraiser_update_amount_webform_component($node, $donation_amounts, $keys[0]);
  // Update the label on the minimum donation amount.
  if ($node->show_other_amount) {
    $extra = _fundraiser_get_webform_extra_by_key($node->nid, 'other_amount');
    $extra['description'] = 'Minimum payment $' . $node->minimum_donation_amount . '.';
    _fundraiser_set_webform_extra_by_key($node->nid, 'other_amount', $extra);
  }

  if (!$node->is_being_cloned) {
    // From fundraiser.fields.inc. update the webform component amounts.
    $donation_amounts = array();
    // Add webform components.
    for ($i = 0; $i < $node->amount_delta; ++$i) {
      $value = 'amount_' . $i;
      $label = 'label_' . $i;
      if ($node->$value) {
        $donation_amounts[$node->$value] = $node->$label;
      }
      ksort($donation_amounts, SORT_NUMERIC);
    }
    $components = fundraiser_create_webform_components($node->nid, $donation_amounts, $node->show_other_amount, $node->minimum_donation_amount);
    // Create the user profile map.
    fundraiser_create_user_map($node->nid, $components);
  }
}

/**
 * Helper functions below.
 */

/**
 * Helper function.
 * Creates a nested array of where a component exists in the FAPI array.
 */
function fundraiser_parse_component($nid, $form_key) {
  $cid = _fundraiser_get_fields_from_table('webform_component', array('nid' => $nid, 'form_key' => $form_key), 'cid');
  $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
  parse_str($component_path, $output); // Convert. string to a nested array
  return $output;
}

/**
 * Helper function.
 * Creates a nested array of where components exist in the FAPI array for all components in a webform.
 * This is needed because the webform module allows the user to move components around. Therefore
 * we must be able to find them if they are not in their usual spot.
 */
function fundraiser_parse_components($nid, $components) {
  $component_hierarchy = array();
  foreach ($components as $cid => $component) {
    $component_path = 'submitted[' . implode('][', fundraiser_walk_component_hierarchy($nid, $cid)) . ']';
    parse_str($component_path, $output); // Convert string to a nested array.
    $component_hierarchy[$component['form_key']] = $output;
  }
  return $component_hierarchy;
}

/**
 * Helper function.
 * Builds a path from the webform component to it's topmost parent.
 * Recursion is here. Be careful.
 */
function fundraiser_walk_component_hierarchy($nid, $cid, &$path = array()) { 
  // Store all the components for this node in a static cache to reduce the number of duplicated database hits.
  static $component_hierarchy = array();
  if (empty($component_hierarchy[$nid])) {
    $component_hierarchy[$nid] = array();
    $results = _fundraiser_get_fields_from_table('webform_component', array('nid' => $nid), array('cid', 'pid', 'form_key'));
    foreach ($results as $data) {
      $cid = $data->cid;
      $component_hierarchy[$nid][$cid][] = $data;
    }
  }
  // Build a path from the webform component to its topmost parent.
  foreach ($component_hierarchy[$nid][$cid] as $data) {
    array_unshift($path, $data->form_key);
    if ($data->pid > 0) {
      fundraiser_walk_component_hierarchy($nid, $data->pid, $path);
    }
  }
  return $path;
}

/**
 * Helper function, returns a reference to an element of a FAPI array based on a known path.
 * This returns a reference to the form variable, allowing for manipulation into the form array.
 */
function &fundraiser_find_field(&$form, $path) {
  foreach (array_keys($path) as $v) {
    if (is_array($path[$v]) && count($path[$v])) {
      // Recurse if there are more keys.
      return fundraiser_find_field($form[$v], $path[$v]);
    }
    else {
      return $form[$v];
    }
  }
}

/**
 * Creates a webform specific string of donations amount to be used in the amount component
 */
function _fundraiser_create_amount_options($donation_amounts, $show_other_amount) {
  $formatted_amounts = '';
  // Convert to nice dollar format if label isn't present.
  foreach ($donation_amounts as $amount => $label) {
    if (!$label) {
      $formatted_amounts .= $amount . '|$' . $amount;
    }
    else {
      $formatted_amounts .= $amount . '|' . $label;
    }
    $formatted_amounts .= "\n";
  }
  if ($show_other_amount && count($donation_amounts)) {
    $formatted_amounts .= 'other|Other';
  }
  return $formatted_amounts;
}

/** 
 * Helper function, given a card number return likely type.
 */
function _fundraiser_get_cc_type($cardnumber) {
  $cardtype = "UNKNOWN";
  $len = strlen($cardnumber);
  if ( $len == 15 && substr($cardnumber, 0, 1) == '3' ) {
    $cardtype = "amex";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 4) == '6011' ) {
    $cardtype = "discover";
  }
  elseif ( $len == 16 && substr($cardnumber, 0, 1) == '5' ) {
    $cardtype = "mc";
  }
  elseif ( ($len == 16 || $len == 13) && substr($cardnumber, 0, 1) == '4' ) {
    $cardtype = "visa";
  }
  return ( $cardtype );
}

/**
 * Helper function, these are the fields we can't delete.
 */
// This is only used in webform_token_selector/webform_token_selector.module
// Should it be moved to that module?
function _fundraiser_field_blacklist() {
  return array(
    'card_number',
    'card_cvv',
    'recurs_monthly',
    'card_expiration_month',
    'card_expiration_year',
  );
}

/**
 * Helper function, return a list of fields that are required for webform fundraiser.
 */
function fundraiser_required_fields() {
  return array(
    'ms',
    'cid',
    'referrer',
    'initial_referrer',
    'amount',
    'first_name',
    'last_name',
    'email',
    'address',
    'address_line_2',
    'city',
    'country',
    'state',
    'zip',
    'card_number',
    'card_expiration_year',
    'card_expiration_month',
    'card_cvv',
  );
}

/**
 * Helper function, smarter version of array_merge_recursive: overwrites scalar values.
 * Future plans: this may need to be moved to a toolkit module for use by all our modules.
 * @see PHP Manual on: array-merge-recursive comment #82976.
 */
function _fundraiser_array_smart_merge($array, $override) {
  if (is_array($array) && is_array($override)) {
    foreach ($override as $k => $v) {
      if (isset($array[$k]) && is_array($v) && is_array($array[$k])) {
        $array[$k] = _fundraiser_array_smart_merge($array[$k], $v);
      }
      else {
        $array[$k] = $v;
      }
    }
  }
  return $array;
}

/**
 * DB functions.
 */

/**
 * DB function, creates a map of profile fields with their corrosponding values.
 */
function fundraiser_create_profile_values_map($nid, $sid) {
  $map = array();
  $results = db_query('SELECT f.map_id, d.data FROM {fundraiser_component_map} f ' .
    'INNER JOIN {webform_submitted_data} d on d.cid = f.cid ' .
    'WHERE f.nid = :nid and d.sid = :sid', array(':nid'=> $nid, ':sid' => $sid));
  foreach ($results as $row) {
    $map[$row->map_id] = $row->data;
  }
  return $map;
}

/**
 * DB function, version of _profile_get_fields that includes hidden profile fields by default.
 */
function _fundraiser_profile_get_fields($category) {
  $query = db_select('profile_field');
  $query->condition('category', db_like($category), 'LIKE');
  return $query
    ->fields('profile_field')
    ->orderBy('category', 'ASC')
    ->orderBy('weight', 'ASC')
    ->execute();
}

/**
 * DB function, version of profile_save_profile that includes hidden profile fields
 */
function _fundraiser_profile_save_profile(&$edit, &$user, $category) {
  $results = _fundraiser_profile_get_fields($category);
  foreach ($results as $field) {
    if (_profile_field_serialize($field->type)) {
      $edit[$field->name] = serialize($edit[$field->name]);
    }
    db_delete('profile_value')->condition('fid', $field->fid)->condition('uid', $user->uid)->execute();
    $profile_values = array('fid' => $field->fid, 'uid' => $user->uid, 'value' => $edit[$field->name]);
    drupal_write_record('profile_value', $profile_values);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}

/**
 * DB function, given a nid and field key, get and *unserialize* the extra field from webform component.
 */
function _fundraiser_get_webform_extra_by_key($nid, $form_key) {
  $results = _fundraiser_get_fields_from_table('webform_component', array('nid' => $nid, 'form_key' => $form_key), 'extra');
  if ($results) {
    return unserialize($results);
  }
  return FALSE;
}

/**
 * DB function, given a nid and field key, *serialize* and set the extra field from webform component.
 */
function _fundraiser_set_webform_extra_by_key($nid, $form_key, $new_value) {
  $record['nid'] = $node->nid;
  $record['form_key'] = $form_key;
  $record['extra'] = serialize($new_value);
  drupal_write_record('webform_component', $record, array('nid', 'form_key'));
}

/**
 * Profile stuff. This may need to go into another module.
 */
 
/**
 * Helper function to fetch fids for the country and state profile fields.
 *
 * @return
 * Returns a keyed array of location fields or an empty array if there was an error.
 */
function _fundraiser_get_profile_location_fields() {
  $results = db_query('SELECT fid, name FROM {profile_field} WHERE name IN (\'profile_country\', \'profile_state\')');
  foreach ($results as $profile_field) {
    if ($profile_field->name == 'profile_country') {
      $country_fid = $profile_field->fid;
    }
    if ($profile_field->name == 'profile_state') {
      $state_fid = $profile_field->fid;
    }
  }
  return array('country' => $country_fid, 'state' => $state_fid);
}


/**
 * Helper function to update user profile fields based on contry/state selected on the donation form.
 *
 *  @param $submission
 *  Webform submission object.
 *
 *  @param $update_user
 *  User object to be updated. If NULL, defaults to global $user
 *
 */
function _fundraiser_update_profile_location($submission, $update_user = NULL) {
  // make sure we have a real user
  if (empty($update_user) || $update_user->uid == 0) {
    return;
  }

  $fids = _fundraiser_get_profile_location_fields();

  // get the ids of the country and state webform components for node
  $country_cid = db_query('SELECT cid FROM {webform_component} '.
    'WHERE nid = :nid AND form_key = :form_key',
    array(':nid' => $submission->nid, ':form_key' => 'country'))->fetchField();
  $state_cid = db_query('SELECT cid FROM {webform_component} '.
    'WHERE nid = :nid AND form_key = :form_key',
    array(':nid' => $submission->nid, ':form_key' => 'state'))->fetchField();

  $country_code = $submission->data[$country_cid]['value'][0];
  $state_code = $submission->data[$state_cid]['value'][0];

  if ($fids['country']) {
    $country_name = module_invoke_all('fundraiser_get_country_iso', $country_code);
    $country_name = $country_name[0];

    $has_country = db_query('SELECT 1 FROM {profile_value} WHERE uid = :uid AND fid = :fid',
      array(':uid' => $update_user->uid, ':fid' => $fids['country']))->fetchField();
    if ($has_country) {
      db_query('UPDATE {profile_value} SET value = :value WHERE uid = :uid AND fid = :fid',
        array(':value' => $country_name, ':uid' => $update_user->uid, ':fid' => $fids['country']));
    }
    else {
      $values = array('fid' => $fids['country'], 'uid' => $update_user->uid, 'value' => $country_name);
      drupal_write_record('profile_value', $values);
    }
  }

  if ($fids['state']) {
    $state_name = module_invoke_all('fundraiser_get_zone_iso', $country_code, $state_code);
    $state_name = $state_name[0];

    $has_state = db_query('SELECT 1 FROM {profile_value} WHERE uid = :uid AND fid = :fid',
      array(':uid' => $update_user->uid, ':fid' => $fids['state']))->fetchField();
    if ($has_state) {
      db_query('UPDATE {profile_value} SET value = :value WHERE uid = :uid AND fid = :fid',
        array(':value' =>  $state_name, ':uid' => $update_user->uid, ':fid' => $fids['state']));
    }
    else {
      $values = array('fid' => $fids['state'], 'uid' => $update_user->uid, 'value' => $state_name);
      drupal_write_record('profile_value', $values);
    }
  }
}

/**
 * Creates an array to map webform component fields to user profile fields.
 */
function fundraiser_get_user_map($nid) {
  $map = array();
  $results = db_query('SELECT w.form_key, f.cid, f.map_id, w.type '.
    'FROM {webform_component} w '.
    'INNER JOIN {fundraiser_component_map} f ON f.cid = w.cid AND f.nid = w.nid '.
    'WHERE f.nid = :nid '.
    'ORDER BY f.cid',
    array(':nid' => $nid)
  );
  foreach ($results as $result) {
    $row = (array) $result;
    $map[$row['form_key']] = $row['map_id'];
  }
  return $map;
}


/**
 * User mapping form.
 */ //TODO does this move to webform? Or it's own profile?
function fundraiser_mapping_form($form, &$form_state, $node) {
  $form = array(
    '#tree' => TRUE,
    '#node' => $node,
    'mapping' => array(),
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  $form['info'] = array(
    '#value' => 'This form allows you to map the submitted form values to Drupal user and profile fields. When the ' .
      'donation form is submitted, the user\'s profile will be updated with the values from the form.',
    '#weight' => 0,
  );
 // Gather user profile options. TODO this becomes hookable eventually. -SeH
  $options = array('' => '--Select One--');
  if (module_exists('profile')) {
    $cat_array = profile_user_categories();
    foreach ($cat_array as $cat) {
      $result = _profile_get_fields($cat['name']);
      foreach( $result as $this_row) {
        $row = (array) $this_row;
        $options['Drupal Profile Fields'][$row['name']] = $row['title'];
      }
    }
  }
  // Add final field, user email address.
  $options['User Fields'] = array(
    'mail' => t("Email Address"),
  );
  // For each component create possible profile fields.
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] != 'fieldset') {
      $form['mapping']['type'][$cid] = array(
        '#label' => t($component['name'] . " - (" . $component['type'] . ")"),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($node->map[$cid]) ? $node->map[$cid] : '',
      );
    }
  }
  if (empty($form['mapping']['type'])) {
    $form['mapping'] = array(
      '#markup' => t('You must add some fields to the webform before you can map them.'),
    );
  }
  else {
    $form['mapping']['type']['#theme'] = 'fundraiser_mapping_options';
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  }
  return $form;
}

function fundraiser_mapping_form_submit($form, &$form_state) {
  db_delete('fundraiser_component_map')->condition('nid', $form['#node']->nid)->execute();
  foreach ($form_state['values']['mapping']['type'] as $key => $value) {
    if (!empty($value)) {
      $component_map = array('nid' => $form['#node']->nid, 'cid' => $key, 'map_id' => $value);
      drupal_write_record('fundraiser_component_map', $component_map);
    }
  }
  drupal_set_message(t('Profile mapping has been saved'));
}


/**
 * Automatically maps predefined webform components to user profile fields. Called by fundraiser_insert().
 */
function fundraiser_create_user_map($nid, $components) {
  foreach ($components as $cid => $component) {
    if (array_key_exists('maps_to', $component)) {
      $component_map = array('nid' => $nid, 'cid' => $cid, 'map_id' => $component['maps_to']);
      drupal_write_record('fundraiser_component_map', $component_map);
    }
  }
  drupal_set_message(t('User profile fields have been mapped. Use the User Map tab to edit the map.'));
}

/**
 * Uncatagorized, these functions need to be tracked down for where they're called and possible moved to other modules.
 */

/**
 * Implements hook_confirmation_page_tokens().
 * TODO figure out where this hook comes from - webform? - SeH 1/10/12
 */
function fundraiser_confirmation_page_tokens($type) {
  if ($type == 'donation_form') {
    $order_tokens = array();
    $items = token_get_list('order');
    foreach ($items as $module => $tokens) {
      foreach ($tokens as $token => $desc) {
        $order_tokens['order']['[' . $token . ']'] = $desc;
      }
    }
    return $order_tokens;
  }
}

/**
 * Implementation of hook_webform_submission_update()
 * From webform, see http://drupalcontrib.org/api/drupal/contributions--webform--webform_hooks.php/function/hook_webform_submission_update/7
 */
 // TODO this looks like it should be in another module based on what it does, perhaps sf_queue? - SeH 1/12/12
 // Update - move to sf_donation.
function fundraiser_webform_submission_update($node, $submission) {
  if ($node->type == 'donation_form') {
    if (module_exists('queue_api')) {
      $order_id = db_query('SELECT f.order_id FROM {fundraiser_webform_order} f ' .
        'INNER JOIN {uc_orders} u ON u.order_id = f.order_id ' .
        'WHERE f.webform_nid = :webform_nid AND f.sid = :sid AND u.order_status = \'payment_received\'',
        array(':webform_nid' => $node->nid, ':sid' => $submission->sid))->fetchColumn();
      if ($order_id) {
        // Determine if we need an INSERT or an UPDATE
        $action = 'create';
        $sfid = db_query('SELECT sfid FROM {salesforce_management_object_map} WHERE oid = :oid AND drupal_type = \'donation\'', 
          array(':oid' => $order_id))->fetchColumn();
        if ($sfid) {
          $action = 'update';
        }
        sf_queue_insert($order_id, FUNDRAISER_SINGLE_DONATION_TYPE, $action);
      }
    }
  }
}