<?php

/**
 * @file
 *
 * This module is used to generate massive amounts of donations for testing purposes.
 */

/**
 * Implemenation of hook_menu().
 */
function fundraiser_generate_menu() {
  $items['admin/settings/fundraiser/generate'] = array(
    'title' => t('Generate donations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_generate_donations_form'),
    'access arguments' => array('create test donations'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implemenatation of hook_perm().
 */
function fundraiser_generate_perm() {
  return array('create test donations');
}

/**
 * Generate donations form.
 */
function fundraiser_generate_donations_form() {
  $options = _fundraiser_generate_get_forms();
  $types = array('single' => 'Single', 'recurring' => 'Recurring', 'random' => 'Random');

  $form['nid'] = array(
    '#type' => 'select',
    '#title' => t('Donation form'),
    '#options' => $options,
  );

  $form['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of donations to generate'),
    '#size' => 3,
    '#default_value' => 1,
  );

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Donation type'),
    '#options' => $types,
    '#default_value' => 'single',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate!'),
  );

  return $form;
}

/**
 * Submission handler.
 */
function fundraiser_generate_donations_form_submit($form, &$form_state) {
  module_load_include('inc', 'devel_generate', 'devel_generate');

  $nid = $form_state['values']['nid'];
  $number_to_create = $form_state['values']['number'];
  $type = $form_state['values']['type'];

  if ($type == 'single') {
    $recurs = FALSE;
  }
  elseif($type == 'recurring') {
    $recurs = TRUE;
  }
  else {
    $recurs = (bool)rand(0, 1);
  }

  // load up the donation form node
  $donation_form_node = node_load($nid);

  for ($i = 0; $i < $number_to_create; $i++) {

    // create some random strings
    $url = parse_url($GLOBALS['base_url']);
    $first_name = devel_generate_word(mt_rand(4, 10));
    $last_name = devel_generate_word(mt_rand(3, 11));
    $email =  $first_name . '.' . $last_name . '@'. $url['host'];
    $year = date('Y');

    // build up a bogus form_state to submit
    $state = array(
      'submitted' => TRUE,
      'clicked_button' => array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#parents' => array('submit'),
      ),
      'values' => array(
        'op' => t('Submit'),
        'submit' => t('Submit'),
        'form_id' => 'webform_client_form_'. $nid,
        'details' => array(
          'nid' => $nid,
          'sid' => '',
          'uid' => 0,
          'finished' => 0,
          'page_num' => 1,
          'page_count' => 1,
        ),
        'submitted' => array(
          'currency' => 'USD',
          'donation' => array(
            'amount' => _fundraiser_generate_random_ask_amount($nid),
            'other_amount' => '',
          ),
          'donor_information' => array(
            'first_name' => $first_name,
            'last_name' => $last_name,
            'email' => $email,
          ),
          'billing_information' => array(
            'address' => devel_generate_word(mt_rand(10, 20)),
            'address_line_2' => '',
            'city' => devel_generate_word(mt_rand(7, 15)),
            'country' => '840',
            'state' => _fundraiser_generate_random_state(),
            'zip' => mt_rand(11111, 55555),
          ),
          'credit_card_information' => array(
            'card_number' => '4111111111111111',
            'card_cvv' => '111',
            'recurs_monthly' => array(
              'recurs' => $recurs,
            ),
            'expiration_date' => array(
              'card_expiration_month' => mt_rand(1, 12),
              'card_expiration_year' => mt_rand($year + 1, $year + 3),
            ),
          ),
          'ms' => '',
          'cid' => '',
          'referrer' => '',
          'initial_referrer' => '',
        ),
      ),
    );

    // submit it
    drupal_execute('webform_client_form_'. $nid, $state, $donation_form_node, NULL, TRUE, FALSE);

  }
}

/**
 * Generates an option list of donation forms on the site.
 */
function _fundraiser_generate_get_forms() {
  $donation_types = fundraiser_enabled_types();
  $forms = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type IN (" . db_placeholders($donation_types, 'text') . ") ORDER BY title", $donation_types);
  while ($data = db_fetch_object($result)) {
    $forms[$data->nid] = $data->title;
  }

  return $forms;
}

/**
 * Generates a random zone id.
 */
function _fundraiser_generate_random_state() {
  static $zones;

  if (count($zones == 0)) {
    // load up ubercart zones
    $result = db_query("SELECT zone_id FROM {uc_zones} WHERE zone_country_id = 840"); // hardcode US for now
    while ($data = db_fetch_object($result)) {
      $zones[] = $data->zone_id;
    }
  }

  // get length of array
  $length = count($zones) - 1;

  // return random index from array
  $id = $zones[rand(0, $length)];
  return $id;
}

/**
 * Generates a random ask amount value().
 */
function _fundraiser_generate_random_ask_amount($nid) {
  $amount_values = array();
  $results = db_query('SELECT extra FROM {webform_component} WHERE nid = %d AND form_key = "amount"', $nid);
  $amount_values = unserialize(db_result($results));
  $amount_values = preg_split('/\n/', trim($amount_values['items']));

  array_pop($amount_values); // git rid of other for now
  $values = array();
  foreach($amount_values as $amount) {
    $split_amount = explode('|', $amount);
    $values[] = $split_amount[0];
  }

  $length = count($values) - 1;
  return $values[rand(0, $length)];
}