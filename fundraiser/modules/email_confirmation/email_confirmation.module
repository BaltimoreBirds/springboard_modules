<?php

include_once('email_confirmation.features.inc');

/**
 * Implements hook_menu().
 */
function email_confirmation_menu() {
  $items = array();
  /* #AHAH callback for the email template form elements */
  $items['email_confirmation/js'] = array(
    'page callback' => '_email_confirmation_template_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // TODO: add administer fundraiser perm to Fundraiser? Default perm "access content" isn't appropriate for admin pages.
  $items['admin/settings/fundraiser/confirmations'] = array(
    'title' => 'Confirmation settings',
    'description' => 'Administer email confirmation settings.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_confirmation_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['email_confirmation/preview_modal'] = array(
    'title' => 'Email Confirmation Template Preview',
    'access callback' => TRUE,
    'page callback' => 'email_confirmation_modal_preview',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;

}
 
/**
 * Implements hook_form_alter().
 */
function email_confirmation_form_alter(&$form, &$form_state, $form_id) {
  
  require_once('email_confirmation.defaults.inc');
  // If this module is enabled the confirmation email stuff on the confirmation tab is redundant and confusing.
  if ($form_id == 'fundraiser_confirmation_settings_form') {
    if ($form['#parameters'][2]->type == 'donation_form') {
      unset($form['email']);
      $form['#validate'] = array('email_confirmation_confirmation_form_validate');
    }
  }
  
  if ($form_id == 'confirmation_template_node_form') {

    // New node, add default template & message values
    if (!$form['nid']['#value']) {
      // HTML
      $form['body_field']['body']['#default_value'] = email_confirmation_default_html_template();
      $form['field_confirmation_html_message'][0]['#default_value']['value'] = email_confirmation_default_html_message();
      
      // Text
      $form['field_confirmation_text'][0]['#default_value']['value'] = email_confirmation_default_text_template();
      $form['field_confirmation_text_message'][0]['#default_value']['value'] = email_confirmation_default_text_message();
    }
    
    // Add token display to fields
    $text_field = $form['#field_info']['field_confirmation_text'];
    $text_message = $form['#field_info']['field_confirmation_text_message'];
    $form['text_field'] = array(
      '#type' => 'fieldset',
      '#title' => t('Text Template Settings'),
    );
    $form['text_field']['field_confirmation_text'] = $form['field_confirmation_text'];
    $form['text_field']['field_confirmation_text']['#weight'] = 0;
    $form['text_field']['text_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 1,
    );
    $form['text_field']['text_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['text_field']['field_confirmation_text_message'] = $form['field_confirmation_text_message'];
    $form['text_field']['field_confirmation_text_message']['#weight'] = 10;
    $form['text_field']['message_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 11,
    );
    $form['text_field']['message_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    unset($form['field_confirmation_text']);
    unset($form['field_confirmation_text_message']);

    $form['body_field']['#type'] = 'fieldset';
    $form['body_field']['#title'] = t('HTML Template Settings');
    $form['body_field']['field_confirmation_html_message'] = $form['field_confirmation_html_message'];
    $form['body_field']['field_confirmation_html_message']['#weight'] = 10;
    unset($form['field_confirmation_html_message']);

   
    $form['body_field']['message_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#weight' => 11,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['body_field']['message_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['body_field']['html_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['body_field']['html_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
  
    // We need to make sure there is only one  default confirmation template per group.
     if (module_exists('og')) {
       $form['#submit'][] = 'email_confirmation_defaults';
     }
     else {
       // Hide OG default field
       $form['field_confirmation_default']['#type'] = 'hidden';
     }
  }

  if ($form_id == 'donation_form_node_form') {
    // Ctools modals setup for preview button
    module_load_include('inc', 'ctools', 'includes/ajax');
    ctools_include('modal');
    ctools_modal_add_js();
    drupal_add_js(drupal_get_path('module', 'email_confirmation') . '/email_confirmation.js');
    
    $template_nid = $form_state['values']['template_wrapper']['email_template'];
    $bcc = array();
 
    // We need to update default values if a user selects a new email template.
    if ($template_nid) {
      // Get default values from template.

      $defaults = db_fetch_object(db_query('SELECT * FROM {content_type_confirmation_template} WHERE nid = %d', $template_nid));
      $results = db_query('SELECT delta, field_confirmation_bcc_email FROM {content_field_confirmation_bcc} ORDER BY delta DESC');
      while ($item = db_fetch_object($results)) {
        $bcc[$item->delta] = $item->field_confirmation_bcc_email;
      }
      $defaults->bcc = implode(';', $bcc);
      //$defaults->html = db_result(db_query('SELECT body FROM {node_revisions} nr INNER JOIN {node} n ON n.vid = nr.vid WHERE n.nid=%d', $defaults->nid));
    }
    // Otherwise get defaults from db.
    else {
      $nid = $form['nid']['#value'];

      if ($nid) {
 
        $result = db_query('
          SELECT 
            tid AS nid,
            subject AS field_confirmation_subject_value, 
            from_name AS field_confirmation_from_name_value, 
            reply_to_email AS field_confirmation_reply_email_email, 
            bcc_email AS bcc, 
            html_message AS field_confirmation_html_message_value,
            text_message AS field_confirmation_text_message_value
          FROM {fundraiser_confirmations}
          WHERE nid = %d', $nid);

        $defaults = db_fetch_object($result);
      }

      // TODO: retrieve default values from wherever they're being stored, possibly the fundraiser table.
    }
     /* email template configuration, see #133*/
    // TODO: replace variable_get() with appropriate $node property
    $form['fundraiser_settings']['confirmation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email confirmation'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      //'#weight' => -4.99,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper'] = array(
      '#tree' => TRUE,
      '#prefix' => '<div id="template-wrapper">',
      '#suffix' => '</div>',
      '#theme' => 'email_confirmation_template_wrapper',
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['email_template'] = array(
      '#type' => 'select',
      '#title' => t('Confirmation Email Template'),
      '#options' => email_confirmation_list_templates(),
      '#ahah' => array(
        'path' => 'emaiL_confirmation/js',
        'wrapper' => 'template-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#default_value' => $defaults->nid,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $defaults->field_confirmation_subject_value,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_from_name'] = array(
      '#type' => 'textfield',
      '#title' => t('From Name'),
      '#default_value' => $defaults->field_confirmation_from_name_value,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_from_email'] = array(
      '#type' => 'From Email',
      '#title' => t('textfield'),
      '#default_value' => $defaults->field_confirmation_from_email_email,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_reply_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Reply To Email'),
      '#default_value' => $defaults->field_confirmation_reply_email_email,
    );

    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_bcc_email' . $delta] = array(
      '#type' => 'textfield',
      '#title' => t('BCC Email'),
      '#default_value' => $defaults->bcc,
    );

    // TODO: add input type filters?
    // TODO: list available tokens in description of text fields or as separate form element.
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_html_email_message'] = array(
      '#type' => 'textarea',
      '#title' => t('HTML Email Message'),
      '#default_value' => $defaults->field_confirmation_html_message_value,

    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_html_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_html_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_text_email_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Text Email Message'),
      '#default_value' => $defaults->field_confirmation_text_message_value,
    );
   $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_text_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available confirmation message tokens'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['fundraiser_settings']['confirmation']['template_wrapper']['confirmation_text_tokens']['help'] = array(
      '#value' => theme('token_help', 'order') . theme('webform_token_help', $node),
    );
    // TODO: add $stuff to enable preview. Perhaps a lightbox-style modal display?
    $form['fundraiser_settings']['confirmation']['template_wrapper']['preview'] = array(
     // '#type' => 'markup',
     // '#value' => ctools_modal_text_button('Preview', 'email_confirmation/preview_modal', '', 'edit-template-wrapper-email-template'),
      '#type' => 'button',
      '#value' => t('Preview'),
      '#attributes' => array('class' => 'ctools-use-modal'),
    );
  }

}

/**
 * Implements hook_nodeapi().
 */
function email_confirmation_nodeapi(&$node, $op) {
  if ($node->type == 'donation_form') {
  
  
  switch ($op) {

    case 'delete': 
      db_query('DELETE FROM {fundraiser_confirmations} WHERE nid = %d', $node->nid);
      break;

    case 'insert':
      $values = $node->template_wrapper;
      $tid = $values['email_template'];
      $subject = $values['confirmation_subject'];
      $from_name =  $values['confirmation_from_name'];
      $reply_to_email = $values['confirmation_reply_email'];
      $bcc_email = $values['confirmation_bcc_email'];
      $html_body = $values['confirmation_html_email_message'];
      $text_body = $values['confirmation_text_email_message'];
      db_query("INSERT INTO {fundraiser_confirmations} (nid, tid, subject, from_name, reply_to_email, bcc_email, html_message, text_message) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", $node->nid, $tid, $subject, $from_name, $reply_to_email, $bcc_email, $html_body, $text_body);
      break;  


    case 'update':
      $values = $node->template_wrapper;

      // Defend against random node_save()s
      if (!count($values)) {        
        $data = db_fetch_object(db_query('SELECT * FROM {fundraiser_confirmations} WHERE nid = %d', $node->nid));
        $values = array();
        $values['email_template'] = $data->tid;
        $values['confirmation_subject'] = $data->subject;
        $values['confirmation_from_name'] = $data->from_name;
        $values['confirmation_reply_email'] = $data->reply_to_email;
        $values['confirmation_bcc_email'] = $data->bcc_email;
        $values['confirmation_html_email_message'] = $data->html_message;
        $values['confirmation_text_email_message'] = $data->text_message;
      }
      $tid = $values['email_template'];
      $subject = $values['confirmation_subject'];
      $from_name =  $values['confirmation_from_name'];
      $reply_to_email = $values['confirmation_reply_email'];
      $bcc_email = $values['confirmation_bcc_email'];
      $html_body = $values['confirmation_html_email_message'];
      $text_body = $values['confirmation_text_email_message'];
      
      // Futureproof rolling out this feature to existing sites, we can't assume a record will already exist when a donation form
      // is updated.
      if (db_result(db_query('SELECT 1 FROM {fundraiser_confirmations} WHERE nid=%d', $node->nid))) {   
        db_query("UPDATE {fundraiser_confirmations} SET tid = %d, subject = '%s', from_name = '%s', reply_to_email = '%s', bcc_email = '%s', html_message = '%s', text_message = '%s' WHERE nid = %d", $tid, $subject, $from_name, $reply_to_email, $bcc_email, $html_body, $text_body, $node->nid);
      }
      else {
        db_query("INSERT INTO {fundraiser_confirmations} (nid, tid, subject, from_name, reply_to_email, bcc_email, html_message, text_message) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", $node->nid, $tid, $subject, $from_name, $reply_to_email, $bcc_email, $html_body, $text_body);
      }
    }
  }
}

/**
 * Lists available confirmation templates based on user's group membership and other permissions
 */
function email_confirmation_list_templates() {
  global $user;
  $templates = array('0' => ' - select -');
  if (module_exists('og') && variable_get('emaiL_confirmation_og_filter', 0)) {
    //List user's groups
    $group_nids = array();
    $results = db_query('SELECT DISTINCT nid FROM {og_uid} WHERE uid = %d', $user->uid);
    while ($nid = db_result($results)) {
      $group_nids[] = $nid;
    }
    //pull list of template nodes assigned to these groups
    $results = db_query("SELECT n.nid, n.title FROM {node} n INNER JOIN {og_ancestry} oa ON n.nid = oa.nid  WHERE oa.group_nid IN ('%s') AND n.type = 'confirmation_template'", implode(',', $group_nids));

  }
  else {
    $results = db_query("SELECT n.nid, n.title FROM {node} n where type = 'confirmation_template'");
  }
  while ($node = db_fetch_object($results)) {
    $templates[$node->nid] = $node->title;    
  }
  // check any additional perms and build list of additional templates if warranted.
  return $templates;
}


/**
 * #AHAH callback for email template selection form element.
 */
function _email_confirmation_template_ahah() {
 
  module_load_include('inc', 'node', 'node.pages');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  $form = form_get_cache($form_build_id, $form_state);
  
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Disable validation
  $form['#validate'] = NULL;
  $form_state['validate_handlers'] = NULL;
  fundraiser_ahah_helper_disable_validation($form);
  
  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $template_form = $form['fundraiser_settings']['confirmation']['template_wrapper'];
  unset($template_form['#prefix'], $template_form['#suffix']);
 
  $output = theme('status_messages') . drupal_render($template_form);

  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Implements hook_fundraiser_order_success().
 */
function email_confirmation_fundraiser_order_success($order) {

  $settings = db_fetch_object(db_query('SELECT * FROM {fundraiser_confirmations} WHERE nid = %d', arg(1)));
  $template_html = db_result(db_query('SELECT body FROM {node_revisions} nr INNER JOIN {node} n WHERE n.vid = nr.vid AND nr.nid = %d', $settings->tid));
  $template_text = db_result(db_query('SELECT field_confirmation_text_message_value FROM {content_type_confirmation_template} t INNER JOIN {node} n ON n.vid = t.vid WHERE t.nid=%d', $settings->tid));
  
  $message = array();
  $message['from_name'] = $settings->from_name;
  $message['from_address'] = $settings->reply_to_email;
  $message['subject'] = $settings->subject;
  $message['html_body'] = token_replace($template_html, 'order', $order);
  $message['html_body'] = token_replace($message['html_body']);
  $message['text_body'] = token_replace($template_text, 'order', $order);
  $message['text_body'] = token_replace($message['text_body']);
  $message['bcc'] = $settings->bcc_email;

  $sent = drupal_mail('email_confirmation', 'confirmation', $order->primary_email, language_default(), $message);
}

/**
 * Implements hook_mail().
 */
function email_confirmation_mail($key, &$message, $params) {
  
  // To make the HTML email work, implement all our own headers
  $boundary = '----=_NextPart_'.md5(uniqid());
  
  $headers = array(
   'MIME-Version' => '1.0',
   'Content-Type' => 'multipart/alternative; boundary="'.$boundary.'"',
   'Content-Transfer-Encoding' => '8Bit',
   'X-Mailer' => 'Drupal',
  );

  $default_from = $params['from_name'] . ' <' . $params['from_address'] . '>';
  $headers['From'] = $headers['Sender'] =  $headers['Return-Path'] = $headers['Errors-To'] = $default_from;
  
  if (!empty($params->bcc_address)) {
    $headers['Bcc'] = $params['bcc_address'];
  }
  //
  // Now create the message, with an HTML component and a plaintext component
  //

  $body_html = $params['html_body'];
  $body_text = '<html><head></head><body>' . $params['text_body'] . '</body></html>';

  $multi_body  = "

This is a multi-part message in MIME format.

--$boundary
Content-Type: text/plain; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$body_text

--$boundary
Content-Type: text/html; charset=UTF-8; format=flowed; 
Content-Transfer-Encoding: 8bit

$body_html

";

  $message['subject'] = $params['subject'];
  $message['body'][] = $multi_body;
  $message['headers'] = $headers;
}

/**
 * Implements hook_token_list().
 */
function email_confirmation_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'order') {
    $tokens['order']['confirmation-message-text'] = t('The text version of the donation confirmation message.');
    $tokens['order']['confirmation-message-html'] = t('The HTML version of the donation confirmation message.');
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function email_confirmation_token_values($type, $object = NULL) {
  // Limit the replacement to hook invocations that pass a viable order object.
  if ($type == 'order' && $object->order_status == 'in_checkout') {
    $nid = $object->products[0]->nid;
    $data = db_fetch_object(db_query('SELECT html_message, text_message FROM {fundraiser_confirmations} WHERE nid=%d', $nid));
    $values['confirmation-message-text'] = check_plain($data->text_message);
    $values['confirmation-message-html'] = $data->html_message;
    return $values;
  }
}

/**
 * Admin configuration form.
 */
function email_confirmation_admin() {
  $form = array();
  $form['emaiL_confirmation_og_filter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit templates by group.'),
    '#description' => t('Use OG group membership to resitrict available confirmation templates. When this is enabled content editors will only see email templates assigned to groups they are members of when creating or editing donation forms.'),
    '#default_value' => variable_get('emaiL_confirmation_og_filter', 0),
  );
  return system_settings_form($form);
}

/**
 * Page callback for template modal preview.
 * 
 */
function email_confirmation_modal_preview() {
 module_load_include('inc', 'ctools', 'includes/modal');
 $title = 'Template Preview';
 $values = $_POST['template_wrapper'];

 $output = array();
 $output['subject'] = $values['confirmation_subject'];
 $output['email'] = array(
   'from' => '&lt;' . $values['confirmation_from_name'] . '&gt;' . $values['confirmation_reply_email'],
   'bcc' => $values['confirmation_bcc_email'],
 );
 $output['HTML'] = _email_confirmation_preview('html', $values['confirmation_html_email_message'], $values['email_template']);
 $output['text'] = _email_confirmation_preview('text', $values['confirmation_text_email_message'], $values['email_template']);
 $keys = array_keys($output);
 foreach($keys as $key) {
   if (is_array($output[$key])) {
 
     $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
     $subkeys = array_keys($output[$key]);
     foreach ($subkeys as $subkey) {
       $preview .= '<p>' . ucfirst($subkey) . ':&nbsp; ' . $output[$key][$subkey] . '</p>'; 
     }
     $preview .= '</fieldset>';  
   }
    else {
     $preview .= '<fieldset id="field-' . $key . '"><label for="field-' . $key . '" style="font-weight:bold">' . ucfirst($key) . '</label>';
     $preview .= '<div>' . $output[$key] . '</div>';
     $preview .= '</fieldset>';
   }
 }
 
 ctools_modal_render($title, $preview);
}

/**
 * 
 */
function _email_confirmation_preview($op, $message, $nid) {

  $object = _email_confirmation_test_object();
  $output = '';
  switch ($op) {
    case 'html':
      $output = db_result(db_query("SELECT body FROM {node_revisions} nr INNER JOIN {node} n ON n.vid = nr.vid WHERE n.nid = %d", $nid));
      $output = preg_replace('/\[confirmation-message-html\]/', $message, $output); 
      break;
    case 'text':
      $output = db_result(db_query("SELECT ct.field_confirmation_text_value FROM {content_type_confirmation_template} ct INNER JOIN {node} n ON n.vid = ct.vid WHERE ct.nid = %d", $nid));
      $output = preg_replace('/\[confirmation-message-text\]/', $message, $output);
      $output = preg_replace('/\n/', '<br />', $output);
      break;
    default:
      break;
  }
  return token_replace($output, 'order', $object);
}

/**
 * Helper function, generates a bogus order object for use with the template preview.
 */
function _email_confirmation_test_object() {
  $object = new stdClass;
  $object->order_id = 1;
  $object->uid = 1;
  $object->order_status = 'fake';
  $object->order_total = 100;
  $object->product_count = 1;
  $object->primary_email = 's.holmes@example.com';
  $object->delivery_first_name = ''; 
  $object->delivery_last_name = ''; 
  $object->delivery_phone = ''; 
  $object->delivery_company = ''; 
  $object->delivery_street1 = ''; 
  $object->delivery_street2 = ''; 
  $object->delivery_city = ''; 
  $object->delivery_zone = 0;
  $object->delivery_postal_code = ''; 
  $object->delivery_country = 840;
  $object->billing_first_name = 'S.';
  $object->billing_last_name = 'Holmes';
  $object->billing_phone = ''; 
  $object->billing_company = ''; 
  $object->billing_street1 = '221B Baker Street';
  $object->billing_street2 = ''; 
  $object->billing_city = 'Durham';
  $object->billing_zone = '44';
  $object->billing_postal_code = '27703';
  $object->billing_country = 840;
  $object->payment_method = 'credit';
  $object->data = array(
    'cc_data' => ')Ya,e[S1{bqOP.xl&gt;2o6-J1-3@J}w]X{?HX6dT#7w8oa)=$KhBl$UCqD4&amp;W@?WWA&gt;VKcyHbD[&amp;cdVUBtT |nX?8?}XaMYJesDE3smx&gt;8pb}#bXbXH9',
  );

  $object->created = time();
  $object->modified = time();
  $object->host = '127.0.0.1';
  $object->products = array();

  $product = new stdClass;
  $product->order_product_id = 45;
  $product->order_id = 45;
  $product->nid = 6;
  $product->title = 'Fictional Donation Form';
  $product->manufacturer = ''; 
  $product->model = ''; 
  $product->qty = 1;
  $product->cost = 0.00000;
  $product->price = 100.00000;
  $product->weight = 0;
  $product->data = array(
    'shippable' => '', 
    'model' => '',
    'varprice' => 20,
    'module' => 'uc_product',
  );
  $product->order_uid = 1;
  
  $object->products[] = $product;
  unset($product);

  $object->payment_details = array(
    'cc_type' => 'mc',
    'cc_owner' => '',
    'cc_number' => '1111111111111111',
    'cc_start_month' => '', 
    'cc_start_year' => '', 
    'cc_exp_month' => 1, 
    'cc_exp_year' => '2025',
    'cc_issue' => '', 
    'cc_cvv' => '000',
    'cc_bank' => '', 
  );

  $object->line_items = array();

  $line_item = array(
    'line_item_id' => 'subtotal',
    'type' => 'subtotal',
    'title' => 'Subtotal',
    'amount' => 100,
    'weight' => 0,
    'data' => '', 
  );

  $object->line_items[] = $line_item;
  unset($line_item);

  return $object;
}

/**
 * Submit handler for the default group template field.
 */
function email_confirmation_defaults($form, $form_state) {


}

/**
 * Replaces fundraiser_confirmation_settings_form_validate().
 */
function email_confirmation_confirmation_form_validate(&$form, &$form_state) {
  // Ensure the entered redirect URL is valid.
  if ($form_state['values']['redirect'] == 'url') {
    $redirect_url = trim($form_state['values']['redirect_url']);
    if (empty($redirect_url)) {
      form_error($form['confirmation_page']['redirection']['redirect_url'], t('A valid URL is required for custom redirection.'));
    }
    elseif (strpos($redirect_url, 'http') === 0 && !valid_url($redirect_url, TRUE)) {
      form_error($form['confirmation_page']['redirection']['redirect_url'], t('The entered URL is not a valid address.'));
    }
    else {
      form_set_value($form['confirmation_page']['redirection']['redirect_url'], $redirect_url, $form_state);
    }
  }
  elseif ($form_state['values']['redirect'] == 'confirmation') {
    drupal_set_message('set it!');
    form_set_value($form['confirmation_page']['redirection']['redirect_url'], '<confirmation>', $form_state);
  }
  else {
    form_set_value($form['confirmation_page']['redirection']['redirect_url'], '<confirmation>', $form_state);
  }
}