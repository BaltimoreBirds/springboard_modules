<?php
/**
 * @file
 * fundraiser_designations.module
 */

/**
 * Implements hook_fundraiser_field_info().
 *
 * Adds the designation element to the webform.
 */
function fundraiser_designations_fundraiser_field_info() {

  // Donation amounts are handled in a special case.
  $fields['designations'] = array(
    '#title' => t('Designations'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => '_fundraiser_designations_designation_field_create',
    '#display_callback' => '_fundraiser_designations_designation_field_display',
    // Display callback, hide this field if the node isn't a designation node.
  );
  $fields['designations']['designation_box'] = array(
    '#title' => t('Designations'),
    '#type' => 'designations',
    '#required' => 1,
    '#allow_update' => 1,
  );

  $fields['cart_container'] = array(
    '#title' => t('Cart'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => '_fundraiser_designations_designation_field_create',
    '#display_callback' => '_fundraiser_designations_designation_field_display',
    // Display callback, hide this field if the node isn't a designation node.
  );
  $fields['cart_container']['cart'] = array(
    '#title' => t('Cart'),
    '#type' => 'cart',
    '#required' => 1,
    '#allow_update' => 1,
  );

  return $fields;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 *
 * Remove the donation fields, since we don't want them on designation pages.
 */
function fundraiser_designations_fundraiser_field_info_alter(&$info) {

  if (!module_exists('fundraiser_tickets')) {
    $info['amount'] = array(
      '#title' => t('Amount'),
      '#type' => 'hidden',
      '#value' => '',
      '#required' => 1,
      '#extra' => array(
        'description' => '',
        'hidden_type' => 'hidden',
      ),
    );
  }

  $info['donation']['#create_callback'] = '_fundraiser_designations_donation_create';
  $info['donation']['#display_callback'] = '_fundraiser_designations_donation_display';
}

/**
 * Field create callback.
 *
 * Adjsut the type of the recurring page shown, based on fundraiser settings.
 */
function _fundraiser_designations_designation_field_create($fundraiser, $field) {
  // If not a designation page, drop the designation field,
  // drop the recurring field.
  if (!fundraiser_designations_is_designation_type($fundraiser->type)) {
    return FALSE;
  }
  else {
    return $field;
  }
}

/**
 * Field create callback.
 *
 * Adjsut the type of the recurring page shown, based on fundraiser settings.
 */
function _fundraiser_designations_donation_create($fundraiser, $field) {
  // If not a designation page, drop the designation field,
  // drop the recurring field.
  $ticket_type = FALSE;
  if (module_exists('fundraiser_tickets')) {
    $ticket_type = fundraiser_tickets_is_ticket_type($fundraiser->type);
  }
  if (fundraiser_designations_is_designation_type($fundraiser->type) || $ticket_type) {
    return FALSE;
  }
  else {
    return $field;
  }
}


/**
 * Implements hook_webform_component_info().
 */
function fundraiser_designations_webform_component_info() {
  $components = array();
  $components['designations'] = array(
    'label' => t('Designation box'),
    'description' => t('The designation listing box.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'description' => FALSE,
      'default_value' => FALSE,
    ),
    'file' => 'components/designations.inc',
  );
  $components['cart'] = array(
    'label' => t('Fund cart'),
    'description' => t('The designation cart'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'description' => FALSE,
      'default_value' => FALSE,
    ),
    'file' => 'components/cart.inc',
  );
  return $components;
}

/**
 * Page callback for the designations settings management page.
 */
function fundraiser_designations_edit_settings($node) {

  $form = array();

  return drupal_render($form);
}

/**
 * Implements hook_form_alter().
 */
function fundraiser_designations_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_library('system','effects');
  drupal_add_library('system','effects.slide');
  // Do not allow users to muck with defined form keys in component
  // editting form. They're named what they're named for a reason and we need
  // those keys to remain unharmed.
  if ($form_id == 'webform_component_edit_form') {
    $node = node_load($form['nid']['#value']);
    // For donation types ONLY prevent type trigger.
    if (fundraiser_designations_is_designation_type($node->type)) {
      $form_key = $form['form_key']['#default_value'];
      if ($form_key == 'designations') {
        $form['form_key']['#disabled'] = TRUE;
        $form['form_key']['#description'] .= '</br>' . t('This field key is required by Fundraiser and cannot be changed.');
        $form['form_key']['#value'] = $form['form_key']['#default_value'];
      }
    }
  }
}


/**
 * Implements hook_module_implements_alter().
 *
 * Fundraiser_designations is alphabetically loaded prior
 * to fundraiser_sustainers. This undoes that for form_alter hooks.
 */
function fundraiser_designations_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter' || $hook == 'form_alter') {
    $group = $implementations['fundraiser_designations'];
    unset($implementations['fundraiser_designations']);
    $implementations['fundraiser_designations'] = $group;
   }
  if ($hook == 'fundraiser_field_info_alter') {
    $group = $implementations['fundraiser_designations'];
    unset($implementations['fundraiser_designations']);
    $implementations['fundraiser_designations'] = $group;
   }
}


function fundraiser_designations_webform_component_insert($component) {
  $node = node_load($component['nid']);

  if (fundraiser_designations_is_designation_type($node->type)) {
    if ($component['form_key'] == 'recurs_monthly') {
      $component['weight'] = -101;
      $component['pid'] = 0;
      webform_component_update($component);
    }
    if ($component['form_key'] == 'designations') {
      $component['weight'] = -100;
      webform_component_update($component);
    }
    if ($component['form_key'] == 'cart_container') {
      $component['weight'] = -99;
      webform_component_update($component);
    }
  }
}
/**
 * Implements hook_form_alter().
 *
 * Alter designation settings form and add validation callback.
 */
function fundraiser_designations_form_node_form_alter(&$form, &$form_state) {

  if (fundraiser_designations_is_designation_type($form['type']['#value'])) {

    // Don't allow them to tinker with dollar handles or
    // recurring gift settings.
    /*
    $form['fundraiser_settings']['fundraiser_sustainers']['#access']= FALSE;
    $form['fundraiser_settings']['amount_wrapper']['#access'] = FALSE;
    $form['fundraiser_settings']['recurring_amount_wrapper']['#access'] = FALSE;
     */

    // This setting is irrelevant. Hide it.
    // @todo Figure out why fundraiser tickets specifically
    // prohibited "tinker with dollar handles".
    $form['fundraiser_settings']['amount_wrapper']['show_other_amount']['#access'] = FALSE;
    if (arg(0) == 'node' && (arg(2) == 'edit' || arg(1) == 'add')) {
      // Hide all designations fields on the standard node add/edit page.
      foreach (element_children($form) as $child) {
        if (fundraiser_designations_is_designation_field($child)) {
          $form[$child]['#access'] = FALSE;
        }
      }
      $form['#validate'][] = '_fundraiser_designations_form_node_form_validate';
    }
    elseif (arg(0) == 'node' && arg(2) == 'designations') {
      $form['#validate'] = array('_fundraiser_designations_designation_settings_form_validate');
    }
  }
}

/**
 * Validate callback for node form.
 *
 * Make sure recurring billing is disabled on designation forms.
 */
function _fundraiser_designations_form_node_form_validate(&$form, &$form_state) {
  //$form_state['values']['recurring_setting'] = 'never';
}

/**
 * @param $form
 * @param $form_State
 */
function fundraiser_designations_form_commerce_product_ui_product_delete_form_alter(&$form, &$form_State) {
  $pid = arg(3);
  $product = entity_load_single('commerce_product', $pid);
  if (!empty($product->type) && $product->type == 'fundraiser_designation') {
    $form['actions']['cancel']['#href'] = 'springboard/settings/config/designations';
    $in_use = db_query("SELECT fund_id FROM {fd_fund_group_funds} WHERE fund_id = :pid", array(':pid' => $pid))->fetchField();
    if (!empty($in_use)) {
      $form['actions']['submit']['#access'] = FALSE;
      $form['actions']['cancel']['#title'] = 'Go back';
      $form['description']['#markup'] = t('This item is in use on a Donation Form and cannot be deleted.');
      $form['#attached']['js'][] = array(
        'data' => "jQuery(document).ready(function(){jQuery('ul.primary').hide();})",
        'type' => 'inline',
      );
    }
  }
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function fundraiser_designations_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['designation'] = array(
    'type' => 'designation',
    'name' => t('Donation Designation'),
    'description' => t('A funding designation for a portion of a donation.'),
    'product' => TRUE,
    'base' => 'commerce_product_line_item',
  );
  return $line_item_types;
}

/**
 * Implements hook_fundraiser_commerce_generate_line_items().
 *
 * Generate line items for the designation sales and the extra donation.
 * Returns TRUE if line items have been generated. Otherwise, returns FALSE.
 */
function fundraiser_designations_fundraiser_commerce_generate_line_items($donation, $order) {
  if (isset($donation->donation['cart']) && is_array($donation->donation['cart']) && count($donation->donation['cart'])) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($donation->donation['cart'] as $offset => $serialized_value) {
      $form_row = unserialize($serialized_value);
      $fund_object = json_decode(str_replace('&quot;', '"', $form_row['cart']['fund_catcher']));
      foreach ($fund_object as $fund) {
        if (!empty($fund->fundId)) {
          $product_wrapper = entity_metadata_wrapper('commerce_product', commerce_product_load($fund->fundId));
          $line_item = commerce_line_item_new('designation', $order->order_id);
          commerce_product_line_item_populate($line_item, $product_wrapper->value());
          $text = $product_wrapper->title->value();
          $line_item->line_item_label = $text;
          $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $fund->fundAmount * 100;
          $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'][0]['price']['amount'] = $fund->fundAmount * 100;
          commerce_line_item_save($line_item);
          $order_wrapper->commerce_line_items[] = $line_item;
        }
      }
    }

    // Let fundraiser commerce know that we created line items.
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_fundraiser_donation_success().
 */
function fundraiser_designations_fundraiser_donation_success($donation) {
  // Only proceed if this donation is a designated donations.
  if (empty($donation->node) || !fundraiser_designations_is_designation_type($donation->node->type)) {
    return;
  }

  // Load up the commerce order and wrapper.
  $order = commerce_order_load($donation->did);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Ensure we have line items.
  if (!empty($order_wrapper->commerce_line_items)) {
    // Resave the line items to have them sent to the queue and update totals.
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      commerce_line_item_save($line_item_wrapper->value());
    }
  }

}

/**
 * Alter an item before it is added to the queue.
 *
 * @param array $item
 *   Array of values to be added to the queue.
 */
function fundraiser_designations_salesforce_queue_create_item_alter(&$item) {
  // Connect a designation line item to the donation opportunity.
  if ($item['module'] == 'commerce_line_item' && $item['delta'] == 'designation') {
    $line_item = commerce_line_item_load($item['drupal_id']);
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $item['sobject']->fields['Opportunity__c'] = sprintf('[Opportunity:donation:%d]', $line_item->order_id);
  }
}

/**
 * Implements hook_salesforce_mapping_confirm_entity_for_queue().
 *
 * Stop designation line items from syncing till the order has charged.
 */
function fundraiser_designations_salesforce_mapping_confirm_entity_for_queue($entity, $entity_type, $op) {
  // Only bother with commerce entities.
  if ($entity_type != 'commerce_line_item') {
    return NULL;
  }

  $line_item = $entity;
  if ($line_item->type == 'designation' && !empty($line_item->order_id)) {
    $order = commerce_order_load($line_item->order_id);
    if (empty($order->data['commerce_payment_order_paid_in_full_invoked'])) {
      return FALSE;
    }
  }
}

/**
 * Validate callback for node form when in designation settings view.
 */
function _fundraiser_designations_designation_settings_form_validate(&$form, &$form_state) {

}


/**
 * Implements hook_form_alter().
 *
 * Alter content type settings to add "Enable designated donations?" checkbox.
 */
function fundraiser_designations_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {

    $designation_default = variable_get('fundraiser_designations_' . $form['#node_type']->type, FALSE);
    $fundraiser_default = variable_get('fundraiser_' . $form['#node_type']->type, FALSE);
    $form['fundraiser_type']['fundraiser_designations'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable designated donations?'),
      '#default_value' => $designation_default,
      '#description' => t('Enable this checkbox if this content type should provide designated donations.  Fundraiser must be enabled as well.'),
    );

    // Enabling fundraiser designations on a content type is destructive and
    // irreversable. The UI should not allow designations to be enabled on a
    // content type that already has fundraiser or fundraiser tickets enabled,
    // or disabled on a content type that already has
    // fundraiser designations enabled.
    if ($designation_default) {
      $form['fundraiser_type']['fundraiser_designations']['#disabled'] = TRUE;
    }
    if ($fundraiser_default) {
      $form['fundraiser_type']['fundraiser']['#disabled'] = TRUE;
      $form['fundraiser_type']['fundraiser_designations']['#disabled'] = TRUE;
    }

    // If fundraiser tickets is enabled, make sure both
    // options can't be activated.
    if (!empty($form['fundraiser_type']['fundraiser_tickets'])) {
      if (!$designation_default && !$fundraiser_default) {
        $form['fundraiser_type']['fundraiser_designations']['#states']['disabled'][] = array(
          ':input[name="fundraiser_tickets"]' => array('checked' => TRUE),
        );
        $form['fundraiser_type']['fundraiser_tickets']['#states']['disabled'][] = array(
          ':input[name="fundraiser_designations"]' => array('checked' => TRUE),
        );
      }
    }

    $form['#validate'][] = 'fundraiser_designations_form_node_type_form_validate';
  }
}

/**
 * Validation callback for the node type form. Called during form validation.
 */
function fundraiser_designations_form_node_type_form_validate($form, &$form_state) {
  if ($form_state['values']['fundraiser_designations'] && !$form_state['values']['fundraiser']) {
    form_set_error('fundraiser', t('Fundraiser must also be enabled for designated donations content types.'));
  }
}

function fundraiser_designations_form_webform_client_form_alter(&$form, &$form_state) {
  if ($ticket_type = fundraiser_designations_is_designation_type($form['#node']->type)) {
    $designations =& $form['submitted']['designations']['designation_box'];
    foreach (element_children($designations) as $child) {
      if (!empty($form['submitted']['recurs_monthly']) && !empty($form['#node']->recurring_dual_ask_amounts)) {
        if ($form['submitted']['recurs_monthly']['#type'] != 'radios') {
          $designations[$child]['recurring_amounts_' . $child]['#states'] = array(
            'visible' => array(
              'input[name="submitted[recurs_monthly][recurs]"]' => array(
                'checked' => TRUE,
              ),
            ),
          );
          $designations[$child]['default_amounts_' . $child]['#states'] = array(
            'visible' => array(
              'input[name="submitted[recurs_monthly][recurs]"]' => array(
                'checked' => FALSE,
              ),
            ),
          );
        }
        else {
          $designations[$child]['recurring_amounts_' . $child]['#states'] = array(
            'visible' => array(
              'input[name="submitted[recurs_monthly]"]' => array(
                'value' => 'recurs',
              ),
            ),
          );
          $designations[$child]['default_amounts_' . $child]['#states'] = array(
            'visible' => array(
              'input[name="submitted[recurs_monthly]"]' => array(
                '!value' => 'recurs',
              ),
            ),
          );
        }
      }
    }
  }
}


/**
 * Implements hook_node_type_insert().
 */
function fundraiser_designations_node_type_insert($type) {
  if (fundraiser_designations_is_designation_type($type->type)) {
    if (!fundraiser_is_donation_type($type->type)) {
      drupal_set_message(t('Fundraiser must also be enabled for designated donations'), 'error');
    }
    else {
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.fields');
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.product');
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.taxonomy');
      _fundraiser_designations_add_default_fields($type->type);
      _fundraiser_designations_create_fundraiser_designation_product();
      _fundraiser_designations_install_vocab_fd_designation_categories('fundraiser_designation');
    }
  }
}

/**
 * Implements hook_node_type_update().
 */
function fundraiser_designations_node_type_update($type) {
  if (fundraiser_designations_is_designation_type($type->type)) {
    if (!fundraiser_is_donation_type($type->type)) {
      drupal_set_message(t('Fundraiser must also be enabled for designated donations.'), 'error');
    }
    else {
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.fields');
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.product');
      module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.taxonomy');
      _fundraiser_designations_add_default_fields($type->type);
      _fundraiser_designations_create_fundraiser_designation_product();
      _fundraiser_designations_install_vocab_fd_designation_categories('fundraiser_designation');

    }
  }
}

/**
 * Implements hook_node_view().
 */
function fundraiser_designations_node_view($node, $view_mode, $langcode) {
  // If this isn't a fundraiser designation type, ignore it.
  if (fundraiser_designations_is_designation_type($node->type)) {
    if ($view_mode == 'full') {
      // If there are no designations yet, or if we are closed or sold out,
      // figure out what to do with them based on the form settings.
      if (fundraiser_designations_no_designations_added($node)) {
        global $user;
        if ($user->uid) {
          $message = t('The form will not work properly until designations have been created. !link_url.', array('!link_url' => l(t('To add designations, click here'), 'node/' . $node->nid . '/designations/designations')));
          drupal_set_message($message, 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 */
function fundraiser_designations_clone_node_alter(&$node, $context) {
  if (fundraiser_designations_is_designation_type($context['original_node']->type)) {
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_designations_node_update($node) {
  if (!fundraiser_designations_is_designation_type($node->type)) {
    return;
  }
}


/**
 * Implements hook_form_alter().
 *
 * Hide the SKU and weight fields of designations from users.
 */
function fundraiser_designations_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];
  if ($product->type == 'fundraiser_designation') {
  }
}

/**
 * Helper function, determine if this node type supports designated donationss.
 */
function fundraiser_designations_is_designation_type($type) {
  static $fundraiser_designations_types;
  // Cache fundraiser designation content types during page execution.
  if (!isset($fundraiser_designations_types[$type])) {
    $fundraiser_designations_types[$type] = variable_get('fundraiser_designations_' . $type, FALSE);
  }
  return $fundraiser_designations_types[$type];
}

/**
 * Helper function, determine if this node type supports designated donationss.
 */
function fundraiser_designations_get_designation_types() {
  // For all types, check if they are a fundraiser type.
  $types = node_type_get_types();
  $fundraiser_designations_types = [];
  foreach ($types as $type => $type_info) {
    $exists = variable_get('fundraiser_designations_' . $type, FALSE);
    if ($exists) {
      $fundraiser_designations_types[$type] = $exists;
    }
  }
  return $fundraiser_designations_types;
}

/**
 * Helper function, determine if a given field is a designation field.
 */
function fundraiser_designations_is_designation_field($field_name) {
  static $fundraiser_designation_fields;
  // Cache fundraiser designation fields during page execution.
  if (!is_array($fundraiser_designation_fields)) {
    $fundraiser_designation_fields = fundraiser_designations_get_designation_field_keys();
  }
  return in_array($field_name, $fundraiser_designation_fields);
}

/**
 * Helper function, get the field names of the designationing fields.
 */
function fundraiser_designations_get_designation_field_keys() {
  module_load_include('inc', 'fundraiser_designations', 'includes/fundraiser_designations.fields');
  return array_keys(_fundraiser_designations_default_fields_settings(NULL));
}

/**
 * Helper function determine if the form has any designations attached to it.
 */
function fundraiser_designations_no_designations_added($node) {
  // @TODO add this pseudo-field to node_load
  if (isset($node->fd_designation_groups) && empty($node->fd_designation_groups)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_theme().
 */
function fundraiser_designations_theme() {
  $theme = array(
    'fundraiser_designations_bundler_form' => array(
      'render element' => 'form',
      'file' => 'fundraiser_designations.forms.inc',
    ),
    'fundraiser_designations_fund_groups_component' => array(
      'render element' => 'element',
      'file' => 'components/designations.inc',
    ),
    'fundraiser_designations_fund_cart_component' => array(
      'render element' => 'element',
      'file' => 'components/cart.inc',
    ),
  );
  return $theme;
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 *
 * Put the link to the admin page under the springboard/settings/config.
 */
function fundraiser_designations_springboard_admin_admin_menu_items_alter(&$items) {
  $items['admin/springboard/settings']['_children']['admin/springboard/settings/config']['_children']['admin/springboard/settings/config/designations'] = array(
    'link_path' => 'admin/springboard/settings/config/designations',
    'link_title' => t('Fundraiser Designations'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 20,
  );

  $items['admin/springboard/settings']['_children']['admin/springboard/settings/config']['_children']['admin/springboard/taxonomy/fd_designation_categories'] = array(
    'link_path' => 'admin/springboard/taxonomy/fd_designation_categories',
    'link_title' => t('Fundraiser Designation Categories'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 21,
  );
}
/**
 * Implements hook_views_api().
 */
function fundraiser_designations_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'fundraiser_designations') . '/includes/views',
    'template path' => drupal_get_path('module', 'fundraiser_designations') . '/includes/views/templates',
  );
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 */
function fundraiser_designations_springboard_taxonomy_allowed_vocabularies_alter(&$names) {
  $names[] = 'fd_designation_categories';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the settings tab that the organization issues vocab uses.
 */
function fundraiser_designations_form_taxonomy_overview_terms_alter(&$form, &$form_state) {
  if (arg(3) == 'fd_designation_categories') {
    $form['#attached']['js'][] = array(
      'data' => "jQuery(document).ready(function(){var tab = jQuery(\"ul.tabs.primary li a:contains('Settings')\");jQuery(tab).hide();})",
      'type' => 'inline',
    );
  }
}

/**
 * Implements hook_views_pre_render().
 */
function fundraiser_designations_views_pre_render(&$view) {
  if ($view->name == 'fundraiser_designations') {
    $css = drupal_get_path('module', 'fundraiser_designations') . '/css/designation-views.css';
    drupal_add_css($css);
  }
}

/**
 * Implements hook_node_load().
 *
 * Add the group entity references to designation form nodes.
 */
function fundraiser_designations_node_load($nodes, $types) {
  $designation_types = array_keys(fundraiser_designations_get_designation_types());
  if (count(array_intersect($designation_types, $types))) {
    $group_ids = db_query(
      'SELECT entity_id, field_ffg_form_id_target_id FROM {field_data_field_ffg_form_id} WHERE field_ffg_form_id_target_id IN (:nids)',
      array(':nids' => array_keys($nodes)));
    foreach ($group_ids as $group_id) {
      $nodes[$group_id->field_ffg_form_id_target_id]->designation_group_ids[] = $group_id->entity_id;
    }
  }
}
