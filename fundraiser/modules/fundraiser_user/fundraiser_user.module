<?php

/**
 * @file
 * User profile code for fundraiser_webform.
 * THIS CODE DUPLICATES MUCH OF WEBFORM_USER AND SHOULD BE REPLACED WITH IST.
 * Future work on this module should include a merger of these two pieces of code, removing the specialized nature of this module.
 */
 
/**
 * Implements hook_menu().
 */
function fundraiser_user_menu() {
  // Future updates should merge this code with webform_user.
  // Which would eliminate the need for this mapping page.
  $items['node/%node/webform/mapping'] = array(
    'title' => 'User map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_user_mapping_form', 1),
    'access callback' => '_fundraiser_user_mapping_form_access',
    'access arguments' => array(1),
    'weight' => 30,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Menu access callback, returns TRUE if current node is a donation form.
 */
function _fundraiser_user_mapping_form_access($node) {
  return fundraiser_is_donation_type($node->type); // From fundraiser.module.
}

/**
 * Menu callback, user mapping form.
 */
function fundraiser_user_mapping_form($form, &$form_state, $node) {
  $form = array(
    '#tree' => TRUE, // We need tree here because each component is added on cid to an array.
    '#node' => $node,
    'mapping' => array(),
  );

  // Save the node id for later reference.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['info'] = array(
    '#value' => 'This form allows you to map the submitted form values to Drupal user and profile fields. When the ' .
      'donation form is submitted, the user\'s profile will be updated with the values from the form.',
    '#weight' => 0,
  );

  // Gather user profile options.
  $options = array('' => '--Select One--');
  if (module_exists('profile')) {
    $cat_array = profile_user_categories(); // From profile.module
    foreach ($cat_array as $cat) {
      $result = _profile_get_fields($cat['name']); // From profile.module
      foreach( $result as $this_row) {
        $row = (array) $this_row;
        $options['Drupal Profile Fields'][$row['name']] = $row['title'];
      }
    }
  }
  // Add final field, user email address.
  $options['User Fields'] = array(
    'mail' => t("Email Address"),
  );

  // For each component create dropdowns with the profile options.
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] != 'fieldset') {
      $form['mapping']['type'][$cid] = array(
        '#label' => t($component['name'] . " - (" . $component['type'] . ")"),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($node->map[$cid]) ? $node->map[$cid] : '',
      );
    }
  }

  // If there aren't any components let the user know about it.
  if (empty($form['mapping']['type'])) {
    $form['mapping'] = array(
      '#markup' => t('You must add some fields to the webform before you can map them.'),
    );
  }
  else {
    $form['mapping']['type']['#theme'] = 'fundraiser_mapping_options'; //TODO rename the theme function here. Currently lives in fundraiser.theme.inc.
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  }
  return $form;
}

/**
 * Form handler, user mapping form submit.
 */
function fundraiser_user_mapping_form_submit($form, &$form_state) {
  _fundraiser_user_delete_component_map_by_nid($form['#node']->nid);
  foreach ($form_state['values']['mapping']['type'] as $key => $value) {
    if (!empty($value)) {
      $component_map = array('nid' => $form['#node']->nid, 'cid' => $key, 'map_id' => $value);
      _fundraiser_user_create_component_map($component_map);
    }
  }
  drupal_set_message(t('Profile mapping has been saved'));
}

/**
 * Implements hook_fundraiser_get_fundraiser_alter().
 */
function fundraiser_user_fundraiser_get_fundraiser_alter($fundraiser) {
  // Get the user map of values to return for fundraiser to be used by other modules as needed.
  // It's not saved on create or alter, because there's an existing form for that.
  // So no need to glomp our stuff on top of the fundraisers update / create.
  $components = _fundraiser_user_get_component_map_by_nid($fundraiser->nid);
  $map = array();
  foreach($components as $component) {
    $map[$component->cid] = $component->map_id;
  }
  $fundraiser->map = $map;
}

/**
 * Implements hook_fundraiser_donation_form_alter().
 */
function fundraiser_user_fundraiser_donation_form_alter($form, $form_state) {
  $context = $form['#context'];
  // Preload any fields if the user is logged in.
  // Loads profile fields in addition to base user data, and de-couples logged in user object.
  global $user;
  $this_user = user_load($user->uid);
  $node = node_load($form['#node']->nid);
  $components = $node->webform['components'];
  $component_hierarchy = _fundraiser_webform_parse_components($node->nid, $components);

  if (user_is_logged_in()) {
    // Load up any mapped profile fields.
    $map = _fundraiser_user_get_user_map($node->nid);
    foreach ($map as $field_key => $profile_key) {
      $field =& _fundraiser_webform_find_field($form, $component_hierarchy[$field_key]); // From fundraiser_webform.module
      if (empty($field['#default_value'])) {
        if (property_exists($this_user, $profile_key)) {
          switch ($field['#type']) {
            case 'checkboxes':
              $field['#default_value'] = array($this_user->$profile_key);
              break;
            default:
              $field['#default_value'] = $this_user->$profile_key;
          }
        }
      }
    }
  }
  
  // Set default on country drop down from user profile.
  if (isset($component_hierarchy['country'])) {
    $country_field =& _fundraiser_webform_find_field($form, $component_hierarchy['country']); // From fundraiser_webform.module
    // Set default country value from user profile setting if it exists.
    if (isset($this_user->profile_country)) {
      foreach ($context->countries as $country_id => $country) {
        if ($country->country_iso_code_2 == $this_user->profile_country) {
          $country_field['#default_value'] = $country_id;
        }
      }
    }
  }

  // Set default on zone drop down from user profile.
  if (isset($component_hierarchy['state'])) {
    $state_field =& _fundraiser_webform_find_field($form, $component_hierarchy['state']); // From fundraiser_webform.module
    // Set default zone value from user profile setting if it exists.
    if (isset($this_user->profile_state)) {
      foreach ($context->zones as $zone_id => $zone) {
        if ($zone->zone_code == $this_user->profile_state) {
          $state_field['#default_value'] = $zone_id;
        }
      }
    }
    // Reset the selected default value as needed.
    // Setting coutnry above for initial load may have broken the available options.
    $fields = _fundraiser_array_flatten($form_state); // From fundraiser.module.
    // Country/state dependant drop down code
    $available_zones = $context->zones;
    if (array_key_exists('country', $fields)) {
      // Grab the selected country from $form_state, and set default.
      $country_field['#default_value'] = $fields['country'];
      // Filter options down to just the zones available for this country.
      if (isset($context->countries[ $country_field['#default_value'] ])) {
        $available_zones = $context->countries[ $country_field['#default_value'] ]->zones;
      }
    }
    // Given available zones, filter the dropdown to match.
    if (!empty($available_zones)) {
      $new_zone_options = array();
      foreach ($available_zones as $zone_id => $zone) {
        $new_zone_options[$zone_id] = $zone->zone_name;
      }
      $state_field['#options'] = $new_zone_options;
    }
  }
  return $form;
}

/**
 * Implements hook_fundraiser_donation_success().
 * Updates the profile of user that submitted the donation.
 */
function fundraiser_user_fundraiser_donation_success($donation) {
  $uid = $donation->uid;
  $nid = $donation->nid;
  $sid = $donation->sid;
  $context = $donation->context;

  global $user;
  $this_user = user_load($user->uid);
  $map = _fundraiser_user_create_profile_values_map($nid, $sid);

  // If this is Anon, upload the user data from a given uid instead.
  // If this isn't Anon, but the values don't match, use the given.
  if ($this_user->uid == 0) {
    $this_user = user_load($uid);
  }

  // Make sure the profile module is enabled
  if (module_exists('profile')) {
    $cat_array = profile_user_categories(); // From profile.module
    foreach ($cat_array as $cat) {
      $updates = array();
      $results = _fundraiser_user_profile_get_fields($cat['name']);
      foreach ($results as $result) {
        $row = (array) $result;
        if (array_key_exists($row['name'], $map)) {
          $updates[$row['name']] = $map[$row['name']];
        }
      }
      // Save the profile.
      _fundraiser_user_profile_save_profile($updates, $update_user, $cat['name']); //TODO update this name in tests as well.
    }
    // Convert numeric ids to textual values.
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission = webform_get_submission($nid, $sid); // From webform.submissions.inc.
    _fundraiser_user_update_profile_location($submission, $context, $update_user);
  }
  // Update the user. (Any other changes will be kicked off in response to the save.)
  user_save($this_user, array('last_updated' => time()));
}

/**
 * Implements hook_fundraiser_field_info_alter().
 */
function fundraiser_user_fundraiser_field_info_alter($fields) {
  $map_to_map = array(
    'first_name' => 'profile_first_name',
    'last_name' => 'profile_last_name',
    'email' => 'mail',
    'address' => 'profile_address',
    'address_line_2' => 'profile_address_line_2',
    'city' => 'profile_city',
    'zip' => 'profile_zip',
    'country' => 'profile_country',
    'state' => 'profile_state',
  );
  foreach(element_children($fields) as $key) {
    $fields[$key] = _fundraiser_user_fundraiser_field_info_alter($key, $fields[$key], $map_to_map);
  }
  return $fields;
}

/**
 * Handles recursion for fundraiser_sustainers_fundraiser_field_info_alter().
 */
function _fundraiser_user_fundraiser_field_info_alter($field_key, $field, $map) {
  if (isset($map[$field_key])) {
    $field['#profile_map'] = $map[$field_key];
  }
  // Check for children. Recursion occurs here.
  foreach(element_children($field) as $key) {
    $field[$key] = _fundraiser_user_fundraiser_field_info_alter($key, $field[$key], $map);
  }
  return $field;
}

/**
 * Helper function, update location fields for a user, default to the currently loged in user.
 */
function _fundraiser_user_update_profile_location($submission, $context, $update_user = NULL) {
  // Make sure we have a real user.
  if (empty($update_user) || $update_user->uid == 0) {
    return;
  }
  $this_user = user_load($update_user->uid); // Get everything for the user data.

  // Get the ids of the country and state webform components for node.
  $country = _fundraiser_webform_get_component_by_nid_key($submission->nid, 'country'); 
  $state = _fundraiser_webform_get_component_by_nid_key($submission->nid, 'state'); 
  $country_code = $submission->data[$country->cid]['value'][0];
  $state_code = $submission->data[$state->cid]['value'][0];

  $fids = _fundraiser_user_profile_get_location_fields();
  // If we found a country, update the info.
  if ($fids['country']) {
    $country_name = $context->countries[$country_code]->country_iso_code_2;
    _fundraiser_user_profile_update_field($update_user->uid, $fids['country'], $country_name);
  }
  // If we found a zone, update the info.
  if ($fids['state']) {
    $state_name = $context->zones[$state_code]->zone_code;
    _fundraiser_user_profile_update_field($update_user->uid, $fids['state'], $state_name);
  }
}

/**
 * CRUD style DB function for fundraiser_component_map.
 */
function _fundraiser_user_create_component_map($component_map) {
  // Cast donation just in case.
  $component_map = (array) $component_map;
  // Check for old data.
  $component_map_data = FALSE;
  if (isset($component_map['nid']) && isset($component_map['cid'])) {
    $component_map_data = _fundraiser_user_get_component_map_by_nid_cid($component_map['nid'], $component_map['cid']);
  }
  if (!$component_map_data) {
    $record = $component_map;
    drupal_write_record('fundraiser_component_map', $record);
  }
  else {
    _fundraiser_user_update_component_map($component_map);
  }
}

/**
 * CRUD style DB function for fundraiser_component_map.
 */
function _fundraiser_user_get_component_map_by_nid_cid($nid, $cid) {
  return db_query('SELECT * FROM {fundraiser_component_map} ' .
    'WHERE nid = :nid ' .
    'AND cid = :cid',
    array(':nid' => $nid, ':cid' => $cid))->fetchObject();
}

/**
 * CRUD style DB function for fundraiser_component_map.
 */
function _fundraiser_user_update_component_map($component_map) {
  // Cast donation just in case.
  $component_map = (array) $component_map;
  // Check for old data.
  $component_map_data = FALSE;
  if (isset($component_map['nid']) && isset($component_map['cid'])) {
    $component_map_data = _fundraiser_user_get_component_map_by_nid_cid($component_map['nid'], $component_map['cid']);
  }
  if (!$component_map_data) {
    _fundraiser_user_create_component_map($component_map);
  }
  else {
    $record = array_merge((array) $component_map_data, $component_map); 
    // Merge data together so we get everything in the record.
    drupal_write_record('fundraiser_component_map', $component_map, array('nid', 'cid'));
  }
}

/**
 * CRUD style DB function for fundraiser_component_map.
 */
function _fundraiser_user_delete_component_map($nid, $cid) {
  db_delete('fundraiser_component_map')->condition('nid', $nid)->condition('cid', $cid)->execute();
}

/**
 * DB function, get fundraiser component map.
 */
function _fundraiser_user_get_component_map_by_nid($nid) {
  return db_query('SELECT * FROM {fundraiser_component_map} ' .
    'WHERE nid = :nid ',
    array(':nid' => $nid))->fetchAll();
}

/**
 * DB function for fundraiser_component_map.
 */
function _fundraiser_user_delete_component_map_by_nid($nid) {
  db_delete('fundraiser_component_map')->condition('nid', $nid)->execute();
}

/**
 * DB function, creates a map of profile fields with their submitted values.
 */
function _fundraiser_user_create_profile_values_map($nid, $sid) {
  $map = array();
  $results = db_query('SELECT * FROM {fundraiser_component_map} f ' .
    'INNER JOIN {webform_submitted_data} d on d.cid = f.cid ' .
    'WHERE f.nid = :nid and d.sid = :sid',
    array(':nid'=> $nid, ':sid' => $sid));
  foreach ($results as $row) {
    $map[$row->map_id] = $row->data;
  }
  return $map;
}

/**
 * DB function, creates an array to map webform component fields to user profile fields.
 */
function _fundraiser_user_get_user_map($nid) {
  $map = array();
  $results = db_query('SELECT *'.
    'FROM {webform_component} w '.
    'INNER JOIN {fundraiser_component_map} f ON f.cid = w.cid AND f.nid = w.nid '.
    'WHERE f.nid = :nid '.
    'ORDER BY f.cid',
    array(':nid' => $nid)
  );
  foreach ($results as $result) {
    $row = (array) $result;
    $map[$row['form_key']] = $row['map_id'];
  }
  return $map;
}

/**
 * DB function, saves a user profile.
 */
function _fundraiser_user_profile_save_profile(&$edit, &$user, $category) {
  $results = _fundraiser_user_profile_get_fields($category);
  foreach ($results as $field) {
    if (_profile_field_serialize($field->type)) { // From profile.module.
      $edit[$field->name] = serialize($edit[$field->name]);
    }
    // Remove existing profile field and add a new one.
    db_delete('profile_value')->condition('fid', $field->fid)->condition('uid', $user->uid)->execute();
    $profile_values = array('fid' => $field->fid, 'uid' => $user->uid, 'value' => $edit[$field->name]);
    drupal_write_record('profile_value', $profile_values);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}

/**
 * DB function, version of _profile_get_fields that includes hidden profile fields by default.
 */
function _fundraiser_user_profile_get_fields($category) {
  return db_query('SELECT * FROM {profile_field} ' .
   'WHERE category LIKE \':category\' ' .
   'ORDER BY category ASC, weight ASC')->fetchAll();
}

/**
 * DB function, get profile field.
 */
function _fundraiser_user_profile_get_field($uid, $fid) {
  return db_query('SELECT * FROM {profile_value} ' .
   'WHERE uid = :uid ' .
   'AND fid = :fid',
    array(':uid' => $uid, ':fid' => $fid))->fetchObject();
}

/**
 * DB function, update profile field.
 */
function _fundraiser_user_profile_update_field($uid, $fid, $value) {
  $field = _fundraiser_user_profile_get_field($uid, $fid);
  if (!$field) {
    $record = array('fid' => $fid, 'uid' => $uid, 'value' => $value);
    drupal_write_record('profile_value', $record);
  }
  else {
    db_query('UPDATE {profile_value} ' .
     'SET value = :value ' .
     'WHERE uid = :uid ' .
     'AND fid = :fid',
      array(':value' => $value, ':uid' => $uid, ':fid' => $fid));
  }
}

/**
 * DB function, returns a keyed array of location fields or an empty array if there was an error.
 */
function _fundraiser_user_profile_get_location_fields() {
  $results = db_query('SELECT fid, name FROM {profile_field} ' .
   'WHERE name IN (\'profile_country\', \'profile_state\')');
  foreach ($results as $profile_field) {
    if ($profile_field->name == 'profile_country') {
      $country_fid = $profile_field->fid;
    }
    if ($profile_field->name == 'profile_state') {
      $state_fid = $profile_field->fid;
    }
  }
  return array('country' => $country_fid, 'state' => $state_fid);
}