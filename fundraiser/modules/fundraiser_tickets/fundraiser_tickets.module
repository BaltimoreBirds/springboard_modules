<?php
/**
 * @file
 * fundraiser_tickets.module
 */

/**
 * Implements hook_menu().
 */
function fundraiser_tickets_menu() {
  $items = array();

  $items['node/%node/tickets'] = array(
    'title' => 'Tickets',
    'description' => 'Ticket settings',
    'page callback' => 'fundraiser_tickets_edit_settings',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_tickets_manage_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['node/%node/tickets/settings'] = array(
    'title' => 'Settings',
    'description' => 'Ticket settings',
    'page callback' => 'fundraiser_tickets_edit_settings',
    'page arguments' => array(1),
    'access callback' => 'fundraiser_tickets_manage_access',
    'access arguments' => array(1),
    'weight' => 3,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['node/%node/tickets/tickets'] = array(
    'title' => 'Tickets',
    'description' => 'Tickets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_tickets_order_ticket_types_form',1),
    'access callback' => 'fundraiser_tickets_manage_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'fundraiser_tickets.forms.inc',
    'weight' => 4,
  );

  return $items;
}

/**
 * Menu access callback. Ensure node has ticketing enabled and user has node
 * 'update' permission.
 */
function fundraiser_tickets_manage_access($node, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;
  $ticket_types = fundraiser_tickets_get_ticket_types();

  return node_access('update', $node, $account) && $ticket_types[$node->type] == true;
}

/**
 * Implements hook_theme().
 */
function fundraiser_tickets_theme($existing, $type, $theme, $path) {
  return array(
    'fundraiser_tickets_theme_order_ticket_types_form' => array(
      'render element' => 'element'
    ),
    'fundraiser_tickets_webform_table' => array(
      'render element' => 'element',
    ),
    'fundraiser_tickets_warning_indicator' => array(
      'variables' => array('warning_message' => NULL),
    ),
  );
  return $theme;
}

/**
 * Implements hook_fundraiser_field_info().
 *
 * Adds the ticket element to the webform.
 */
function fundraiser_tickets_fundraiser_field_info(){

  // Donation amounts are handled in a special case.
  $fields['tickets'] = array(
    '#title' => t('Tickets'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => '_fundraiser_tickets_ticket_field_create',
    '#display_callback' => '_fundraiser_tickets_ticket_field_display',
    // Display callback, hide this field if the node isn't a ticket node.
  );
  $fields['tickets']['ticket_box'] = array(
    '#title' => t('Tickets'),
    '#type' => 'tickets',
    '#required' => 1,
    '#allow_update' => 1,
  );
  $fields['amount'] = array(
    '#title' => t('Amount'),
    '#type' => 'hidden',
    '#value' => '',
    '#required' => 1,
    '#extra' => array(
      'description' => '',
      'hidden_type' => 'hidden',
    ),
  );
  return $fields;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 *
 * Remove the donation fields, since we don't want them on ticket pages.
 */
function fundraiser_tickets_fundraiser_field_info_alter(&$info){
  $info['donation']['#create_callback'] = '_fundraiser_tickets_donation_create';
  $info['donation']['#display_callback'] = '_fundraiser_tickets_donation_display';
}

/**
 * Field create callback, adjsut the type of the recurring page shown, based on fundraiser settings.
 */
function _fundraiser_tickets_ticket_field_create($fundraiser, $field) {
  // If not a ticket page, drop the ticket field, drop the recurring field.
  if (! fundraiser_tickets_is_ticket_type($fundraiser->type)) {
    return FALSE;
  } else {
    return $field;
  }
}

/**
 * Field create callback, adjsut the type of the recurring page shown, based on fundraiser settings.
 */
function _fundraiser_tickets_donation_create($fundraiser, $field) {
  // If not a ticket page, drop the ticket field, drop the recurring field.
  if (fundraiser_tickets_is_ticket_type($fundraiser->type)) {
     return FALSE;
  } else {
    return $field;
  }
}


/**
 * Implements hook_webform_component_info().
 */
function fundraiser_tickets_webform_component_info() {
  $components = array();
  $components['tickets'] = array(
    'label' => t('Ticket box'),
    'description' => t('The ticket listing box.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'required' => FALSE,
      'description' => FALSE,
      'default_value' => FALSE,
    ),
    'file' => 'components/tickets.inc',
  );
  return $components;
}

/**
 * Page callback for the tickets settings management page.
 */
function fundraiser_tickets_edit_settings($node){

  module_load_include('inc', 'node', 'node.pages');
  $form = node_page_edit($node);

  return drupal_render($form);
}

/**
 * Implements hook_form_alter().
 */
function fundraiser_tickets_form_alter(&$form, &$form_state, $form_id) {

  // Do not allow users to muck with defined form keys in component editting form.
  // They're named what they're named for a reason and we need those keys to remain unharmed.
  if ($form_id == 'webform_component_edit_form') {
    $node = node_load($form['nid']['#value']);
    // For donation types ONLY prevent type trigger.
    if (fundraiser_tickets_is_ticket_type($node->type)) {
       $form_key = $form['form_key']['#default_value'];
      if ($form_key == 'tickets') {
        $form['form_key']['#disabled'] = TRUE;
        $form['form_key']['#description'] .= '</br>' . t('This field key is required by Fundraiser and cannot be changed.');
        $form['form_key']['#value'] = $form['form_key']['#default_value'];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter ticket settings form and add validation callback.
 */
function fundraiser_tickets_form_node_form_alter(&$form, &$form_state) {

  if (fundraiser_tickets_is_ticket_type($form['type']['#value'])){

    // Don't allow them to tinker with dollar handles or recurring gift settings
    $form['fundraiser_settings']['fundraiser_sustainers']['#access'] = FALSE;
    $form['fundraiser_settings']['amount_wrapper']['#access'] = FALSE;

    if (arg(0) == 'node' && (arg(2) == 'edit' || arg(1) == 'add')){
      // Hide all tickets fields on the standard node add/edit page.
      foreach (element_children($form) as $child){
        if (fundraiser_tickets_is_ticket_field($child)){
          $form[$child]['#access'] = FALSE;
        }
      }
      $form['#validate'][] = '_fundraiser_tickets_form_node_form_validate';
    } elseif (arg(0) == 'node' && arg(2) == 'tickets'){
      // Hide all fields that aren't required on the tickets tab
      $required_fields = array('actions','nid','vid','uid','type','option','form_build_id','form_token','form_id','webform');
      foreach (element_children($form) as $child){
        if (! fundraiser_tickets_is_ticket_field($child) && ! in_array($child, $required_fields)){
          $form[$child]['#access'] = FALSE;
        }
      }
      $form['#after_build'][] = '_fundraiser_tickets_ticket_settings_form_organize';
      $form['#validate'] = array('_fundraiser_tickets_ticket_settings_form_validate');
      $form['#submit'] = array();
      unset($form['actions']['preview']);
      unset($form['actions']['delete']);
    }
  }
}

/**
 * Validate callback for node form.
 *
 * Make sure recurring billing is disabled on ticket forms.
 */
function _fundraiser_tickets_form_node_form_validate(&$form, &$form_state) {
  $form_state['values']['recurring_setting'] = 'never';
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function fundraiser_tickets_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['ticket'] = array(
    'type' => 'ticket',
    'name' => t('Ticket'),
    'description' => t('A ticket sale.'),
    'product' => TRUE,
  );
  return $line_item_types;
}

/**
 * Implements hook_fundraiser_donation_validate().
 *
 * Verify we still have enough tickets to fulfill the order
 */
function fundraiser_tickets_fundraiser_donation_validate($form, $form_state){
  if (fundraiser_tickets_is_ticket_type($form['#node']->type)){
    foreach ($form_state['values']['submitted']['tickets']['ticket_box'] as $key => $quantity){
      $product_id = _fundraiser_tickets_get_product_id_from_form_element_name($key);
      if ($product_id && $quantity > 0){
        $product_wrapper = entity_metadata_wrapper('commerce_product', commerce_product_load($product_id));
        $available_tickets = $product_wrapper->fr_tickets_quantity->value() - $product_wrapper->fr_tickets_quantity_sold->value();
        if ($quantity > $available_tickets){
          form_set_error($key, t('Your order could not be completed because only @quantity @type tickets remain.', array('@quantity' => $available_tickets, '@type' => $product_wrapper->title->value())));
        }
      } elseif ($key == 'fundraiser-tickets-extra-donation'){
        $amount = $quantity;
        if ($amount && ! floatval($amount)){
         form_set_error('fundraiser-tickets-extra-donation', t('Additional donation must be a number.'));
        }
      }
    }
  }
}

/**
 * Implements hook_fundraiser_commerce_generate_line_items().
 *
 * Generate line items for the ticket sales and the extra donation.
 * Returns TRUE if line items have been generated. Otherwise, returns FALSE.
 */
function fundraiser_tickets_fundraiser_commerce_generate_line_items($donation, $order){
  if (isset($donation->donation['ticket_box']) && is_array($donation->donation['ticket_box']) && count($donation->donation['ticket_box'])){
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $node_wrapper = entity_metadata_wrapper('node', $donation->node);
    foreach ($donation->donation['ticket_box'] as $offset => $serialized_value){
      $form_row = unserialize($serialized_value);
      list ($key, $quantity) = each($form_row);
      $product_id = _fundraiser_tickets_get_product_id_from_form_element_name($key);
      if ($product_id && $quantity > 0){
        $product_wrapper = entity_metadata_wrapper('commerce_product', commerce_product_load($product_id));
        $line_item = commerce_line_item_new('ticket', $order->order_id);
        $line_item->line_item_label = t('Ticket - ' . $product_wrapper->title->value());
        $line_item->quantity = $quantity;
        $line_item->commerce_unit_price[LANGUAGE_NONE][0] = array(
          'amount' => $product_wrapper->commerce_price->amount->value(),
          'currency_code' => $donation->donation['currency'],
        );
        // Make sure the line item will be included in the update for order total.
        $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data'] = commerce_price_component_add(
          $line_item->commerce_unit_price[LANGUAGE_NONE][0],
          'base_price',
          array(
            'amount' => $product_wrapper->commerce_price->amount->value(),
            'currency_code' => $donation->donation['currency'],
            'data' => array(),
          ),
          TRUE
        );
        commerce_line_item_save($line_item);
        _fundraiser_tickets_update_quantity_sold($product_wrapper, $quantity);
        $order_wrapper->commerce_line_items[] = $line_item;
      } elseif ($key == 'fundraiser-tickets-extra-donation'){
        $amount = $quantity;
        if ($amount > 0){
          $line_item = commerce_line_item_new('donation', $order->order_id);
          $line_item->line_item_label = t('Extra Donation');
          $line_item->quantity = 1;
          $line_item->commerce_unit_price[LANGUAGE_NONE][0] = array(
            'amount' => commerce_currency_decimal_to_amount($amount, $donation->donation['currency']),
            'currency_code' => $donation->donation['currency'],
          );
          // Make sure the line item will be included in the update for order total.
          $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data'] = commerce_price_component_add(
            $line_item->commerce_unit_price[LANGUAGE_NONE][0],
            'base_price',
            array(
              'amount' => commerce_currency_decimal_to_amount($amount, $donation->donation['currency']),
              'currency_code' => $donation->donation['currency'],
              'data' => array(),
            ),
            TRUE
          );
          commerce_line_item_save($line_item);
          $order_wrapper->commerce_line_items[] = $line_item;
        }
      }
    }
    fundraiser_tickets_update_inventory($node_wrapper);
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
* Helper function: parse the product id out of the form element name.
*/
function _fundraiser_tickets_get_product_id_from_form_element_name($name){
  list ($prefix, $product_id) = explode('-',$name);
  if (strstr($prefix, 'product') && is_numeric($product_id)){
    return $product_id;
  } else {
    return NULL;
  }
}

/**
* Helper function: updates the number of tickets sold.
*/
function _fundraiser_tickets_update_quantity_sold($product_wrapper, $quantity){
  $product_wrapper->fr_tickets_quantity_sold->set($product_wrapper->fr_tickets_quantity_sold->value() + $quantity);
  $product_wrapper->save();
}

/**
* Afterbuild function to add fieldsets to the tickets tab
*/
function _fundraiser_tickets_ticket_settings_form_organize($form, $form_state){
    // Create fieldset
    $form['waitlist']  = array(
      '#type' => 'fieldset',
      '#title' => t('Wait List options'),
      '#weight' => '-5'
    );
    $form['waitlist']['fr_tickets_waitlist_form'] = $form['fr_tickets_waitlist_form'];
    $form['waitlist']['fr_tickets_waitlist_soldout'] = $form['fr_tickets_waitlist_soldout'];
    $form['waitlist']['fr_tickets_waitlist_closed'] = $form['fr_tickets_waitlist_closed'];
    unset($form['fr_tickets_waitlist_form']);
    unset($form['fr_tickets_waitlist_soldout']);
    unset($form['fr_tickets_waitlist_closed']);
    // These two fields seem to be redundant, so for now I am hiding them.
    // TODO: Check where we want them.  If not, drop them completely.
    $form['waitlist']['fr_tickets_waitlist_soldout']['#access'] = FALSE;
    $form['waitlist']['fr_tickets_waitlist_closed']['#access']  = FALSE;


    $form['closed']  = array(
      '#type' => 'fieldset',
      '#title' => t('Close settings'),
      '#weight' => '-3'
    );
    $form['closed']['fr_tickets_closed_is_closed'] = $form['fr_tickets_closed_is_closed'];
    $form['closed']['fr_tickets_closed_close_date'] = $form['fr_tickets_closed_close_date'];
    $form['closed']['fr_tickets_closed_options'] = $form['fr_tickets_closed_options'];

    $form['closed']['fr_tickets_closed_redirect'] = $form['fr_tickets_closed_redirect'];
    $form['closed']['fr_tickets_closed_redirect']['#states'] = array(
      'visible' => array(
        ':input[name="fr_tickets_closed_options[und]"]' => array('value' => 'redirect'),
      ),
    );

    $form['closed']['fr_tickets_closed_message'] = $form['fr_tickets_closed_message'];
    $form['closed']['fr_tickets_closed_message']['#states'] = array(
      'visible' => array(
        ':input[name="fr_tickets_closed_options[und]"]' => array('value' => 'message'),
      ),
    );

    unset($form['fr_tickets_closed_is_closed']);
    unset($form['fr_tickets_closed_close_date']);
    unset($form['fr_tickets_closed_options']);
    unset($form['fr_tickets_closed_redirect']);
    unset($form['fr_tickets_closed_message']);

    $form['soldout']  = array(
      '#type' => 'fieldset',
      '#title' => t('Sell out settings'),
      '#weight' => '-1'
    );
    $form['soldout']['fr_tickets_soldout_options'] = $form['fr_tickets_soldout_options'];

    $form['soldout']['fr_tickets_soldout_redirect'] = $form['fr_tickets_soldout_redirect'];
    $form['soldout']['fr_tickets_soldout_redirect']['#states'] = array(
      'visible' => array(
        ':input[name="fr_tickets_soldout_options[und]"]' => array('value' => 'redirect'),
      ),
    );

    $form['soldout']['fr_tickets_soldout_message'] = $form['fr_tickets_soldout_message'];
    $form['soldout']['fr_tickets_soldout_message']['#states'] = array(
      'visible' => array(
        ':input[name="fr_tickets_soldout_options[und]"]' => array('value' => 'message'),
      ),
    );

    unset($form['fr_tickets_soldout_options']);
    unset($form['fr_tickets_soldout_redirect']);
    unset($form['fr_tickets_soldout_message']);

    $form['donation']  = array(
      '#type' => 'fieldset',
      '#title' => t('Donation add-on'),
      '#weight' => '1'
    );
    $form['donation']['fr_tickets_donation_donation'] = $form['fr_tickets_donation_donation'];
    unset($form['fr_tickets_donation_donation']);

    // These fields are managed programmatically.
    unset($form['fr_tickets_inventory_initial']);
    unset($form['fr_tickets_inventory_available']);
    unset($form['fr_tickets_inventory_purchased']);

    return $form;
}


/**
 * Validate callback for node form when in ticket settings view.
 *
 * Verify that redirect URLS are valid. Cribbed from menu module.
 */
function _fundraiser_tickets_ticket_settings_form_validate(&$form, &$form_state) {

  if ($form_state['values']['fr_tickets_closed_options'][LANGUAGE_NONE][0]['value'] == 'redirect'){
    $closed_redirect = $form_state['values']['fr_tickets_closed_redirect'][LANGUAGE_NONE][0]['value'];
    if (!trim($closed_redirect) || !drupal_valid_path($closed_redirect, TRUE)) {
      form_set_error('fr_tickets_closed_redirect', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $closed_redirect)));
    }
  }

  if ($form_state['values']['fr_tickets_soldout_options'][LANGUAGE_NONE][0]['value'] == 'redirect'){
    $soldout_redirect = $form_state['values']['fr_tickets_soldout_redirect'][LANGUAGE_NONE][0]['value'];
    if (!trim($soldout_redirect) || !drupal_valid_path($soldout_redirect, TRUE)) {
      form_set_error('fr_tickets_soldout_redirect', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $soldout_redirect)));
    }
  }
}


/**
 * Implements hook_form_alter().
 *
 * Alter content type settings to add "Enable ticketed events?" checkbox.
 */
function fundraiser_tickets_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {
    $form['fundraiser_type']['fundraiser_tickets'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable ticketed events?'),
      '#default_value' => variable_get('fundraiser_tickets_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if this content type should provide ticketed event sales.  Fundraiser must be enabled as well.'),
    );
    $form['#validate'][] = 'fundraiser_tickets_form_node_type_form_validate';
  }
}

/**
 * Validation callback for the node type form. Called during form validation.
 */
function fundraiser_tickets_form_node_type_form_validate($form, &$form_state){
  if ($form_state['values']['fundraiser_tickets'] && ! $form_state['values']['fundraiser']){
    form_set_error('fundraiser', t('Fundraiser must also be enabled for ticketed event content types.'));
  }
}

/**
 * Implements hook_node_type_insert
 */
function fundraiser_tickets_node_type_insert($type) {
  if (fundraiser_tickets_is_ticket_type($type->type)){
    if (! fundraiser_is_donation_type($type->type)){
      drupal_set_message(t('Fundraiser must also be enabled for ticketed event sales.'), 'error');
    } else {
      module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.fields');
      module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.product');
      _fundraiser_tickets_add_default_fields($type->type);
      _fundraiser_tickets_create_fundraiser_ticket_product();
    }
  }
}

/**
 * Implements hook_node_type_update
 */
function fundraiser_tickets_node_type_update($type) {
  if (fundraiser_tickets_is_ticket_type($type->type)){
    if (! fundraiser_is_donation_type($type->type)){
      drupal_set_message(t('Fundraiser must also be enabled for ticketed event sales.'), 'error');
    } else {
      module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.fields');
      module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.product');
      _fundraiser_tickets_add_default_fields($type->type);
      _fundraiser_tickets_create_fundraiser_ticket_product();
    }
  }
}

/**
 * Implements hook_node_view().
 */
function fundraiser_tickets_node_view($node, $view_mode, $langcode) {
  // If this isn't a fundraiser ticket type, ignore it.
  if (fundraiser_tickets_is_ticket_type($node->type)) {
    if ($view_mode == 'full') {

      // If we are closed or sold out, figure out what to do with them based
      // on the form settings.
      if(fundraiser_tickets_is_closed($node)){
        $node_wrapper = entity_metadata_wrapper('node', $node);

        switch($node_wrapper->fr_tickets_closed_options->value()){
          case 'message':
            $message = $node_wrapper->fr_tickets_closed_message->value();
            if (!empty($message)) {
              drupal_set_message($node_wrapper->fr_tickets_closed_message->value->value(array('sanitize' => TRUE)));
            }
            break;

          case 'redirect':
            drupal_goto($node_wrapper->fr_tickets_closed_redirect->value());

          case 'form':
            if (!empty($node_wrapper->value()->fr_tickets_waitlist_form)) {
              drupal_goto('node/' . $node_wrapper->fr_tickets_waitlist_form->value()->nid);
            }
            break;

          default:
            drupal_set_message(t('This form is closed.'));
        }
      }
      elseif(fundraiser_tickets_is_sold_out($node)){
        $node_wrapper = entity_metadata_wrapper('node', $node);

        switch($node_wrapper->fr_tickets_soldout_options->value()){

          case 'message':
            $message = $node_wrapper->fr_tickets_soldout_message->value();
            if (!empty($message)) {
              drupal_set_message($node_wrapper->fr_tickets_soldout_message->value->value(array('sanitize' => TRUE)));
            }
            break;

          case 'redirect':
            drupal_goto($node_wrapper->fr_tickets_soldout_redirect->value());

          case 'form':
            if (!empty($node_wrapper->value()->fr_tickets_waitlist_form)) {
              drupal_goto('node/' . $node_wrapper->fr_tickets_waitlist_form->value()->nid);
            }
            break;

          default:
            drupal_set_message(t('This form is sold out.'));
        }
      }
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 */
function fundraiser_tickets_clone_node_alter(&$node, $context) {
  if (fundraiser_tickets_is_ticket_type($context['original_node']->type)) {
    // We want to associated cloned pages with new products
    //  and reset the sold ticket count.
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $ticket_types = $node_wrapper->fr_tickets_ticket_types->value();
    if (is_array($ticket_types)){
      $new_ticket_types = array();
      foreach ($ticket_types as $offset => $ticket_type){
        $new_ticket_type = clone $ticket_type;
        // Product SKUs need to be unique and can be no longer than 255 characters.
        // We don't know the nid of the new node yet, so I am using time() and
        // a random number to generate a unique SKU.
        if (strlen($new_ticket_type->sku > 220)){
          $new_ticket_type->sku = substr($new_ticket_type->sku, 0, 220);
        }
        $new_ticket_type->sku .= '-clone-' . time() . sprintf('%04d',rand(1,1000));
        $new_ticket_type->product_id = FALSE;
        $new_ticket_type->revision_id = FALSE;
        $new_ticket_type->is_new = TRUE;
        $new_ticket_type->fr_tickets_quantity_sold[LANGUAGE_NONE][0] = 0;
        commerce_product_save($new_ticket_type);
        $new_ticket_types[] = $new_ticket_type;
      }
      $node_wrapper->fr_tickets_ticket_types->set($new_ticket_types);
    }
  }
}


/**
 * Implements hook_form_alter().
 *
 * Hide the SKU and weight fields of tickets from users.
 */
function fundraiser_tickets_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];
  if ($product->type == 'fundraiser_ticket'){
    $form['sku']['#access'] = FALSE;
    $form['fr_tickets_weight']['#access'] = FALSE;
    $form['fr_tickets_quantity_sold']['#access'] = FALSE;
    $form['#validate'][] = 'fundraiser_tickets_form_commerce_product_ui_product_form_validate';
    unset($form['actions']['save_continue']);
  }
}

/**
 * Validation callback for the commerce product form.
 *
 * Generate a SKU and weight setting for new products
 */
function fundraiser_tickets_form_commerce_product_ui_product_form_validate($form, &$form_state){
  $product = $form_state['commerce_product'];
  if ($product->type == 'fundraiser_ticket'){

    $form_state['values']['fr_tickets_quantity'][LANGUAGE_NONE][0]['value'] = intval($form_state['values']['fr_tickets_quantity'][LANGUAGE_NONE][0]['value']);
    $form_state['values']['fr_tickets_threshold'][LANGUAGE_NONE][0]['value'] = intval($form_state['values']['fr_tickets_threshold'][LANGUAGE_NONE][0]['value']);

    if (! $form_state['values']['fr_tickets_quantity'][LANGUAGE_NONE][0]['value']){
      form_set_error('fr_tickets_quantity', t('Quantity must be numeric.'));
    }
    if (! $form_state['values']['sku']){
      $destination = drupal_get_destination();
      preg_match('/node\/(\\d+)\/tickets\/tickets/' , $destination['destination'], $matches);
      if ($matches[1]){
        $node_wrapper = entity_metadata_wrapper('node', $node = node_load($matches[1]));
      }
      $form_state['values']['sku']    = 'ticket-' . $node_wrapper->nid->value() . '-' . (count($node_wrapper->fr_tickets_ticket_types->value()) + 1);
      $form_state['values']['fr_tickets_weight'][$form_state['values']['language']][0]['value'] = count($node_wrapper->fr_tickets_ticket_types->value()) + 1;
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Save an entity reference associating ticket products with the pages they are sold on.
 * Also update the total available tickets on the associated ticket page node.
 */
function fundraiser_tickets_entity_insert($entity, $type) {
  if ($type == 'commerce_product' && $entity->type =='fundraiser_ticket'){
    $destination = drupal_get_destination();
    preg_match('/node\/(\\d+)\/tickets\/tickets/' , $destination['destination'], $matches);
    if (isset($matches[1])){
      $node_wrapper = entity_metadata_wrapper('node', node_load($matches[1]));
      $node_wrapper->fr_tickets_ticket_types[] = $entity->product_id;
      $node_wrapper->save();
      fundraiser_tickets_update_inventory($node_wrapper);
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Update the total available tickets available on the associated ticket page node.
 */
function fundraiser_tickets_entity_update($entity, $type) {
  if ($type == 'commerce_product' && $entity->type =='fundraiser_ticket'){
    $destination = drupal_get_destination();
    preg_match('/node\/(\\d+)\/tickets\/tickets/' , $destination['destination'], $matches);
    if (isset($matches[1])){
      $node_wrapper = entity_metadata_wrapper('node', node_load($matches[1]));
      fundraiser_tickets_update_inventory($node_wrapper);
    }
  }
}

/**
 * Update the ticket level numbers that are saved in fields on the node.
 */
function fundraiser_tickets_update_inventory($node_wrapper){
  $ticket_types = $node_wrapper->fr_tickets_ticket_types->value();
  if (is_array($ticket_types)){
    $inventory_initial = 0;
    $inventory_purchased = 0;
    foreach ($ticket_types as $offset => $ticket_level){
      $ticket_level_wrapper = entity_metadata_wrapper('commerce_product', $ticket_level);
      $inventory_initial   += $ticket_level_wrapper->fr_tickets_quantity->value();
      $inventory_purchased += $ticket_level_wrapper->fr_tickets_quantity_sold->value();
    }
    $node_wrapper->fr_tickets_inventory_initial->set($inventory_initial);
    $node_wrapper->fr_tickets_inventory_purchased->set($inventory_purchased);
    $node_wrapper->fr_tickets_inventory_available->set($inventory_initial - $inventory_purchased);
    $node_wrapper->save();
  }
}

/**
 * Helper function, determine if this node type supports ticketed events.
 */
function fundraiser_tickets_is_ticket_type($type) {
  static $fundraiser_tickets_types;
  // Cache fundraiser ticket content types during page execution.
  if (!isset($fundraiser_tickets_types[$type])) {
    $fundraiser_tickets_types[$type] = variable_get('fundraiser_tickets_' . $type, FALSE);
  }
  return $fundraiser_tickets_types[$type];
}

/**
 * Helper function, determine if this node type supports ticketed events.
 */
function fundraiser_tickets_get_ticket_types() {
  // For all types, check if they are a fundraiser type.
  $types = node_type_get_types();
  foreach ($types as $type => $type_info) {
    $fundraiser_tickets_types[$type] = variable_get('fundraiser_tickets_' . $type, FALSE);
  }
  return $fundraiser_tickets_types;
}

/**
 * Helper function, determine if a given field is a ticketing field.
 */
function fundraiser_tickets_is_ticket_field($field_name) {
  static $fundraiser_ticket_fields;
  // Cache fundraiser ticket fields during page execution.
  if (!is_array($fundraiser_ticket_fields)) {
    $fundraiser_ticket_fields = fundraiser_tickets_get_ticket_field_keys();
  }
  return in_array($field_name, $fundraiser_ticket_fields);
}

/**
 * Helper function, get the field names of the ticketing fields.
 */
function fundraiser_tickets_get_ticket_field_keys(){
  module_load_include('inc', 'fundraiser_tickets', 'includes/fundraiser_tickets.fields');
  return array_keys(_fundraiser_tickets_default_fields_settings(NULL));
}

/**
 * Helper function, determine if a given ticket page is closed.
 */
function fundraiser_tickets_is_closed($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  if ($node_wrapper->fr_tickets_closed_is_closed->value() == TRUE || ($node_wrapper->fr_tickets_closed_close_date->value() !== NULL && $node_wrapper->fr_tickets_closed_close_date->value() < time())){
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Helper function, determine if all tickets for a given ticket page are sold.
 */
function fundraiser_tickets_is_sold_out($node) {
  $sold_out = TRUE;
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $ticket_types = $node_wrapper->fr_tickets_ticket_types->value();
  if (is_array($ticket_types)){
    foreach ($ticket_types as $offset => $ticket_level){
      $product_wrapper = entity_metadata_wrapper('commerce_product', $ticket_level);
      if ($product_wrapper->status->value() == 1 && $product_wrapper->fr_tickets_quantity->value() > $product_wrapper->fr_tickets_quantity_sold->value()){
        return FALSE;
      }
    }
  }
  return $sold_out;
}
