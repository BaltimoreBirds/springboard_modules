<?php
/**
 * @file
 * Code for Fundraiser Sustainers Upgrade.
 */




/**
 * Implements hook_module_implements_alter().
 *
 * Springboard admin module only allows webform user forms to be
 * displayed in admin pages, and the alter hook that allows additional form types to be added
 * also overwrites any attempts to actually use it, unless you modify the order.
 */
function fundraiser_sustainers_upgrade_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'springboard_admin_form_page_types_alter') {
    $group = $implementations['fundraiser_sustainers_upgrade'];
    unset($implementations['fundraiser_sustainers_upgrade']);
    $implementations['fundraiser_sustainers_upgrade'] = $group;
  }
}

/**
 * Implements hook_springboard_admin_form_page_types_alter().
 *
 * See comment in fundraiser_sustainers_upgrade_module_implements_alter().
 */
function fundraiser_sustainers_upgrade_springboard_admin_form_page_types_alter(&$display_types, $springboard_type) {
  $types = node_type_get_types();
  $display_types['sustainers_upgrade_form'] = $types['sustainers_upgrade_form'];
}

/**
 * Implements hook_springboard_views_springboard_dashboard_panes_alter().
 *
 * Springboard admin excludes non-webform user forms from display. Add our form here.
 */
function fundraiser_sustainers_upgrade_springboard_views_springboard_dashboard_panes_alter(&$webform_types) {
  $webform_types[] = 'sustainers_upgrade_form';
}

/**
 * Implements hook_views_prerender().
 *
 * Springboard admin module expects there to be a webform_user_internal_name
 * field on your node. Sustainer upgrade does have that, so we populate the view
 * result with a different field's value.
 */
function fundraiser_sustainers_upgrade_views_pre_render(&$view) {
  if ($view->name =='sbv_forms') {
    foreach ($view->result as $key => $result) {
      if ($result->node_type == 'sustainers_upgrade_form') {
        $node = node_load($result->nid);
        $field = field_get_items('node', $node, 'field_sustainers_upgrade_name');
        if (!empty($field[0]) && isset($view->result[$key]->field_field_webform_user_internal_name)) {
          $value = field_view_value('node', $node, 'field_sustainers_upgrade_name', $field[0]);
          $view->result[$key]->field_field_webform_user_internal_name[0]['rendered']['#markup'] = $value['#markup'];
          $view->result[$key]->field_field_webform_user_internal_name[0]['rendered']['#access'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add our settings to fundraiser sustainer settings form.
 */
function fundraiser_sustainers_upgrade_form_fundraiser_admin_settings_alter(&$form, &$form_state) {
  $form['fundraiser_sustainers']['upgrade'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fundraiser Sustainers Upgrade'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['fundraiser_sustainers']['upgrade']['fundraiser_sustainers_upgrade_default_form'] = array(
    '#title' => t('Default sustainers upgrade form'),
    '#description' => t('Enter the node ID of the default form. If a request is missing a node ID, this form will be selected.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('fundraiser_sustainers_upgrade_default_form', ''),
  );
}

/**
 * Implements hook_node_view().
 */
function fundraiser_sustainers_upgrade_node_view($node) {
  $_SESSION['springboard_hmac'] = array();
  $_SESSION['springboard_hmac']['uid'] = 1;
  $_SESSION['springboard_hmac']['did'] = 20;
  $_SESSION['springboard_hmac']['upgrade_amount'] = 20;
  $_SESSION['springboard_hmac']['timestamp'] = time();
}

/**
 * Implements hook_page_delivery_callback_alter().
 *
 * Redirect to a default upgrade form if node ID is missing.
 */
function fundraiser_sustainers_upgrade_page_delivery_callback_alter(&$callback) {
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'fundraiser_sustainers_upgrade_deliver_html_page';
  }
}

/**
 * Page delivery callback for upgrade form 404's.
 *
 * @param $page_callback_result
 */
function fundraiser_sustainers_upgrade_deliver_html_page($page_callback_result) {
  $upgrade = FALSE;
  if (!empty($_GET['upgrade_redirect'])) {
    $upgrade = TRUE;
  }
  if ($page_callback_result == MENU_NOT_FOUND && $upgrade) {
    $nid = variable_get('fundraiser_sustainers_upgrade_default_form', '');
    drupal_goto('node/' . $nid);
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}


/**
 * Implements hook_token_info().
 *
 * Define the sustainer upgrade name/cancel token.
 */
function fundraiser_sustainers_upgrade_token_info() {
  $types['sustainer_upgrade'] = array(
    'name' => t("Sustainer Upgrades"),
    'description' => t("Tokens for sustainer upgrades."),
  );

  $tokens['name_or_signout'] = array(
    'name' => t("Sustainer name and cancel link"),
    'description' => 'Displays the sustainers first name and a cancel link',
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'sustainer_upgrade' => $tokens,
    ),
  );
}


/**
 * Implements hook_tokens().
 */
function fundraiser_sustainers_upgrade_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'sustainer_upgrade') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name_or_signout':
          if (!empty($_SESSION['springboard_hmac']['uid'])) {
            $value ='';
            $account = user_load(1);
            $first_name = field_get_items('user', $account, 'sbp_first_name');
            if (!empty($first_name[0])) {
              $value = field_view_value('user', $account, 'sbp_first_name', $first_name[0]);
              $value = $value['#markup'];
            }
            $replacements[$original] = $value . " " . l("I'm Not " . $value, 'sustainer-upgrade/cancel');
          }
          break;
      }
    }
  }
  return $replacements;
}
