<?php
/**
 * @file
 * Code for Fundraiser Sustainers Upgrade.
 */

/**
 * Implements hook_module_implements_alter().
 *
 * Springboard admin module only allows webform user forms to be
 * displayed in admin pages, and the alter hook that allows additional form types to be added
 * also overwrites any attempts to actually use it, unless you modify the order.
 */
function fundraiser_sustainers_upgrade_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'springboard_admin_form_page_types_alter') {
    $group = $implementations['fundraiser_sustainers_upgrade'];
    unset($implementations['fundraiser_sustainers_upgrade']);
    $implementations['fundraiser_sustainers_upgrade'] = $group;
  }
}

/**
 * Implements hook_springboard_admin_form_page_types_alter().
 *
 * See comment in fundraiser_sustainers_upgrade_module_implements_alter().
 */
function fundraiser_sustainers_upgrade_springboard_admin_form_page_types_alter(&$display_types, $springboard_type) {
  $types = node_type_get_types();
  $display_types['sustainers_upgrade_form'] = $types['sustainers_upgrade_form'];
}

/**
 * Implements hook_springboard_views_springboard_dashboard_panes_alter().
 *
 * Springboard admin excludes non-webform user forms from display. Add our form here.
 */
function fundraiser_sustainers_upgrade_springboard_views_springboard_dashboard_panes_alter(&$webform_types) {
  $webform_types[] = 'sustainers_upgrade_form';
}

/**
 * Implements hook_views_prerender().
 *
 * Springboard admin module expects there to be a webform_user_internal_name
 * field on your node. Sustainer upgrade does have that, so we populate the view
 * result with a different field's value.
 */
function fundraiser_sustainers_upgrade_views_pre_render(&$view) {
  if ($view->name =='sbv_forms') {
    foreach ($view->result as $key => $result) {
      if ($result->node_type == 'sustainers_upgrade_form') {
        $node = node_load($result->nid);
        $field = field_get_items('node', $node, 'field_sustainers_upgrade_name');
        if (!empty($field[0]) && isset($view->result[$key]->field_field_webform_user_internal_name)) {
          $value = field_view_value('node', $node, 'field_sustainers_upgrade_name', $field[0]);
          $view->result[$key]->field_field_webform_user_internal_name[0]['rendered']['#markup'] = $value['#markup'];
          $view->result[$key]->field_field_webform_user_internal_name[0]['rendered']['#access'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add our settings to fundraiser sustainer settings form.
 */
function fundraiser_sustainers_upgrade_form_fundraiser_admin_settings_alter(&$form, &$form_state) {
  $form['fundraiser_sustainers']['upgrade'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fundraiser Sustainers Upgrade'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['fundraiser_sustainers']['upgrade']['fundraiser_sustainers_upgrade_default_form'] = array(
    '#title' => t('Default sustainers upgrade form'),
    '#description' => t('Enter the node ID of the default form. If a request is missing a node ID, this form will be selected.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('fundraiser_sustainers_upgrade_default_form', ''),
  );
}

/**
 * Implements hook_node_view().
 *
 * Show/Hide the default failure message and failure reason based on
 * donation status result.
 */
function fundraiser_sustainers_upgrade_node_view($node) {

  $node->content['field_sustainers_upgrade_fail'][0]['#access'] = FALSE;
  $payload = fundraiser_sustainers_upgrade_get_session_payload();

  if (!empty($payload)) {
    $status = fundraiser_sustainers_upgrade_check_donation_status($payload);
  }
  else {
    $status = t('No valid session');
  }

  if (empty($payload) || (empty($status['status']) || $status['status'] != 'valid')) {
    $node->content['field_sustainers_upgrade_fail'][0]['#access'] = TRUE;
    drupal_set_message($status['status'], 'warning');
  }
}

/**
 * Implements hook_webform_client_form_alter().
 *
 * Load the donation object and recurring array into the form if valid session
 * info is found. Hide the submit button if it isn't.
 */
function fundraiser_sustainers_form_webform_client_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['#node']) && $form['#node']->type == 'sustainers_upgrade_form') {
    $payload = fundraiser_sustainers_upgrade_get_session_payload();
    if (!empty($payload['did'])) {
      $status = fundraiser_sustainers_upgrade_check_donation_status($payload);
    }
    if (!empty($status['status']) && $status['status'] == 'valid') {
      $form['#submit'][] = 'fundraiser_sustainers_upgrade_form_submit';
      $form['payload'] = array(
        '#type' => 'value',
        '#value' => $payload,
      );
      $form['donation'] = array(
        '#type' => 'value',
        '#value' => $status['donation'],
      );
      $form['recurring'] = array(
        '#type' => 'value',
        '#value' => $status['recurring'],
      );
    }
    else {
      $form['actions']['#access'] = FALSE;
    }
  }
}


/**
 * A validation helper.
 *
 * Get the donation object and recurring array, and validate it's eligibility
 * for an upgrade.
 *
 * @param $payload
 * @return array
 */
function fundraiser_sustainers_upgrade_check_donation_status($payload) {
  $status = &drupal_static(__FUNCTION__);
  if (!isset($status)) {
    $donation = fundraiser_donation_get_donation($payload['did']);
    $min_amount = isset($donation->node->minimum_donation_amount) ? $donation->node->minimum_donation_amount : 0;
    $recurring = _fundraiser_sustainers_get_donations_recurr_remaining($payload['did']);
    $message = fundraiser_sustainers_upgrade_get_status_message($recurring, $donation, $payload, $min_amount);
    $status = array('status' => $message, 'donation' => $donation, 'recurring' => $recurring);
  }
  return $status;
}


/**
 * Get the appropriate status messages.
 *
 * @param $recurring
 * @param $donation
 * @param $payload
 * @param $min_amount
 * @return string
 */
function fundraiser_sustainers_upgrade_get_status_message($recurring, $donation, $payload, $min_amount) {

  $next_recurring_amount = $recurring[0]->amount;
  $info = _fundraiser_get_donation_gateway($donation->did);
  $node_currency = fundraiser_get_currency_from_node($donation->node);
  $formatted_minimum = commerce_currency_format($min_amount, $node_currency['code'], NULL, FALSE);

  $messages = array();

  if (!_fundraiser_sustainers_supports_recurring($info['allow_recurring'], $donation->donation['payment_method'])) {
    $messages[] = t('The gateway does not support recurring donations.');
  }
  elseif (empty($donation->recurring)) {
    $messages[] = t('Not a recurring donation.');
  }
  elseif (empty($recurring)) {
    $messages[] = t('No recurring donations remaining.');
  }
  else {
    if ($recurring[0]->master_did != $payload['did']) {
      $messages[] = t('Incorrect donation ID.');
    }
    if (!is_numeric($payload['amount'])) {
      $messages[] = t('Donation amount must be a valid number.');
    }
    if ($payload['amount'] < $min_amount) {
      $messages[] = t('Donation amount must be greater than @minimum.', array('@minimum' => $formatted_minimum));
    }
    if ($payload['amount'] <= $next_recurring_amount) {
      $messages[] = t('The upgrade amount is lower than or equal to the current donation.');
    }
  }

  if(empty($messages)) {
    $messages[] = 'valid';
  }

  $message = implode(' ', $messages);

  return $message;
}

/**
 * Submit the new donation amount and clear the session.
 *
 * @param $form
 * @param $form_state
 */
function fundraiser_sustainers_upgrade_form_submit($form, $form_state) {

  $donation = $form_state['values']['donation'];
  $next_donation = fundraiser_donation_get_donation($form_state['values']['recurring'][0]->did);
  $payload = $form_state['values']['payload'];
  $fee_currency_code = $next_donation->donation['currency']['code'];
  $formatted_amount = commerce_currency_format($payload['amount'], $fee_currency_code, NULL, FALSE);

  _fundraiser_sustainers_donation_amount_form_update_donations($donation->recurring->master_did, $payload['amount'], $formatted_amount);

  fundraiser_sustainers_upgrade_clear_session_payload();
}


/**
 * Temporary bogus session loader.
 *
 * @return array
 */
function fundraiser_sustainers_upgrade_get_session_payload() {
  $payload = array();
  $payload['hmac'] =  $_SESSION['springboard_hmac']['uid'] = 1;
  $payload['did'] = $_SESSION['springboard_hmac']['did'] = 35;
  $payload['amount'] = $_SESSION['springboard_hmac']['upgrade_amount'] = 530;
  $payload['timestamp'] = $_SESSION['springboard_hmac']['timestamp'] = time();
  return $payload;
}

/**
 * Clear the session.
 */
function fundraiser_sustainers_upgrade_clear_session_payload() {
  unset($_SESSION['springboard_hmac']['uid']);
  unset($_SESSION['springboard_hmac']['did']);
  unset($_SESSION['springboard_hmac']['upgrade_amount']);
  unset($_SESSION['springboard_hmac']['timestamp']);
}

/**
 * Implements hook_page_delivery_callback_alter().
 *
 * Redirect to a default upgrade form if node ID is missing.
 */
function fundraiser_sustainers_upgrade_page_delivery_callback_alter(&$callback) {
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'fundraiser_sustainers_upgrade_deliver_html_page';
  }
}

/**
 * Page delivery callback for upgrade form 404's.
 *
 * @param $page_callback_result
 */
function fundraiser_sustainers_upgrade_deliver_html_page($page_callback_result) {
  $upgrade = FALSE;
  if (!empty($_GET['upgrade_redirect'])) {
    $upgrade = TRUE;
  }
  if ($page_callback_result == MENU_NOT_FOUND && $upgrade) {
    $nid = variable_get('fundraiser_sustainers_upgrade_default_form', '');
    drupal_goto('node/' . $nid);
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}


/**
 * Implements hook_token_info().
 *
 * Define the sustainer upgrade name/cancel token.
 */
function fundraiser_sustainers_upgrade_token_info() {
  $types['sustainer_upgrade'] = array(
    'name' => t("Sustainer Upgrades"),
    'description' => t("Tokens for sustainer upgrades."),
  );

  $tokens['name_or_signout'] = array(
    'name' => t("Sustainer name and cancel link"),
    'description' => 'Displays the sustainers first name and a cancel link',
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'sustainer_upgrade' => $tokens,
    ),
  );
}


/**
 * Implements hook_tokens().
 */
function fundraiser_sustainers_upgrade_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'sustainer_upgrade') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name_or_signout':
          if (!empty($_SESSION['springboard_hmac']['uid'])) {
            $value ='';
            $account = user_load(1);
            $first_name = field_get_items('user', $account, 'sbp_first_name');
            if (!empty($first_name[0])) {
              $value = field_view_value('user', $account, 'sbp_first_name', $first_name[0]);
              $value = $value['#markup'];
            }
            $replacements[$original] = $value . " " . l("I'm Not " . $value, 'sustainer-upgrade/cancel');
          }
          break;
      }
    }
  }
  return $replacements;
}
