<?php
/**
 * @file
 * Fundraiser sustainer module web tests, test sustainers.
 */

// Include the setup test class.
module_load_include('test', 'fundraiser', 'tests/fundraiser');

/**
 * Setup and tear down web class. Does nothing else.
 */
class FundraiserSustainersTest extends FundraiserTestCase {

  /**
   * Implements getInfo(). Declares this test class to fundraiser testing.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fundraiser sustainers',
      'description' => 'Tests fundraiser sustainers behavior.',
      'group' => 'Fundraiser',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp($modules = array(), $permissions = array()) {
    $modules = array_merge($modules, array(
      'fundraiser_sustainers',
    ));
    parent::setUp($modules, $permissions);
  }

  /**
   * Helper to create a fundraiser sustainer donation.
   */
  protected function createFundraiserSustainer() {
    // Create a node.
    $node = $this->createDonationForm();
    // Post to the node.
    $month = date('n', strtotime('+1 year'));
    $year = date('Y', strtotime('+1 year'));
    $post['submitted[payment_information][recurs_monthly][recurs]'] = 'recurs';
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_month]'] = $month;
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_year]'] = $year;
    $post['submitted[donor_information][mail]'] = 'fundraiser_sustainer@example.com';
    $this->submitDonation($node->nid, $post);
  }

  /**
   * Helper function to create a series of recurring donations.
   */
  protected function fundraiserSustainerCreateRecurringDonation() {
    $file_path = variable_get('file_public_path', conf_path() . '/files');
    // Set the encryption path to avoid errors during get node, etc.
    variable_set('encrypt_secure_key_path', $file_path);
    // Create a node.
    $created_user = $this->createFundraiserUser();
    $this->drupalLogin($created_user);
    $node = $this->createDonationForm();
    // Post to the node.
    $month = date('n', strtotime('+1 year'));
    $year = date('Y', strtotime('+1 year'));
    $post['submitted[payment_information][recurs_monthly][recurs]'] = 'recurs';
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_month]'] = $month;
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_year]'] = $year;
    $post['submitted[donor_information][mail]'] = $created_user->mail;
    $this->submitDonation($node->nid, $post);
    // Get the master did.
    $donations = _fundraiser_get_donations();
    $master_did = '';
    foreach ($donations as $donation) {
      $master_did = $donation->did;
      break;
    }
    return $master_did;
  }

  /**
   * Helper function to check how many sustainers were processed after cron is run.
   */
  protected function fundraiserSustainerChargeCount($master_did) {
    $query = db_select('fundraiser_sustainers', 'f')
      ->fields('f')
      ->condition('master_did', $master_did, '=')
      ->condition('gateway_resp', 'success', '=')
      ->condition('did', $master_did, '!='); // exclude first order in series
    return $query->countQuery()->execute()->fetchField();
  }

}
