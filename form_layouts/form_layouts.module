<?php
/**
 * @file
 * Provide options for form layouts in webforms.
 */

/**
 * Implements hook_theme().
 *
 * Add a theme function for each template found.
 */
function form_layouts_theme($existing, $type, $theme, $path) {

  $templates = form_layouts_info();
  $theme = array();
  foreach ($templates as $template) {
    $theme[$template['theme']] = array(
      'render element' => 'element',
      'template' => $template['template'],
      'path' => isset($template['path']) ? $template['path'] : $path . '/templates/',
      'pattern' => $template['pattern'],
    );
  }

  return $theme;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function form_layouts_form_node_form_alter(&$form, &$form_state, $form_id) {
  // If this is a form to add a donation form,
  // add a dropdown to pick the layout.
  if (isset($form['#node']) && form_layouts_type_is_layouts_enabled($form['#node']->type)) {
    $exclude_fundraiser_layouts = !fundraiser_is_donation_type($form['#node']->type);
    $templates = form_layouts_info();

    $options = array();
    foreach ($templates as $template) {
      if ($exclude_fundraiser_layouts && form_layouts_template_is_fundraiser_only($template)) {
        continue;
      }
      $options[$template['theme']] = $template['name'];
    }

    $template = isset($form['nid']['#value']) ? form_layouts_get_node_template($form['nid']['#value']) : array();
    $theme = '';
    if (!empty($template)) {
      $theme = $template['theme'];
    }
    $form['form_layouts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form layout settings'),
      '#description' => t('Select the form layout for this form. Defaults to one-column layout.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['form_layouts']['form_layouts'] = array(
      '#type' => 'select',
      '#title' => t('Form layout'),
      '#options' => $options,
      '#default_value' => $theme,
      '#weight' => -4,
    );
  }
}

/**
 * Implements hook_node_load().
 *
 * Make sure the layout gets loaded.
 */
function form_layouts_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (form_layouts_type_is_layouts_enabled($node->type)) {
      $template = form_layouts_get_node_template($nid);
      $nodes[$nid]->form_layouts = $template['theme'];
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function form_layouts_node_insert($node) {
  form_layouts_node_update($node);
}

/**
 * Implements hook_node_update().
 *
 * Save the layout name to the DB table.
 */
function form_layouts_node_update($node) {
  if (form_layouts_type_is_layouts_enabled($node->type) && isset($node->form_layouts)) {

    $layout = new FormLayout($node->nid);
    if (!is_null($layout->getNid())) {
      $layout->update($node->form_layouts);
    }
    else {
      $layout->create($node->nid, $node->form_layouts);
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * If we have a general webform layout, change the node theme.
 * Otherwise it's a fundraiser only layout and so change the webform theme.
 */
function form_layouts_node_view($node, $view_mode, $langcode) {
  if (form_layouts_type_is_layouts_enabled($node->type) && isset($node->form_layouts)) {
    $template = form_layouts_get_node_template($node->nid);
    if (form_layouts_template_is_fundraiser_only($template)) {
      $node->content['webform']['#theme'] = array($template['theme'] . '_' . $node->nid, $template['theme']);
    }
    else {
      $node->content['#theme'] = $node->form_layouts;
    }
  }
}

/**
 * Implements hook_form_layouts_info().
 */
function form_layouts_form_layouts_info() {

  $templates['one_column'] = array(
    'name' => t('One column'),
    'type' => 'webform',
    'theme' => 'one_column',
    'pattern' => 'one_column_\'0-9\'+',
    'template' => 'one-column',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );
  $templates['two_column_donation'] = array(
    'name' => t('Two column: donation form'),
    'type' => 'fundraiser',
    'theme' => 'two_column_donation',
    'pattern' => 'two_column_donation_\'0-9\'+',
    'template' => 'two-column-donation',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );

  $templates['two_column_webform_form_left'] = array(
    'name' => t('Two column: webform with the form on the left'),
    'type' => 'webform',
    'theme' => 'two_column_webform_form_left',
    'pattern' => 'two_column_webform_form_left_\'0-9\'+',
    'template' => 'two-column-webform-form-left',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );

  $templates['two_column_webform_form_right'] = array(
    'name' => t('Two column: webform with the form on the right'),
    'type' => 'webform',
    'theme' => 'two_column_webform_form_right',
    'pattern' => 'two_column_webform_form_right_\'0-9\'+',
    'template' => 'two-column-webform-form-right',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );

  $templates['two_column_left_right'] = array(
    'name' => t('Two column: left-right fieldsets'),
    'type' => 'fundraiser',
    'theme' => 'two_column_left_right',
    'pattern' => 'two_column_left_right_\'0-9\'+',
    'template' => 'two-column-left-right',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );
  return $templates;
}

/**
 * Returns the template array that contains which layout the webform uses.
 *
 * @param int $nid
 *   The node id for the template to look up.
 */
function form_layouts_get_node_template($nid) {
  $layout = new FormLayout($nid);
  $theme = $layout->getName();
  $templates = form_layouts_info();

  return $templates[$theme];
}

/**
 * Returns a list of available webform and fundraiser templates.
 *
 * @see form_layouts_form_layouts_info()
 */
function form_layouts_info() {
  static $templates;
  if (empty($templates)) {
    $templates = module_invoke_all('form_layouts_info');
    drupal_alter('form_layouts_info', $templates);
  }

  return $templates;
}

/**
 * Implements hook_preprocess_HOOK() for two-column-left-right.tpl.php.
 */
function form_layouts_preprocess_two_column_left_right(&$vars) {
  form_layouts_fundraiser_preprocess($vars);
}

/**
 * Implements hook_preprocess_HOOK() for two-column-donation.tpl.php.
 */
function form_layouts_preprocess_two_column_donation(&$vars) {
  form_layouts_fundraiser_preprocess($vars);
}

/**
 * Preprocess function that breaks a fundraiser form into its fieldsets.
 */
function form_layouts_fundraiser_preprocess(&$vars) {

  if (isset($vars['element']['#form']['submitted']['donation'])) {
    $vars['donation_fieldset'] = drupal_render($vars['element']['#form']['submitted']['donation']);
    $vars['donor_information_fieldset'] = drupal_render($vars['element']['#form']['submitted']['donor_information']);
    $vars['billing_information_fieldset'] = drupal_render($vars['element']['#form']['submitted']['billing_information']);
    $vars['payment_information_fieldset'] = drupal_render($vars['element']['#form']['submitted']['payment_information']);
    // Do Not Loop This Process.
    // We don't want to keep trying to render this theme.
    unset($vars['element']['#theme']);
    // Place in a location the end template can pick up.
    $vars['form'] = $vars['element'];
  }
}

/**
 * Determines if the given content type is enabled for form layouts.
 *
 * @param int $type
 *   The machine name of a content type.
 *
 * @return bool
 *   TRUE if the content type is form layouts enabled.
 */
function form_layouts_type_is_layouts_enabled($type) {
  $form_layouts_types = array_filter(webform_variable_get('webform_node_types'));
//  $form_layouts_types = variable_get('form_layouts_node_types', array(''));

  return in_array($type, $form_layouts_types);
}

/**
 * Determines if the given templates can be used on only fundraiser nodes.
 *
 * @param array $template
 *   The form layout template array.
 *
 * @return bool
 *   TRUE if the template is only for fundraiser enabled forms.
 */
function form_layouts_template_is_fundraiser_only($template) {

  if (isset($template['type']) && $template['type'] == 'fundraiser') {
    return TRUE;
  }

  // Fallback before type existed.
  return isset($template['name']) && strpos($template['name'], 'donation') !== FALSE;
}
