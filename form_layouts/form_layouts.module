<?php

/**
 * @file
 * Provide options for form layouts in donation forms.
 */

/**
 * Implements hook_theme().
 *
 * Add a theme function for each file found in /templates.
 */
function form_layouts_theme($existing, $type, $theme, $path) {
  $templates = form_layouts_info();
  $theme = array();
  foreach ($templates as $template) {
    $theme[$template['theme']] = array(
      'render element' => 'element',
      'template' => $template['template'],
      'pattern' => $template['pattern'],
    );
  }
  return $theme;
}

/**
 * Implements hook_theme_registry_alter().
 * Add in a special preprocess function for all donation forms.
 */
function form_layouts_theme_registry_alter(&$theme_registry) {
  $templates = form_layouts_info();
  foreach ($templates as $template) {
    $theme_registry[$template['theme']]['preprocess functions'][] = 'form_layouts_preprocess_template';
  }
}

/**
 * Preprocess function for donation form layout themeing.
 * Breaks the form into easily digestable chunks.
 */
function form_layouts_preprocess_template(&$vars) {
  // TODO:  Make this more fluid - left-right CSS for any fieldset.
  if (isset($vars['element']['submitted']['donation'])) {
    $vars['donation_fieldset'] =  drupal_render($vars['element']['submitted']['donation']);
    $vars['donor_information_fieldset'] =  drupal_render($vars['element']['submitted']['donor_information']);
    $vars['billing_address_fieldset'] =  drupal_render($vars['element']['submitted']['billing_information']);
    $vars['credit_card_fieldset'] =   drupal_render($vars['element']['submitted']['credit_card_information']);
  }
}

/**
 * Preprocess function for  2 column donation form.
 * Adds some css to make 2 columns.
 */
function form_layouts_preprocess_two_column(&$vars) {
  drupal_add_css(drupal_get_path('module', 'form_layouts') . '/css/form_layouts_two_column.css');
}

/**
 * Implements hook_form_FORM_ID_alter() for node forms.
 */
function form_layouts_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $theme = _form_layouts_theme_template($form['#node']->nid);
    $form['#theme'] = array($theme . '_' . $form['#node']->nid, $theme);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function form_layouts_form_node_form_alter(&$form, &$form_state, $form_id) {
  // If this is a form to add a donation form, add a dropdown to pick the layout.
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $templates = form_layouts_info();
    $options = array();
    foreach ($templates as $template) {
      $options[$template['theme']] = $template['name'];
    }
    $theme = isset($form['nid']['#value']) ? _form_layouts_theme_template($form['nid']['#value']) : '';
    $form['form_layouts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form layout settings'),
      '#title' => t('Select the form layout for this form. Defaults to one-column layout.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['form_layouts']['layout'] = array(
      '#type' => 'select',
      '#title' => t('Form layout'),
      '#options' => $options,
      '#default_value' => $theme,
      '#weight' => -4,
    );
  }
}

/**
 * Implements hook_node_load().
 *
 * Make sure the layout gets loaded.
 */
function form_layouts_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (fundraiser_is_donation_type($node->type)) {
      $nodes[$nid]->layout_template = _form_layouts_theme_template($nid);
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Make sure the layout gets inserted.
 */
function form_layouts_node_insert($node) {
  form_layouts_node_update($node);
}

/**
 * Implements hook_node_update().
 *
 * Make sure the layout gets updated.
 */
function form_layouts_node_update($node) {
  if (fundraiser_is_donation_type($node->type) && isset($node->layout)) {
    $variable_name = _form_layouts_variable_name($node->nid);
    variable_set($variable_name, $node->layout);
  }
}

/**
 * Returns the variable that contains which layout the donation form uses.
 *
 * @param $nid
 *  The id of the node whose template to return.
 */
function _form_layouts_theme_template($nid) {
  if (!empty($nid)) {
    $variable_name = _form_layouts_variable_name($nid);
    return variable_get($variable_name, variable_get('fundraiser_form_layouts_default', 'one_column'));
  }
  else {
    return variable_get('fundraiser_form_layouts_default', 'one_column');
  }
}

/**
 * Builds the name of a variable that will be used to store the donation form's theme template.
 *
 * @param $nid
 *   The id of the node for which the variable name will be constructed.
 */
function _form_layouts_variable_name($nid) {
  return 'donation_form_' . $nid . '_theme';
}

/**
 * Returns a list of available donation form templates.
 */
function form_layouts_info() {
  static $templates;
  if (empty($templates)) {
    $templates = module_invoke_all('form_layouts_info');
    drupal_alter('form_layouts_info', $templates);
  }
  return $templates;
}

/**
 * Implements hook_form_layouts_info().
 */
function form_layouts_form_layouts_info() {
  $path = drupal_get_path('module', 'form_layouts') . '/templates';
  // Get all .tpl.php files in the /templates directory.
  $files = file_scan_directory($path, '/\.tpl\.php$/');
  $templates = array();
  // Loop over each file and create an array of theme registry entries.
  foreach ($files as $file) {
    $name = str_replace('.tpl', '', $file->name);
    $name_no_underscores = str_replace('-', '_', $name);
    $templates[$name] = array(
      'name' => drupal_ucfirst(str_replace('-', ' ', $name)),
      'theme' => $name_no_underscores,
      'pattern' => $name_no_underscores . '_[0-9]+',
      'template' => 'templates/' . $name
    );
  }
  return $templates;
}
