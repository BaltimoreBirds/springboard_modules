<?php

/**
 * @file
 * Provide options for form layouts in donation forms.
 */

/**
 * Implements hook_theme().
 *
 * Add a theme function for each template found.
 */
function form_layouts_theme($existing, $type, $theme, $path) {
  $templates = form_layouts_info();
  $theme = array();
  foreach ($templates as $template) {
    global $base_path;
    $theme[$template['theme']] = array(
      'render element' => 'element',
      'template' => $template['template'],
      'path' => isset($template['path']) ? $template['path'] : drupal_get_path('module', 'form_layouts') . '/templates/',
      'pattern' => $template['pattern'],
    );
  }
  return $theme;
}

/**
 * Implements hook_theme_registry_alter().
 * Add in a special preprocess function for all donation forms.
 */
function form_layouts_theme_registry_alter(&$theme_registry) {
  $templates = form_layouts_info();
  foreach ($templates as $template) {
    // Add the preprocess function if there is one for the template.
    if (isset($template['preprocess function'])) {
      $theme_registry[$template['theme']]['preprocess function'][] = $template['preprocess function'];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function form_layouts_form_node_form_alter(&$form, &$form_state, $form_id) {
  // If this is a form to add a donation form, add a dropdown to pick the layout.
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $templates = form_layouts_info();
    $options = array();
    foreach ($templates as $template) {
      $options[$template['theme']] = $template['name'];
    }
    $template = isset($form['nid']['#value']) ? form_layouts_get_node_template($form['nid']['#value']) : '';
    $theme = '';
    if (!empty($template)) {
      $theme = $template['theme'];
    }
    $form['form_layouts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form layout settings'),
      '#description' => t('Select the form layout for this form. Defaults to one-column layout.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['form_layouts']['form_layouts'] = array(
      '#type' => 'select',
      '#title' => t('Form layout'),
      '#options' => $options,
      '#default_value' => $theme,
      '#weight' => -4,
    );
  }
}

/**
 * Implements hook_node_load().
 *
 * Make sure the layout gets loaded.
 */
function form_layouts_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (fundraiser_is_donation_type($node->type)) {
      $template = form_layouts_get_node_template($nid);
      $nodes[$nid]->layout_template = $template['theme'];
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Make sure the layout gets inserted.
 */
function form_layouts_node_insert($node) {
  form_layouts_node_update($node);
}

/**
 * Implements hook_node_update().
 *
 * Make sure the layout gets updated.
 */
function form_layouts_node_update($node) {
  if (fundraiser_is_donation_type($node->type) && isset($node->form_layouts)) {
    $variable_name = _form_layouts_variable_name($node->nid);
    // TODO: Really should move the storage into a table.
    variable_set($variable_name, $node->form_layouts);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node forms.
 * The meat of the matter.
 */
function form_layouts_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // TODO: Remove fundraiser limitation.
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $template = form_layouts_get_node_template($form['#node']->nid);
    // Add the template to the form, as pattern then base form.
    $form['#theme'] = array($template['theme'] . '_' . $form['#node']->nid, $template['theme']);
    $form['#attributes']['class'][] = 'form-layouts';
    $form['#attributes']['class'][] = $template['template'];
    // Add css and js if the template requires it.
    if (isset($template['css']) && is_array($template['css'])) {
      foreach ($template['css'] as $css) {
        drupal_add_css($css);
      }
    }
    if (isset($template['js']) && is_array($template['js'])) {
      foreach ($template['js'] as $js) {
        drupal_add_js($js);
      }
    }
    // Add validation check to re-add the css or js on a failure.
    $form['#validate'][] = 'form_layouts_form_webform_client_form_alter_validate';
  }
}

/**
 * Implements hook_form_layouts_info().
 */
function form_layouts_form_layouts_info() {
  
  $templates['one_column'] = array(
    'name' => t('One column'),
    'theme' => 'one_column',
    'pattern' => 'one_column_\'0-9\'+',
    'template' => 'one-column',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
  );
  $templates['two_column_donation'] = array(
    'name' => t('Two column: donation form'),
    'theme' => 'two_column_donation',
    'pattern' => 'two_column_donation_\'0-9\'+',
    'template' => 'two-column-donation',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
    'css' => array(drupal_get_path('module', 'form_layouts') . '/css/two_column_donation.css'),
    'preprocess function' =>'form_layouts_preprocess_two_column_donation',
  );
  $templates['two_column_left_right'] = array(
    'name' => t('Two column: left-right fieldsets'),
    'theme' => 'two_column_left_right',
    'pattern' => 'two_column_left_right_\'0-9\'+',
    'template' => 'two-column-left-right',
    'path' => drupal_get_path('module', 'form_layouts') . '/templates/',
    'css' => array(drupal_get_path('module', 'form_layouts') . '/css/two_column_left_right.css'),
    'js' => array(drupal_get_path('module', 'form_layouts') . '/js/two_column_left_right.js'),
  );
  return $templates;
}

/**
 * Validation support for affected forms, re-adds css and js on failure.
 */
function form_layouts_form_webform_client_form_alter_validate(&$form, &$form_state) {
  $template = form_layouts_get_node_template($form['#node']->nid);
  // Add css and js if the template requires it.
  if (isset($template['css'])) {
    foreach ($template['css'] as $css) {
      drupal_add_css($css);
    }
  }
  if (isset($template['js'])) {
    foreach ($template['js'] as $js) {
      drupal_add_js($js);
    }
  }
}

/**
 * Helper function. Returns the variable that contains which layout the donation form uses.
 *
 * @param $nid
 *  The id of the node whose template to return.
 */
function form_layouts_get_node_template($nid) {
  $theme = $default_theme = variable_get('fundraiser_form_layouts_default', 'one_column');
  if (!empty($nid)) {
    $variable_name = _form_layouts_variable_name($nid);
    $theme = variable_get($variable_name, variable_get('fundraiser_form_layouts_default', 'one_column'));
  }
  $templates = form_layouts_info();
  return isset($templates[$theme]) ? $templates[$theme] : $templates[$default_theme];
}

/**
 * Helper function. Returns a list of available donation form templates.
 */
function form_layouts_info() {
  static $templates;
  if (empty($templates)) {
    $templates = module_invoke_all('form_layouts_info');
    drupal_alter('form_layouts_info', $templates);
  }
  return $templates;
}

/**
 * Helper function. Builds the name of a variable that will be used to store the donation form's theme template.
 *
 * @param $nid
 *   The id of the node for which the variable name will be constructed.
 */
function _form_layouts_variable_name($nid) {
  return 'donation_form_' . $nid . '_theme';
}

/**
 * Preprocess function for donation form layout themeing.
 * Breaks the form into easily digestable chunks.
 */
function form_layouts_preprocess_two_column_donation(&$vars) {
  if (isset($vars['element']['submitted']['donation'])) {
    $vars['donation_fieldset'] =  drupal_render($vars['element']['submitted']['donation']);
    $vars['donor_information_fieldset'] =  drupal_render($vars['element']['submitted']['donor_information']);
    $vars['billing_address_fieldset'] =  drupal_render($vars['element']['submitted']['billing_information']);
    $vars['credit_card_fieldset'] =   drupal_render($vars['element']['submitted']['credit_card_information']);
    // Do Not Loop This Process. We don't want to keep trying to render this theme.
    unset($vars['element']['#theme']);
    // Place in a location the end template can pick up.
    $vars['form'] = $vars['element'];
  }
}
