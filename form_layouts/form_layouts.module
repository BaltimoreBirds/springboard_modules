<?php

/**
 * @file
 * Provide options for form layouts in donation forms.
 */

/**
 * Implements hook_fundraiser_field_info()
 *
 */
function form_layouts_fundraiser_field_info() {
  $fields = array();

  $fields['top_region'] = array(
    '#title' => t('Top region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layouts_field_create',
    '#display_callback' => 'form_layouts_top_region_display',
    '#weight' => -50,
  );

  $fields['left_region'] = array(
    '#title' => t('Left region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layouts_field_create',
    '#display_callback' => 'form_layouts_left_region_display',
    '#weight' => -48,
  );

  $fields['right_region'] = array(
    '#title' => t('Right region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layouts_field_create',
    '#display_callback' => 'form_layouts_right_region_display',
    '#weight' => -48,
  );

  $fields['bottom_region'] = array(
    '#title' => t('Bottom region'),
    '#type' => 'fieldset',
    '#required' => 0,
    '#create_callback' => 'form_layouts_field_create',
    '#display_callback' => 'form_layouts_bottom_region_display',
    '#weight' => -47,
  );

  return $fields;
}

/**
 * Implements hook_fundraiser_field_info_alter().
 */
function form_layouts_fundraiser_field_info_alter(&$info) {
  // 0 means no change
  if (isset($_SESSION['form_layouts']) && $_SESSION['form_layouts']['layout'] != 0) {

    switch ($_SESSION['form_layouts']['layout']) {
      case 2:
        $info['left_region']['donation'] = $info['donation'];
        $info['left_region']['donor_information'] = $info['donor_information'];
        $info['right_region']['billing_information'] = $info['billing_information'];
        $info['right_region']['payment_information'] = $info['payment_information'];
        break;
      case 1:
        $info['top_region']['donation'] = $info['donation'];
        $info['top_region']['donor_information'] = $info['donor_information'];
        $info['top_region']['billing_information'] = $info['billing_information'];
        $info['top_region']['payment_information'] = $info['payment_information'];
        break;
    }

    unset($info['donation']);
    unset($info['donor_information']);
    unset($info['billing_information']);
    unset($info['payment_information']);
  }

  unset($_SESSION['form_layouts']);

}

/**
 * @param stdClass $fundraiser
 * @param array $field
 *
 * @return FALSE|array $field
 */
function form_layouts_field_create($fundraiser, $field) {
  return $field;
}

function form_layouts_top_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span12');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -50;
  return $field;
}

function form_layouts_left_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span6');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="row">';
//  $field['#suffix'] = '</div>';
  $field['#weight'] = -49;
  return $field;
}

function form_layouts_right_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span6');
  $field['#title'] = '';
//  $field['#prefix'] = '<div class="row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -48;
  return $field;
}

function form_layouts_bottom_region_display($form, $form_state, $field) {
  // note that we're intentionally removing other classes here
  $field['#attributes']['class'] = array('span12');
  $field['#title'] = '';
  $field['#prefix'] = '<div class="row">';
  $field['#suffix'] = '</div>';
  $field['#weight'] = -47;
  return $field;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function form_layouts_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (fundraiser_is_donation_type($form['#node']->type)) {
    $form['form_layouts'] = array(
      '#type' => 'fieldset',
      '#title' => t('Form Layout'),
      '#description' => t('Select the form layout for this form. Defaults to one-column layout.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['form_layouts']['form_layouts'] = array(
      '#type' => 'select',
      '#title' => t('Layout'),
      '#options' => form_layouts_get_layout_options(),
      '#default_value' => 0,
      '#description' => 'Choose an initial layout for the form.  Choose None to leave the layout as-is.',
    );
  }
  $form['#submit'][] = 'form_layouts_node_form_submit';
}

// @todo Replace with DB
function form_layouts_get_layout_options() {
  return array(
    0 => 'None',
    1 => 'One Column',
    2 => 'Two Columns',
  );
}

function form_layouts_node_form_submit($form, &$form_state) {
//  dpm($form_state['node']);
  // Store this stuff so we can use it in a hook later.

//  db_query("UPDATE {webform_component} SET pid = 22 WHERE nid = 48 AND cid = 2");

//  db_update('webform_component')
//    ->fields(array(
//        'pid' => 21,
//      ))
//    ->condition('nid', 48)
//    ->condition('cid', 2)
//    ->execute();

  $layout_id = $form_state['values']['form_layouts'];
  if ($layout_id == 0) {
    return;
  }

  if (is_null($form_state['values']['nid'])) {
    // if this is a enw node, set a session var to change the layout
    // in form_layouts_fundraiser_field_info_alter()
    // We do this because we don't have fields attached until the node has been saved.
    $_SESSION['form_layouts'] = array(
      'nid' => $form_state['values']['nid'],
      'layout' => $layout_id,
    );
  }
  else {
    // existing node
    // Unfortunately we can't use the same hook as above.
    // So we'll just change things now.
    form_layouts_update_layout($form_state['values']['nid'], $layout_id);
  }

}

function form_layouts_update_layout($nid, $layout_id) {

  $node = node_load($nid);
  $components = $node->webform['components'];

  $keyed_components = form_layouts_key_components_by_form_key($components);

  $top = $keyed_components['top_region']['cid'];
  $left = $keyed_components['left_region']['cid'];
  $right = $keyed_components['right_region']['cid'];
  $bottom = $keyed_components['bottom_region']['cid'];

  switch ($layout_id) {
    case 2:
      $keyed_components['donation']['pid'] = $left;
      $keyed_components['donor_information']['pid'] = $left;
      $keyed_components['billing_information']['pid'] = $right;
      $keyed_components['payment_information']['pid'] = $right;
      break;
    case 1:
      $keyed_components['donation']['pid'] = $top;
      $keyed_components['donor_information']['pid'] = $top;
      $keyed_components['billing_information']['pid'] = $top;
      $keyed_components['payment_information']['pid'] = $top;
      break;
  }

  $elements = array(
    'donation',
    'donor_information',
    'billing_information',
    'payment_information',
  );
//
//  dpm($keyed_components['donation']);
//  webform_component_update($keyed_components['donation']);

  foreach ($elements as $element) {
    $component = $keyed_components[$element];
    dpm($component);

//    db_update('webform_component')
//      ->fields(array(
//          'pid' => 21,
//        ))
//      ->condition('nid', 48)
//      ->condition('cid', 2)
//      ->execute();

    webform_component_update($keyed_components[$element]);
  }

}

function form_layouts_key_components_by_form_key($components) {
  $return = array();
  foreach ($components as $cid => $component) {
    $return[$component['form_key']] = $component;
  }
  return $return;
}

function form_layouts_fundraiser_create_fundraiser_alter($fundraiser) {
//  dpm($fundraiser);

}

/**
 * Implements hook_entity_insert().
 */
function form_layouts_entity_insert($entity, $type) {
  // If this isn't a fundraiser type, ignore it.
//  if ($type == 'node' && fundraiser_is_donation_type($entity->type)) {
//    webform_node_Load(array($entity->nid => $entity), array($entity->type));
//    dpm($entity);
//  }
}
