<?php
/**
 * @file
 * Code for the Custom Demo feature.
 */

include_once 'custom_demo.features.inc';

/**
 * Implements hook_views_api(). From Views module.
 */
function custom_demo_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function custom_demo_menu() {
  $items = array();

  /* Node webform results.
  $items['node/%node/webform/schedule'] = array(
    'title' => 'Schedule',
    'page callback' => 'custom_demo_webform_schedule_settings',
    'page arguments' => array(1),
    'access callback' => 'custom_demo_webform_schedule_settings_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
   */

  return $items;
}

/**
 * access callback.
 */
function custom_demo_webform_schedule_settings_access($node, $account = NULL) {
  global $user;

  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  if (fundraiser_tickets_is_ticket_type($node->type)) {
    return;
  }

  $account = isset($account) ? $account : $user;

  return node_access('update', $node, $account);
}

function custom_demo_webform_schedule_settings($node) {
  module_load_include('inc', 'node', 'node.pages');
  $form = node_page_edit($node);

  return drupal_render($form);
}

/**
 * NOT IN USE; Implements hook_node_form_alter().
 *
 * Alter ticket settings form and add validation callback.
 */
function custom_demo_form_node_form_alter(&$form, &$form_state) {
  // Don't mess with non-webforms or ticket types.

  if (!in_array($form['type']['#value'], webform_variable_get('webform_node_types'))) {
    return;
  }

  if (module_exists('fundraiser_tickets') && fundraiser_tickets_is_ticket_type($form['type']['#value'])) {
    return;
  }

  if (
    !empty($form['field_sb_form_closed_redirect'])
    && !empty($form['field_sb_form_closed_message'])
  ) {
    $form['field_sb_form_closed_redirect']['#states'] = array(
      'visible' => array(
        ':input[name="field_sb_form_closed_options[und]"]' => array('value' => 'redirect'),
      ),
    );

    $form['field_sb_form_closed_message']['#states'] = array(
      'visible' => array(
        ':input[name="field_sb_form_closed_options[und]"]' => array('value' => 'message'),
      ),
    );
  }

}

/**
 * Implements hook_node_view().
 */
function custom_demo_node_view($node, $view_mode, $langcode) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  if (module_exists('fundraiser_tickets') && fundraiser_tickets_is_ticket_type($node->type)) {
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $node);

  // ensure the fields are set.
  if (
    !$node_wrapper->__isset('field_sb_form_closed_redirect')
    || !$node_wrapper->__isset('field_sb_form_closed_message')
    || !$node_wrapper->__isset('field_sb_form_closed_options')
  ) {
    return;
  }

  if ($view_mode != 'full') {
    return;
  }

  global $user;

  if (!custom_demo_is_closed($node_wrapper)) {
    return;
  }

  switch ($node_wrapper->field_sb_form_closed_options->value()) {
    case 'message':
       $node->content['body']['#access'] = FALSE;
       $node->content['webform']['#access'] = FALSE;
       $message = $node_wrapper->field_sb_form_closed_message->value(array('sanitize' => TRUE));
       if (!empty($message)) {
         $node->content['closed_message'] = array(
            '#markup' => $message,
            '#weight' => 10,
          );
        }
        break;
      case 'redirect':
        $redirect = $node_wrapper->field_sb_form_closed_redirect->value();
        if (!user_access('administer springboard')) {
           drupal_goto($redirect);
        }
        else {
          drupal_set_message(t('This form is closed and users are being redirected to !redirect.',
            array('!redirect' => l('this page', url($redirect)))), 'warning');
          break;
        }
      default:
        drupal_set_message(t('This form is closed.'));
  }
}

/**
 * Helper function, determine if a given ticket page is closed.
 */
function custom_demo_is_closed($node_wrapper) {
  // if these fields aren't set then do not block access.
  if (
    !$node_wrapper->__isset('field_sb_form_is_closed')
    || !$node_wrapper->__isset('field_sb_form_close_date')
  ) {
    return FALSE;
  }

  if (
    $node_wrapper->field_sb_form_is_closed->value() == TRUE
    || (
      $node_wrapper->field_sb_form_close_date->value() !== NULL
      && $node_wrapper->field_sb_form_close_date->value() < time()
    )
  ) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Helper function, determine if a given field is a ticketing field.
 */
function custom_demo_is_schedule_field($field_name) {
  $fields = custom_demo_get_schedule_field_keys();

  return in_array($field_name, $fields);
}

/**
 * Helper function, get the field names of the ticketing fields.
 */
function custom_demo_get_schedule_field_keys(){
  $fields = array(
    'field_sb_form_is_closed',
    'field_sb_form_close_date',
    'field_sb_form_closed_options',
    'field_sb_form_closed_message',
    'field_sb_form_closed_redirect',
  );

  return $fields;
}
