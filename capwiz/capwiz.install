<?php

/**
 * @file
 * Install the Capwiz module.
 *
 * @author Derek Dunagan <derek.dunagan@jacksonriver.com>
 */


/**
 * Implement hook_requirements().
 */
function capwiz_requirements($phase) {

  $requirements = array();

  if ($phase == 'runtime') {

    if (class_exists('SoapClient')) {
      $requirements['soap']['value'] = t('Enabled');
      $requirements['soap']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['soap'] = array(
        'value' => t('Disabled'),
        'description' => t('The SOAP extension for PHP is disabled. Please check the <a href="@url">PHP SOAP documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/soap.setup.php')),
        'severity' => REQUIREMENT_ERROR,
      );
    }

    $requirements['soap']['title'] = t('SOAP extension');
  }

  return $requirements;
}


/**
 * Implement hook_install().
 */
function capwiz_install() {

  drupal_install_schema('capwiz');
}


/**
 * Implement hook_uninstall().
 */
function capwiz_uninstall() {

  drupal_uninstall_schema('capwiz');

  variable_del('capwiz_client_id');
  variable_del('capwiz_authuser');
  variable_del('capwiz_authpass');
  variable_del('capwiz_mapping');
  variable_del('capwiz_email_message');
  variable_del('capwiz_cron');
}


/**
 * Implement hook_enable().
 */
function capwiz_enable() {
  // tell the queue about our new dsr_transaction type
  queue_processor_add_type('capwiz_action');
}


/**
 * Implement hook_disable().
 */
function capwiz_disable() {
  // remove our type from the queue processor
  queue_processor_remove_type('capwiz_action');
}


/**
 * Implement hook_schema().
 */
function capwiz_schema() {

  $schema = array();

  $schema['capwiz_actions'] = array(
    'description' => t('Advocacy actions taken on the Capwiz website'),
    'fields' => array(
      'uid' => array(
        'description' => t('Unique user ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'alert_id' => array(
        'description' => t('Uniquely identifies the alert. Can be plugged into the url http://capwiz.com/[client_id]/issues/alert/?alertid=[alert_id] to visit the original alert'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
        'default' => '0',
      ),
      'event_id' => array(
        'description' => t('Uniquely identifies this action'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'alert' => array(
        'description' => t('Name of the alert the person responded to'),
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'recipient_full' => array(
        'description' => t("The official's name"),
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),
      'action_date' => array(
        'description' => t('When the person contacted the official'),
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'subject' => array(
        'description' => t("Subject line of the person's message"),
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'intended_delivery_method' => array(
        'description' => t('Original delivery method attempted'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'actual_delivery_method' => array(
        'description' => t('If the message had to take an alternate route (such as Fax or Printed), that is indicated here'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'delivery_status' => array(
        'description' => t('Possible values: Delivered, Failed'),
        'type' => 'varchar',
        'length' => '9',
        'not null' => FALSE,
      ),
      'message_id' => array(
        'description' => t('Uniquely identifies the message'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('uid', 'alert_id'),
  );

  return $schema;
}


/**
 * Update: Add message ID and reconfigure indices and primary key.
 */
function capwiz_update_6101() {

  $updates = array();

  // Remove Event ID as primary key.
  db_drop_primary_key($updates, 'capwiz_actions');
  db_change_field($updates, 'capwiz_actions', 'event_id', 'event_id', array('type' => 'varchar', 'length' => '16', 'not null' => FALSE));

  // Make uid and Alert ID pairs as primary key.
  db_change_field($updates, 'capwiz_actions', 'alert_id', 'alert_id', array('type' => 'varchar', 'length' => '16', 'not null' => TRUE, 'default' => '0'));
  db_drop_index($updates, 'capwiz_actions', 'uid');
  db_add_primary_key($updates, 'capwiz_actions', array('uid', 'alert_id'));

  // Add Message ID field.
  db_add_field($updates, 'capwiz_actions', 'message_id',
    array('type' => 'varchar', 'length' => '16', 'not null' => FALSE));

  return $updates;
}

